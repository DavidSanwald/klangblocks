{"version":3,"sources":["webpack:///static/js/1.f362d3be.chunk.js","webpack:///./src/sound/loop.js","webpack:///./~/tone/build/Tone.js"],"names":["webpackJsonp","79","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","buildLoop","store","keys","_tone2","MultiPlayer","urls","comp","Compressor","ratio","threshold","release","attack","knee","pingPong","PingPongDelay","wet","value","instrument","chain","Master","loop","Sequence","time","col","selectedPads","playingPads","filter","pad","n","forEach","start","m","Draw","schedule","duration","Time","toMilliseconds","pling","Transport","Object","defineProperty","_tone","326","__WEBPACK_AMD_DEFINE_RESULT__","root","factory","call","undefined","this","Main","func","Tone","Module","inputs","outputs","isUndef","input","context","createGain","Array","output","prototype","set","params","rampTime","isObject","isString","tmpObj","paramLoop","attr","parent","indexOf","attrSplit","split","i","length","splice","innerParam","join","param","Signal","Param","rampTo","AudioParam","get","_collectDefaults","constructor","ret","subRet","j","subAttr","isFunction","constr","defaults","_super","superDefs","push","toString","className","isLetter","match","sameConstructor","isArray","dispose","AudioNode","disconnect","connect","unit","outputNum","inputNum","defaultArg","destination","isNumber","apply","arguments","connectSeries","currentUnit","toUnit","fan","given","fallback","givenProp","fallbackProp","optionsObject","values","options","val","arg","isBoolean","noOp","_readOnly","property","writable","enumerable","_writable","State","Started","Stopped","Paused","equalPowerScale","percent","piFactor","Math","PI","sin","dbToGain","db","pow","gainToDb","gain","log","LN10","intervalToFrequencyRatio","interval","now","extend","child","TempConstructor","audioContext","Context","emit","setContext","ctx","sampleRate","hasAudioContext","window","hasOwnProperty","hasPromises","hasWorkers","version","TONE_SILENCE_VERSION_LOGGING","console","SignalBase","node","outputNumber","inputNumber","TimelineSignal","_param","cancelScheduledValues","overridden","WaveShaper","mapping","bufferLen","_shaper","createWaveShaper","_curve","curve","isFinite","Float32Array","setMap","len","normalized","oversample","oversampling","RangeError","TimeBase","units","_expr","_noOp","copy","_defaultUnits","method","_primaryExpressions","bind","_defaultExpr","exprString","_parseExprString","clone","instance","regexp","parseInt","_beatsToUnits","_timeSignature","t","_ticksToUnits","hz","_frequencyToUnits","parseFloat","tr","q","s","total","_secondsToUnits","samples","_binaryExpressions","+","precedence","lh","rh","-","*","/","_unaryExpressions","neg","_syntaxGlue","(",")","_tokenize","expr","getNextToken","expressions","group","opName","op","reg","SyntaxError","position","tokens","trim","token","substr","next","peek","_matchGroup","prec","test","_parseBinary","lexer","_parseUnary","_parsePrimary","matching","tree","freq","beats","bpm","seconds","ticks","PPQ","timeSignature","_pushExpr","name","add","sub","mult","div","valueOf","_plusNow","create","quantize","nextSubdivision","subdiv","subdivision","toSeconds","multiple","round","ideal","diff","addNow","toNotation","testNotations","retNotation","_toNotationHelper","testTripletNotations","retTripletNotation","_notationToUnits","notationTime","floatingPointError","floor","notation","primaryExprs","notationExprs","toBarsBeatsSixteenths","quarterTime","quarters","measures","sixteenths","toFixed","progress","toTicks","toSamples","toFrequency","Frequency","midi","midiToFrequency","note","pitch","octave","index","noteToScaleIndex","toLowerCase","noteNumber","transpose","harmonize","intervals","toMidi","frequencyToMidi","toNote","A4","LN2","noteName","scaleIndexToNote","cbb","cb","c","c#","cx","dbb","d","d#","dx","ebb","eb","e","e#","ex","fbb","fb","f","f#","fx","gbb","gb","g","g#","gx","abb","ab","a","a#","ax","bbb","bb","b","b#","bx","frequency","TransportTime","_secondsToTicks","ceil","Emitter","_events","on","event","callback","events","eventName","off","ev","eventList","args","slice","mixin","object","functions","emitterFunc","shimConnect","toneConnect","B","outNum","inNum","nativeConnect","Error","toneDisconnect","nativeDisconnect","AudioContext","webkitAudioContext","_context","prop","_defineProperty","_latencyHint","_lookAhead","_updateInterval","_computedUpdateInterval","_worker","_createWorker","_constants","currentTime","URL","webkitURL","blob","Blob","blobUrl","createObjectURL","worker","Worker","addEventListener","_lastUpdate","max","getConstant","buffer","createBuffer","arr","getChannelData","constant","createBufferSource","channelCount","channelCountMode","lA","blockTime","postMessage","hint","lookAhead","latencyHint","updateInterval","supported","warn","Type","Default","Ticks","NormalRange","AudioRange","Decibels","Interval","BPM","Positive","Cents","Degrees","MIDI","BarsBeatsSixteenths","Samples","Hertz","Note","Milliseconds","Seconds","Notation","convert","_lfo","lfo","_toUnits","LFO","convertedVal","_fromUnits","min","_minOutput","setValueAtTime","setRampPoint","currentVal","linearRampToValueAtTime","endTime","exponentialRampToValueAtTime","exponentialRampToValue","startTime","linearRampToValue","setTargetAtTime","timeConstant","setValueCurveAtTime","GainNode","createGainNode","Gain","_gainNode","createInsOuts","_gain","Timeline","_timeline","_toRemove","_iterating","memory","Infinity","_search","remove","shift","getAfter","getBefore","cancel","after","cancelBefore","beginning","end","midPoint","nextEvent","testEvent","_iterate","lowerBound","upperBound","forEachBefore","forEachAfter","forEachFrom","forEachAtTime","_initial","Linear","Exponential","Target","Curve","Set","getValueAtTime","type","beforeEvent","_searchBefore","setValue","sampleTime","scaling","floats","segmentTime","before","_searchAfter","linearRampToValueBetween","finish","exponentialRampToValueBetween","previouVal","previous","_exponentialApproach","_curveInterpolate","_linearInterpolate","_exponentialInterpolate","t0","v0","v1","exp","t1","lowerIndex","upperIndex","lowerVal","upperVal","Pow","_exp","_expScaler","_expFunc","abs","Envelope","decay","sustain","_attackCurve","_releaseCurve","_sig","attackCurve","releaseCurve","In","curveDef","Out","triggerAttack","velocity","originalAttack","currentValue","attackRate","remainingDistance","percentComplete","sliceIndex","triggerRelease","triggerAttackRelease","invertCurve","out","reverseCurve","reverse","k","curveLen","cosineCurve","rippleCurve","rippleCurveFreq","sineWave","stairsCurve","steps","sineCurve","cos","bounceCurve","linear","exponential","bounce","cosine","step","ripple","sine","AmplitudeEnvelope","AnalyserNode","getFloatTimeDomainData","array","uint8","Uint8Array","getByteTimeDomainData","Analyser","_analyser","createAnalyser","_type","_returnType","returnType","_buffer","size","minDecibels","maxDecibels","smoothing","Waveform","FFT","ReturnType","Byte","Float","analyse","getByteFrequencyData","getFloatFrequencyData","frequencyBinCount","fftSize","TypeError","smoothingTimeConstant","_compressor","createDynamicsCompressor","Add","_sum","Multiply","_mult","Negate","_multiply","Subtract","_neg","GreaterThanZero","_thresh","_scale","GreaterThan","_gtz","Abs","_abs","Modulo","modulus","_subtract","_modSignal","_setWaveShaper","mod","AudioToGain","_norm","x","applyBinary","Constructor","self","_eval","applyUnary","getNumber","literalNumber","Expr","_replacements","inputCount","_parseInputs","_nodes","result","_parseTree","_disposeNodes","_Expressions","signal","sig","glue",",","a2g","binary","unary","!","NOT","inputArray","inputMax","replace","matchSyntax","syn","matchGroup","groupName","parseExpression","parseUnary","operator","parsePrimary","parseFunctionCall","parseArgumentList","EqualPowerGain","_eqPower","CrossFade","initialFade","fade","_equalPowerA","_equalPowerB","_invert","Filter","_filters","detune","Q","_rolloff","rolloff","types","possibilities","cascadingCount","count","createBiquadFilter","connectionChain","concat","MultibandSplit","low","_lowMidFilter","mid","high","lowFrequency","highFrequency","EQ3","_multibandSplit","_lowGain","_midGain","_highGain","Scale","outputMin","outputMax","_outputMin","_outputMax","_add","_setRange","ScaleExp","exponent","DelayNode","createDelay","createDelayNode","Delay","_delayNode","maxDelay","delayTime","FeedbackCombFilter","_delay","_feedback","resonance","Follower","_filter","_frequencyValues","_sub","_attack","_release","_setAttackRelease","minTime","ScaledEnvelope","FrequencyEnvelope","_octaves","octaves","baseFrequency","Gate","_follower","_gt","thresh","attackTime","releaseTime","TimelineState","initial","state","setStateAtTime","Clock","_nextTick","_lastState","_state","_boundLoop","_loop","offset","stop","pause","lagCompensation","lag","loopInterval","currentState","tickTime","getStateAtTime","IntervalTimeline","_root","_length","IntervalNode","insert","updateHeight","updateMax","_rebalance","results","search","_removeNode","_setRoot","_replaceNodeInParent","replacement","isLeftChild","left","right","temp","balance","getBalance","_rotateLeft","pivotNode","_rotateRight","allNodes","traverse","searchAfter","_left","_right","height","point","_loopStart","_loopEnd","_ppq","TransportConstructor","_clock","_processTick","_bindClockEvents","_scheduledEvents","_eventID","_repeatedEvents","_onceEvents","_syncedSignals","_swingTicks","_swingAmount","swing","swingSubdivision","loopStart","loopEnd","amount","id","timeline","scheduleRepeat","scheduleOnce","clear","eventId","item","timeSig","startPosition","endPosition","setLoopPoints","ppq","transportPos","remainingTime","syncSignal","ratioSignal","unsyncSignal","syncedSignal","Volume","volume","_unmutedVolume","mute","_volume","toMaster","MasterConstructor","Source","_synced","_scheduled","_start","_stop","retrigger","sched","sync","stateEvent","startOffset","unsync","OscillatorNode","noteOn","noteOff","setPeriodicWave","setWaveTable","createPeriodicWave","createWaveTable","Oscillator","_oscillator","_wave","_partials","partials","_phase","phase","Sine","Triangle","Sawtooth","Square","Custom","createOscillator","syncFrequency","unsyncFrequency","coefs","_getRealImaginary","periodicWave","periodicWaveSize","real","imag","partialCount","partial","exec","_inverseFFT","sum","_getInitialValue","maxValue","twoPi","Zero","amplitude","_stoppedSignal","_zeros","_stoppedValue","_a2g","_scaler","_units","currentMin","currentMax","Limiter","LowpassCombFilter","_lowpass","dampening","Merge","_merger","createChannelMerger","Meter","_lastValue","Level","rms","sqrt","unity","Split","_splitter","createChannelSplitter","MidSideSplit","_split","side","SQRT1_2","MidSideMerge","_merge","MidSideCompressor","_midSideSplit","_midSideMerge","Mono","MultibandCompressor","Panner","initialPan","_hasStereoPanner","_panner","createStereoPanner","pan","_crossFade","_zero","Panner3D","createPanner","panningModel","maxDistance","distanceModel","coneOuterGain","coneOuterAngle","coneInnerAngle","refDistance","rolloffFactor","_orientation","orientationX","orientationY","orientationZ","_position","positionX","positionY","positionZ","_rampTimeConstant","setPosition","y","z","setOrientation","pos","_aliasProperty","PanVol","CtrlInterpolate","lowerPosition","lower","upper","_interpolate","retArray","retObj","_toNumber","CtrlMarkov","distribution","_getProbDistribution","rand","random","dist","chosen","needsNormalizing","option","probability","CtrlPattern","_shuffled","_direction","Up","Down","UpDown","DownUp","AlternateUp","AlternateDown","Random","RandomWalk","RandomOnce","_shuffleValues","randVal","CtrlRandom","integer","AudioBuffer","copyToChannel","src","chanNum","channel","copyFromChannel","dest","Buffer","_reversed","_xhr","url","onload","load","onerror","promise","Promise","error","buff","err","_currentDownloads","abort","numberOfChannels","fromArray","isMultidimensional","channels","toMono","toArray","outputArray","numChannels","channelArray","map","sample","startSamples","endSamples","retBuffer","_reverse","loaded","rev","_downloadQueue","baseUrl","onError","onProgress","totalProgress","request","XMLHttpRequest","open","responseType","status","decodeAudioData","response","lengthComputable","send","cancelDownloads","supportsType","extension","document","createElement","canPlayType","removeEvents","success","fail","then","catch","Buffers","_buffers","_flattenUrls","_loadingCount","key","_bufferLoaded","has","isLoaded","buffName","ob","toReturn","flatObject","Buses","channelName","sendKnob","receive","expiration","anticipation","_boundDrawLoop","_drawLoop","requestAnimationFrame","Listener","ListenerConstructor","forwardX","forwardY","forwardZ","upX","upY","upZ","listener","OfflineAudioContext","webkitOfflineAudioContext","OfflineContext","offlineContext","_duration","_currentTime","render","done","oncomplete","renderedBuffer","startRendering","Offline","originalContext","rendered","Effect","_dryWet","effectSend","effectReturn","connectEffect","effect","AutoFilter","depth","delay","oct","AutoPanner","AutoWah","follower","_sweepRange","_baseFrequency","_inputBoost","_bandpass","_peaking","_setSweepRange","sensitivity","baseFreq","sensitivy","BitCrusher","invStepSize","bits","_modulo","_bits","Chebyshev","_order","order","_getCoefficient","degree","memo","StereoEffect","effectSendL","effectSendR","effectReturnL","effectReturnR","FeedbackEffect","_feedbackGain","feedback","StereoXFeedbackEffect","_feedbackLR","_feedbackRL","Chorus","_depth","_delayTime","_lfoL","_lfoR","_delayNodeL","_delayNodeR","spread","deviation","Convolver","_convolver","createConvolver","Distortion","_distortion","distortion","deg","FeedbackDelay","combFilterTunings","allpassFilterFrequencies","Freeverb","roomSize","_combFilters","_allpassFiltersL","_allpassFiltersR","l","allpassL","r","allpassR","lfpf","al","ar","cf","combFilterDelayTimes","combFilterResonances","allpassFilterFreqs","JCReverb","_scaleRoomSize","_allpassFilters","_feedbackCombFilters","af","allpass","fbcf","apf","MidSideEffect","midSend","sideSend","midReturn","sideReturn","Phaser","_filtersL","_makeFilters","stages","_filtersR","connectToFreq","filters","_leftDelay","maxDelayTime","_rightDelay","_rightPreDelay","PitchShift","_frequency","_delayA","_lfoA","_delayB","_lfoB","_crossFadeLFO","_feedbackDelay","_pitch","_windowSize","windowSize","factor","StereoFeedbackEffect","_feedbackL","_feedbackR","StereoWidener","width","_midMult","_sideMult","_two","Tremolo","_amplitudeL","_amplitudeR","Vibrato","Event","_playbackRate","_startOffset","humanize","playbackRate","_rescheduleEvents","startTick","_getLoopDuration","_tick","previousEvent","reschedulTime","variation","rate","lastEvent","loopDuration","Loop","_event","iterations","prob","iters","Part","_probability","_humanize","_forEach","_startNote","at","_restartEvent","removeAll","_setAll","_testLoopBoundries","Pattern","_pattern","pattern","vals","_subdivision","_indexTime","subSubdivision","PulseOscillator","_widthGate","_sawtooth","PWMOscillator","_pulse","modulationFrequency","_modulator","FMOscillator","_carrier","modulationIndex","modulationType","harmonicity","_modulationNode","AMOscillator","_modulationScale","FatOscillator","_oscillators","_spread","osc","iterator","OmniOscillator","_sourceType","OmniOscType","Pulse","PWM","Osc","FM","AM","Fat","prefix","_createNewOscillator","oscType","OscillatorConstructor","oldOsc","setTimeout","mType","Instrument","Monophonic","portamento","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","currentNote","portTime","Synth","oscillator","envelope","AMSynth","modulation","modulationEnvelope","MonoSynth","filterEnvelope","DuoSynth","voice0","voice1","_vibrato","vibratoRate","_vibratoGain","vibratoAmount","FMSynth","carrier","modulator","MembraneSynth","pitchDecay","maxNote","inharmRatios","MetalSynth","_freqMultipliers","_amplitue","_highpass","_filterFreqScaler","vel","octs","AudioBufferSourceNode","noteGrainOn","BufferSource","onended","_startTime","_stopTime","_source","fadeIn","fadeOut","_onendedTimeout","fadeInTime","fadeOutTime","playbackState","clearTimeout","_onended","createBuffers","_noiseArrays","_noiseBuffers","Noise","bufferLength","pink","channelNum","b0","b1","b2","b3","b4","b5","b6","white","brown","lastOut","NoiseSynth","noise","PluckSynth","_noise","attackNoise","_lfcf","delayAmount","PolySynth","polyphony","MAX_POLYPHONY","voices","_triggers","v","voice","notes","oldest","oldestIndex","JSON","stringify","stringified","desc","releaseAll","Player","autostart","_onload","seek","Sampler","player","GainToAudio","Normalize","inputMin","_inputMin","_inputMax","_div","buffers","_activeSources","_makeSource","bufferName","source","startLoop","stopAll","sources","GrainPlayer","_player","_grainSize","grainSize","_overlap","overlap","drift","_offset","bufferDuration","originalFadeIn","endSegmentDuration","scrub","UserMedia","_mediaStream","_stream","_device","labelOrId","enumerateDevices","devices","device","find","label","deviceId","constraints","audio","echoCancellation","navigator","mediaDevices","getUserMedia","stream","createMediaStreamSource","close","getAudioTracks","track","kind","active","groupId"],"mappings":"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","file":"static/js/1.f362d3be.chunk.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 79:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = buildLoop;\n\t\n\tvar _tone = __webpack_require__(326);\n\t\n\tvar _tone2 = _interopRequireDefault(_tone);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar urls = ['./audio/0.mp3', './audio/1.mp3', './audio/2.mp3', './audio/3.mp3', './audio/4.mp3', './audio/5.mp3', './audio/6.mp3', './audio/7.mp3', './audio/8.mp3'];\n\t\n\tfunction buildLoop(store) {\n\t  var keys = new _tone2.default.MultiPlayer(urls);\n\t  var comp = new _tone2.default.Compressor({\n\t    ratio: 10,\n\t    threshold: -30,\n\t    release: 0.1,\n\t    attack: 0.02,\n\t    knee: 10\n\t  });\n\t  var pingPong = new _tone2.default.PingPongDelay('4n+8n', 0.1);\n\t  pingPong.wet.value = 0.2;\n\t  var instrument = keys.chain(pingPong, comp, _tone2.default.Master);\n\t  var loop = new _tone2.default.Sequence(function (time, col) {\n\t    var selectedPads = store.selectedPads;\n\t    var playingPads = selectedPads.filter(function (pad) {\n\t      return pad.n === col;\n\t    });\n\t    playingPads.forEach(function (pad) {\n\t      return instrument.start(pad.m, time, 0, '1', 0);\n\t    });\n\t    _tone2.default.Draw.schedule(function () {\n\t      var duration = _tone2.default.Time('2n').toMilliseconds();\n\t      playingPads.forEach(function (pad) {\n\t        return pad.pling(duration);\n\t      });\n\t    }, time);\n\t  }, [0, 1, 2, 3, 4, 5, 6, 7], '8n');\n\t  _tone2.default.Transport.start();\n\t  loop.start();\n\t\n\t  return loop;\n\t}\n\n/***/ },\n\n/***/ 326:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory){\n\t\n\t\t//UMD\n\t\tif ( true ) {\n\t\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\t\t\treturn factory();\n\t\t\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\t} else if (typeof module === \"object\") {\n\t\t\tmodule.exports = factory();\n\t \t} else {\n\t\t\troot.Tone = factory();\n\t\t}\n\t\n\t}(this, function(){\n\t\n\t\t\"use strict\";\n\t\t\n\t\tvar Tone;\n\t\t//constructs the main Tone object\n\t\tfunction Main(func){\n\t\t\tTone = func();\n\t\t}\n\t\t//invokes each of the modules with the main Tone object as the argument\n\t\tfunction Module(func){\n\t\t\tfunc(Tone);\n\t\t}\t/**\n\t\t *  Tone.js\n\t\t *  @author Yotam Mann\n\t\t *  @license http://opensource.org/licenses/MIT MIT License\n\t\t *  @copyright 2014-2017 Yotam Mann\n\t\t */\n\t\tMain(function () {\n\t\t    \n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tTONE\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  @class  Tone is the base class of all other classes. It provides \n\t\t\t *          a lot of methods and functionality to all classes that extend\n\t\t\t *          it. \n\t\t\t *  \n\t\t\t *  @constructor\n\t\t\t *  @alias Tone\n\t\t\t *  @param {number} [inputs=1] the number of input nodes\n\t\t\t *  @param {number} [outputs=1] the number of output nodes\n\t\t\t */\n\t\t    var Tone = function (inputs, outputs) {\n\t\t        /**\n\t\t\t\t *  the input node(s)\n\t\t\t\t *  @type {GainNode|Array}\n\t\t\t\t */\n\t\t        if (this.isUndef(inputs) || inputs === 1) {\n\t\t            this.input = this.context.createGain();\n\t\t        } else if (inputs > 1) {\n\t\t            this.input = new Array(inputs);\n\t\t        }\n\t\t        /**\n\t\t\t\t *  the output node(s)\n\t\t\t\t *  @type {GainNode|Array}\n\t\t\t\t */\n\t\t        if (this.isUndef(outputs) || outputs === 1) {\n\t\t            this.output = this.context.createGain();\n\t\t        } else if (outputs > 1) {\n\t\t            this.output = new Array(inputs);\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Set the parameters at once. Either pass in an\n\t\t\t *  object mapping parameters to values, or to set a\n\t\t\t *  single parameter, by passing in a string and value.\n\t\t\t *  The last argument is an optional ramp time which \n\t\t\t *  will ramp any signal values to their destination value\n\t\t\t *  over the duration of the rampTime.\n\t\t\t *  @param {Object|string} params\n\t\t\t *  @param {number=} value\n\t\t\t *  @param {Time=} rampTime\n\t\t\t *  @returns {Tone} this\n\t\t\t *  @example\n\t\t\t * //set values using an object\n\t\t\t * filter.set({\n\t\t\t * \t\"frequency\" : 300,\n\t\t\t * \t\"type\" : highpass\n\t\t\t * });\n\t\t\t *  @example\n\t\t\t * filter.set(\"type\", \"highpass\");\n\t\t\t *  @example\n\t\t\t * //ramp to the value 220 over 3 seconds. \n\t\t\t * oscillator.set({\n\t\t\t * \t\"frequency\" : 220\n\t\t\t * }, 3);\n\t\t\t */\n\t\t    Tone.prototype.set = function (params, value, rampTime) {\n\t\t        if (this.isObject(params)) {\n\t\t            rampTime = value;\n\t\t        } else if (this.isString(params)) {\n\t\t            var tmpObj = {};\n\t\t            tmpObj[params] = value;\n\t\t            params = tmpObj;\n\t\t        }\n\t\t        paramLoop:\n\t\t            for (var attr in params) {\n\t\t                value = params[attr];\n\t\t                var parent = this;\n\t\t                if (attr.indexOf('.') !== -1) {\n\t\t                    var attrSplit = attr.split('.');\n\t\t                    for (var i = 0; i < attrSplit.length - 1; i++) {\n\t\t                        parent = parent[attrSplit[i]];\n\t\t                        if (parent instanceof Tone) {\n\t\t                            attrSplit.splice(0, i + 1);\n\t\t                            var innerParam = attrSplit.join('.');\n\t\t                            parent.set(innerParam, value);\n\t\t                            continue paramLoop;\n\t\t                        }\n\t\t                    }\n\t\t                    attr = attrSplit[attrSplit.length - 1];\n\t\t                }\n\t\t                var param = parent[attr];\n\t\t                if (this.isUndef(param)) {\n\t\t                    continue;\n\t\t                }\n\t\t                if (Tone.Signal && param instanceof Tone.Signal || Tone.Param && param instanceof Tone.Param) {\n\t\t                    if (param.value !== value) {\n\t\t                        if (this.isUndef(rampTime)) {\n\t\t                            param.value = value;\n\t\t                        } else {\n\t\t                            param.rampTo(value, rampTime);\n\t\t                        }\n\t\t                    }\n\t\t                } else if (param instanceof AudioParam) {\n\t\t                    if (param.value !== value) {\n\t\t                        param.value = value;\n\t\t                    }\n\t\t                } else if (param instanceof Tone) {\n\t\t                    param.set(value);\n\t\t                } else if (param !== value) {\n\t\t                    parent[attr] = value;\n\t\t                }\n\t\t            }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Get the object's attributes. Given no arguments get\n\t\t\t *  will return all available object properties and their corresponding\n\t\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t\t *  to access deeper properties.\n\t\t\t *  @example\n\t\t\t * osc.get();\n\t\t\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t\t\t *  @example\n\t\t\t * osc.get(\"type\");\n\t\t\t * //returns { \"type\" : \"sine\"}\n\t\t\t * @example\n\t\t\t * //use dot notation to access deep properties\n\t\t\t * synth.get([\"envelope.attack\", \"envelope.release\"]);\n\t\t\t * //returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n\t\t\t *  @param {Array=|string|undefined} params the parameters to get, otherwise will return \n\t\t\t *  \t\t\t\t\t                  all available.\n\t\t\t *  @returns {Object}\n\t\t\t */\n\t\t    Tone.prototype.get = function (params) {\n\t\t        if (this.isUndef(params)) {\n\t\t            params = this._collectDefaults(this.constructor);\n\t\t        } else if (this.isString(params)) {\n\t\t            params = [params];\n\t\t        }\n\t\t        var ret = {};\n\t\t        for (var i = 0; i < params.length; i++) {\n\t\t            var attr = params[i];\n\t\t            var parent = this;\n\t\t            var subRet = ret;\n\t\t            if (attr.indexOf('.') !== -1) {\n\t\t                var attrSplit = attr.split('.');\n\t\t                for (var j = 0; j < attrSplit.length - 1; j++) {\n\t\t                    var subAttr = attrSplit[j];\n\t\t                    subRet[subAttr] = subRet[subAttr] || {};\n\t\t                    subRet = subRet[subAttr];\n\t\t                    parent = parent[subAttr];\n\t\t                }\n\t\t                attr = attrSplit[attrSplit.length - 1];\n\t\t            }\n\t\t            var param = parent[attr];\n\t\t            if (this.isObject(params[attr])) {\n\t\t                subRet[attr] = param.get();\n\t\t            } else if (Tone.Signal && param instanceof Tone.Signal) {\n\t\t                subRet[attr] = param.value;\n\t\t            } else if (Tone.Param && param instanceof Tone.Param) {\n\t\t                subRet[attr] = param.value;\n\t\t            } else if (param instanceof AudioParam) {\n\t\t                subRet[attr] = param.value;\n\t\t            } else if (param instanceof Tone) {\n\t\t                subRet[attr] = param.get();\n\t\t            } else if (!this.isFunction(param) && !this.isUndef(param)) {\n\t\t                subRet[attr] = param;\n\t\t            }\n\t\t        }\n\t\t        return ret;\n\t\t    };\n\t\t    /**\n\t\t\t *  collect all of the default attributes in one\n\t\t\t *  @private\n\t\t\t *  @param {function} constr the constructor to find the defaults from\n\t\t\t *  @return {Array} all of the attributes which belong to the class\n\t\t\t */\n\t\t    Tone.prototype._collectDefaults = function (constr) {\n\t\t        var ret = [];\n\t\t        if (!this.isUndef(constr.defaults)) {\n\t\t            ret = Object.keys(constr.defaults);\n\t\t        }\n\t\t        if (!this.isUndef(constr._super)) {\n\t\t            var superDefs = this._collectDefaults(constr._super);\n\t\t            //filter out repeats\n\t\t            for (var i = 0; i < superDefs.length; i++) {\n\t\t                if (ret.indexOf(superDefs[i]) === -1) {\n\t\t                    ret.push(superDefs[i]);\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t        return ret;\n\t\t    };\n\t\t    /**\n\t\t\t *  @returns {string} returns the name of the class as a string\n\t\t\t */\n\t\t    Tone.prototype.toString = function () {\n\t\t        for (var className in Tone) {\n\t\t            var isLetter = className[0].match(/^[A-Z]$/);\n\t\t            var sameConstructor = Tone[className] === this.constructor;\n\t\t            if (this.isFunction(Tone[className]) && isLetter && sameConstructor) {\n\t\t                return className;\n\t\t            }\n\t\t        }\n\t\t        return 'Tone';\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tCLASS VARS\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  The number of inputs feeding into the AudioNode. \n\t\t\t *  For source nodes, this will be 0.\n\t\t\t *  @memberOf Tone#\n\t\t\t *  @name numberOfInputs\n\t\t\t *  @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.prototype, 'numberOfInputs', {\n\t\t        get: function () {\n\t\t            if (this.input) {\n\t\t                if (this.isArray(this.input)) {\n\t\t                    return this.input.length;\n\t\t                } else {\n\t\t                    return 1;\n\t\t                }\n\t\t            } else {\n\t\t                return 0;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The number of outputs coming out of the AudioNode. \n\t\t\t *  For source nodes, this will be 0.\n\t\t\t *  @memberOf Tone#\n\t\t\t *  @name numberOfInputs\n\t\t\t *  @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.prototype, 'numberOfOutputs', {\n\t\t        get: function () {\n\t\t            if (this.output) {\n\t\t                if (this.isArray(this.output)) {\n\t\t                    return this.output.length;\n\t\t                } else {\n\t\t                    return 1;\n\t\t                }\n\t\t            } else {\n\t\t                return 0;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tCONNECTIONS\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  disconnect and dispose\n\t\t\t *  @returns {Tone} this\n\t\t\t */\n\t\t    Tone.prototype.dispose = function () {\n\t\t        if (!this.isUndef(this.input)) {\n\t\t            if (this.input instanceof AudioNode) {\n\t\t                this.input.disconnect();\n\t\t            }\n\t\t            this.input = null;\n\t\t        }\n\t\t        if (!this.isUndef(this.output)) {\n\t\t            if (this.output instanceof AudioNode) {\n\t\t                this.output.disconnect();\n\t\t            }\n\t\t            this.output = null;\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode\n\t\t\t *  @param  {Tone | AudioParam | AudioNode} unit \n\t\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t\t *  @returns {Tone} this\n\t\t\t */\n\t\t    Tone.prototype.connect = function (unit, outputNum, inputNum) {\n\t\t        if (Array.isArray(this.output)) {\n\t\t            outputNum = this.defaultArg(outputNum, 0);\n\t\t            this.output[outputNum].connect(unit, 0, inputNum);\n\t\t        } else {\n\t\t            this.output.connect(unit, outputNum, inputNum);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  disconnect the output\n\t\t\t *  @param {Number|AudioNode} output Either the output index to disconnect\n\t\t\t *                                   if the output is an array, or the\n\t\t\t *                                   node to disconnect from.\n\t\t\t *  @returns {Tone} this\n\t\t\t */\n\t\t    Tone.prototype.disconnect = function (destination, outputNum, inputNum) {\n\t\t        if (this.isArray(this.output)) {\n\t\t            if (this.isNumber(destination)) {\n\t\t                this.output[destination].disconnect();\n\t\t            } else {\n\t\t                outputNum = this.defaultArg(outputNum, 0);\n\t\t                this.output[outputNum].disconnect(destination, 0, inputNum);\n\t\t            }\n\t\t        } else {\n\t\t            this.output.disconnect.apply(this.output, arguments);\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  connect together all of the arguments in series\n\t\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t\t *  @returns {Tone} this\n\t\t\t */\n\t\t    Tone.prototype.connectSeries = function () {\n\t\t        if (arguments.length > 1) {\n\t\t            var currentUnit = arguments[0];\n\t\t            for (var i = 1; i < arguments.length; i++) {\n\t\t                var toUnit = arguments[i];\n\t\t                currentUnit.connect(toUnit);\n\t\t                currentUnit = toUnit;\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Connect the output of this node to the rest of the nodes in series.\n\t\t\t *  @example\n\t\t\t *  //connect a node to an effect, panVol and then to the master output\n\t\t\t *  node.chain(effect, panVol, Tone.Master);\n\t\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t\t *  @returns {Tone} this\n\t\t\t */\n\t\t    Tone.prototype.chain = function () {\n\t\t        if (arguments.length > 0) {\n\t\t            var currentUnit = this;\n\t\t            for (var i = 0; i < arguments.length; i++) {\n\t\t                var toUnit = arguments[i];\n\t\t                currentUnit.connect(toUnit);\n\t\t                currentUnit = toUnit;\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  connect the output of this node to the rest of the nodes in parallel.\n\t\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t\t *  @returns {Tone} this\n\t\t\t */\n\t\t    Tone.prototype.fan = function () {\n\t\t        if (arguments.length > 0) {\n\t\t            for (var i = 0; i < arguments.length; i++) {\n\t\t                this.connect(arguments[i]);\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    //give native nodes chain and fan methods\n\t\t    AudioNode.prototype.chain = Tone.prototype.chain;\n\t\t    AudioNode.prototype.fan = Tone.prototype.fan;\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tUTILITIES / HELPERS / MATHS\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  If the `given` parameter is undefined, use the `fallback`. \n\t\t\t *  If both `given` and `fallback` are object literals, it will\n\t\t\t *  return a deep copy which includes all of the parameters from both \n\t\t\t *  objects. If a parameter is undefined in given, it will return\n\t\t\t *  the fallback property. \n\t\t\t *  <br><br>\n\t\t\t *  WARNING: if object is self referential, it will go into an an \n\t\t\t *  infinite recursive loop.\n\t\t\t *  \n\t\t\t *  @param  {*} given    \n\t\t\t *  @param  {*} fallback \n\t\t\t *  @return {*}          \n\t\t\t */\n\t\t    Tone.prototype.defaultArg = function (given, fallback) {\n\t\t        if (this.isObject(given) && this.isObject(fallback)) {\n\t\t            var ret = {};\n\t\t            //make a deep copy of the given object\n\t\t            for (var givenProp in given) {\n\t\t                ret[givenProp] = this.defaultArg(fallback[givenProp], given[givenProp]);\n\t\t            }\n\t\t            for (var fallbackProp in fallback) {\n\t\t                ret[fallbackProp] = this.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t\t            }\n\t\t            return ret;\n\t\t        } else {\n\t\t            return this.isUndef(given) ? fallback : given;\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  returns the args as an options object with given arguments\n\t\t\t *  mapped to the names provided. \n\t\t\t *\n\t\t\t *  if the args given is an array containing only one object, it is assumed\n\t\t\t *  that that's already the options object and will just return it. \n\t\t\t *  \n\t\t\t *  @param  {Array} values  the 'arguments' object of the function\n\t\t\t *  @param  {Array} keys the names of the arguments as they\n\t\t\t *                                 should appear in the options object\n\t\t\t *  @param {Object=} defaults optional defaults to mixin to the returned \n\t\t\t *                            options object                              \n\t\t\t *  @return {Object}       the options object with the names mapped to the arguments\n\t\t\t */\n\t\t    Tone.prototype.optionsObject = function (values, keys, defaults) {\n\t\t        var options = {};\n\t\t        if (values.length === 1 && this.isObject(values[0])) {\n\t\t            options = values[0];\n\t\t        } else {\n\t\t            for (var i = 0; i < keys.length; i++) {\n\t\t                options[keys[i]] = values[i];\n\t\t            }\n\t\t        }\n\t\t        if (!this.isUndef(defaults)) {\n\t\t            return this.defaultArg(options, defaults);\n\t\t        } else {\n\t\t            return options;\n\t\t        }\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    // TYPE CHECKING\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  test if the arg is undefined\n\t\t\t *  @param {*} arg the argument to test\n\t\t\t *  @returns {boolean} true if the arg is undefined\n\t\t\t *  @function\n\t\t\t */\n\t\t    Tone.prototype.isUndef = function (val) {\n\t\t        return typeof val === 'undefined';\n\t\t    };\n\t\t    /**\n\t\t\t *  test if the arg is a function\n\t\t\t *  @param {*} arg the argument to test\n\t\t\t *  @returns {boolean} true if the arg is a function\n\t\t\t *  @function\n\t\t\t */\n\t\t    Tone.prototype.isFunction = function (val) {\n\t\t        return typeof val === 'function';\n\t\t    };\n\t\t    /**\n\t\t\t *  Test if the argument is a number.\n\t\t\t *  @param {*} arg the argument to test\n\t\t\t *  @returns {boolean} true if the arg is a number\n\t\t\t */\n\t\t    Tone.prototype.isNumber = function (arg) {\n\t\t        return typeof arg === 'number';\n\t\t    };\n\t\t    /**\n\t\t\t *  Test if the given argument is an object literal (i.e. `{}`);\n\t\t\t *  @param {*} arg the argument to test\n\t\t\t *  @returns {boolean} true if the arg is an object literal.\n\t\t\t */\n\t\t    Tone.prototype.isObject = function (arg) {\n\t\t        return Object.prototype.toString.call(arg) === '[object Object]' && arg.constructor === Object;\n\t\t    };\n\t\t    /**\n\t\t\t *  Test if the argument is a boolean.\n\t\t\t *  @param {*} arg the argument to test\n\t\t\t *  @returns {boolean} true if the arg is a boolean\n\t\t\t */\n\t\t    Tone.prototype.isBoolean = function (arg) {\n\t\t        return typeof arg === 'boolean';\n\t\t    };\n\t\t    /**\n\t\t\t *  Test if the argument is an Array\n\t\t\t *  @param {*} arg the argument to test\n\t\t\t *  @returns {boolean} true if the arg is an array\n\t\t\t */\n\t\t    Tone.prototype.isArray = function (arg) {\n\t\t        return Array.isArray(arg);\n\t\t    };\n\t\t    /**\n\t\t\t *  Test if the argument is a string.\n\t\t\t *  @param {*} arg the argument to test\n\t\t\t *  @returns {boolean} true if the arg is a string\n\t\t\t */\n\t\t    Tone.prototype.isString = function (arg) {\n\t\t        return typeof arg === 'string';\n\t\t    };\n\t\t    /**\n\t\t\t *  An empty function.\n\t\t\t *  @static\n\t\t\t */\n\t\t    Tone.noOp = function () {\n\t\t    };\n\t\t    /**\n\t\t\t *  Make the property not writable. Internal use only. \n\t\t\t *  @private\n\t\t\t *  @param  {string}  property  the property to make not writable\n\t\t\t */\n\t\t    Tone.prototype._readOnly = function (property) {\n\t\t        if (Array.isArray(property)) {\n\t\t            for (var i = 0; i < property.length; i++) {\n\t\t                this._readOnly(property[i]);\n\t\t            }\n\t\t        } else {\n\t\t            Object.defineProperty(this, property, {\n\t\t                writable: false,\n\t\t                enumerable: true\n\t\t            });\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Make an attribute writeable. Interal use only. \n\t\t\t *  @private\n\t\t\t *  @param  {string}  property  the property to make writable\n\t\t\t */\n\t\t    Tone.prototype._writable = function (property) {\n\t\t        if (Array.isArray(property)) {\n\t\t            for (var i = 0; i < property.length; i++) {\n\t\t                this._writable(property[i]);\n\t\t            }\n\t\t        } else {\n\t\t            Object.defineProperty(this, property, { writable: true });\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t * Possible play states. \n\t\t\t * @enum {string}\n\t\t\t */\n\t\t    Tone.State = {\n\t\t        Started: 'started',\n\t\t        Stopped: 'stopped',\n\t\t        Paused: 'paused'\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    // CONVERSIONS\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Equal power gain scale. Good for cross-fading.\n\t\t\t *  @param  {NormalRange} percent (0-1)\n\t\t\t *  @return {Number}         output gain (0-1)\n\t\t\t */\n\t\t    Tone.prototype.equalPowerScale = function (percent) {\n\t\t        var piFactor = 0.5 * Math.PI;\n\t\t        return Math.sin(percent * piFactor);\n\t\t    };\n\t\t    /**\n\t\t\t *  Convert decibels into gain.\n\t\t\t *  @param  {Decibels} db\n\t\t\t *  @return {Number}   \n\t\t\t */\n\t\t    Tone.prototype.dbToGain = function (db) {\n\t\t        return Math.pow(2, db / 6);\n\t\t    };\n\t\t    /**\n\t\t\t *  Convert gain to decibels.\n\t\t\t *  @param  {Number} gain (0-1)\n\t\t\t *  @return {Decibels}   \n\t\t\t */\n\t\t    Tone.prototype.gainToDb = function (gain) {\n\t\t        return 20 * (Math.log(gain) / Math.LN10);\n\t\t    };\n\t\t    /**\n\t\t\t *  Convert an interval (in semitones) to a frequency ratio.\n\t\t\t *  @param  {Interval} interval the number of semitones above the base note\n\t\t\t *  @return {number}          the frequency ratio\n\t\t\t *  @example\n\t\t\t * tone.intervalToFrequencyRatio(0); // 1\n\t\t\t * tone.intervalToFrequencyRatio(12); // 2\n\t\t\t * tone.intervalToFrequencyRatio(-12); // 0.5\n\t\t\t */\n\t\t    Tone.prototype.intervalToFrequencyRatio = function (interval) {\n\t\t        return Math.pow(2, interval / 12);\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tTIMING\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Return the current time of the AudioContext clock.\n\t\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t\t */\n\t\t    Tone.prototype.now = function () {\n\t\t        return Tone.context.now();\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the current time of the AudioContext clock.\n\t\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t\t *  @static\n\t\t\t */\n\t\t    Tone.now = function () {\n\t\t        return Tone.context.now();\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tINHERITANCE\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  have a child inherit all of Tone's (or a parent's) prototype\n\t\t\t *  to inherit the parent's properties, make sure to call \n\t\t\t *  Parent.call(this) in the child's constructor\n\t\t\t *\n\t\t\t *  based on closure library's inherit function\n\t\t\t *\n\t\t\t *  @static\n\t\t\t *  @param  {function} \tchild  \n\t\t\t *  @param  {function=} parent (optional) parent to inherit from\n\t\t\t *                             if no parent is supplied, the child\n\t\t\t *                             will inherit from Tone\n\t\t\t */\n\t\t    Tone.extend = function (child, parent) {\n\t\t        if (Tone.prototype.isUndef(parent)) {\n\t\t            parent = Tone;\n\t\t        }\n\t\t        function TempConstructor() {\n\t\t        }\n\t\t        TempConstructor.prototype = parent.prototype;\n\t\t        child.prototype = new TempConstructor();\n\t\t        /** @override */\n\t\t        child.prototype.constructor = child;\n\t\t        child._super = parent;\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tCONTEXT\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  The private audio context shared by all Tone Nodes. \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Context|undefined}\n\t\t\t */\n\t\t    var audioContext;\n\t\t    /**\n\t\t\t *  A static pointer to the audio context accessible as Tone.context. \n\t\t\t *  @type {Tone.Context}\n\t\t\t *  @name context\n\t\t\t *  @memberOf Tone\n\t\t\t */\n\t\t    Object.defineProperty(Tone, 'context', {\n\t\t        get: function () {\n\t\t            return audioContext;\n\t\t        },\n\t\t        set: function (context) {\n\t\t            if (Tone.Context && context instanceof Tone.Context) {\n\t\t                audioContext = context;\n\t\t            } else {\n\t\t                audioContext = new Tone.Context(context);\n\t\t            }\n\t\t            //initialize the new audio context\n\t\t            if (Tone.Context) {\n\t\t                Tone.Context.emit('init', audioContext);\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The AudioContext\n\t\t\t *  @type {Tone.Context}\n\t\t\t *  @name context\n\t\t\t *  @memberOf Tone#\n\t\t\t *  @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.prototype, 'context', {\n\t\t        get: function () {\n\t\t            return Tone.context;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Tone automatically creates a context on init, but if you are working\n\t\t\t *  with other libraries which also create an AudioContext, it can be\n\t\t\t *  useful to set your own. If you are going to set your own context, \n\t\t\t *  be sure to do it at the start of your code, before creating any objects.\n\t\t\t *  @static\n\t\t\t *  @param {AudioContext} ctx The new audio context to set\n\t\t\t */\n\t\t    Tone.setContext = function (ctx) {\n\t\t        Tone.context = ctx;\n\t\t    };\n\t\t    /**\n\t\t\t *  The number of seconds of 1 processing block (128 samples)\n\t\t\t *  @type {Number}\n\t\t\t *  @name blockTime\n\t\t\t *  @memberOf Tone#\n\t\t\t *  @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.prototype, 'blockTime', {\n\t\t        get: function () {\n\t\t            return 128 / this.context.sampleRate;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The duration in seconds of one sample.\n\t\t\t *  @type {Number}\n\t\t\t *  @name sampleTime\n\t\t\t *  @memberOf Tone#\n\t\t\t *  @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.prototype, 'sampleTime', {\n\t\t        get: function () {\n\t\t            return 1 / this.context.sampleRate;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Whether or not all the technologies that Tone.js relies on are supported by the current browser. \n\t\t\t *  @type {Boolean}\n\t\t\t *  @name supported\n\t\t\t *  @memberOf Tone\n\t\t\t *  @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone, 'supported', {\n\t\t        get: function () {\n\t\t            var hasAudioContext = window.hasOwnProperty('AudioContext') || window.hasOwnProperty('webkitAudioContext');\n\t\t            var hasPromises = window.hasOwnProperty('Promise');\n\t\t            var hasWorkers = window.hasOwnProperty('Worker');\n\t\t            return hasAudioContext && hasPromises && hasWorkers;\n\t\t        }\n\t\t    });\n\t\t    Tone.version = 'r10';\n\t\t    // allow optional silencing of this log\n\t\t    if (!window.TONE_SILENCE_VERSION_LOGGING) {\n\t\t        console.log('%c * Tone.js ' + Tone.version + ' * ', 'background: #000; color: #fff');\n\t\t    }\n\t\t    return Tone;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Base class for all Signals. Used Internally. \n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone}\n\t\t\t */\n\t\t    Tone.SignalBase = function () {\n\t\t    };\n\t\t    Tone.extend(Tone.SignalBase);\n\t\t    /**\n\t\t\t *  When signals connect to other signals or AudioParams, \n\t\t\t *  they take over the output value of that signal or AudioParam. \n\t\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t\t *\n\t\t\t *  @override\n\t\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t\t *  @returns {Tone.SignalBase} this\n\t\t\t */\n\t\t    Tone.SignalBase.prototype.connect = function (node, outputNumber, inputNumber) {\n\t\t        //zero it out so that the signal can have full control\n\t\t        if (Tone.Signal && Tone.Signal === node.constructor || Tone.Param && Tone.Param === node.constructor || Tone.TimelineSignal && Tone.TimelineSignal === node.constructor) {\n\t\t            //cancel changes\n\t\t            node._param.cancelScheduledValues(0);\n\t\t            //reset the value\n\t\t            node._param.value = 0;\n\t\t            //mark the value as overridden\n\t\t            node.overridden = true;\n\t\t        } else if (node instanceof AudioParam) {\n\t\t            node.cancelScheduledValues(0);\n\t\t            node.value = 0;\n\t\t        }\n\t\t        Tone.prototype.connect.call(this, node, outputNumber, inputNumber);\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.SignalBase;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Wraps the native Web Audio API \n\t\t\t *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n\t\t\t *\n\t\t\t *  @extends {Tone.SignalBase}\n\t\t\t *  @constructor\n\t\t\t *  @param {function|Array|Number} mapping The function used to define the values. \n\t\t\t *                                    The mapping function should take two arguments: \n\t\t\t *                                    the first is the value at the current position \n\t\t\t *                                    and the second is the array position. \n\t\t\t *                                    If the argument is an array, that array will be\n\t\t\t *                                    set as the wave shaping function. The input\n\t\t\t *                                    signal is an AudioRange [-1, 1] value and the output\n\t\t\t *                                    signal can take on any numerical values. \n\t\t\t *                                    \n\t\t\t *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.\n\t\t\t *  @example\n\t\t\t * var timesTwo = new Tone.WaveShaper(function(val){\n\t\t\t * \treturn val * 2;\n\t\t\t * }, 2048);\n\t\t\t *  @example\n\t\t\t * //a waveshaper can also be constructed with an array of values\n\t\t\t * var invert = new Tone.WaveShaper([1, -1]);\n\t\t\t */\n\t\t    Tone.WaveShaper = function (mapping, bufferLen) {\n\t\t        /**\n\t\t\t\t *  the waveshaper\n\t\t\t\t *  @type {WaveShaperNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._shaper = this.input = this.output = this.context.createWaveShaper();\n\t\t        /**\n\t\t\t\t *  the waveshapers curve\n\t\t\t\t *  @type {Float32Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._curve = null;\n\t\t        if (Array.isArray(mapping)) {\n\t\t            this.curve = mapping;\n\t\t        } else if (isFinite(mapping) || this.isUndef(mapping)) {\n\t\t            this._curve = new Float32Array(this.defaultArg(mapping, 1024));\n\t\t        } else if (this.isFunction(mapping)) {\n\t\t            this._curve = new Float32Array(this.defaultArg(bufferLen, 1024));\n\t\t            this.setMap(mapping);\n\t\t        }\n\t\t    };\n\t\t    Tone.extend(Tone.WaveShaper, Tone.SignalBase);\n\t\t    /**\n\t\t\t *  Uses a mapping function to set the value of the curve. \n\t\t\t *  @param {function} mapping The function used to define the values. \n\t\t\t *                            The mapping function take two arguments: \n\t\t\t *                            the first is the value at the current position \n\t\t\t *                            which goes from -1 to 1 over the number of elements\n\t\t\t *                            in the curve array. The second argument is the array position. \n\t\t\t *  @returns {Tone.WaveShaper} this\n\t\t\t *  @example\n\t\t\t * //map the input signal from [-1, 1] to [0, 10]\n\t\t\t * shaper.setMap(function(val, index){\n\t\t\t * \treturn (val + 1) * 5;\n\t\t\t * })\n\t\t\t */\n\t\t    Tone.WaveShaper.prototype.setMap = function (mapping) {\n\t\t        for (var i = 0, len = this._curve.length; i < len; i++) {\n\t\t            var normalized = i / (len - 1) * 2 - 1;\n\t\t            this._curve[i] = mapping(normalized, i);\n\t\t        }\n\t\t        this._shaper.curve = this._curve;\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * The array to set as the waveshaper curve. For linear curves\n\t\t\t * array length does not make much difference, but for complex curves\n\t\t\t * longer arrays will provide smoother interpolation. \n\t\t\t * @memberOf Tone.WaveShaper#\n\t\t\t * @type {Array}\n\t\t\t * @name curve\n\t\t\t */\n\t\t    Object.defineProperty(Tone.WaveShaper.prototype, 'curve', {\n\t\t        get: function () {\n\t\t            return this._shaper.curve;\n\t\t        },\n\t\t        set: function (mapping) {\n\t\t            this._curve = new Float32Array(mapping);\n\t\t            this._shaper.curve = this._curve;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * Specifies what type of oversampling (if any) should be used when \n\t\t\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\". \n\t\t\t * @memberOf Tone.WaveShaper#\n\t\t\t * @type {string}\n\t\t\t * @name oversample\n\t\t\t */\n\t\t    Object.defineProperty(Tone.WaveShaper.prototype, 'oversample', {\n\t\t        get: function () {\n\t\t            return this._shaper.oversample;\n\t\t        },\n\t\t        set: function (oversampling) {\n\t\t            if ([\n\t\t                    'none',\n\t\t                    '2x',\n\t\t                    '4x'\n\t\t                ].indexOf(oversampling) !== -1) {\n\t\t                this._shaper.oversample = oversampling;\n\t\t            } else {\n\t\t                throw new RangeError('Tone.WaveShaper: oversampling must be either \\'none\\', \\'2x\\', or \\'4x\\'');\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.WaveShaper} this\n\t\t\t */\n\t\t    Tone.WaveShaper.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._shaper.disconnect();\n\t\t        this._shaper = null;\n\t\t        this._curve = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.WaveShaper;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    /**\n\t\t\t *  @class Tone.TimeBase is a flexible encoding of time\n\t\t\t *         which can be evaluated to and from a string.\n\t\t\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t\t *  @extends {Tone}\n\t\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t\t *  @param  {String=}  units  Unit values\n\t\t\t *  @example\n\t\t\t * Tone.TimeBase(4, \"n\")\n\t\t\t * Tone.TimeBase(2, \"t\")\n\t\t\t * Tone.TimeBase(\"2t\").add(\"1m\")\n\t\t\t * Tone.TimeBase(\"2t + 1m\");\n\t\t\t */\n\t\t    Tone.TimeBase = function (val, units) {\n\t\t        //allows it to be constructed with or without 'new'\n\t\t        if (this instanceof Tone.TimeBase) {\n\t\t            /**\n\t\t\t\t\t *  Any expressions parsed from the Time\n\t\t\t\t\t *  @type  {Array}\n\t\t\t\t\t *  @private\n\t\t\t\t\t */\n\t\t            this._expr = this._noOp;\n\t\t            if (val instanceof Tone.TimeBase) {\n\t\t                this.copy(val);\n\t\t            } else if (!this.isUndef(units) || this.isNumber(val)) {\n\t\t                //default units\n\t\t                units = this.defaultArg(units, this._defaultUnits);\n\t\t                var method = this._primaryExpressions[units].method;\n\t\t                this._expr = method.bind(this, val);\n\t\t            } else if (this.isString(val)) {\n\t\t                this.set(val);\n\t\t            } else if (this.isUndef(val)) {\n\t\t                //default expression\n\t\t                this._expr = this._defaultExpr();\n\t\t            }\n\t\t        } else {\n\t\t            return new Tone.TimeBase(val, units);\n\t\t        }\n\t\t    };\n\t\t    Tone.extend(Tone.TimeBase);\n\t\t    /**\n\t\t\t *  Repalce the current time value with the value\n\t\t\t *  given by the expression string.\n\t\t\t *  @param  {String}  exprString\n\t\t\t *  @return {Tone.TimeBase} this\n\t\t\t */\n\t\t    Tone.TimeBase.prototype.set = function (exprString) {\n\t\t        this._expr = this._parseExprString(exprString);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Return a clone of the TimeBase object.\n\t\t\t *  @return  {Tone.TimeBase} The new cloned Tone.TimeBase\n\t\t\t */\n\t\t    Tone.TimeBase.prototype.clone = function () {\n\t\t        var instance = new this.constructor();\n\t\t        instance.copy(this);\n\t\t        return instance;\n\t\t    };\n\t\t    /**\n\t\t\t *  Copies the value of time to this Time\n\t\t\t *  @param {Tone.TimeBase} time\n\t\t\t *  @return  {TimeBase}\n\t\t\t */\n\t\t    Tone.TimeBase.prototype.copy = function (time) {\n\t\t        var val = time._expr();\n\t\t        return this.set(val);\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tABSTRACT SYNTAX TREE PARSER\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  All the primary expressions.\n\t\t\t *  @private\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._primaryExpressions = {\n\t\t        'n': {\n\t\t            regexp: /^(\\d+)n/i,\n\t\t            method: function (value) {\n\t\t                value = parseInt(value);\n\t\t                if (value === 1) {\n\t\t                    return this._beatsToUnits(this._timeSignature());\n\t\t                } else {\n\t\t                    return this._beatsToUnits(4 / value);\n\t\t                }\n\t\t            }\n\t\t        },\n\t\t        't': {\n\t\t            regexp: /^(\\d+)t/i,\n\t\t            method: function (value) {\n\t\t                value = parseInt(value);\n\t\t                return this._beatsToUnits(8 / (parseInt(value) * 3));\n\t\t            }\n\t\t        },\n\t\t        'm': {\n\t\t            regexp: /^(\\d+)m/i,\n\t\t            method: function (value) {\n\t\t                return this._beatsToUnits(parseInt(value) * this._timeSignature());\n\t\t            }\n\t\t        },\n\t\t        'i': {\n\t\t            regexp: /^(\\d+)i/i,\n\t\t            method: function (value) {\n\t\t                return this._ticksToUnits(parseInt(value));\n\t\t            }\n\t\t        },\n\t\t        'hz': {\n\t\t            regexp: /^(\\d+(?:\\.\\d+)?)hz/i,\n\t\t            method: function (value) {\n\t\t                return this._frequencyToUnits(parseFloat(value));\n\t\t            }\n\t\t        },\n\t\t        'tr': {\n\t\t            regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t            method: function (m, q, s) {\n\t\t                var total = 0;\n\t\t                if (m && m !== '0') {\n\t\t                    total += this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t\t                }\n\t\t                if (q && q !== '0') {\n\t\t                    total += this._beatsToUnits(parseFloat(q));\n\t\t                }\n\t\t                if (s && s !== '0') {\n\t\t                    total += this._beatsToUnits(parseFloat(s) / 4);\n\t\t                }\n\t\t                return total;\n\t\t            }\n\t\t        },\n\t\t        's': {\n\t\t            regexp: /^(\\d+(?:\\.\\d+)?s)/,\n\t\t            method: function (value) {\n\t\t                return this._secondsToUnits(parseFloat(value));\n\t\t            }\n\t\t        },\n\t\t        'samples': {\n\t\t            regexp: /^(\\d+)samples/,\n\t\t            method: function (value) {\n\t\t                return parseInt(value) / this.context.sampleRate;\n\t\t            }\n\t\t        },\n\t\t        'default': {\n\t\t            regexp: /^(\\d+(?:\\.\\d+)?)/,\n\t\t            method: function (value) {\n\t\t                return this._primaryExpressions[this._defaultUnits].method.call(this, value);\n\t\t            }\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  All the binary expressions that TimeBase can accept.\n\t\t\t *  @private\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._binaryExpressions = {\n\t\t        '+': {\n\t\t            regexp: /^\\+/,\n\t\t            precedence: 2,\n\t\t            method: function (lh, rh) {\n\t\t                return lh() + rh();\n\t\t            }\n\t\t        },\n\t\t        '-': {\n\t\t            regexp: /^\\-/,\n\t\t            precedence: 2,\n\t\t            method: function (lh, rh) {\n\t\t                return lh() - rh();\n\t\t            }\n\t\t        },\n\t\t        '*': {\n\t\t            regexp: /^\\*/,\n\t\t            precedence: 1,\n\t\t            method: function (lh, rh) {\n\t\t                return lh() * rh();\n\t\t            }\n\t\t        },\n\t\t        '/': {\n\t\t            regexp: /^\\//,\n\t\t            precedence: 1,\n\t\t            method: function (lh, rh) {\n\t\t                return lh() / rh();\n\t\t            }\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  All the unary expressions.\n\t\t\t *  @private\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._unaryExpressions = {\n\t\t        'neg': {\n\t\t            regexp: /^\\-/,\n\t\t            method: function (lh) {\n\t\t                return -lh();\n\t\t            }\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Syntactic glue which holds expressions together\n\t\t\t *  @private\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._syntaxGlue = {\n\t\t        '(': { regexp: /^\\(/ },\n\t\t        ')': { regexp: /^\\)/ }\n\t\t    };\n\t\t    /**\n\t\t\t *  tokenize the expression based on the Expressions object\n\t\t\t *  @param   {string} expr \n\t\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._tokenize = function (expr) {\n\t\t        var position = -1;\n\t\t        var tokens = [];\n\t\t        while (expr.length > 0) {\n\t\t            expr = expr.trim();\n\t\t            var token = getNextToken(expr, this);\n\t\t            tokens.push(token);\n\t\t            expr = expr.substr(token.value.length);\n\t\t        }\n\t\t        function getNextToken(expr, context) {\n\t\t            var expressions = [\n\t\t                '_binaryExpressions',\n\t\t                '_unaryExpressions',\n\t\t                '_primaryExpressions',\n\t\t                '_syntaxGlue'\n\t\t            ];\n\t\t            for (var i = 0; i < expressions.length; i++) {\n\t\t                var group = context[expressions[i]];\n\t\t                for (var opName in group) {\n\t\t                    var op = group[opName];\n\t\t                    var reg = op.regexp;\n\t\t                    var match = expr.match(reg);\n\t\t                    if (match !== null) {\n\t\t                        return {\n\t\t                            method: op.method,\n\t\t                            precedence: op.precedence,\n\t\t                            regexp: op.regexp,\n\t\t                            value: match[0]\n\t\t                        };\n\t\t                    }\n\t\t                }\n\t\t            }\n\t\t            throw new SyntaxError('Tone.TimeBase: Unexpected token ' + expr);\n\t\t        }\n\t\t        return {\n\t\t            next: function () {\n\t\t                return tokens[++position];\n\t\t            },\n\t\t            peek: function () {\n\t\t                return tokens[position + 1];\n\t\t            }\n\t\t        };\n\t\t    };\n\t\t    /**\n\t\t\t *  Given a token, find the value within the groupName\n\t\t\t *  @param {Object} token\n\t\t\t *  @param {String} groupName\n\t\t\t *  @param {Number} precedence\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._matchGroup = function (token, group, prec) {\n\t\t        var ret = false;\n\t\t        if (!this.isUndef(token)) {\n\t\t            for (var opName in group) {\n\t\t                var op = group[opName];\n\t\t                if (op.regexp.test(token.value)) {\n\t\t                    if (!this.isUndef(prec)) {\n\t\t                        if (op.precedence === prec) {\n\t\t                            return op;\n\t\t                        }\n\t\t                    } else {\n\t\t                        return op;\n\t\t                    }\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t        return ret;\n\t\t    };\n\t\t    /**\n\t\t\t *  Match a binary expression given the token and the precedence\n\t\t\t *  @param {Lexer} lexer\n\t\t\t *  @param {Number} precedence\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._parseBinary = function (lexer, precedence) {\n\t\t        if (this.isUndef(precedence)) {\n\t\t            precedence = 2;\n\t\t        }\n\t\t        var expr;\n\t\t        if (precedence < 0) {\n\t\t            expr = this._parseUnary(lexer);\n\t\t        } else {\n\t\t            expr = this._parseBinary(lexer, precedence - 1);\n\t\t        }\n\t\t        var token = lexer.peek();\n\t\t        while (token && this._matchGroup(token, this._binaryExpressions, precedence)) {\n\t\t            token = lexer.next();\n\t\t            expr = token.method.bind(this, expr, this._parseBinary(lexer, precedence - 1));\n\t\t            token = lexer.peek();\n\t\t        }\n\t\t        return expr;\n\t\t    };\n\t\t    /**\n\t\t\t *  Match a unary expression.\n\t\t\t *  @param {Lexer} lexer\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._parseUnary = function (lexer) {\n\t\t        var token, expr;\n\t\t        token = lexer.peek();\n\t\t        var op = this._matchGroup(token, this._unaryExpressions);\n\t\t        if (op) {\n\t\t            token = lexer.next();\n\t\t            expr = this._parseUnary(lexer);\n\t\t            return op.method.bind(this, expr);\n\t\t        }\n\t\t        return this._parsePrimary(lexer);\n\t\t    };\n\t\t    /**\n\t\t\t *  Match a primary expression (a value).\n\t\t\t *  @param {Lexer} lexer\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._parsePrimary = function (lexer) {\n\t\t        var token, expr;\n\t\t        token = lexer.peek();\n\t\t        if (this.isUndef(token)) {\n\t\t            throw new SyntaxError('Tone.TimeBase: Unexpected end of expression');\n\t\t        }\n\t\t        if (this._matchGroup(token, this._primaryExpressions)) {\n\t\t            token = lexer.next();\n\t\t            var matching = token.value.match(token.regexp);\n\t\t            return token.method.bind(this, matching[1], matching[2], matching[3]);\n\t\t        }\n\t\t        if (token && token.value === '(') {\n\t\t            lexer.next();\n\t\t            expr = this._parseBinary(lexer);\n\t\t            token = lexer.next();\n\t\t            if (!(token && token.value === ')')) {\n\t\t                throw new SyntaxError('Expected )');\n\t\t            }\n\t\t            return expr;\n\t\t        }\n\t\t        throw new SyntaxError('Tone.TimeBase: Cannot process token ' + token.value);\n\t\t    };\n\t\t    /**\n\t\t\t *  Recursively parse the string expression into a syntax tree.\n\t\t\t *  @param   {string} expr \n\t\t\t *  @return  {Function} the bound method to be evaluated later\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._parseExprString = function (exprString) {\n\t\t        if (!this.isString(exprString)) {\n\t\t            exprString = exprString.toString();\n\t\t        }\n\t\t        var lexer = this._tokenize(exprString);\n\t\t        var tree = this._parseBinary(lexer);\n\t\t        return tree;\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tDEFAULTS\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  The initial expression value\n\t\t\t *  @return  {Number}  The initial value 0\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._noOp = function () {\n\t\t        return 0;\n\t\t    };\n\t\t    /**\n\t\t\t *  The default expression value if no arguments are given\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._defaultExpr = function () {\n\t\t        return this._noOp;\n\t\t    };\n\t\t    /**\n\t\t\t *  The default units if none are given.\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._defaultUnits = 's';\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tUNIT CONVERSIONS\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Returns the value of a frequency in the current units\n\t\t\t *  @param {Frequency} freq\n\t\t\t *  @return  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._frequencyToUnits = function (freq) {\n\t\t        return 1 / freq;\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the value of the beats in the current units\n\t\t\t *  @param {Number} beats\n\t\t\t *  @return  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._beatsToUnits = function (beats) {\n\t\t        return 60 / Tone.Transport.bpm.value * beats;\n\t\t    };\n\t\t    /**\n\t\t\t *  Returns the value of a second in the current units\n\t\t\t *  @param {Seconds} seconds\n\t\t\t *  @return  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._secondsToUnits = function (seconds) {\n\t\t        return seconds;\n\t\t    };\n\t\t    /**\n\t\t\t *  Returns the value of a tick in the current time units\n\t\t\t *  @param {Ticks} ticks\n\t\t\t *  @return  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._ticksToUnits = function (ticks) {\n\t\t        return ticks * (this._beatsToUnits(1) / Tone.Transport.PPQ);\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the time signature.\n\t\t\t *  @return  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._timeSignature = function () {\n\t\t        return Tone.Transport.timeSignature;\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tEXPRESSIONS\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Push an expression onto the expression list\n\t\t\t *  @param  {Time}  val\n\t\t\t *  @param  {String}  type\n\t\t\t *  @param  {String}  units\n\t\t\t *  @return  {Tone.TimeBase} \n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimeBase.prototype._pushExpr = function (val, name, units) {\n\t\t        //create the expression\n\t\t        if (!(val instanceof Tone.TimeBase)) {\n\t\t            val = new this.constructor(val, units);\n\t\t        }\n\t\t        this._expr = this._binaryExpressions[name].method.bind(this, this._expr, val._expr);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Add to the current value.\n\t\t\t *  @param  {Time}  val    The value to add\n\t\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t\t *  @return  {Tone.TimeBase}  this\n\t\t\t *  @example\n\t\t\t * Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\"\n\t\t\t */\n\t\t    Tone.TimeBase.prototype.add = function (val, units) {\n\t\t        return this._pushExpr(val, '+', units);\n\t\t    };\n\t\t    /**\n\t\t\t *  Subtract the value from the current time.\n\t\t\t *  @param  {Time}  val    The value to subtract\n\t\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t\t *  @return  {Tone.TimeBase}  this\n\t\t\t *  @example\n\t\t\t * Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\"\n\t\t\t */\n\t\t    Tone.TimeBase.prototype.sub = function (val, units) {\n\t\t        return this._pushExpr(val, '-', units);\n\t\t    };\n\t\t    /**\n\t\t\t *  Multiply the current value by the given time.\n\t\t\t *  @param  {Time}  val    The value to multiply\n\t\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t\t *  @return  {Tone.TimeBase}  this\n\t\t\t *  @example\n\t\t\t * Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\"\n\t\t\t */\n\t\t    Tone.TimeBase.prototype.mult = function (val, units) {\n\t\t        return this._pushExpr(val, '*', units);\n\t\t    };\n\t\t    /**\n\t\t\t *  Divide the current value by the given time.\n\t\t\t *  @param  {Time}  val    The value to divide by\n\t\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t\t *  @return  {Tone.TimeBase}  this\n\t\t\t *  @example\n\t\t\t * Tone.TimeBase(\"2m\").div(2); //\"1m\"\n\t\t\t */\n\t\t    Tone.TimeBase.prototype.div = function (val, units) {\n\t\t        return this._pushExpr(val, '/', units);\n\t\t    };\n\t\t    /**\n\t\t\t *  Evaluate the time value. Returns the time\n\t\t\t *  in seconds.\n\t\t\t *  @return  {Seconds} \n\t\t\t */\n\t\t    Tone.TimeBase.prototype.valueOf = function () {\n\t\t        return this._expr();\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up\n\t\t\t *  @return {Tone.TimeBase} this\n\t\t\t */\n\t\t    Tone.TimeBase.prototype.dispose = function () {\n\t\t        this._expr = null;\n\t\t    };\n\t\t    return Tone.TimeBase;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    /**\n\t\t\t *  @class Tone.Time is a primitive type for encoding Time values. \n\t\t\t *         Eventually all time values are evaluated to seconds\n\t\t\t *         using the `eval` method. Tone.Time can be constructed\n\t\t\t *         with or without the `new` keyword. Tone.Time can be passed\n\t\t\t *         into the parameter of any method which takes time as an argument. \n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.TimeBase}\n\t\t\t *  @param  {String|Number}  val    The time value.\n\t\t\t *  @param  {String=}  units  The units of the value.\n\t\t\t *  @example\n\t\t\t * var t = Tone.Time(\"4n\");//encodes a quarter note\n\t\t\t * t.mult(4); // multiply that value by 4\n\t\t\t * t.toNotation(); //returns \"1m\"\n\t\t\t */\n\t\t    Tone.Time = function (val, units) {\n\t\t        if (this instanceof Tone.Time) {\n\t\t            /**\n\t\t\t\t\t *  If the current clock time should\n\t\t\t\t\t *  be added to the output\n\t\t\t\t\t *  @type  {Boolean}\n\t\t\t\t\t *  @private\n\t\t\t\t\t */\n\t\t            this._plusNow = false;\n\t\t            Tone.TimeBase.call(this, val, units);\n\t\t        } else {\n\t\t            return new Tone.Time(val, units);\n\t\t        }\n\t\t    };\n\t\t    Tone.extend(Tone.Time, Tone.TimeBase);\n\t\t    //clone the expressions so that \n\t\t    //we can add more without modifying the original\n\t\t    Tone.Time.prototype._unaryExpressions = Object.create(Tone.TimeBase.prototype._unaryExpressions);\n\t\t    /*\n\t\t\t *  Adds an additional unary expression\n\t\t\t *  which quantizes values to the next subdivision\n\t\t\t *  @type {Object}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Time.prototype._unaryExpressions.quantize = {\n\t\t        regexp: /^@/,\n\t\t        method: function (rh) {\n\t\t            return Tone.Transport.nextSubdivision(rh());\n\t\t        }\n\t\t    };\n\t\t    /*\n\t\t\t *  Adds an additional unary expression\n\t\t\t *  which adds the current clock time.\n\t\t\t *  @type {Object}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Time.prototype._unaryExpressions.now = {\n\t\t        regexp: /^\\+/,\n\t\t        method: function (lh) {\n\t\t            this._plusNow = true;\n\t\t            return lh();\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Quantize the time by the given subdivision. Optionally add a\n\t\t\t *  percentage which will move the time value towards the ideal\n\t\t\t *  quantized value by that percentage. \n\t\t\t *  @param  {Number|Time}  val    The subdivision to quantize to\n\t\t\t *  @param  {NormalRange}  [percent=1]  Move the time value\n\t\t\t *                                   towards the quantized value by\n\t\t\t *                                   a percentage.\n\t\t\t *  @return  {Tone.Time}  this\n\t\t\t *  @example\n\t\t\t * Tone.Time(21).quantize(2) //returns 22\n\t\t\t * Tone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t\t\t */\n\t\t    Tone.Time.prototype.quantize = function (subdiv, percent) {\n\t\t        percent = this.defaultArg(percent, 1);\n\t\t        this._expr = function (expr, subdivision, percent) {\n\t\t            expr = expr();\n\t\t            subdivision = subdivision.toSeconds();\n\t\t            var multiple = Math.round(expr / subdivision);\n\t\t            var ideal = multiple * subdivision;\n\t\t            var diff = ideal - expr;\n\t\t            return expr + diff * percent;\n\t\t        }.bind(this, this._expr, new this.constructor(subdiv), percent);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Adds the clock time to the time expression at the \n\t\t\t *  moment of evaluation. \n\t\t\t *  @return  {Tone.Time}  this\n\t\t\t */\n\t\t    Tone.Time.prototype.addNow = function () {\n\t\t        this._plusNow = true;\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  @override\n\t\t\t *  Override the default value return when no arguments are passed in.\n\t\t\t *  The default value is 'now'\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Time.prototype._defaultExpr = function () {\n\t\t        this._plusNow = true;\n\t\t        return this._noOp;\n\t\t    };\n\t\t    /**\n\t\t\t *  Copies the value of time to this Time\n\t\t\t *  @param {Tone.Time} time\n\t\t\t *  @return  {Time}\n\t\t\t */\n\t\t    Tone.Time.prototype.copy = function (time) {\n\t\t        Tone.TimeBase.prototype.copy.call(this, time);\n\t\t        this._plusNow = time._plusNow;\n\t\t        return this;\n\t\t    };\n\t\t    //CONVERSIONS//////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Convert a Time to Notation. Values will be thresholded to the nearest 128th note. \n\t\t\t *  @return {Notation} \n\t\t\t *  @example\n\t\t\t * //if the Transport is at 120bpm:\n\t\t\t * Tone.Time(2).toNotation();//returns \"1m\"\n\t\t\t */\n\t\t    Tone.Time.prototype.toNotation = function () {\n\t\t        var time = this.toSeconds();\n\t\t        var testNotations = [\n\t\t            '1m',\n\t\t            '2n',\n\t\t            '4n',\n\t\t            '8n',\n\t\t            '16n',\n\t\t            '32n',\n\t\t            '64n',\n\t\t            '128n'\n\t\t        ];\n\t\t        var retNotation = this._toNotationHelper(time, testNotations);\n\t\t        //try the same thing but with tripelets\n\t\t        var testTripletNotations = [\n\t\t            '1m',\n\t\t            '2n',\n\t\t            '2t',\n\t\t            '4n',\n\t\t            '4t',\n\t\t            '8n',\n\t\t            '8t',\n\t\t            '16n',\n\t\t            '16t',\n\t\t            '32n',\n\t\t            '32t',\n\t\t            '64n',\n\t\t            '64t',\n\t\t            '128n'\n\t\t        ];\n\t\t        var retTripletNotation = this._toNotationHelper(time, testTripletNotations);\n\t\t        //choose the simpler expression of the two\n\t\t        if (retTripletNotation.split('+').length < retNotation.split('+').length) {\n\t\t            return retTripletNotation;\n\t\t        } else {\n\t\t            return retNotation;\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Helper method for Tone.toNotation\n\t\t\t *  @param {Number} units \n\t\t\t *  @param {Array} testNotations\n\t\t\t *  @return {String}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Time.prototype._toNotationHelper = function (units, testNotations) {\n\t\t        //the threshold is the last value in the array\n\t\t        var threshold = this._notationToUnits(testNotations[testNotations.length - 1]);\n\t\t        var retNotation = '';\n\t\t        for (var i = 0; i < testNotations.length; i++) {\n\t\t            var notationTime = this._notationToUnits(testNotations[i]);\n\t\t            //account for floating point errors (i.e. round up if the value is 0.999999)\n\t\t            var multiple = units / notationTime;\n\t\t            var floatingPointError = 0.000001;\n\t\t            if (1 - multiple % 1 < floatingPointError) {\n\t\t                multiple += floatingPointError;\n\t\t            }\n\t\t            multiple = Math.floor(multiple);\n\t\t            if (multiple > 0) {\n\t\t                if (multiple === 1) {\n\t\t                    retNotation += testNotations[i];\n\t\t                } else {\n\t\t                    retNotation += multiple.toString() + '*' + testNotations[i];\n\t\t                }\n\t\t                units -= multiple * notationTime;\n\t\t                if (units < threshold) {\n\t\t                    break;\n\t\t                } else {\n\t\t                    retNotation += ' + ';\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t        if (retNotation === '') {\n\t\t            retNotation = '0';\n\t\t        }\n\t\t        return retNotation;\n\t\t    };\n\t\t    /**\n\t\t\t *  Convert a notation value to the current units\n\t\t\t *  @param  {Notation}  notation \n\t\t\t *  @return  {Number} \n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Time.prototype._notationToUnits = function (notation) {\n\t\t        var primaryExprs = this._primaryExpressions;\n\t\t        var notationExprs = [\n\t\t            primaryExprs.n,\n\t\t            primaryExprs.t,\n\t\t            primaryExprs.m\n\t\t        ];\n\t\t        for (var i = 0; i < notationExprs.length; i++) {\n\t\t            var expr = notationExprs[i];\n\t\t            var match = notation.match(expr.regexp);\n\t\t            if (match) {\n\t\t                return expr.method.call(this, match[1]);\n\t\t            }\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t\t\t *  @return  {BarsBeatsSixteenths}\n\t\t\t */\n\t\t    Tone.Time.prototype.toBarsBeatsSixteenths = function () {\n\t\t        var quarterTime = this._beatsToUnits(1);\n\t\t        var quarters = this.toSeconds() / quarterTime;\n\t\t        var measures = Math.floor(quarters / this._timeSignature());\n\t\t        var sixteenths = quarters % 1 * 4;\n\t\t        quarters = Math.floor(quarters) % this._timeSignature();\n\t\t        sixteenths = sixteenths.toString();\n\t\t        if (sixteenths.length > 3) {\n\t\t            sixteenths = parseFloat(sixteenths).toFixed(3);\n\t\t        }\n\t\t        var progress = [\n\t\t            measures,\n\t\t            quarters,\n\t\t            sixteenths\n\t\t        ];\n\t\t        return progress.join(':');\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the time in ticks.\n\t\t\t *  @return  {Ticks}\n\t\t\t */\n\t\t    Tone.Time.prototype.toTicks = function () {\n\t\t        var quarterTime = this._beatsToUnits(1);\n\t\t        var quarters = this.valueOf() / quarterTime;\n\t\t        return Math.floor(quarters * Tone.Transport.PPQ);\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the time in samples\n\t\t\t *  @return  {Samples}  \n\t\t\t */\n\t\t    Tone.Time.prototype.toSamples = function () {\n\t\t        return this.toSeconds() * this.context.sampleRate;\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the time as a frequency value\n\t\t\t *  @return  {Frequency} \n\t\t\t *  @example\n\t\t\t * Tone.Time(2).toFrequency(); //0.5\n\t\t\t */\n\t\t    Tone.Time.prototype.toFrequency = function () {\n\t\t        return 1 / this.toSeconds();\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the time in seconds.\n\t\t\t *  @return  {Seconds} \n\t\t\t */\n\t\t    Tone.Time.prototype.toSeconds = function () {\n\t\t        return this.valueOf();\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the time in milliseconds.\n\t\t\t *  @return  {Milliseconds} \n\t\t\t */\n\t\t    Tone.Time.prototype.toMilliseconds = function () {\n\t\t        return this.toSeconds() * 1000;\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the time in seconds.\n\t\t\t *  @return  {Seconds} \n\t\t\t */\n\t\t    Tone.Time.prototype.valueOf = function () {\n\t\t        var val = this._expr();\n\t\t        return val + (this._plusNow ? this.now() : 0);\n\t\t    };\n\t\t    return Tone.Time;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    /**\n\t\t\t *  @class Tone.Frequency is a primitive type for encoding Frequency values. \n\t\t\t *         Eventually all time values are evaluated to hertz\n\t\t\t *         using the `eval` method. \n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.TimeBase}\n\t\t\t *  @param  {String|Number}  val    The time value.\n\t\t\t *  @param  {String=}  units  The units of the value.\n\t\t\t *  @example\n\t\t\t * Tone.Frequency(\"C3\") // 261\n\t\t\t * Tone.Frequency(38, \"midi\") //\n\t\t\t * Tone.Frequency(\"C3\").transpose(4);\n\t\t\t */\n\t\t    Tone.Frequency = function (val, units) {\n\t\t        if (this instanceof Tone.Frequency) {\n\t\t            Tone.TimeBase.call(this, val, units);\n\t\t        } else {\n\t\t            return new Tone.Frequency(val, units);\n\t\t        }\n\t\t    };\n\t\t    Tone.extend(Tone.Frequency, Tone.TimeBase);\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tAUGMENT BASE EXPRESSIONS\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //clone the expressions so that \n\t\t    //we can add more without modifying the original\n\t\t    Tone.Frequency.prototype._primaryExpressions = Object.create(Tone.TimeBase.prototype._primaryExpressions);\n\t\t    /*\n\t\t\t *  midi type primary expression\n\t\t\t *  @type {Object}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Frequency.prototype._primaryExpressions.midi = {\n\t\t        regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t        method: function (value) {\n\t\t            return this.midiToFrequency(value);\n\t\t        }\n\t\t    };\n\t\t    /*\n\t\t\t *  note type primary expression\n\t\t\t *  @type {Object}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Frequency.prototype._primaryExpressions.note = {\n\t\t        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t        method: function (pitch, octave) {\n\t\t            var index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t            var noteNumber = index + (parseInt(octave) + 1) * 12;\n\t\t            return this.midiToFrequency(noteNumber);\n\t\t        }\n\t\t    };\n\t\t    /*\n\t\t\t *  BeatsBarsSixteenths type primary expression\n\t\t\t *  @type {Object}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Frequency.prototype._primaryExpressions.tr = {\n\t\t        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t        method: function (m, q, s) {\n\t\t            var total = 1;\n\t\t            if (m && m !== '0') {\n\t\t                total *= this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t\t            }\n\t\t            if (q && q !== '0') {\n\t\t                total *= this._beatsToUnits(parseFloat(q));\n\t\t            }\n\t\t            if (s && s !== '0') {\n\t\t                total *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t            }\n\t\t            return total;\n\t\t        }\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tEXPRESSIONS\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Transposes the frequency by the given number of semitones.\n\t\t\t *  @param  {Interval}  interval\n\t\t\t *  @return  {Tone.Frequency} this\n\t\t\t *  @example\n\t\t\t * Tone.Frequency(\"A4\").transpose(3); //\"C5\"\n\t\t\t */\n\t\t    Tone.Frequency.prototype.transpose = function (interval) {\n\t\t        this._expr = function (expr, interval) {\n\t\t            var val = expr();\n\t\t            return val * this.intervalToFrequencyRatio(interval);\n\t\t        }.bind(this, this._expr, interval);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Takes an array of semitone intervals and returns\n\t\t\t *  an array of frequencies transposed by those intervals.\n\t\t\t *  @param  {Array}  intervals\n\t\t\t *  @return  {Tone.Frequency} this\n\t\t\t *  @example\n\t\t\t * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t\t\t */\n\t\t    Tone.Frequency.prototype.harmonize = function (intervals) {\n\t\t        this._expr = function (expr, intervals) {\n\t\t            var val = expr();\n\t\t            var ret = [];\n\t\t            for (var i = 0; i < intervals.length; i++) {\n\t\t                ret[i] = val * this.intervalToFrequencyRatio(intervals[i]);\n\t\t            }\n\t\t            return ret;\n\t\t        }.bind(this, this._expr, intervals);\n\t\t        return this;\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tUNIT CONVERSIONS\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Return the value of the frequency as a MIDI note\n\t\t\t *  @return  {MIDI}\n\t\t\t *  @example\n\t\t\t * Tone.Frequency(\"C4\").toMidi(); //60\n\t\t\t */\n\t\t    Tone.Frequency.prototype.toMidi = function () {\n\t\t        return this.frequencyToMidi(this.valueOf());\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the value of the frequency in Scientific Pitch Notation\n\t\t\t *  @return  {Note}\n\t\t\t *  @example\n\t\t\t * Tone.Frequency(69, \"midi\").toNote(); //\"A4\"\n\t\t\t */\n\t\t    Tone.Frequency.prototype.toNote = function () {\n\t\t        var freq = this.valueOf();\n\t\t        var log = Math.log(freq / Tone.Frequency.A4) / Math.LN2;\n\t\t        var noteNumber = Math.round(12 * log) + 57;\n\t\t        var octave = Math.floor(noteNumber / 12);\n\t\t        if (octave < 0) {\n\t\t            noteNumber += -12 * octave;\n\t\t        }\n\t\t        var noteName = scaleIndexToNote[noteNumber % 12];\n\t\t        return noteName + octave.toString();\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the duration of one cycle in seconds.\n\t\t\t *  @return  {Seconds}\n\t\t\t */\n\t\t    Tone.Frequency.prototype.toSeconds = function () {\n\t\t        return 1 / this.valueOf();\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the value in Hertz\n\t\t\t *  @return  {Frequency}\n\t\t\t */\n\t\t    Tone.Frequency.prototype.toFrequency = function () {\n\t\t        return this.valueOf();\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the duration of one cycle in ticks\n\t\t\t *  @return  {Ticks}\n\t\t\t */\n\t\t    Tone.Frequency.prototype.toTicks = function () {\n\t\t        var quarterTime = this._beatsToUnits(1);\n\t\t        var quarters = this.valueOf() / quarterTime;\n\t\t        return Math.floor(quarters * Tone.Transport.PPQ);\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tUNIT CONVERSIONS HELPERS\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Returns the value of a frequency in the current units\n\t\t\t *  @param {Frequency} freq\n\t\t\t *  @return  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Frequency.prototype._frequencyToUnits = function (freq) {\n\t\t        return freq;\n\t\t    };\n\t\t    /**\n\t\t\t *  Returns the value of a tick in the current time units\n\t\t\t *  @param {Ticks} ticks\n\t\t\t *  @return  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Frequency.prototype._ticksToUnits = function (ticks) {\n\t\t        return 1 / (ticks * 60 / (Tone.Transport.bpm.value * Tone.Transport.PPQ));\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the value of the beats in the current units\n\t\t\t *  @param {Number} beats\n\t\t\t *  @return  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Frequency.prototype._beatsToUnits = function (beats) {\n\t\t        return 1 / Tone.TimeBase.prototype._beatsToUnits.call(this, beats);\n\t\t    };\n\t\t    /**\n\t\t\t *  Returns the value of a second in the current units\n\t\t\t *  @param {Seconds} seconds\n\t\t\t *  @return  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Frequency.prototype._secondsToUnits = function (seconds) {\n\t\t        return 1 / seconds;\n\t\t    };\n\t\t    /**\n\t\t\t *  The default units if none are given.\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Frequency.prototype._defaultUnits = 'hz';\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tFREQUENCY CONVERSIONS\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Note to scale index\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t\t    var noteToScaleIndex = {\n\t\t        'cbb': -2,\n\t\t        'cb': -1,\n\t\t        'c': 0,\n\t\t        'c#': 1,\n\t\t        'cx': 2,\n\t\t        'dbb': 0,\n\t\t        'db': 1,\n\t\t        'd': 2,\n\t\t        'd#': 3,\n\t\t        'dx': 4,\n\t\t        'ebb': 2,\n\t\t        'eb': 3,\n\t\t        'e': 4,\n\t\t        'e#': 5,\n\t\t        'ex': 6,\n\t\t        'fbb': 3,\n\t\t        'fb': 4,\n\t\t        'f': 5,\n\t\t        'f#': 6,\n\t\t        'fx': 7,\n\t\t        'gbb': 5,\n\t\t        'gb': 6,\n\t\t        'g': 7,\n\t\t        'g#': 8,\n\t\t        'gx': 9,\n\t\t        'abb': 7,\n\t\t        'ab': 8,\n\t\t        'a': 9,\n\t\t        'a#': 10,\n\t\t        'ax': 11,\n\t\t        'bbb': 9,\n\t\t        'bb': 10,\n\t\t        'b': 11,\n\t\t        'b#': 12,\n\t\t        'bx': 13\n\t\t    };\n\t\t    /**\n\t\t\t *  scale index to note (sharps)\n\t\t\t *  @type  {Array}\n\t\t\t */\n\t\t    var scaleIndexToNote = [\n\t\t        'C',\n\t\t        'C#',\n\t\t        'D',\n\t\t        'D#',\n\t\t        'E',\n\t\t        'F',\n\t\t        'F#',\n\t\t        'G',\n\t\t        'G#',\n\t\t        'A',\n\t\t        'A#',\n\t\t        'B'\n\t\t    ];\n\t\t    /**\n\t\t\t *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)\n\t\t\t *  A4's values in Hertz. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @static\n\t\t\t */\n\t\t    Tone.Frequency.A4 = 440;\n\t\t    /**\n\t\t\t *  Convert a MIDI note to frequency value. \n\t\t\t *  @param  {MIDI} midi The midi number to convert.\n\t\t\t *  @return {Frequency} the corresponding frequency value\n\t\t\t *  @example\n\t\t\t * tone.midiToFrequency(69); // returns 440\n\t\t\t */\n\t\t    Tone.Frequency.prototype.midiToFrequency = function (midi) {\n\t\t        return Tone.Frequency.A4 * Math.pow(2, (midi - 69) / 12);\n\t\t    };\n\t\t    /**\n\t\t\t *  Convert a frequency value to a MIDI note.\n\t\t\t *  @param {Frequency} frequency The value to frequency value to convert.\n\t\t\t *  @returns  {MIDI}\n\t\t\t *  @example\n\t\t\t * tone.midiToFrequency(440); // returns 69\n\t\t\t */\n\t\t    Tone.Frequency.prototype.frequencyToMidi = function (frequency) {\n\t\t        return 69 + 12 * Math.log(frequency / Tone.Frequency.A4) / Math.LN2;\n\t\t    };\n\t\t    return Tone.Frequency;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    /**\n\t\t\t *  @class Tone.TransportTime is a the time along the Transport's\n\t\t\t *         timeline. It is similar to Tone.Time, but instead of evaluating\n\t\t\t *         against the AudioContext's clock, it is evaluated against\n\t\t\t *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n\t\t\t *  @constructor\n\t\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t\t *  @param  {String=}  units  Unit values\n\t\t\t *  @extends {Tone.Time}\n\t\t\t */\n\t\t    Tone.TransportTime = function (val, units) {\n\t\t        if (this instanceof Tone.TransportTime) {\n\t\t            Tone.Time.call(this, val, units);\n\t\t        } else {\n\t\t            return new Tone.TransportTime(val, units);\n\t\t        }\n\t\t    };\n\t\t    Tone.extend(Tone.TransportTime, Tone.Time);\n\t\t    //clone the expressions so that \n\t\t    //we can add more without modifying the original\n\t\t    Tone.TransportTime.prototype._unaryExpressions = Object.create(Tone.Time.prototype._unaryExpressions);\n\t\t    /**\n\t\t\t *  Adds an additional unary expression\n\t\t\t *  which quantizes values to the next subdivision\n\t\t\t *  @type {Object}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TransportTime.prototype._unaryExpressions.quantize = {\n\t\t        regexp: /^@/,\n\t\t        method: function (rh) {\n\t\t            var subdivision = this._secondsToTicks(rh());\n\t\t            var multiple = Math.ceil(Tone.Transport.ticks / subdivision);\n\t\t            return this._ticksToUnits(multiple * subdivision);\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Convert seconds into ticks\n\t\t\t *  @param {Seconds} seconds\n\t\t\t *  @return  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TransportTime.prototype._secondsToTicks = function (seconds) {\n\t\t        var quarterTime = this._beatsToUnits(1);\n\t\t        var quarters = seconds / quarterTime;\n\t\t        return Math.round(quarters * Tone.Transport.PPQ);\n\t\t    };\n\t\t    /**\n\t\t\t *  Evaluate the time expression. Returns values in ticks\n\t\t\t *  @return {Ticks}\n\t\t\t */\n\t\t    Tone.TransportTime.prototype.valueOf = function () {\n\t\t        var val = this._secondsToTicks(this._expr());\n\t\t        return val + (this._plusNow ? Tone.Transport.ticks : 0);\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the time in ticks.\n\t\t\t *  @return  {Ticks}\n\t\t\t */\n\t\t    Tone.TransportTime.prototype.toTicks = function () {\n\t\t        return this.valueOf();\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the time in seconds.\n\t\t\t *  @return  {Seconds}\n\t\t\t */\n\t\t    Tone.TransportTime.prototype.toSeconds = function () {\n\t\t        var val = this._expr();\n\t\t        return val + (this._plusNow ? Tone.Transport.seconds : 0);\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the time as a frequency value\n\t\t\t *  @return  {Frequency} \n\t\t\t */\n\t\t    Tone.TransportTime.prototype.toFrequency = function () {\n\t\t        return 1 / this.toSeconds();\n\t\t    };\n\t\t    return Tone.TransportTime;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.Emitter gives classes which extend it\n\t\t\t *         the ability to listen for and emit events. \n\t\t\t *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n\t\t\t *         MIT (c) 2011 Jerome Etienne.\n\t\t\t *         \n\t\t\t *  @extends {Tone}\n\t\t\t */\n\t\t    Tone.Emitter = function () {\n\t\t        /**\n\t\t\t\t *  Contains all of the events.\n\t\t\t\t *  @private\n\t\t\t\t *  @type  {Object}\n\t\t\t\t */\n\t\t        this._events = {};\n\t\t    };\n\t\t    Tone.extend(Tone.Emitter);\n\t\t    /**\n\t\t\t *  Bind a callback to a specific event.\n\t\t\t *  @param  {String}    event     The name of the event to listen for.\n\t\t\t *  @param  {Function}  callback  The callback to invoke when the\n\t\t\t *                                event is emitted\n\t\t\t *  @return  {Tone.Emitter}    this\n\t\t\t */\n\t\t    Tone.Emitter.prototype.on = function (event, callback) {\n\t\t        //split the event\n\t\t        var events = event.split(/\\W+/);\n\t\t        for (var i = 0; i < events.length; i++) {\n\t\t            var eventName = events[i];\n\t\t            if (!this._events.hasOwnProperty(eventName)) {\n\t\t                this._events[eventName] = [];\n\t\t            }\n\t\t            this._events[eventName].push(callback);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Remove the event listener.\n\t\t\t *  @param  {String}    event     The event to stop listening to.\n\t\t\t *  @param  {Function=}  callback  The callback which was bound to \n\t\t\t *                                the event with Tone.Emitter.on.\n\t\t\t *                                If no callback is given, all callbacks\n\t\t\t *                                events are removed.\n\t\t\t *  @return  {Tone.Emitter}    this\n\t\t\t */\n\t\t    Tone.Emitter.prototype.off = function (event, callback) {\n\t\t        var events = event.split(/\\W+/);\n\t\t        for (var ev = 0; ev < events.length; ev++) {\n\t\t            event = events[ev];\n\t\t            if (this._events.hasOwnProperty(event)) {\n\t\t                if (Tone.prototype.isUndef(callback)) {\n\t\t                    this._events[event] = [];\n\t\t                } else {\n\t\t                    var eventList = this._events[event];\n\t\t                    for (var i = 0; i < eventList.length; i++) {\n\t\t                        if (eventList[i] === callback) {\n\t\t                            eventList.splice(i, 1);\n\t\t                        }\n\t\t                    }\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Invoke all of the callbacks bound to the event\n\t\t\t *  with any arguments passed in. \n\t\t\t *  @param  {String}  event  The name of the event.\n\t\t\t *  @param {*...} args The arguments to pass to the functions listening.\n\t\t\t *  @return  {Tone.Emitter}  this\n\t\t\t */\n\t\t    Tone.Emitter.prototype.emit = function (event) {\n\t\t        if (this._events) {\n\t\t            var args = Array.apply(null, arguments).slice(1);\n\t\t            if (this._events.hasOwnProperty(event)) {\n\t\t                var eventList = this._events[event];\n\t\t                for (var i = 0, len = eventList.length; i < len; i++) {\n\t\t                    eventList[i].apply(this, args);\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Add Emitter functions (on/off/emit) to the object\n\t\t\t *  @param  {Object|Function}  object  The object or class to extend.\n\t\t\t */\n\t\t    Tone.Emitter.mixin = function (object) {\n\t\t        var functions = [\n\t\t            'on',\n\t\t            'off',\n\t\t            'emit'\n\t\t        ];\n\t\t        object._events = {};\n\t\t        for (var i = 0; i < functions.length; i++) {\n\t\t            var func = functions[i];\n\t\t            var emitterFunc = Tone.Emitter.prototype[func];\n\t\t            object[func] = emitterFunc;\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up\n\t\t\t *  @return  {Tone.Emitter}  this\n\t\t\t */\n\t\t    Tone.Emitter.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._events = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Emitter;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    /**\n\t\t\t *  shim\n\t\t\t *  @private\n\t\t\t */\n\t\t    if (!window.hasOwnProperty('AudioContext') && window.hasOwnProperty('webkitAudioContext')) {\n\t\t        window.AudioContext = window.webkitAudioContext;\n\t\t    }\n\t\t    /**\n\t\t\t *  @class Wrapper around the native AudioContext.\n\t\t\t *  @extends {Tone.Emitter}\n\t\t\t *  @param {AudioContext=} context optionally pass in a context\n\t\t\t */\n\t\t    Tone.Context = function (context) {\n\t\t        Tone.Emitter.call(this);\n\t\t        if (!context) {\n\t\t            context = new window.AudioContext();\n\t\t        }\n\t\t        this._context = context;\n\t\t        // extend all of the methods\n\t\t        for (var prop in this._context) {\n\t\t            this._defineProperty(this._context, prop);\n\t\t        }\n\t\t        ///////////////////////////////////////////////////////////////////////\n\t\t        // WORKER\n\t\t        ///////////////////////////////////////////////////////////////////////\n\t\t        /**\n\t\t\t\t *  The default latency hint\n\t\t\t\t *  @type  {String}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._latencyHint = 'interactive';\n\t\t        /**\n\t\t\t\t *  The amount of time events are scheduled\n\t\t\t\t *  into the future\n\t\t\t\t *  @type  {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lookAhead = 0.1;\n\t\t        /**\n\t\t\t\t *  How often the update look runs\n\t\t\t\t *  @type  {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._updateInterval = this._lookAhead / 3;\n\t\t        /**\n\t\t\t\t *  A reference to the actual computed update interval\n\t\t\t\t *  @type  {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._computedUpdateInterval = 0;\n\t\t        /**\n\t\t\t\t *  The web worker which is used to update Tone.Clock\n\t\t\t\t *  @private\n\t\t\t\t *  @type  {WebWorker}\n\t\t\t\t */\n\t\t        this._worker = this._createWorker();\n\t\t        /**\n\t\t\t\t *  An object containing all of the constants AudioBufferSourceNodes\n\t\t\t\t *  @type  {Object}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._constants = {};\n\t\t    };\n\t\t    Tone.extend(Tone.Context, Tone.Emitter);\n\t\t    Tone.Emitter.mixin(Tone.Context);\n\t\t    /**\n\t\t\t *  Define a property on this Tone.Context. \n\t\t\t *  This is used to extend the native AudioContext\n\t\t\t *  @param  {AudioContext}  context\n\t\t\t *  @param  {String}  prop \n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Context.prototype._defineProperty = function (context, prop) {\n\t\t        if (this.isUndef(this[prop])) {\n\t\t            Object.defineProperty(this, prop, {\n\t\t                get: function () {\n\t\t                    if (typeof context[prop] === 'function') {\n\t\t                        return context[prop].bind(context);\n\t\t                    } else {\n\t\t                        return context[prop];\n\t\t                    }\n\t\t                },\n\t\t                set: function (val) {\n\t\t                    context[prop] = val;\n\t\t                }\n\t\t            });\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  The current audio context time\n\t\t\t *  @return  {Number}\n\t\t\t */\n\t\t    Tone.Context.prototype.now = function () {\n\t\t        return this._context.currentTime;\n\t\t    };\n\t\t    /**\n\t\t\t *  Generate a web worker\n\t\t\t *  @return  {WebWorker}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Context.prototype._createWorker = function () {\n\t\t        //URL Shim\n\t\t        window.URL = window.URL || window.webkitURL;\n\t\t        var blob = new Blob([//the initial timeout time\n\t\t            'var timeoutTime = ' + (this._updateInterval * 1000).toFixed(1) + ';' + //onmessage callback\n\t\t            'self.onmessage = function(msg){' + '\\ttimeoutTime = parseInt(msg.data);' + '};' + //the tick function which posts a message\n\t\t            //and schedules a new tick\n\t\t            'function tick(){' + '\\tsetTimeout(tick, timeoutTime);' + '\\tself.postMessage(\\'tick\\');' + '}' + //call tick initially\n\t\t            'tick();']);\n\t\t        var blobUrl = URL.createObjectURL(blob);\n\t\t        var worker = new Worker(blobUrl);\n\t\t        worker.addEventListener('message', function () {\n\t\t            // tick the clock\n\t\t            this.emit('tick');\n\t\t        }.bind(this));\n\t\t        //lag compensation\n\t\t        worker.addEventListener('message', function () {\n\t\t            var now = this.now();\n\t\t            if (this.isNumber(this._lastUpdate)) {\n\t\t                var diff = now - this._lastUpdate;\n\t\t                this._computedUpdateInterval = Math.max(diff, this._computedUpdateInterval * 0.97);\n\t\t            }\n\t\t            this._lastUpdate = now;\n\t\t        }.bind(this));\n\t\t        return worker;\n\t\t    };\n\t\t    /**\n\t\t\t *  Generate a looped buffer at some constant value.\n\t\t\t *  @param  {Number}  val\n\t\t\t *  @return  {BufferSourceNode}\n\t\t\t */\n\t\t    Tone.Context.prototype.getConstant = function (val) {\n\t\t        if (this._constants[val]) {\n\t\t            return this._constants[val];\n\t\t        } else {\n\t\t            var buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t\t            var arr = buffer.getChannelData(0);\n\t\t            for (var i = 0; i < arr.length; i++) {\n\t\t                arr[i] = val;\n\t\t            }\n\t\t            var constant = this._context.createBufferSource();\n\t\t            constant.channelCount = 1;\n\t\t            constant.channelCountMode = 'explicit';\n\t\t            constant.buffer = buffer;\n\t\t            constant.loop = true;\n\t\t            constant.start(0);\n\t\t            this._constants[val] = constant;\n\t\t            return constant;\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  This is the time that the clock is falling behind\n\t\t\t *  the scheduled update interval. The Context automatically\n\t\t\t *  adjusts for the lag and schedules further in advance.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Context\n\t\t\t *  @name lag\n\t\t\t *  @static\n\t\t\t *  @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Context.prototype, 'lag', {\n\t\t        get: function () {\n\t\t            var diff = this._computedUpdateInterval - this._updateInterval;\n\t\t            diff = Math.max(diff, 0);\n\t\t            return diff;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The amount of time in advance that events are scheduled.\n\t\t\t *  The lookAhead will adjust slightly in response to the \n\t\t\t *  measured update time to try to avoid clicks.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Context\n\t\t\t *  @name lookAhead\n\t\t\t *  @static\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Context.prototype, 'lookAhead', {\n\t\t        get: function () {\n\t\t            return this._lookAhead;\n\t\t        },\n\t\t        set: function (lA) {\n\t\t            this._lookAhead = lA;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  How often the Web Worker callback is invoked.\n\t\t\t *  This number corresponds to how responsive the scheduling\n\t\t\t *  can be. Context.updateInterval + Context.lookAhead gives you the\n\t\t\t *  total latency between scheduling an event and hearing it.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Context\n\t\t\t *  @name updateInterval\n\t\t\t *  @static\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Context.prototype, 'updateInterval', {\n\t\t        get: function () {\n\t\t            return this._updateInterval;\n\t\t        },\n\t\t        set: function (interval) {\n\t\t            this._updateInterval = Math.max(interval, Tone.prototype.blockTime);\n\t\t            this._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The type of playback, which affects tradeoffs between audio \n\t\t\t *  output latency and responsiveness. \n\t\t\t *  \n\t\t\t *  In addition to setting the value in seconds, the latencyHint also\n\t\t\t *  accepts the strings \"interactive\" (prioritizes low latency), \n\t\t\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t\t\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often). \n\t\t\t *  @type {String|Seconds}\n\t\t\t *  @memberOf Tone.Context#\n\t\t\t *  @name latencyHint\n\t\t\t *  @static\n\t\t\t *  @example\n\t\t\t * //set the lookAhead to 0.3 seconds\n\t\t\t * Tone.context.latencyHint = 0.3;\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Context.prototype, 'latencyHint', {\n\t\t        get: function () {\n\t\t            return this._latencyHint;\n\t\t        },\n\t\t        set: function (hint) {\n\t\t            var lookAhead = hint;\n\t\t            this._latencyHint = hint;\n\t\t            if (this.isString(hint)) {\n\t\t                switch (hint) {\n\t\t                case 'interactive':\n\t\t                    lookAhead = 0.1;\n\t\t                    this._context.latencyHint = hint;\n\t\t                    break;\n\t\t                case 'playback':\n\t\t                    lookAhead = 0.8;\n\t\t                    this._context.latencyHint = hint;\n\t\t                    break;\n\t\t                case 'balanced':\n\t\t                    lookAhead = 0.25;\n\t\t                    this._context.latencyHint = hint;\n\t\t                    break;\n\t\t                case 'fastest':\n\t\t                    lookAhead = 0.01;\n\t\t                    break;\n\t\t                }\n\t\t            }\n\t\t            this.lookAhead = lookAhead;\n\t\t            this.updateInterval = lookAhead / 3;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Shim all connect/disconnect and some deprecated methods which are still in\n\t\t\t *  some older implementations.\n\t\t\t *  @private\n\t\t\t */\n\t\t    function shimConnect() {\n\t\t        var nativeConnect = AudioNode.prototype.connect;\n\t\t        var nativeDisconnect = AudioNode.prototype.disconnect;\n\t\t        //replace the old connect method\n\t\t        function toneConnect(B, outNum, inNum) {\n\t\t            if (B.input) {\n\t\t                if (Array.isArray(B.input)) {\n\t\t                    if (Tone.prototype.isUndef(inNum)) {\n\t\t                        inNum = 0;\n\t\t                    }\n\t\t                    this.connect(B.input[inNum]);\n\t\t                } else {\n\t\t                    this.connect(B.input, outNum, inNum);\n\t\t                }\n\t\t            } else {\n\t\t                try {\n\t\t                    if (B instanceof AudioNode) {\n\t\t                        nativeConnect.call(this, B, outNum, inNum);\n\t\t                    } else {\n\t\t                        nativeConnect.call(this, B, outNum);\n\t\t                    }\n\t\t                } catch (e) {\n\t\t                    throw new Error('error connecting to node: ' + B + '\\n' + e);\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t        //replace the old disconnect method\n\t\t        function toneDisconnect(B, outNum, inNum) {\n\t\t            if (B && B.input && Array.isArray(B.input)) {\n\t\t                if (Tone.prototype.isUndef(inNum)) {\n\t\t                    inNum = 0;\n\t\t                }\n\t\t                this.disconnect(B.input[inNum], outNum, inNum);\n\t\t            } else if (B && B.input) {\n\t\t                this.disconnect(B.input, outNum, inNum);\n\t\t            } else {\n\t\t                try {\n\t\t                    nativeDisconnect.apply(this, arguments);\n\t\t                } catch (e) {\n\t\t                    throw new Error('error disconnecting node: ' + B + '\\n' + e);\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t        if (AudioNode.prototype.connect !== toneConnect) {\n\t\t            AudioNode.prototype.connect = toneConnect;\n\t\t            AudioNode.prototype.disconnect = toneDisconnect;\n\t\t        }\n\t\t    }\n\t\t    // set the audio context initially\n\t\t    if (Tone.supported) {\n\t\t        shimConnect();\n\t\t        Tone.context = new Tone.Context();\n\t\t    } else {\n\t\t        console.warn('This browser does not support Tone.js');\n\t\t    }\n\t\t    return Tone.Context;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tTYPES\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t * Units which a value can take on.\n\t\t\t * @enum {String}\n\t\t\t */\n\t\t    Tone.Type = {\n\t\t        /** \n\t\t\t\t *  Default units\n\t\t\t\t *  @typedef {Default}\n\t\t\t\t */\n\t\t        Default: 'number',\n\t\t        /**\n\t\t\t\t *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n\t\t\t\t *\n\t\t\t\t *  <ul>\n\t\t\t\t *  <li>Numbers, which will be taken literally as the time (in seconds).</li>\n\t\t\t\t *  <li>Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.</li>\n\t\t\t\t *  <li>TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times \n\t\t\t\t *  in the form BARS:QUARTERS:SIXTEENTHS.</li>\n\t\t\t\t *  <li>Frequency, (\"8hz\") is converted to the length of the cycle in seconds.</li>\n\t\t\t\t *  <li>Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as \n\t\t\t\t *  \"the current time plus whatever expression follows\".</li>\n\t\t\t\t *  <li>Expressions, (\"3:0 + 2 - (1m / 7)\") any of the above can also be combined \n\t\t\t\t *  into a mathematical expression which will be evaluated to compute the desired time.</li>\n\t\t\t\t *  <li>No Argument, for methods which accept time, no argument will be interpreted as \n\t\t\t\t *  \"now\" (i.e. the currentTime).</li>\n\t\t\t\t *  </ul>\n\t\t\t\t *  \n\t\t\t\t *  @typedef {Time}\n\t\t\t\t */\n\t\t        Time: 'time',\n\t\t        /**\n\t\t\t\t *  Frequency can be described similar to time, except ultimately the\n\t\t\t\t *  values are converted to frequency instead of seconds. A number\n\t\t\t\t *  is taken literally as the value in hertz. Additionally any of the \n\t\t\t\t *  Time encodings can be used. Note names in the form\n\t\t\t\t *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n\t\t\t\t *  frequency value. \n\t\t\t\t *  @typedef {Frequency}\n\t\t\t\t */\n\t\t        Frequency: 'frequency',\n\t\t        /**\n\t\t\t\t *  TransportTime describes a position along the Transport's timeline. It is\n\t\t\t\t *  similar to Time in that it uses all the same encodings, but TransportTime specifically\n\t\t\t\t *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable. \n\t\t\t\t *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\n\t\t\t\t *  @typedef {TransportTime}\n\t\t\t\t */\n\t\t        TransportTime: 'transportTime',\n\t\t        /** \n\t\t\t\t *  Ticks are the basic subunit of the Transport. They are\n\t\t\t\t *  the smallest unit of time that the Transport supports.\n\t\t\t\t *  @typedef {Ticks}\n\t\t\t\t */\n\t\t        Ticks: 'ticks',\n\t\t        /** \n\t\t\t\t *  Normal values are within the range [0, 1].\n\t\t\t\t *  @typedef {NormalRange}\n\t\t\t\t */\n\t\t        NormalRange: 'normalRange',\n\t\t        /** \n\t\t\t\t *  AudioRange values are between [-1, 1].\n\t\t\t\t *  @typedef {AudioRange}\n\t\t\t\t */\n\t\t        AudioRange: 'audioRange',\n\t\t        /** \n\t\t\t\t *  Decibels are a logarithmic unit of measurement which is useful for volume\n\t\t\t\t *  because of the logarithmic way that we perceive loudness. 0 decibels \n\t\t\t\t *  means no change in volume. -10db is approximately half as loud and 10db \n\t\t\t\t *  is twice is loud. \n\t\t\t\t *  @typedef {Decibels}\n\t\t\t\t */\n\t\t        Decibels: 'db',\n\t\t        /** \n\t\t\t\t *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\n\t\t\t\t *  @typedef {Interval}\n\t\t\t\t */\n\t\t        Interval: 'interval',\n\t\t        /** \n\t\t\t\t *  Beats per minute. \n\t\t\t\t *  @typedef {BPM}\n\t\t\t\t */\n\t\t        BPM: 'bpm',\n\t\t        /** \n\t\t\t\t *  The value must be greater than or equal to 0.\n\t\t\t\t *  @typedef {Positive}\n\t\t\t\t */\n\t\t        Positive: 'positive',\n\t\t        /** \n\t\t\t\t *  A cent is a hundredth of a semitone. \n\t\t\t\t *  @typedef {Cents}\n\t\t\t\t */\n\t\t        Cents: 'cents',\n\t\t        /** \n\t\t\t\t *  Angle between 0 and 360. \n\t\t\t\t *  @typedef {Degrees}\n\t\t\t\t */\n\t\t        Degrees: 'degrees',\n\t\t        /** \n\t\t\t\t *  A number representing a midi note.\n\t\t\t\t *  @typedef {MIDI}\n\t\t\t\t */\n\t\t        MIDI: 'midi',\n\t\t        /** \n\t\t\t\t *  A colon-separated representation of time in the form of\n\t\t\t\t *  Bars:Beats:Sixteenths. \n\t\t\t\t *  @typedef {BarsBeatsSixteenths}\n\t\t\t\t */\n\t\t        BarsBeatsSixteenths: 'barsBeatsSixteenths',\n\t\t        /** \n\t\t\t\t *  Sampling is the reduction of a continuous signal to a discrete signal.\n\t\t\t\t *  Audio is typically sampled 44100 times per second. \n\t\t\t\t *  @typedef {Samples}\n\t\t\t\t */\n\t\t        Samples: 'samples',\n\t\t        /** \n\t\t\t\t *  Hertz are a frequency representation defined as one cycle per second.\n\t\t\t\t *  @typedef {Hertz}\n\t\t\t\t */\n\t\t        Hertz: 'hertz',\n\t\t        /** \n\t\t\t\t *  A frequency represented by a letter name, \n\t\t\t\t *  accidental and octave. This system is known as\n\t\t\t\t *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).\n\t\t\t\t *  @typedef {Note}\n\t\t\t\t */\n\t\t        Note: 'note',\n\t\t        /** \n\t\t\t\t *  One millisecond is a thousandth of a second. \n\t\t\t\t *  @typedef {Milliseconds}\n\t\t\t\t */\n\t\t        Milliseconds: 'milliseconds',\n\t\t        /** \n\t\t\t\t *  Seconds are the time unit of the AudioContext. In the end, \n\t\t\t\t *  all values need to be evaluated to seconds. \n\t\t\t\t *  @typedef {Seconds}\n\t\t\t\t */\n\t\t        Seconds: 'seconds',\n\t\t        /** \n\t\t\t\t *  A string representing a duration relative to a measure. \n\t\t\t\t *  <ul>\n\t\t\t\t *  \t<li>\"4n\" = quarter note</li>\n\t\t\t\t *   \t<li>\"2m\" = two measures</li>\n\t\t\t\t *    \t<li>\"8t\" = eighth-note triplet</li>\n\t\t\t\t *  </ul>\n\t\t\t\t *  @typedef {Notation}\n\t\t\t\t */\n\t\t        Notation: 'notation'\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    // AUGMENT TONE's PROTOTYPE\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Convert Time into seconds.\n\t\t\t *  \n\t\t\t *  Unlike the method which it overrides, this takes into account \n\t\t\t *  transporttime and musical notation.\n\t\t\t *\n\t\t\t *  Time : 1.40\n\t\t\t *  Notation: 4n|1m|2t\n\t\t\t *  Now Relative: +3n\n\t\t\t *  Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)\n\t\t\t *\n\t\t\t *  @param  {Time} time \n\t\t\t *  @return {Seconds} \n\t\t\t */\n\t\t    Tone.prototype.toSeconds = function (time) {\n\t\t        if (this.isNumber(time)) {\n\t\t            return time;\n\t\t        } else if (this.isUndef(time)) {\n\t\t            return this.now();\n\t\t        } else if (this.isString(time)) {\n\t\t            return new Tone.Time(time).toSeconds();\n\t\t        } else if (time instanceof Tone.TimeBase) {\n\t\t            return time.toSeconds();\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Convert a frequency representation into a number.\n\t\t\t *  @param  {Frequency} freq \n\t\t\t *  @return {Hertz}      the frequency in hertz\n\t\t\t */\n\t\t    Tone.prototype.toFrequency = function (freq) {\n\t\t        if (this.isNumber(freq)) {\n\t\t            return freq;\n\t\t        } else if (this.isString(freq) || this.isUndef(freq)) {\n\t\t            return new Tone.Frequency(freq).valueOf();\n\t\t        } else if (freq instanceof Tone.TimeBase) {\n\t\t            return freq.toFrequency();\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Convert a time representation into ticks.\n\t\t\t *  @param  {Time} time\n\t\t\t *  @return {Ticks}  the time in ticks\n\t\t\t */\n\t\t    Tone.prototype.toTicks = function (time) {\n\t\t        if (this.isNumber(time) || this.isString(time)) {\n\t\t            return new Tone.TransportTime(time).toTicks();\n\t\t        } else if (this.isUndef(time)) {\n\t\t            return Tone.Transport.ticks;\n\t\t        } else if (time instanceof Tone.TimeBase) {\n\t\t            return time.toTicks();\n\t\t        }\n\t\t    };\n\t\t    return Tone;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.Param wraps the native Web Audio's AudioParam to provide\n\t\t\t *         additional unit conversion functionality. It also\n\t\t\t *         serves as a base-class for classes which have a single,\n\t\t\t *         automatable parameter. \n\t\t\t *  @extends {Tone}\n\t\t\t *  @param  {AudioParam}  param  The parameter to wrap.\n\t\t\t *  @param  {Tone.Type} units The units of the audio param.\n\t\t\t *  @param  {Boolean} convert If the param should be converted.\n\t\t\t */\n\t\t    Tone.Param = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'param',\n\t\t            'units',\n\t\t            'convert'\n\t\t        ], Tone.Param.defaults);\n\t\t        /**\n\t\t\t\t *  The native parameter to control\n\t\t\t\t *  @type  {AudioParam}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._param = this.input = options.param;\n\t\t        /**\n\t\t\t\t *  The units of the parameter\n\t\t\t\t *  @type {Tone.Type}\n\t\t\t\t */\n\t\t        this.units = options.units;\n\t\t        /**\n\t\t\t\t *  If the value should be converted or not\n\t\t\t\t *  @type {Boolean}\n\t\t\t\t */\n\t\t        this.convert = options.convert;\n\t\t        /**\n\t\t\t\t *  True if the signal value is being overridden by \n\t\t\t\t *  a connected signal.\n\t\t\t\t *  @readOnly\n\t\t\t\t *  @type  {boolean}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.overridden = false;\n\t\t        /**\n\t\t\t\t *  If there is an LFO, this is where it is held.\n\t\t\t\t *  @type  {Tone.LFO}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lfo = null;\n\t\t        if (this.isObject(options.lfo)) {\n\t\t            this.value = options.lfo;\n\t\t        } else if (!this.isUndef(options.value)) {\n\t\t            this.value = options.value;\n\t\t        }\n\t\t    };\n\t\t    Tone.extend(Tone.Param);\n\t\t    /**\n\t\t\t *  Defaults\n\t\t\t *  @type  {Object}\n\t\t\t *  @const\n\t\t\t */\n\t\t    Tone.Param.defaults = {\n\t\t        'units': Tone.Type.Default,\n\t\t        'convert': true,\n\t\t        'param': undefined\n\t\t    };\n\t\t    /**\n\t\t\t * The current value of the parameter. \n\t\t\t * @memberOf Tone.Param#\n\t\t\t * @type {Number}\n\t\t\t * @name value\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Param.prototype, 'value', {\n\t\t        get: function () {\n\t\t            return this._toUnits(this._param.value);\n\t\t        },\n\t\t        set: function (value) {\n\t\t            if (this.isObject(value)) {\n\t\t                //throw an error if the LFO needs to be included\n\t\t                if (this.isUndef(Tone.LFO)) {\n\t\t                    throw new Error('Include \\'Tone.LFO\\' to use an LFO as a Param value.');\n\t\t                }\n\t\t                //remove the old one\n\t\t                if (this._lfo) {\n\t\t                    this._lfo.dispose();\n\t\t                }\n\t\t                this._lfo = new Tone.LFO(value).start();\n\t\t                this._lfo.connect(this.input);\n\t\t            } else {\n\t\t                var convertedVal = this._fromUnits(value);\n\t\t                this._param.cancelScheduledValues(0);\n\t\t                this._param.value = convertedVal;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Convert the given value from the type specified by Tone.Param.units\n\t\t\t *  into the destination value (such as Gain or Frequency).\n\t\t\t *  @private\n\t\t\t *  @param  {*} val the value to convert\n\t\t\t *  @return {number}     the number which the value should be set to\n\t\t\t */\n\t\t    Tone.Param.prototype._fromUnits = function (val) {\n\t\t        if (this.convert || this.isUndef(this.convert)) {\n\t\t            switch (this.units) {\n\t\t            case Tone.Type.Time:\n\t\t                return this.toSeconds(val);\n\t\t            case Tone.Type.Frequency:\n\t\t                return this.toFrequency(val);\n\t\t            case Tone.Type.Decibels:\n\t\t                return this.dbToGain(val);\n\t\t            case Tone.Type.NormalRange:\n\t\t                return Math.min(Math.max(val, 0), 1);\n\t\t            case Tone.Type.AudioRange:\n\t\t                return Math.min(Math.max(val, -1), 1);\n\t\t            case Tone.Type.Positive:\n\t\t                return Math.max(val, 0);\n\t\t            default:\n\t\t                return val;\n\t\t            }\n\t\t        } else {\n\t\t            return val;\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t * Convert the parameters value into the units specified by Tone.Param.units.\n\t\t\t * @private\n\t\t\t * @param  {number} val the value to convert\n\t\t\t * @return {number}\n\t\t\t */\n\t\t    Tone.Param.prototype._toUnits = function (val) {\n\t\t        if (this.convert || this.isUndef(this.convert)) {\n\t\t            switch (this.units) {\n\t\t            case Tone.Type.Decibels:\n\t\t                return this.gainToDb(val);\n\t\t            default:\n\t\t                return val;\n\t\t            }\n\t\t        } else {\n\t\t            return val;\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  the minimum output value\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Param.prototype._minOutput = 0.00001;\n\t\t    /**\n\t\t\t *  Schedules a parameter value change at the given time.\n\t\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t\t *  @param {Time}  time The time when the change should occur.\n\t\t\t *  @returns {Tone.Param} this\n\t\t\t *  @example\n\t\t\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t\t */\n\t\t    Tone.Param.prototype.setValueAtTime = function (value, time) {\n\t\t        value = this._fromUnits(value);\n\t\t        time = this.toSeconds(time);\n\t\t        if (time <= this.now() + this.blockTime) {\n\t\t            this._param.value = value;\n\t\t        } else {\n\t\t            this._param.setValueAtTime(value, time);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Creates a schedule point with the current value at the current time.\n\t\t\t *  This is useful for creating an automation anchor point in order to \n\t\t\t *  schedule changes from the current value. \n\t\t\t *\n\t\t\t *  @param {number=} now (Optionally) pass the now value in. \n\t\t\t *  @returns {Tone.Param} this\n\t\t\t */\n\t\t    Tone.Param.prototype.setRampPoint = function (now) {\n\t\t        now = this.defaultArg(now, this.now());\n\t\t        var currentVal = this._param.value;\n\t\t        // exponentialRampToValueAt cannot ever ramp from or to 0\n\t\t        // More info: https://bugzilla.mozilla.org/show_bug.cgi?id=1125600#c2\n\t\t        if (currentVal === 0) {\n\t\t            currentVal = this._minOutput;\n\t\t        }\n\t\t        this._param.setValueAtTime(currentVal, now);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Schedules a linear continuous change in parameter value from the \n\t\t\t *  previous scheduled parameter value to the given value.\n\t\t\t *  \n\t\t\t *  @param  {number} value   \n\t\t\t *  @param  {Time} endTime \n\t\t\t *  @returns {Tone.Param} this\n\t\t\t */\n\t\t    Tone.Param.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t\t        value = this._fromUnits(value);\n\t\t        this._param.linearRampToValueAtTime(value, this.toSeconds(endTime));\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t\t *  the previous scheduled parameter value to the given value.\n\t\t\t *  \n\t\t\t *  @param  {number} value   \n\t\t\t *  @param  {Time} endTime \n\t\t\t *  @returns {Tone.Param} this\n\t\t\t */\n\t\t    Tone.Param.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t\t        value = this._fromUnits(value);\n\t\t        value = Math.max(this._minOutput, value);\n\t\t        this._param.exponentialRampToValueAtTime(value, this.toSeconds(endTime));\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t\t *  the current time and current value to the given value over the \n\t\t\t *  duration of the rampTime.\n\t\t\t *  \n\t\t\t *  @param  {number} value   The value to ramp to.\n\t\t\t *  @param  {Time} rampTime the time that it takes the \n\t\t\t *                               value to ramp from it's current value\n\t\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t\t *  @returns {Tone.Param} this\n\t\t\t *  @example\n\t\t\t * //exponentially ramp to the value 2 over 4 seconds. \n\t\t\t * signal.exponentialRampToValue(2, 4);\n\t\t\t */\n\t\t    Tone.Param.prototype.exponentialRampToValue = function (value, rampTime, startTime) {\n\t\t        startTime = this.toSeconds(startTime);\n\t\t        this.setRampPoint(startTime);\n\t\t        this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Schedules an linear continuous change in parameter value from \n\t\t\t *  the current time and current value to the given value over the \n\t\t\t *  duration of the rampTime.\n\t\t\t *  \n\t\t\t *  @param  {number} value   The value to ramp to.\n\t\t\t *  @param  {Time} rampTime the time that it takes the \n\t\t\t *                               value to ramp from it's current value\n\t\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t\t *  @returns {Tone.Param} this\n\t\t\t *  @example\n\t\t\t * //linearly ramp to the value 4 over 3 seconds. \n\t\t\t * signal.linearRampToValue(4, 3);\n\t\t\t */\n\t\t    Tone.Param.prototype.linearRampToValue = function (value, rampTime, startTime) {\n\t\t        startTime = this.toSeconds(startTime);\n\t\t        this.setRampPoint(startTime);\n\t\t        this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Start exponentially approaching the target value at the given time with\n\t\t\t *  a rate having the given time constant.\n\t\t\t *  @param {number} value        \n\t\t\t *  @param {Time} startTime    \n\t\t\t *  @param {number} timeConstant \n\t\t\t *  @returns {Tone.Param} this \n\t\t\t */\n\t\t    Tone.Param.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t\t        value = this._fromUnits(value);\n\t\t        // The value will never be able to approach without timeConstant > 0.\n\t\t        // http://www.w3.org/TR/webaudio/#dfn-setTargetAtTime, where the equation\n\t\t        // is described. 0 results in a division by 0.\n\t\t        value = Math.max(this._minOutput, value);\n\t\t        timeConstant = Math.max(this._minOutput, timeConstant);\n\t\t        this._param.setTargetAtTime(value, this.toSeconds(startTime), timeConstant);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Sets an array of arbitrary parameter values starting at the given time\n\t\t\t *  for the given duration.\n\t\t\t *  \t\n\t\t\t *  @param {Array} values    \n\t\t\t *  @param {Time} startTime \n\t\t\t *  @param {Time} duration  \n\t\t\t *  @returns {Tone.Param} this\n\t\t\t */\n\t\t    Tone.Param.prototype.setValueCurveAtTime = function (values, startTime, duration) {\n\t\t        for (var i = 0; i < values.length; i++) {\n\t\t            values[i] = this._fromUnits(values[i]);\n\t\t        }\n\t\t        this._param.setValueCurveAtTime(values, this.toSeconds(startTime), this.toSeconds(duration));\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Cancels all scheduled parameter changes with times greater than or \n\t\t\t *  equal to startTime.\n\t\t\t *  \n\t\t\t *  @param  {Time} startTime\n\t\t\t *  @returns {Tone.Param} this\n\t\t\t */\n\t\t    Tone.Param.prototype.cancelScheduledValues = function (startTime) {\n\t\t        this._param.cancelScheduledValues(this.toSeconds(startTime));\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Ramps to the given value over the duration of the rampTime. \n\t\t\t *  Automatically selects the best ramp type (exponential or linear)\n\t\t\t *  depending on the `units` of the signal\n\t\t\t *  \n\t\t\t *  @param  {number} value   \n\t\t\t *  @param  {Time} rampTime \tThe time that it takes the \n\t\t\t *                              value to ramp from it's current value\n\t\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t\t *  @returns {Tone.Param} this\n\t\t\t *  @example\n\t\t\t * //ramp to the value either linearly or exponentially \n\t\t\t * //depending on the \"units\" value of the signal\n\t\t\t * signal.rampTo(0, 10);\n\t\t\t *  @example\n\t\t\t * //schedule it to ramp starting at a specific time\n\t\t\t * signal.rampTo(0, 10, 5)\n\t\t\t */\n\t\t    Tone.Param.prototype.rampTo = function (value, rampTime, startTime) {\n\t\t        rampTime = this.defaultArg(rampTime, 0);\n\t\t        if (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM || this.units === Tone.Type.Decibels) {\n\t\t            this.exponentialRampToValue(value, rampTime, startTime);\n\t\t        } else {\n\t\t            this.linearRampToValue(value, rampTime, startTime);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  The LFO created by the signal instance. If none\n\t\t\t *  was created, this is null.\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @readOnly\n\t\t\t *  @memberOf Tone.Param#\n\t\t\t *  @name lfo\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Param.prototype, 'lfo', {\n\t\t        get: function () {\n\t\t            return this._lfo;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up\n\t\t\t *  @returns {Tone.Param} this\n\t\t\t */\n\t\t    Tone.Param.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._param = null;\n\t\t        if (this._lfo) {\n\t\t            this._lfo.dispose();\n\t\t            this._lfo = null;\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Param;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  createGain shim\n\t\t\t *  @private\n\t\t\t */\n\t\t    if (window.GainNode && !AudioContext.prototype.createGain) {\n\t\t        AudioContext.prototype.createGain = AudioContext.prototype.createGainNode;\n\t\t    }\n\t\t    /**\n\t\t\t *  @class A thin wrapper around the Native Web Audio GainNode.\n\t\t\t *         The GainNode is a basic building block of the Web Audio\n\t\t\t *         API and is useful for routing audio and adjusting gains. \n\t\t\t *  @extends {Tone}\n\t\t\t *  @param  {Number=}  gain  The initial gain of the GainNode\n\t\t\t *  @param {Tone.Type=} units The units of the gain parameter. \n\t\t\t */\n\t\t    Tone.Gain = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'gain',\n\t\t            'units'\n\t\t        ], Tone.Gain.defaults);\n\t\t        /**\n\t\t\t\t *  The GainNode\n\t\t\t\t *  @type  {GainNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.input = this.output = this._gainNode = this.context.createGain();\n\t\t        /**\n\t\t\t\t *  The gain parameter of the gain node.\n\t\t\t\t *  @type {Tone.Param}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.gain = new Tone.Param({\n\t\t            'param': this._gainNode.gain,\n\t\t            'units': options.units,\n\t\t            'value': options.gain,\n\t\t            'convert': options.convert\n\t\t        });\n\t\t        this._readOnly('gain');\n\t\t    };\n\t\t    Tone.extend(Tone.Gain);\n\t\t    /**\n\t\t\t *  The defaults\n\t\t\t *  @const\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t\t    Tone.Gain.defaults = {\n\t\t        'gain': 1,\n\t\t        'convert': true\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @return  {Tone.Gain}  this\n\t\t\t */\n\t\t    Tone.Gain.prototype.dispose = function () {\n\t\t        Tone.Param.prototype.dispose.call(this);\n\t\t        this._gainNode.disconnect();\n\t\t        this._gainNode = null;\n\t\t        this._writable('gain');\n\t\t        this.gain.dispose();\n\t\t        this.gain = null;\n\t\t    };\n\t\t    //STATIC///////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Create input and outputs for this object.\n\t\t\t *  @param  {Number}  input   The number of inputs\n\t\t\t *  @param  {Number=}  outputs  The number of outputs\n\t\t\t *  @return  {Tone}  this\n\t\t\t *  @internal\n\t\t\t */\n\t\t    Tone.prototype.createInsOuts = function (inputs, outputs) {\n\t\t        if (inputs === 1) {\n\t\t            this.input = new Tone.Gain();\n\t\t        } else if (inputs > 1) {\n\t\t            this.input = new Array(inputs);\n\t\t        }\n\t\t        if (outputs === 1) {\n\t\t            this.output = new Tone.Gain();\n\t\t        } else if (outputs > 1) {\n\t\t            this.output = new Array(inputs);\n\t\t        }\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    return Tone.Gain;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.\n\t\t\t *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n\t\t\t *          has all of the methods available to native Web Audio \n\t\t\t *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n\t\t\t *          as well as additional conveniences. Read more about working with signals \n\t\t\t *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Param}\n\t\t\t *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam\n\t\t\t *                                     is passed in, that parameter will be wrapped\n\t\t\t *                                     and controlled by the Signal. \n\t\t\t *  @param {string} [units=Number] unit The units the signal is in. \n\t\t\t *  @example\n\t\t\t * var signal = new Tone.Signal(10);\n\t\t\t */\n\t\t    Tone.Signal = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'value',\n\t\t            'units'\n\t\t        ], Tone.Signal.defaults);\n\t\t        /**\n\t\t\t\t * The node where the constant signal value is scaled.\n\t\t\t\t * @type {GainNode}\n\t\t\t\t * @private\n\t\t\t\t */\n\t\t        this.output = this._gain = this.context.createGain();\n\t\t        options.param = this._gain.gain;\n\t\t        Tone.Param.call(this, options);\n\t\t        /**\n\t\t\t\t * The node where the value is set.\n\t\t\t\t * @type {Tone.Param}\n\t\t\t\t * @private\n\t\t\t\t */\n\t\t        this.input = this._param = this._gain.gain;\n\t\t        //connect the const output to the node output\n\t\t        this.context.getConstant(1).chain(this._gain);\n\t\t    };\n\t\t    Tone.extend(Tone.Signal, Tone.Param);\n\t\t    /**\n\t\t\t *  The default values\n\t\t\t *  @type  {Object}\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t */\n\t\t    Tone.Signal.defaults = {\n\t\t        'value': 0,\n\t\t        'units': Tone.Type.Default,\n\t\t        'convert': true\n\t\t    };\n\t\t    /**\n\t\t\t *  When signals connect to other signals or AudioParams, \n\t\t\t *  they take over the output value of that signal or AudioParam. \n\t\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t\t *\n\t\t\t *  @override\n\t\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t\t *  @returns {Tone.SignalBase} this\n\t\t\t *  @method\n\t\t\t */\n\t\t    Tone.Signal.prototype.connect = Tone.SignalBase.prototype.connect;\n\t\t    /**\n\t\t\t *  dispose and disconnect\n\t\t\t *  @returns {Tone.Signal} this\n\t\t\t */\n\t\t    Tone.Signal.prototype.dispose = function () {\n\t\t        Tone.Param.prototype.dispose.call(this);\n\t\t        this._param = null;\n\t\t        this._gain.disconnect();\n\t\t        this._gain = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Signal;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class A Timeline class for scheduling and maintaining state\n\t\t\t *         along a timeline. All events must have a \"time\" property. \n\t\t\t *         Internally, events are stored in time order for fast \n\t\t\t *         retrieval.\n\t\t\t *  @extends {Tone}\n\t\t\t *  @param {Positive} [memory=Infinity] The number of previous events that are retained.\n\t\t\t */\n\t\t    Tone.Timeline = function () {\n\t\t        var options = this.optionsObject(arguments, ['memory'], Tone.Timeline.defaults);\n\t\t        /**\n\t\t\t\t *  The array of scheduled timeline events\n\t\t\t\t *  @type  {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._timeline = [];\n\t\t        /**\n\t\t\t\t *  An array of items to remove from the list. \n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._toRemove = [];\n\t\t        /**\n\t\t\t\t *  Flag if the tieline is mid iteration\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Boolean}\n\t\t\t\t */\n\t\t        this._iterating = false;\n\t\t        /**\n\t\t\t\t *  The memory of the timeline, i.e.\n\t\t\t\t *  how many events in the past it will retain\n\t\t\t\t *  @type {Positive}\n\t\t\t\t */\n\t\t        this.memory = options.memory;\n\t\t    };\n\t\t    Tone.extend(Tone.Timeline);\n\t\t    /**\n\t\t\t *  the default parameters\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t */\n\t\t    Tone.Timeline.defaults = { 'memory': Infinity };\n\t\t    /**\n\t\t\t *  The number of items in the timeline.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Timeline#\n\t\t\t *  @name length\n\t\t\t *  @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Timeline.prototype, 'length', {\n\t\t        get: function () {\n\t\t            return this._timeline.length;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t\t\t *  @param  {Object}  event  The event object to insert into the \n\t\t\t *                           timeline. \n\t\t\t *  @returns {Tone.Timeline} this\n\t\t\t */\n\t\t    Tone.Timeline.prototype.add = function (event) {\n\t\t        //the event needs to have a time attribute\n\t\t        if (this.isUndef(event.time)) {\n\t\t            throw new Error('Tone.Timeline: events must have a time attribute');\n\t\t        }\n\t\t        if (this._timeline.length) {\n\t\t            var index = this._search(event.time);\n\t\t            this._timeline.splice(index + 1, 0, event);\n\t\t        } else {\n\t\t            this._timeline.push(event);\n\t\t        }\n\t\t        //if the length is more than the memory, remove the previous ones\n\t\t        if (this.length > this.memory) {\n\t\t            var diff = this.length - this.memory;\n\t\t            this._timeline.splice(0, diff);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Remove an event from the timeline.\n\t\t\t *  @param  {Object}  event  The event object to remove from the list.\n\t\t\t *  @returns {Tone.Timeline} this\n\t\t\t */\n\t\t    Tone.Timeline.prototype.remove = function (event) {\n\t\t        if (this._iterating) {\n\t\t            this._toRemove.push(event);\n\t\t        } else {\n\t\t            var index = this._timeline.indexOf(event);\n\t\t            if (index !== -1) {\n\t\t                this._timeline.splice(index, 1);\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Get the nearest event whose time is less than or equal to the given time.\n\t\t\t *  @param  {Number}  time  The time to query.\n\t\t\t *  @returns {Object} The event object set after that time.\n\t\t\t */\n\t\t    Tone.Timeline.prototype.get = function (time) {\n\t\t        var index = this._search(time);\n\t\t        if (index !== -1) {\n\t\t            return this._timeline[index];\n\t\t        } else {\n\t\t            return null;\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the first event in the timeline without removing it\n\t\t\t *  @returns {Object} The first event object\n\t\t\t */\n\t\t    Tone.Timeline.prototype.peek = function () {\n\t\t        return this._timeline[0];\n\t\t    };\n\t\t    /**\n\t\t\t *  Return the first event in the timeline and remove it\n\t\t\t *  @returns {Object} The first event object\n\t\t\t */\n\t\t    Tone.Timeline.prototype.shift = function () {\n\t\t        return this._timeline.shift();\n\t\t    };\n\t\t    /**\n\t\t\t *  Get the event which is scheduled after the given time.\n\t\t\t *  @param  {Number}  time  The time to query.\n\t\t\t *  @returns {Object} The event object after the given time\n\t\t\t */\n\t\t    Tone.Timeline.prototype.getAfter = function (time) {\n\t\t        var index = this._search(time);\n\t\t        if (index + 1 < this._timeline.length) {\n\t\t            return this._timeline[index + 1];\n\t\t        } else {\n\t\t            return null;\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Get the event before the event at the given time.\n\t\t\t *  @param  {Number}  time  The time to query.\n\t\t\t *  @returns {Object} The event object before the given time\n\t\t\t */\n\t\t    Tone.Timeline.prototype.getBefore = function (time) {\n\t\t        var len = this._timeline.length;\n\t\t        //if it's after the last item, return the last item\n\t\t        if (len > 0 && this._timeline[len - 1].time < time) {\n\t\t            return this._timeline[len - 1];\n\t\t        }\n\t\t        var index = this._search(time);\n\t\t        if (index - 1 >= 0) {\n\t\t            return this._timeline[index - 1];\n\t\t        } else {\n\t\t            return null;\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Cancel events after the given time\n\t\t\t *  @param  {Number}  time  The time to query.\n\t\t\t *  @returns {Tone.Timeline} this\n\t\t\t */\n\t\t    Tone.Timeline.prototype.cancel = function (after) {\n\t\t        if (this._timeline.length > 1) {\n\t\t            var index = this._search(after);\n\t\t            if (index >= 0) {\n\t\t                if (this._timeline[index].time === after) {\n\t\t                    //get the first item with that time\n\t\t                    for (var i = index; i >= 0; i--) {\n\t\t                        if (this._timeline[i].time === after) {\n\t\t                            index = i;\n\t\t                        } else {\n\t\t                            break;\n\t\t                        }\n\t\t                    }\n\t\t                    this._timeline = this._timeline.slice(0, index);\n\t\t                } else {\n\t\t                    this._timeline = this._timeline.slice(0, index + 1);\n\t\t                }\n\t\t            } else {\n\t\t                this._timeline = [];\n\t\t            }\n\t\t        } else if (this._timeline.length === 1) {\n\t\t            //the first item's time\n\t\t            if (this._timeline[0].time >= after) {\n\t\t                this._timeline = [];\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Cancel events before or equal to the given time.\n\t\t\t *  @param  {Number}  time  The time to cancel before.\n\t\t\t *  @returns {Tone.Timeline} this\n\t\t\t */\n\t\t    Tone.Timeline.prototype.cancelBefore = function (time) {\n\t\t        if (this._timeline.length) {\n\t\t            var index = this._search(time);\n\t\t            if (index >= 0) {\n\t\t                this._timeline = this._timeline.slice(index + 1);\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Does a binary serach on the timeline array and returns the \n\t\t\t *  nearest event index whose time is after or equal to the given time.\n\t\t\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t\t\t *  If the time is after the end, the index of the last item is returned.\n\t\t\t *  @param  {Number}  time  \n\t\t\t *  @return  {Number} the index in the timeline array \n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Timeline.prototype._search = function (time) {\n\t\t        var beginning = 0;\n\t\t        var len = this._timeline.length;\n\t\t        var end = len;\n\t\t        if (len > 0 && this._timeline[len - 1].time <= time) {\n\t\t            return len - 1;\n\t\t        }\n\t\t        while (beginning < end) {\n\t\t            // calculate the midpoint for roughly equal partition\n\t\t            var midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t            var event = this._timeline[midPoint];\n\t\t            var nextEvent = this._timeline[midPoint + 1];\n\t\t            if (event.time === time) {\n\t\t                //choose the last one that has the same time\n\t\t                for (var i = midPoint; i < this._timeline.length; i++) {\n\t\t                    var testEvent = this._timeline[i];\n\t\t                    if (testEvent.time === time) {\n\t\t                        midPoint = i;\n\t\t                    }\n\t\t                }\n\t\t                return midPoint;\n\t\t            } else if (event.time < time && nextEvent.time > time) {\n\t\t                return midPoint;\n\t\t            } else if (event.time > time) {\n\t\t                //search lower\n\t\t                end = midPoint;\n\t\t            } else if (event.time < time) {\n\t\t                //search upper\n\t\t                beginning = midPoint + 1;\n\t\t            }\n\t\t        }\n\t\t        return -1;\n\t\t    };\n\t\t    /**\n\t\t\t *  Internal iterator. Applies extra safety checks for \n\t\t\t *  removing items from the array. \n\t\t\t *  @param  {Function}  callback \n\t\t\t *  @param  {Number=}    lowerBound     \n\t\t\t *  @param  {Number=}    upperBound    \n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Timeline.prototype._iterate = function (callback, lowerBound, upperBound) {\n\t\t        this._iterating = true;\n\t\t        lowerBound = this.defaultArg(lowerBound, 0);\n\t\t        upperBound = this.defaultArg(upperBound, this._timeline.length - 1);\n\t\t        for (var i = lowerBound; i <= upperBound; i++) {\n\t\t            callback(this._timeline[i]);\n\t\t        }\n\t\t        this._iterating = false;\n\t\t        if (this._toRemove.length > 0) {\n\t\t            for (var j = 0; j < this._toRemove.length; j++) {\n\t\t                var index = this._timeline.indexOf(this._toRemove[j]);\n\t\t                if (index !== -1) {\n\t\t                    this._timeline.splice(index, 1);\n\t\t                }\n\t\t            }\n\t\t            this._toRemove = [];\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Iterate over everything in the array\n\t\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t\t *  @returns {Tone.Timeline} this\n\t\t\t */\n\t\t    Tone.Timeline.prototype.forEach = function (callback) {\n\t\t        this._iterate(callback);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Iterate over everything in the array at or before the given time.\n\t\t\t *  @param  {Number}  time The time to check if items are before\n\t\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t\t *  @returns {Tone.Timeline} this\n\t\t\t */\n\t\t    Tone.Timeline.prototype.forEachBefore = function (time, callback) {\n\t\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t\t        var upperBound = this._search(time);\n\t\t        if (upperBound !== -1) {\n\t\t            this._iterate(callback, 0, upperBound);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Iterate over everything in the array after the given time.\n\t\t\t *  @param  {Number}  time The time to check if items are before\n\t\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t\t *  @returns {Tone.Timeline} this\n\t\t\t */\n\t\t    Tone.Timeline.prototype.forEachAfter = function (time, callback) {\n\t\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t\t        var lowerBound = this._search(time);\n\t\t        this._iterate(callback, lowerBound + 1);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Iterate over everything in the array at or after the given time. Similar to \n\t\t\t *  forEachAfter, but includes the item(s) at the given time.\n\t\t\t *  @param  {Number}  time The time to check if items are before\n\t\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t\t *  @returns {Tone.Timeline} this\n\t\t\t */\n\t\t    Tone.Timeline.prototype.forEachFrom = function (time, callback) {\n\t\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t\t        var lowerBound = this._search(time);\n\t\t        //work backwards until the event time is less than time\n\t\t        while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t\t            lowerBound--;\n\t\t        }\n\t\t        this._iterate(callback, lowerBound + 1);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Iterate over everything in the array at the given time\n\t\t\t *  @param  {Number}  time The time to check if items are before\n\t\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t\t *  @returns {Tone.Timeline} this\n\t\t\t */\n\t\t    Tone.Timeline.prototype.forEachAtTime = function (time, callback) {\n\t\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t\t        var upperBound = this._search(time);\n\t\t        if (upperBound !== -1) {\n\t\t            this._iterate(function (event) {\n\t\t                if (event.time === time) {\n\t\t                    callback(event);\n\t\t                }\n\t\t            }, 0, upperBound);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @return  {Tone.Timeline}  this\n\t\t\t */\n\t\t    Tone.Timeline.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._timeline = null;\n\t\t        this._toRemove = null;\n\t\t    };\n\t\t    return Tone.Timeline;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class A signal which adds the method getValueAtTime. \n\t\t\t *         Code and inspiration from https://github.com/jsantell/web-audio-automation-timeline\n\t\t\t *  @extends {Tone.Param}\n\t\t\t *  @param {Number=} value The initial value of the signal\n\t\t\t *  @param {String=} units The conversion units of the signal.\n\t\t\t */\n\t\t    Tone.TimelineSignal = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'value',\n\t\t            'units'\n\t\t        ], Tone.Signal.defaults);\n\t\t        /**\n\t\t\t\t *  The scheduled events\n\t\t\t\t *  @type {Tone.Timeline}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._events = new Tone.Timeline(10);\n\t\t        //constructors\n\t\t        Tone.Signal.apply(this, options);\n\t\t        options.param = this._param;\n\t\t        Tone.Param.call(this, options);\n\t\t        /**\n\t\t\t\t *  The initial scheduled value\n\t\t\t\t *  @type {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._initial = this._fromUnits(this._param.value);\n\t\t    };\n\t\t    Tone.extend(Tone.TimelineSignal, Tone.Param);\n\t\t    /**\n\t\t\t *  The event types of a schedulable signal.\n\t\t\t *  @enum {String}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimelineSignal.Type = {\n\t\t        Linear: 'linear',\n\t\t        Exponential: 'exponential',\n\t\t        Target: 'target',\n\t\t        Curve: 'curve',\n\t\t        Set: 'set'\n\t\t    };\n\t\t    /**\n\t\t\t * The current value of the signal. \n\t\t\t * @memberOf Tone.TimelineSignal#\n\t\t\t * @type {Number}\n\t\t\t * @name value\n\t\t\t */\n\t\t    Object.defineProperty(Tone.TimelineSignal.prototype, 'value', {\n\t\t        get: function () {\n\t\t            var now = this.now();\n\t\t            var val = this.getValueAtTime(now);\n\t\t            return this._toUnits(val);\n\t\t        },\n\t\t        set: function (value) {\n\t\t            var convertedVal = this._fromUnits(value);\n\t\t            this._initial = convertedVal;\n\t\t            this.cancelScheduledValues();\n\t\t            this._param.value = convertedVal;\n\t\t        }\n\t\t    });\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tSCHEDULING\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Schedules a parameter value change at the given time.\n\t\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t\t *  @param {Time}  time The time when the change should occur.\n\t\t\t *  @returns {Tone.TimelineSignal} this\n\t\t\t *  @example\n\t\t\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t\t */\n\t\t    Tone.TimelineSignal.prototype.setValueAtTime = function (value, startTime) {\n\t\t        value = this._fromUnits(value);\n\t\t        startTime = this.toSeconds(startTime);\n\t\t        this._events.add({\n\t\t            'type': Tone.TimelineSignal.Type.Set,\n\t\t            'value': value,\n\t\t            'time': startTime\n\t\t        });\n\t\t        //invoke the original event\n\t\t        this._param.setValueAtTime(value, startTime);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Schedules a linear continuous change in parameter value from the \n\t\t\t *  previous scheduled parameter value to the given value.\n\t\t\t *  \n\t\t\t *  @param  {number} value   \n\t\t\t *  @param  {Time} endTime \n\t\t\t *  @returns {Tone.TimelineSignal} this\n\t\t\t */\n\t\t    Tone.TimelineSignal.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t\t        value = this._fromUnits(value);\n\t\t        endTime = this.toSeconds(endTime);\n\t\t        this._events.add({\n\t\t            'type': Tone.TimelineSignal.Type.Linear,\n\t\t            'value': value,\n\t\t            'time': endTime\n\t\t        });\n\t\t        this._param.linearRampToValueAtTime(value, endTime);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t\t *  the previous scheduled parameter value to the given value.\n\t\t\t *  \n\t\t\t *  @param  {number} value   \n\t\t\t *  @param  {Time} endTime \n\t\t\t *  @returns {Tone.TimelineSignal} this\n\t\t\t */\n\t\t    Tone.TimelineSignal.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t\t        //get the previous event and make sure it's not starting from 0\n\t\t        endTime = this.toSeconds(endTime);\n\t\t        var beforeEvent = this._searchBefore(endTime);\n\t\t        if (beforeEvent && beforeEvent.value === 0) {\n\t\t            //reschedule that event\n\t\t            this.setValueAtTime(this._minOutput, beforeEvent.time);\n\t\t        }\n\t\t        value = this._fromUnits(value);\n\t\t        var setValue = Math.max(value, this._minOutput);\n\t\t        this._events.add({\n\t\t            'type': Tone.TimelineSignal.Type.Exponential,\n\t\t            'value': setValue,\n\t\t            'time': endTime\n\t\t        });\n\t\t        //if the ramped to value is 0, make it go to the min output, and then set to 0.\n\t\t        if (value < this._minOutput) {\n\t\t            this._param.exponentialRampToValueAtTime(this._minOutput, endTime - this.sampleTime);\n\t\t            this.setValueAtTime(0, endTime);\n\t\t        } else {\n\t\t            this._param.exponentialRampToValueAtTime(value, endTime);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Start exponentially approaching the target value at the given time with\n\t\t\t *  a rate having the given time constant.\n\t\t\t *  @param {number} value        \n\t\t\t *  @param {Time} startTime    \n\t\t\t *  @param {number} timeConstant \n\t\t\t *  @returns {Tone.TimelineSignal} this \n\t\t\t */\n\t\t    Tone.TimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t\t        value = this._fromUnits(value);\n\t\t        value = Math.max(this._minOutput, value);\n\t\t        timeConstant = Math.max(this._minOutput, timeConstant);\n\t\t        startTime = this.toSeconds(startTime);\n\t\t        this._events.add({\n\t\t            'type': Tone.TimelineSignal.Type.Target,\n\t\t            'value': value,\n\t\t            'time': startTime,\n\t\t            'constant': timeConstant\n\t\t        });\n\t\t        this._param.setTargetAtTime(value, startTime, timeConstant);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Set an array of arbitrary values starting at the given time for the given duration.\n\t\t\t *  @param {Float32Array} values        \n\t\t\t *  @param {Time} startTime    \n\t\t\t *  @param {Time} duration\n\t\t\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t\t\t *  @returns {Tone.TimelineSignal} this \n\t\t\t */\n\t\t    Tone.TimelineSignal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {\n\t\t        scaling = this.defaultArg(scaling, 1);\n\t\t        //copy the array\n\t\t        var floats = new Array(values.length);\n\t\t        for (var i = 0; i < floats.length; i++) {\n\t\t            floats[i] = this._fromUnits(values[i]) * scaling;\n\t\t        }\n\t\t        startTime = this.toSeconds(startTime);\n\t\t        duration = this.toSeconds(duration);\n\t\t        this._events.add({\n\t\t            'type': Tone.TimelineSignal.Type.Curve,\n\t\t            'value': floats,\n\t\t            'time': startTime,\n\t\t            'duration': duration\n\t\t        });\n\t\t        //set the first value\n\t\t        this._param.setValueAtTime(floats[0], startTime);\n\t\t        //schedule a lienar ramp for each of the segments\n\t\t        for (var j = 1; j < floats.length; j++) {\n\t\t            var segmentTime = startTime + j / (floats.length - 1) * duration;\n\t\t            this._param.linearRampToValueAtTime(floats[j], segmentTime);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Cancels all scheduled parameter changes with times greater than or \n\t\t\t *  equal to startTime.\n\t\t\t *  \n\t\t\t *  @param  {Time} startTime\n\t\t\t *  @returns {Tone.TimelineSignal} this\n\t\t\t */\n\t\t    Tone.TimelineSignal.prototype.cancelScheduledValues = function (after) {\n\t\t        after = this.toSeconds(after);\n\t\t        this._events.cancel(after);\n\t\t        this._param.cancelScheduledValues(after);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Sets the computed value at the given time. This provides\n\t\t\t *  a point from which a linear or exponential curve\n\t\t\t *  can be scheduled after. Will cancel events after \n\t\t\t *  the given time and shorten the currently scheduled\n\t\t\t *  linear or exponential ramp so that it ends at `time` .\n\t\t\t *  This is to avoid discontinuities and clicks in envelopes. \n\t\t\t *  @param {Time} time When to set the ramp point\n\t\t\t *  @returns {Tone.TimelineSignal} this\n\t\t\t */\n\t\t    Tone.TimelineSignal.prototype.setRampPoint = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        //get the value at the given time\n\t\t        var val = this._toUnits(this.getValueAtTime(time));\n\t\t        //if there is an event at the given time\n\t\t        //and that even is not a \"set\"\n\t\t        var before = this._searchBefore(time);\n\t\t        if (before && before.time === time) {\n\t\t            //remove everything after\n\t\t            this.cancelScheduledValues(time + this.sampleTime);\n\t\t        } else if (before && before.type === Tone.TimelineSignal.Type.Curve && before.time + before.duration > time) {\n\t\t            //if the curve is still playing\n\t\t            //cancel the curve\n\t\t            this.cancelScheduledValues(time);\n\t\t            this.linearRampToValueAtTime(val, time);\n\t\t        } else {\n\t\t            //reschedule the next event to end at the given time\n\t\t            var after = this._searchAfter(time);\n\t\t            if (after) {\n\t\t                //cancel the next event(s)\n\t\t                this.cancelScheduledValues(time);\n\t\t                if (after.type === Tone.TimelineSignal.Type.Linear) {\n\t\t                    this.linearRampToValueAtTime(val, time);\n\t\t                } else if (after.type === Tone.TimelineSignal.Type.Exponential) {\n\t\t                    this.exponentialRampToValueAtTime(val, time);\n\t\t                }\n\t\t            }\n\t\t            this.setValueAtTime(val, time);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Do a linear ramp to the given value between the start and finish times.\n\t\t\t *  @param {Number} value The value to ramp to.\n\t\t\t *  @param {Time} start The beginning anchor point to do the linear ramp\n\t\t\t *  @param {Time} finish The ending anchor point by which the value of\n\t\t\t *                       the signal will equal the given value.\n\t\t\t *  @returns {Tone.TimelineSignal} this\n\t\t\t */\n\t\t    Tone.TimelineSignal.prototype.linearRampToValueBetween = function (value, start, finish) {\n\t\t        this.setRampPoint(start);\n\t\t        this.linearRampToValueAtTime(value, finish);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Do a exponential ramp to the given value between the start and finish times.\n\t\t\t *  @param {Number} value The value to ramp to.\n\t\t\t *  @param {Time} start The beginning anchor point to do the exponential ramp\n\t\t\t *  @param {Time} finish The ending anchor point by which the value of\n\t\t\t *                       the signal will equal the given value.\n\t\t\t *  @returns {Tone.TimelineSignal} this\n\t\t\t */\n\t\t    Tone.TimelineSignal.prototype.exponentialRampToValueBetween = function (value, start, finish) {\n\t\t        this.setRampPoint(start);\n\t\t        this.exponentialRampToValueAtTime(value, finish);\n\t\t        return this;\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tGETTING SCHEDULED VALUES\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Returns the value before or equal to the given time\n\t\t\t *  @param  {Number}  time  The time to query\n\t\t\t *  @return  {Object}  The event at or before the given time.\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimelineSignal.prototype._searchBefore = function (time) {\n\t\t        return this._events.get(time);\n\t\t    };\n\t\t    /**\n\t\t\t *  The event after the given time\n\t\t\t *  @param  {Number}  time  The time to query.\n\t\t\t *  @return  {Object}  The next event after the given time\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimelineSignal.prototype._searchAfter = function (time) {\n\t\t        return this._events.getAfter(time);\n\t\t    };\n\t\t    /**\n\t\t\t *  Get the scheduled value at the given time. This will\n\t\t\t *  return the unconverted (raw) value.\n\t\t\t *  @param  {Number}  time  The time in seconds.\n\t\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t\t */\n\t\t    Tone.TimelineSignal.prototype.getValueAtTime = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        var after = this._searchAfter(time);\n\t\t        var before = this._searchBefore(time);\n\t\t        var value = this._initial;\n\t\t        //if it was set by\n\t\t        if (before === null) {\n\t\t            value = this._initial;\n\t\t        } else if (before.type === Tone.TimelineSignal.Type.Target) {\n\t\t            var previous = this._events.getBefore(before.time);\n\t\t            var previouVal;\n\t\t            if (previous === null) {\n\t\t                previouVal = this._initial;\n\t\t            } else {\n\t\t                previouVal = previous.value;\n\t\t            }\n\t\t            value = this._exponentialApproach(before.time, previouVal, before.value, before.constant, time);\n\t\t        } else if (before.type === Tone.TimelineSignal.Type.Curve) {\n\t\t            value = this._curveInterpolate(before.time, before.value, before.duration, time);\n\t\t        } else if (after === null) {\n\t\t            value = before.value;\n\t\t        } else if (after.type === Tone.TimelineSignal.Type.Linear) {\n\t\t            value = this._linearInterpolate(before.time, before.value, after.time, after.value, time);\n\t\t        } else if (after.type === Tone.TimelineSignal.Type.Exponential) {\n\t\t            value = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);\n\t\t        } else {\n\t\t            value = before.value;\n\t\t        }\n\t\t        return value;\n\t\t    };\n\t\t    /**\n\t\t\t *  When signals connect to other signals or AudioParams, \n\t\t\t *  they take over the output value of that signal or AudioParam. \n\t\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t\t *\n\t\t\t *  @override\n\t\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t\t *  @returns {Tone.TimelineSignal} this\n\t\t\t *  @method\n\t\t\t */\n\t\t    Tone.TimelineSignal.prototype.connect = Tone.SignalBase.prototype.connect;\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tAUTOMATION CURVE CALCULATIONS\n\t\t    //\tMIT License, copyright (c) 2014 Jordan Santell\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Calculates the the value along the curve produced by setTargetAtTime\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimelineSignal.prototype._exponentialApproach = function (t0, v0, v1, timeConstant, t) {\n\t\t        return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t\t    };\n\t\t    /**\n\t\t\t *  Calculates the the value along the curve produced by linearRampToValueAtTime\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimelineSignal.prototype._linearInterpolate = function (t0, v0, t1, v1, t) {\n\t\t        return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t\t    };\n\t\t    /**\n\t\t\t *  Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimelineSignal.prototype._exponentialInterpolate = function (t0, v0, t1, v1, t) {\n\t\t        v0 = Math.max(this._minOutput, v0);\n\t\t        return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t\t    };\n\t\t    /**\n\t\t\t *  Calculates the the value along the curve produced by setValueCurveAtTime\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.TimelineSignal.prototype._curveInterpolate = function (start, curve, duration, time) {\n\t\t        var len = curve.length;\n\t\t        // If time is after duration, return the last curve value\n\t\t        if (time >= start + duration) {\n\t\t            return curve[len - 1];\n\t\t        } else if (time <= start) {\n\t\t            return curve[0];\n\t\t        } else {\n\t\t            var progress = (time - start) / duration;\n\t\t            var lowerIndex = Math.floor((len - 1) * progress);\n\t\t            var upperIndex = Math.ceil((len - 1) * progress);\n\t\t            var lowerVal = curve[lowerIndex];\n\t\t            var upperVal = curve[upperIndex];\n\t\t            if (upperIndex === lowerIndex) {\n\t\t                return lowerVal;\n\t\t            } else {\n\t\t                return this._linearInterpolate(lowerIndex, lowerVal, upperIndex, upperVal, progress * (len - 1));\n\t\t            }\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @return {Tone.TimelineSignal} this\n\t\t\t */\n\t\t    Tone.TimelineSignal.prototype.dispose = function () {\n\t\t        Tone.Signal.prototype.dispose.call(this);\n\t\t        Tone.Param.prototype.dispose.call(this);\n\t\t        this._events.dispose();\n\t\t        this._events = null;\n\t\t    };\n\t\t    return Tone.TimelineSignal;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Pow applies an exponent to the incoming signal. The incoming signal\n\t\t\t *         must be AudioRange.\n\t\t\t *\n\t\t\t *  @extends {Tone.SignalBase}\n\t\t\t *  @constructor\n\t\t\t *  @param {Positive} exp The exponent to apply to the incoming signal, must be at least 2. \n\t\t\t *  @example\n\t\t\t * var pow = new Tone.Pow(2);\n\t\t\t * var sig = new Tone.Signal(0.5).connect(pow);\n\t\t\t * //output of pow is 0.25. \n\t\t\t */\n\t\t    Tone.Pow = function (exp) {\n\t\t        /**\n\t\t\t\t * the exponent\n\t\t\t\t * @private\n\t\t\t\t * @type {number}\n\t\t\t\t */\n\t\t        this._exp = this.defaultArg(exp, 1);\n\t\t        /**\n\t\t\t\t *  @type {WaveShaperNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._expScaler = this.input = this.output = new Tone.WaveShaper(this._expFunc(this._exp), 8192);\n\t\t    };\n\t\t    Tone.extend(Tone.Pow, Tone.SignalBase);\n\t\t    /**\n\t\t\t * The value of the exponent.\n\t\t\t * @memberOf Tone.Pow#\n\t\t\t * @type {number}\n\t\t\t * @name value\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Pow.prototype, 'value', {\n\t\t        get: function () {\n\t\t            return this._exp;\n\t\t        },\n\t\t        set: function (exp) {\n\t\t            this._exp = exp;\n\t\t            this._expScaler.setMap(this._expFunc(this._exp));\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  the function which maps the waveshaper\n\t\t\t *  @param   {number} exp\n\t\t\t *  @return {function}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Pow.prototype._expFunc = function (exp) {\n\t\t        return function (val) {\n\t\t            return Math.pow(Math.abs(val), exp);\n\t\t        };\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.Pow} this\n\t\t\t */\n\t\t    Tone.Pow.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._expScaler.dispose();\n\t\t        this._expScaler = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Pow;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n\t\t\t *          envelope generator. Tone.Envelope outputs a signal which \n\t\t\t *          can be connected to an AudioParam or Tone.Signal. \n\t\t\t *          <img src=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone}\n\t\t\t *  @param {Time} [attack] The amount of time it takes for the envelope to go from \n\t\t\t *                         0 to it's maximum value. \n\t\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t\t *                       \tto fall to the sustain value. \n\t\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t\t *                                \tthe release is triggered. \n\t\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0. \n\t\t\t *  @example\n\t\t\t * //an amplitude envelope\n\t\t\t * var gainNode = Tone.context.createGain();\n\t\t\t * var env = new Tone.Envelope({\n\t\t\t * \t\"attack\" : 0.1,\n\t\t\t * \t\"decay\" : 0.2,\n\t\t\t * \t\"sustain\" : 1,\n\t\t\t * \t\"release\" : 0.8,\n\t\t\t * });\n\t\t\t * env.connect(gainNode.gain);\n\t\t\t */\n\t\t    Tone.Envelope = function () {\n\t\t        //get all of the defaults\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'attack',\n\t\t            'decay',\n\t\t            'sustain',\n\t\t            'release'\n\t\t        ], Tone.Envelope.defaults);\n\t\t        /** \n\t\t\t\t *  When triggerAttack is called, the attack time is the amount of\n\t\t\t\t *  time it takes for the envelope to reach it's maximum value. \n\t\t\t\t *  @type {Time}\n\t\t\t\t */\n\t\t        this.attack = options.attack;\n\t\t        /**\n\t\t\t\t *  After the attack portion of the envelope, the value will fall\n\t\t\t\t *  over the duration of the decay time to it's sustain value. \n\t\t\t\t *  @type {Time}\n\t\t\t\t */\n\t\t        this.decay = options.decay;\n\t\t        /**\n\t\t\t\t * \tThe sustain value is the value \n\t\t\t\t * \twhich the envelope rests at after triggerAttack is\n\t\t\t\t * \tcalled, but before triggerRelease is invoked. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t */\n\t\t        this.sustain = options.sustain;\n\t\t        /**\n\t\t\t\t *  After triggerRelease is called, the envelope's\n\t\t\t\t *  value will fall to it's miminum value over the\n\t\t\t\t *  duration of the release time. \n\t\t\t\t *  @type {Time}\n\t\t\t\t */\n\t\t        this.release = options.release;\n\t\t        /**\n\t\t\t\t *  the next time the envelope is at standby\n\t\t\t\t *  @type {number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._attackCurve = 'linear';\n\t\t        /**\n\t\t\t\t *  the next time the envelope is at standby\n\t\t\t\t *  @type {number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._releaseCurve = 'exponential';\n\t\t        /**\n\t\t\t\t *  the signal\n\t\t\t\t *  @type {Tone.TimelineSignal}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._sig = this.output = new Tone.TimelineSignal();\n\t\t        this._sig.setValueAtTime(0, 0);\n\t\t        //set the attackCurve initially\n\t\t        this.attackCurve = options.attackCurve;\n\t\t        this.releaseCurve = options.releaseCurve;\n\t\t    };\n\t\t    Tone.extend(Tone.Envelope);\n\t\t    /**\n\t\t\t *  the default parameters\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t */\n\t\t    Tone.Envelope.defaults = {\n\t\t        'attack': 0.01,\n\t\t        'decay': 0.1,\n\t\t        'sustain': 0.5,\n\t\t        'release': 1,\n\t\t        'attackCurve': 'linear',\n\t\t        'releaseCurve': 'exponential'\n\t\t    };\n\t\t    /**\n\t\t\t * Read the current value of the envelope. Useful for \n\t\t\t * syncronizing visual output to the envelope. \n\t\t\t * @memberOf Tone.Envelope#\n\t\t\t * @type {Number}\n\t\t\t * @name value\n\t\t\t * @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Envelope.prototype, 'value', {\n\t\t        get: function () {\n\t\t            return this.getValueAtTime(this.now());\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The shape of the attack. \n\t\t\t * Can be any of these strings:\n\t\t\t * <ul>\n\t\t\t *   <li>linear</li>\n\t\t\t *   <li>exponential</li>\n\t\t\t *   <li>sine</li>\n\t\t\t *   <li>cosine</li>\n\t\t\t *   <li>bounce</li>\n\t\t\t *   <li>ripple</li>\n\t\t\t *   <li>step</li>\n\t\t\t * </ul>\n\t\t\t * Can also be an array which describes the curve. Values\n\t\t\t * in the array are evenly subdivided and linearly\n\t\t\t * interpolated over the duration of the attack. \n\t\t\t * @memberOf Tone.Envelope#\n\t\t\t * @type {String|Array}\n\t\t\t * @name attackCurve\n\t\t\t * @example\n\t\t\t * env.attackCurve = \"linear\";\n\t\t\t * @example\n\t\t\t * //can also be an array\n\t\t\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Envelope.prototype, 'attackCurve', {\n\t\t        get: function () {\n\t\t            if (this.isString(this._attackCurve)) {\n\t\t                return this._attackCurve;\n\t\t            } else if (this.isArray(this._attackCurve)) {\n\t\t                //look up the name in the curves array\n\t\t                for (var type in Tone.Envelope.Type) {\n\t\t                    if (Tone.Envelope.Type[type].In === this._attackCurve) {\n\t\t                        return type;\n\t\t                    }\n\t\t                }\n\t\t                //otherwise just return the array\n\t\t                return this._attackCurve;\n\t\t            }\n\t\t        },\n\t\t        set: function (curve) {\n\t\t            //check if it's a valid type\n\t\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t\t                var curveDef = Tone.Envelope.Type[curve];\n\t\t                if (this.isObject(curveDef)) {\n\t\t                    this._attackCurve = curveDef.In;\n\t\t                } else {\n\t\t                    this._attackCurve = curveDef;\n\t\t                }\n\t\t            } else if (this.isArray(curve)) {\n\t\t                this._attackCurve = curve;\n\t\t            } else {\n\t\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The shape of the release. See the attack curve types. \n\t\t\t * @memberOf Tone.Envelope#\n\t\t\t * @type {String|Array}\n\t\t\t * @name releaseCurve\n\t\t\t * @example\n\t\t\t * env.releaseCurve = \"linear\";\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Envelope.prototype, 'releaseCurve', {\n\t\t        get: function () {\n\t\t            if (this.isString(this._releaseCurve)) {\n\t\t                return this._releaseCurve;\n\t\t            } else if (this.isArray(this._releaseCurve)) {\n\t\t                //look up the name in the curves array\n\t\t                for (var type in Tone.Envelope.Type) {\n\t\t                    if (Tone.Envelope.Type[type].Out === this._releaseCurve) {\n\t\t                        return type;\n\t\t                    }\n\t\t                }\n\t\t                //otherwise just return the array\n\t\t                return this._releaseCurve;\n\t\t            }\n\t\t        },\n\t\t        set: function (curve) {\n\t\t            //check if it's a valid type\n\t\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t\t                var curveDef = Tone.Envelope.Type[curve];\n\t\t                if (this.isObject(curveDef)) {\n\t\t                    this._releaseCurve = curveDef.Out;\n\t\t                } else {\n\t\t                    this._releaseCurve = curveDef;\n\t\t                }\n\t\t            } else if (this.isArray(curve)) {\n\t\t                this._releaseCurve = curve;\n\t\t            } else {\n\t\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Trigger the attack/decay portion of the ADSR envelope. \n\t\t\t *  @param  {Time} [time=now] When the attack should start.\n\t\t\t *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.\n\t\t\t *                               number between 0-1\n\t\t\t *  @returns {Tone.Envelope} this\n\t\t\t *  @example\n\t\t\t *  //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t\t\t *  env.triggerAttack(\"+0.5\", 0.2);\n\t\t\t */\n\t\t    Tone.Envelope.prototype.triggerAttack = function (time, velocity) {\n\t\t        time = this.toSeconds(time);\n\t\t        var originalAttack = this.toSeconds(this.attack);\n\t\t        var attack = originalAttack;\n\t\t        var decay = this.toSeconds(this.decay);\n\t\t        velocity = this.defaultArg(velocity, 1);\n\t\t        //check if it's not a complete attack\n\t\t        var currentValue = this.getValueAtTime(time);\n\t\t        if (currentValue > 0) {\n\t\t            //subtract the current value from the attack time\n\t\t            var attackRate = 1 / attack;\n\t\t            var remainingDistance = 1 - currentValue;\n\t\t            //the attack is now the remaining time\n\t\t            attack = remainingDistance / attackRate;\n\t\t        }\n\t\t        //attack\n\t\t        if (this._attackCurve === 'linear') {\n\t\t            this._sig.linearRampToValue(velocity, attack, time);\n\t\t        } else if (this._attackCurve === 'exponential') {\n\t\t            this._sig.exponentialRampToValue(velocity, attack, time);\n\t\t        } else if (attack > 0) {\n\t\t            this._sig.setRampPoint(time);\n\t\t            var curve = this._attackCurve;\n\t\t            //take only a portion of the curve\n\t\t            if (attack < originalAttack) {\n\t\t                var percentComplete = 1 - attack / originalAttack;\n\t\t                var sliceIndex = Math.floor(percentComplete * this._attackCurve.length);\n\t\t                curve = this._attackCurve.slice(sliceIndex);\n\t\t                //the first index is the current value\n\t\t                curve[0] = currentValue;\n\t\t            }\n\t\t            this._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t\t        }\n\t\t        //decay\n\t\t        this._sig.exponentialRampToValue(velocity * this.sustain, decay, attack + time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Triggers the release of the envelope.\n\t\t\t *  @param  {Time} [time=now] When the release portion of the envelope should start. \n\t\t\t *  @returns {Tone.Envelope} this\n\t\t\t *  @example\n\t\t\t *  //trigger release immediately\n\t\t\t *  env.triggerRelease();\n\t\t\t */\n\t\t    Tone.Envelope.prototype.triggerRelease = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        var currentValue = this.getValueAtTime(time);\n\t\t        if (currentValue > 0) {\n\t\t            var release = this.toSeconds(this.release);\n\t\t            if (this._releaseCurve === 'linear') {\n\t\t                this._sig.linearRampToValue(0, release, time);\n\t\t            } else if (this._releaseCurve === 'exponential') {\n\t\t                this._sig.exponentialRampToValue(0, release, time);\n\t\t            } else {\n\t\t                var curve = this._releaseCurve;\n\t\t                if (this.isArray(curve)) {\n\t\t                    this._sig.setRampPoint(time);\n\t\t                    this._sig.setValueCurveAtTime(curve, time, release, currentValue);\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Get the scheduled value at the given time. This will\n\t\t\t *  return the unconverted (raw) value.\n\t\t\t *  @param  {Number}  time  The time in seconds.\n\t\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t\t */\n\t\t    Tone.Envelope.prototype.getValueAtTime = function (time) {\n\t\t        return this._sig.getValueAtTime(time);\n\t\t    };\n\t\t    /**\n\t\t\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t\t\t *  some duration, then triggerRelease. \n\t\t\t *  @param {Time} duration The duration of the sustain.\n\t\t\t *  @param {Time} [time=now] When the attack should be triggered.\n\t\t\t *  @param {number} [velocity=1] The velocity of the envelope. \n\t\t\t *  @returns {Tone.Envelope} this\n\t\t\t *  @example\n\t\t\t * //trigger the attack and then the release after 0.6 seconds.\n\t\t\t * env.triggerAttackRelease(0.6);\n\t\t\t */\n\t\t    Tone.Envelope.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t\t        time = this.toSeconds(time);\n\t\t        this.triggerAttack(time, velocity);\n\t\t        this.triggerRelease(time + this.toSeconds(duration));\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Cancels all scheduled envelope changes after the given time.\n\t\t\t *  @param  {Time} after\n\t\t\t *  @returns {Tone.Envelope} this\n\t\t\t */\n\t\t    Tone.Envelope.prototype.cancel = function (after) {\n\t\t        this._sig.cancelScheduledValues(after);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Borrows the connect method from Tone.Signal. \n\t\t\t *  @function\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Envelope.prototype.connect = Tone.Signal.prototype.connect;\n\t\t    /**\n\t\t \t *  Generate some complex envelope curves. \n\t\t \t */\n\t\t    (function _createCurves() {\n\t\t        var curveLen = 128;\n\t\t        var i, k;\n\t\t        //cosine curve\n\t\t        var cosineCurve = [];\n\t\t        for (i = 0; i < curveLen; i++) {\n\t\t            cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));\n\t\t        }\n\t\t        //ripple curve\n\t\t        var rippleCurve = [];\n\t\t        var rippleCurveFreq = 6.4;\n\t\t        for (i = 0; i < curveLen - 1; i++) {\n\t\t            k = i / (curveLen - 1);\n\t\t            var sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t\t            rippleCurve[i] = sineWave / 10 + k * 0.83;\n\t\t        }\n\t\t        rippleCurve[curveLen - 1] = 1;\n\t\t        //stairs curve\n\t\t        var stairsCurve = [];\n\t\t        var steps = 5;\n\t\t        for (i = 0; i < curveLen; i++) {\n\t\t            stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;\n\t\t        }\n\t\t        //in-out easing curve\n\t\t        var sineCurve = [];\n\t\t        for (i = 0; i < curveLen; i++) {\n\t\t            k = i / (curveLen - 1);\n\t\t            sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t\t        }\n\t\t        //a bounce curve\n\t\t        var bounceCurve = [];\n\t\t        for (i = 0; i < curveLen; i++) {\n\t\t            k = i / (curveLen - 1);\n\t\t            var freq = Math.pow(k, 3) * 4 + 0.2;\n\t\t            var val = Math.cos(freq * Math.PI * 2 * k);\n\t\t            bounceCurve[i] = Math.abs(val * (1 - k));\n\t\t        }\n\t\t        /**\n\t\t\t\t *  Invert a value curve to make it work for the release\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        function invertCurve(curve) {\n\t\t            var out = new Array(curve.length);\n\t\t            for (var j = 0; j < curve.length; j++) {\n\t\t                out[j] = 1 - curve[j];\n\t\t            }\n\t\t            return out;\n\t\t        }\n\t\t        /**\n\t\t\t\t *  reverse the curve\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        function reverseCurve(curve) {\n\t\t            return curve.slice(0).reverse();\n\t\t        }\n\t\t        /**\n\t\t\t\t *  attack and release curve arrays\n\t\t\t\t *  @type  {Object}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        Tone.Envelope.Type = {\n\t\t            'linear': 'linear',\n\t\t            'exponential': 'exponential',\n\t\t            'bounce': {\n\t\t                In: invertCurve(bounceCurve),\n\t\t                Out: bounceCurve\n\t\t            },\n\t\t            'cosine': {\n\t\t                In: cosineCurve,\n\t\t                Out: reverseCurve(cosineCurve)\n\t\t            },\n\t\t            'step': {\n\t\t                In: stairsCurve,\n\t\t                Out: invertCurve(stairsCurve)\n\t\t            },\n\t\t            'ripple': {\n\t\t                In: rippleCurve,\n\t\t                Out: invertCurve(rippleCurve)\n\t\t            },\n\t\t            'sine': {\n\t\t                In: sineCurve,\n\t\t                Out: invertCurve(sineCurve)\n\t\t            }\n\t\t        };\n\t\t    }());\n\t\t    /**\n\t\t\t *  Disconnect and dispose.\n\t\t\t *  @returns {Tone.Envelope} this\n\t\t\t */\n\t\t    Tone.Envelope.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._sig.dispose();\n\t\t        this._sig = null;\n\t\t        this._attackCurve = null;\n\t\t        this._releaseCurve = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Envelope;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node. \n\t\t\t *          Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts\n\t\t\t *          an audio signal as the input and will apply the envelope to the amplitude\n\t\t\t *          of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n\t\t\t *  \n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Envelope}\n\t\t\t *  @param {Time|Object} [attack] The amount of time it takes for the envelope to go from \n\t\t\t *                               0 to it's maximum value. \n\t\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t\t *                       \tto fall to the sustain value. \n\t\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t\t *                                \tthe release is triggered. \n\t\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0. \n\t\t\t *  @example\n\t\t\t * var ampEnv = new Tone.AmplitudeEnvelope({\n\t\t\t * \t\"attack\": 0.1,\n\t\t\t * \t\"decay\": 0.2,\n\t\t\t * \t\"sustain\": 1.0,\n\t\t\t * \t\"release\": 0.8\n\t\t\t * }).toMaster();\n\t\t\t * //create an oscillator and connect it\n\t\t\t * var osc = new Tone.Oscillator().connect(ampEnv).start();\n\t\t\t * //trigger the envelopes attack and release \"8t\" apart\n\t\t\t * ampEnv.triggerAttackRelease(\"8t\");\n\t\t\t */\n\t\t    Tone.AmplitudeEnvelope = function () {\n\t\t        Tone.Envelope.apply(this, arguments);\n\t\t        /**\n\t\t\t\t *  the input node\n\t\t\t\t *  @type {GainNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.input = this.output = new Tone.Gain();\n\t\t        this._sig.connect(this.output.gain);\n\t\t    };\n\t\t    Tone.extend(Tone.AmplitudeEnvelope, Tone.Envelope);\n\t\t    /**\n\t\t\t *  Clean up\n\t\t\t *  @return  {Tone.AmplitudeEnvelope}  this\n\t\t\t */\n\t\t    Tone.AmplitudeEnvelope.prototype.dispose = function () {\n\t\t        this.input.dispose();\n\t\t        this.input = null;\n\t\t        Tone.Envelope.prototype.dispose.call(this);\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.AmplitudeEnvelope;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  AnalyserNode.getFloatTimeDomainData polyfill\n\t\t\t *  @private\n\t\t\t */\n\t\t    if (window.AnalyserNode && !AnalyserNode.prototype.getFloatTimeDomainData) {\n\t\t        //referenced https://github.com/mohayonao/get-float-time-domain-data \n\t\t        AnalyserNode.prototype.getFloatTimeDomainData = function (array) {\n\t\t            var uint8 = new Uint8Array(array.length);\n\t\t            this.getByteTimeDomainData(uint8);\n\t\t            for (var i = 0; i < uint8.length; i++) {\n\t\t                array[i] = (uint8[i] - 128) / 128;\n\t\t            }\n\t\t        };\n\t\t    }\n\t\t    /**\n\t\t\t *  @class  Wrapper around the native Web Audio's \n\t\t\t *          [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n\t\t\t *          Extracts FFT or Waveform data from the incoming signal.\n\t\t\t *  @extends {Tone}\n\t\t\t *  @param {String=} type The return type of the analysis, either \"fft\", or \"waveform\". \n\t\t\t *  @param {Number=} size The size of the FFT. Value must be a power of \n\t\t\t *                       two in the range 32 to 32768.\n\t\t\t */\n\t\t    Tone.Analyser = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'type',\n\t\t            'size'\n\t\t        ], Tone.Analyser.defaults);\n\t\t        /**\n\t\t\t\t *  The analyser node.\n\t\t\t\t *  @private\n\t\t\t\t *  @type {AnalyserNode}\n\t\t\t\t */\n\t\t        this._analyser = this.input = this.output = this.context.createAnalyser();\n\t\t        /**\n\t\t\t\t *  The analysis type\n\t\t\t\t *  @type {String}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._type = options.type;\n\t\t        /**\n\t\t\t\t *  The return type of the analysis\n\t\t\t\t *  @type {String}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._returnType = options.returnType;\n\t\t        /**\n\t\t\t\t *  The buffer that the FFT data is written to\n\t\t\t\t *  @type {TypedArray}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._buffer = null;\n\t\t        //set the values initially\n\t\t        this.size = options.size;\n\t\t        this.type = options.type;\n\t\t        this.returnType = options.returnType;\n\t\t        this.minDecibels = options.minDecibels;\n\t\t        this.maxDecibels = options.maxDecibels;\n\t\t    };\n\t\t    Tone.extend(Tone.Analyser);\n\t\t    /**\n\t\t\t *  The default values.\n\t\t\t *  @type {Object}\n\t\t\t *  @const\n\t\t\t */\n\t\t    Tone.Analyser.defaults = {\n\t\t        'size': 1024,\n\t\t        'returnType': 'byte',\n\t\t        'type': 'fft',\n\t\t        'smoothing': 0.8,\n\t\t        'maxDecibels': -30,\n\t\t        'minDecibels': -100\n\t\t    };\n\t\t    /**\n\t\t\t *  Possible return types of Tone.Analyser.analyse()\n\t\t\t *  @enum {String}\n\t\t\t */\n\t\t    Tone.Analyser.Type = {\n\t\t        Waveform: 'waveform',\n\t\t        FFT: 'fft'\n\t\t    };\n\t\t    /**\n\t\t\t *  Possible return types of Tone.Analyser.analyse(). \n\t\t\t *  byte values are between [0,255]. float values are between \n\t\t\t *  [-1, 1] when the type is set to \"waveform\" and between \n\t\t\t *  [minDecibels,maxDecibels] when the type is \"fft\".\n\t\t\t *  @enum {String}\n\t\t\t */\n\t\t    Tone.Analyser.ReturnType = {\n\t\t        Byte: 'byte',\n\t\t        Float: 'float'\n\t\t    };\n\t\t    /**\n\t\t\t *  Run the analysis given the current settings and return the \n\t\t\t *  result as a TypedArray. \n\t\t\t *  @returns {TypedArray}\n\t\t\t */\n\t\t    Tone.Analyser.prototype.analyse = function () {\n\t\t        if (this._type === Tone.Analyser.Type.FFT) {\n\t\t            if (this._returnType === Tone.Analyser.ReturnType.Byte) {\n\t\t                this._analyser.getByteFrequencyData(this._buffer);\n\t\t            } else {\n\t\t                this._analyser.getFloatFrequencyData(this._buffer);\n\t\t            }\n\t\t        } else if (this._type === Tone.Analyser.Type.Waveform) {\n\t\t            if (this._returnType === Tone.Analyser.ReturnType.Byte) {\n\t\t                this._analyser.getByteTimeDomainData(this._buffer);\n\t\t            } else {\n\t\t                this._analyser.getFloatTimeDomainData(this._buffer);\n\t\t            }\n\t\t        }\n\t\t        return this._buffer;\n\t\t    };\n\t\t    /**\n\t\t\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t\t\t *  @memberOf Tone.Analyser#\n\t\t\t *  @type {Number}\n\t\t\t *  @name size\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Analyser.prototype, 'size', {\n\t\t        get: function () {\n\t\t            return this._analyser.frequencyBinCount;\n\t\t        },\n\t\t        set: function (size) {\n\t\t            this._analyser.fftSize = size * 2;\n\t\t            this.type = this._type;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The return type of Tone.Analyser.analyse(), either \"byte\" or \"float\". \n\t\t\t *  When the type is set to \"byte\" the range of values returned in the array\n\t\t\t *  are between 0-255. \"float\" values are between \n\t\t\t *  [-1, 1] when the type is set to \"waveform\" and between \n\t\t\t *  [minDecibels,maxDecibels] when the type is \"fft\".\n\t\t\t *  @memberOf Tone.Analyser#\n\t\t\t *  @type {String}\n\t\t\t *  @name type\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Analyser.prototype, 'returnType', {\n\t\t        get: function () {\n\t\t            return this._returnType;\n\t\t        },\n\t\t        set: function (type) {\n\t\t            if (type === Tone.Analyser.ReturnType.Byte) {\n\t\t                this._buffer = new Uint8Array(this._analyser.frequencyBinCount);\n\t\t            } else if (type === Tone.Analyser.ReturnType.Float) {\n\t\t                this._buffer = new Float32Array(this._analyser.frequencyBinCount);\n\t\t            } else {\n\t\t                throw new TypeError('Tone.Analayser: invalid return type: ' + type);\n\t\t            }\n\t\t            this._returnType = type;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The analysis function returned by Tone.Analyser.analyse(), either \"fft\" or \"waveform\". \n\t\t\t *  @memberOf Tone.Analyser#\n\t\t\t *  @type {String}\n\t\t\t *  @name type\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Analyser.prototype, 'type', {\n\t\t        get: function () {\n\t\t            return this._type;\n\t\t        },\n\t\t        set: function (type) {\n\t\t            if (type !== Tone.Analyser.Type.Waveform && type !== Tone.Analyser.Type.FFT) {\n\t\t                throw new TypeError('Tone.Analyser: invalid type: ' + type);\n\t\t            }\n\t\t            this._type = type;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  0 represents no time averaging with the last analysis frame.\n\t\t\t *  @memberOf Tone.Analyser#\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @name smoothing\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Analyser.prototype, 'smoothing', {\n\t\t        get: function () {\n\t\t            return this._analyser.smoothingTimeConstant;\n\t\t        },\n\t\t        set: function (val) {\n\t\t            this._analyser.smoothingTimeConstant = val;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The smallest decibel value which is analysed by the FFT. \n\t\t\t *  @memberOf Tone.Analyser#\n\t\t\t *  @type {Decibels}\n\t\t\t *  @name minDecibels\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Analyser.prototype, 'minDecibels', {\n\t\t        get: function () {\n\t\t            return this._analyser.minDecibels;\n\t\t        },\n\t\t        set: function (val) {\n\t\t            this._analyser.minDecibels = val;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The largest decibel value which is analysed by the FFT. \n\t\t\t *  @memberOf Tone.Analyser#\n\t\t\t *  @type {Decibels}\n\t\t\t *  @name maxDecibels\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Analyser.prototype, 'maxDecibels', {\n\t\t        get: function () {\n\t\t            return this._analyser.maxDecibels;\n\t\t        },\n\t\t        set: function (val) {\n\t\t            this._analyser.maxDecibels = val;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @return  {Tone.Analyser}  this\n\t\t\t */\n\t\t    Tone.Analyser.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._analyser.disconnect();\n\t\t        this._analyser = null;\n\t\t        this._buffer = null;\n\t\t    };\n\t\t    return Tone.Analyser;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.Compressor is a thin wrapper around the Web Audio \n\t\t\t *         [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n\t\t\t *         Compression reduces the volume of loud sounds or amplifies quiet sounds \n\t\t\t *         by narrowing or \"compressing\" an audio signal's dynamic range. \n\t\t\t *         Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n\t\t\t *\n\t\t\t *  @extends {Tone}\n\t\t\t *  @constructor\n\t\t\t *  @param {Decibels|Object} [threshold] The value above which the compression starts to be applied.\n\t\t\t *  @param {Positive} [ratio] The gain reduction ratio.\n\t\t\t *  @example\n\t\t\t * var comp = new Tone.Compressor(-30, 3);\n\t\t\t */\n\t\t    Tone.Compressor = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'threshold',\n\t\t            'ratio'\n\t\t        ], Tone.Compressor.defaults);\n\t\t        /**\n\t\t\t\t *  the compressor node\n\t\t\t\t *  @type {DynamicsCompressorNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._compressor = this.input = this.output = this.context.createDynamicsCompressor();\n\t\t        /**\n\t\t\t\t *  the threshold vaue\n\t\t\t\t *  @type {Decibels}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.threshold = new Tone.Param({\n\t\t            'param': this._compressor.threshold,\n\t\t            'units': Tone.Type.Decibels,\n\t\t            'convert': false\n\t\t        });\n\t\t        /**\n\t\t\t\t *  The attack parameter\n\t\t\t\t *  @type {Time}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.attack = new Tone.Param(this._compressor.attack, Tone.Type.Time);\n\t\t        /**\n\t\t\t\t *  The release parameter\n\t\t\t\t *  @type {Time}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.release = new Tone.Param(this._compressor.release, Tone.Type.Time);\n\t\t        /**\n\t\t\t\t *  The knee parameter\n\t\t\t\t *  @type {Decibels}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.knee = new Tone.Param({\n\t\t            'param': this._compressor.knee,\n\t\t            'units': Tone.Type.Decibels,\n\t\t            'convert': false\n\t\t        });\n\t\t        /**\n\t\t\t\t *  The ratio value\n\t\t\t\t *  @type {Number}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.ratio = new Tone.Param({\n\t\t            'param': this._compressor.ratio,\n\t\t            'convert': false\n\t\t        });\n\t\t        //set the defaults\n\t\t        this._readOnly([\n\t\t            'knee',\n\t\t            'release',\n\t\t            'attack',\n\t\t            'ratio',\n\t\t            'threshold'\n\t\t        ]);\n\t\t        this.set(options);\n\t\t    };\n\t\t    Tone.extend(Tone.Compressor);\n\t\t    /**\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.Compressor.defaults = {\n\t\t        'ratio': 12,\n\t\t        'threshold': -24,\n\t\t        'release': 0.25,\n\t\t        'attack': 0.003,\n\t\t        'knee': 30\n\t\t    };\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.Compressor} this\n\t\t\t */\n\t\t    Tone.Compressor.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'knee',\n\t\t            'release',\n\t\t            'attack',\n\t\t            'ratio',\n\t\t            'threshold'\n\t\t        ]);\n\t\t        this._compressor.disconnect();\n\t\t        this._compressor = null;\n\t\t        this.attack.dispose();\n\t\t        this.attack = null;\n\t\t        this.release.dispose();\n\t\t        this.release = null;\n\t\t        this.threshold.dispose();\n\t\t        this.threshold = null;\n\t\t        this.ratio.dispose();\n\t\t        this.ratio = null;\n\t\t        this.knee.dispose();\n\t\t        this.knee = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Compressor;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Add a signal and a number or two signals. When no value is\n\t\t\t *         passed into the constructor, Tone.Add will sum <code>input[0]</code>\n\t\t\t *         and <code>input[1]</code>. If a value is passed into the constructor, \n\t\t\t *         the it will be added to the input.\n\t\t\t *  \n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Signal}\n\t\t\t *  @param {number=} value If no value is provided, Tone.Add will sum the first\n\t\t\t *                         and second inputs. \n\t\t\t *  @example\n\t\t\t * var signal = new Tone.Signal(2);\n\t\t\t * var add = new Tone.Add(2);\n\t\t\t * signal.connect(add);\n\t\t\t * //the output of add equals 4\n\t\t\t *  @example\n\t\t\t * //if constructed with no arguments\n\t\t\t * //it will add the first and second inputs\n\t\t\t * var add = new Tone.Add();\n\t\t\t * var sig0 = new Tone.Signal(3).connect(add, 0, 0);\n\t\t\t * var sig1 = new Tone.Signal(4).connect(add, 0, 1);\n\t\t\t * //the output of add equals 7. \n\t\t\t */\n\t\t    Tone.Add = function (value) {\n\t\t        this.createInsOuts(2, 0);\n\t\t        /**\n\t\t\t\t *  the summing node\n\t\t\t\t *  @type {GainNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._sum = this.input[0] = this.input[1] = this.output = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Tone.Signal}\n\t\t\t\t */\n\t\t        this._param = this.input[1] = new Tone.Signal(value);\n\t\t        this._param.connect(this._sum);\n\t\t    };\n\t\t    Tone.extend(Tone.Add, Tone.Signal);\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.Add} this\n\t\t\t */\n\t\t    Tone.Add.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._sum.dispose();\n\t\t        this._sum = null;\n\t\t        this._param.dispose();\n\t\t        this._param = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Add;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Multiply two incoming signals. Or, if a number is given in the constructor, \n\t\t\t *          multiplies the incoming signal by that value. \n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Signal}\n\t\t\t *  @param {number=} value Constant value to multiple. If no value is provided,\n\t\t\t *                         it will return the product of the first and second inputs\n\t\t\t *  @example\n\t\t\t * var mult = new Tone.Multiply();\n\t\t\t * var sigA = new Tone.Signal(3);\n\t\t\t * var sigB = new Tone.Signal(4);\n\t\t\t * sigA.connect(mult, 0, 0);\n\t\t\t * sigB.connect(mult, 0, 1);\n\t\t\t * //output of mult is 12.\n\t\t\t *  @example\n\t\t\t * var mult = new Tone.Multiply(10);\n\t\t\t * var sig = new Tone.Signal(2).connect(mult);\n\t\t\t * //the output of mult is 20. \n\t\t\t */\n\t\t    Tone.Multiply = function (value) {\n\t\t        this.createInsOuts(2, 0);\n\t\t        /**\n\t\t\t\t *  the input node is the same as the output node\n\t\t\t\t *  it is also the GainNode which handles the scaling of incoming signal\n\t\t\t\t *  \n\t\t\t\t *  @type {GainNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._mult = this.input[0] = this.output = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  the scaling parameter\n\t\t\t\t *  @type {AudioParam}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._param = this.input[1] = this.output.gain;\n\t\t        this._param.value = this.defaultArg(value, 0);\n\t\t    };\n\t\t    Tone.extend(Tone.Multiply, Tone.Signal);\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.Multiply} this\n\t\t\t */\n\t\t    Tone.Multiply.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._mult.dispose();\n\t\t        this._mult = null;\n\t\t        this._param = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Multiply;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.SignalBase}\n\t\t\t *  @example\n\t\t\t * var neg = new Tone.Negate();\n\t\t\t * var sig = new Tone.Signal(-2).connect(neg);\n\t\t\t * //output of neg is positive 2. \n\t\t\t */\n\t\t    Tone.Negate = function () {\n\t\t        /**\n\t\t\t\t *  negation is done by multiplying by -1\n\t\t\t\t *  @type {Tone.Multiply}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._multiply = this.input = this.output = new Tone.Multiply(-1);\n\t\t    };\n\t\t    Tone.extend(Tone.Negate, Tone.SignalBase);\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.Negate} this\n\t\t\t */\n\t\t    Tone.Negate.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._multiply.dispose();\n\t\t        this._multiply = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Negate;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Subtract the signal connected to <code>input[1]</code> from the signal connected \n\t\t\t *         to <code>input[0]</code>. If an argument is provided in the constructor, the \n\t\t\t *         signals <code>.value</code> will be subtracted from the incoming signal.\n\t\t\t *\n\t\t\t *  @extends {Tone.Signal}\n\t\t\t *  @constructor\n\t\t\t *  @param {number=} value The value to subtract from the incoming signal. If the value\n\t\t\t *                         is omitted, it will subtract the second signal from the first.\n\t\t\t *  @example\n\t\t\t * var sub = new Tone.Subtract(1);\n\t\t\t * var sig = new Tone.Signal(4).connect(sub);\n\t\t\t * //the output of sub is 3. \n\t\t\t *  @example\n\t\t\t * var sub = new Tone.Subtract();\n\t\t\t * var sigA = new Tone.Signal(10);\n\t\t\t * var sigB = new Tone.Signal(2.5);\n\t\t\t * sigA.connect(sub, 0, 0);\n\t\t\t * sigB.connect(sub, 0, 1);\n\t\t\t * //output of sub is 7.5\n\t\t\t */\n\t\t    Tone.Subtract = function (value) {\n\t\t        this.createInsOuts(2, 0);\n\t\t        /**\n\t\t\t\t *  the summing node\n\t\t\t\t *  @type {GainNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._sum = this.input[0] = this.output = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  negate the input of the second input before connecting it\n\t\t\t\t *  to the summing node.\n\t\t\t\t *  @type {Tone.Negate}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._neg = new Tone.Negate();\n\t\t        /**\n\t\t\t\t *  the node where the value is set\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Tone.Signal}\n\t\t\t\t */\n\t\t        this._param = this.input[1] = new Tone.Signal(value);\n\t\t        this._param.chain(this._neg, this._sum);\n\t\t    };\n\t\t    Tone.extend(Tone.Subtract, Tone.Signal);\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.SignalBase} this\n\t\t\t */\n\t\t    Tone.Subtract.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._neg.dispose();\n\t\t        this._neg = null;\n\t\t        this._sum.disconnect();\n\t\t        this._sum = null;\n\t\t        this._param.dispose();\n\t\t        this._param = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Subtract;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero\n\t\t\t *  \n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.SignalBase}\n\t\t\t *  @example\n\t\t\t * var gt0 = new Tone.GreaterThanZero();\n\t\t\t * var sig = new Tone.Signal(0.01).connect(gt0);\n\t\t\t * //the output of gt0 is 1. \n\t\t\t * sig.value = 0;\n\t\t\t * //the output of gt0 is 0. \n\t\t\t */\n\t\t    Tone.GreaterThanZero = function () {\n\t\t        /**\n\t\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._thresh = this.output = new Tone.WaveShaper(function (val) {\n\t\t            if (val <= 0) {\n\t\t                return 0;\n\t\t            } else {\n\t\t                return 1;\n\t\t            }\n\t\t        }, 127);\n\t\t        /**\n\t\t\t\t *  scale the first thresholded signal by a large value.\n\t\t\t\t *  this will help with values which are very close to 0\n\t\t\t\t *  @type {Tone.Multiply}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._scale = this.input = new Tone.Multiply(10000);\n\t\t        //connections\n\t\t        this._scale.connect(this._thresh);\n\t\t    };\n\t\t    Tone.extend(Tone.GreaterThanZero, Tone.SignalBase);\n\t\t    /**\n\t\t\t *  dispose method\n\t\t\t *  @returns {Tone.GreaterThanZero} this\n\t\t\t */\n\t\t    Tone.GreaterThanZero.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._scale.dispose();\n\t\t        this._scale = null;\n\t\t        this._thresh.dispose();\n\t\t        this._thresh = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.GreaterThanZero;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.\n\t\t\t *          can compare two signals or a signal and a number. \n\t\t\t *  \n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Signal}\n\t\t\t *  @param {number} [value=0] the value to compare to the incoming signal\n\t\t\t *  @example\n\t\t\t * var gt = new Tone.GreaterThan(2);\n\t\t\t * var sig = new Tone.Signal(4).connect(gt);\n\t\t\t * //output of gt is equal 1. \n\t\t\t */\n\t\t    Tone.GreaterThan = function (value) {\n\t\t        this.createInsOuts(2, 0);\n\t\t        /**\n\t\t\t\t *  subtract the amount from the incoming signal\n\t\t\t\t *  @type {Tone.Subtract}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._param = this.input[0] = new Tone.Subtract(value);\n\t\t        this.input[1] = this._param.input[1];\n\t\t        /**\n\t\t\t\t *  compare that amount to zero\n\t\t\t\t *  @type {Tone.GreaterThanZero}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._gtz = this.output = new Tone.GreaterThanZero();\n\t\t        //connect\n\t\t        this._param.connect(this._gtz);\n\t\t    };\n\t\t    Tone.extend(Tone.GreaterThan, Tone.Signal);\n\t\t    /**\n\t\t\t *  dispose method\n\t\t\t *  @returns {Tone.GreaterThan} this\n\t\t\t */\n\t\t    Tone.GreaterThan.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._param.dispose();\n\t\t        this._param = null;\n\t\t        this._gtz.dispose();\n\t\t        this._gtz = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.GreaterThan;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Return the absolute value of an incoming signal. \n\t\t\t *  \n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.SignalBase}\n\t\t\t *  @example\n\t\t\t * var signal = new Tone.Signal(-1);\n\t\t\t * var abs = new Tone.Abs();\n\t\t\t * signal.connect(abs);\n\t\t\t * //the output of abs is 1. \n\t\t\t */\n\t\t    Tone.Abs = function () {\n\t\t        /**\n\t\t\t\t *  @type {Tone.LessThan}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._abs = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t\t            if (val === 0) {\n\t\t                return 0;\n\t\t            } else {\n\t\t                return Math.abs(val);\n\t\t            }\n\t\t        }, 127);\n\t\t    };\n\t\t    Tone.extend(Tone.Abs, Tone.SignalBase);\n\t\t    /**\n\t\t\t *  dispose method\n\t\t\t *  @returns {Tone.Abs} this\n\t\t\t */\n\t\t    Tone.Abs.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._abs.dispose();\n\t\t        this._abs = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Abs;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus\n\t\t\t *         values in the NormalRange. \n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.SignalBase}\n\t\t\t *  @param {NormalRange} modulus The modulus to apply.\n\t\t\t *  @example\n\t\t\t * var mod = new Tone.Modulo(0.2)\n\t\t\t * var sig = new Tone.Signal(0.5).connect(mod);\n\t\t\t * //mod outputs 0.1\n\t\t\t */\n\t\t    Tone.Modulo = function (modulus) {\n\t\t        this.createInsOuts(1, 0);\n\t\t        /**\n\t\t\t\t *  A waveshaper gets the integer multiple of \n\t\t\t\t *  the input signal and the modulus.\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t\t */\n\t\t        this._shaper = new Tone.WaveShaper(Math.pow(2, 16));\n\t\t        /**\n\t\t\t\t *  the integer multiple is multiplied by the modulus\n\t\t\t\t *  @type  {Tone.Multiply}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._multiply = new Tone.Multiply();\n\t\t        /**\n\t\t\t\t *  and subtracted from the input signal\n\t\t\t\t *  @type  {Tone.Subtract}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._subtract = this.output = new Tone.Subtract();\n\t\t        /**\n\t\t\t\t *  the modulus signal\n\t\t\t\t *  @type  {Tone.Signal}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._modSignal = new Tone.Signal(modulus);\n\t\t        //connections\n\t\t        this.input.fan(this._shaper, this._subtract);\n\t\t        this._modSignal.connect(this._multiply, 0, 0);\n\t\t        this._shaper.connect(this._multiply, 0, 1);\n\t\t        this._multiply.connect(this._subtract, 0, 1);\n\t\t        this._setWaveShaper(modulus);\n\t\t    };\n\t\t    Tone.extend(Tone.Modulo, Tone.SignalBase);\n\t\t    /**\n\t\t\t *  @param  {number}  mod  the modulus to apply\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Modulo.prototype._setWaveShaper = function (mod) {\n\t\t        this._shaper.setMap(function (val) {\n\t\t            var multiple = Math.floor((val + 0.0001) / mod);\n\t\t            return multiple;\n\t\t        });\n\t\t    };\n\t\t    /**\n\t\t\t * The modulus value.\n\t\t\t * @memberOf Tone.Modulo#\n\t\t\t * @type {NormalRange}\n\t\t\t * @name value\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Modulo.prototype, 'value', {\n\t\t        get: function () {\n\t\t            return this._modSignal.value;\n\t\t        },\n\t\t        set: function (mod) {\n\t\t            this._modSignal.value = mod;\n\t\t            this._setWaveShaper(mod);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * clean up\n\t\t\t *  @returns {Tone.Modulo} this\n\t\t\t */\n\t\t    Tone.Modulo.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._shaper.dispose();\n\t\t        this._shaper = null;\n\t\t        this._multiply.dispose();\n\t\t        this._multiply = null;\n\t\t        this._subtract.dispose();\n\t\t        this._subtract = null;\n\t\t        this._modSignal.dispose();\n\t\t        this._modSignal = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Modulo;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. \n\t\t\t *         See Tone.GainToAudio.\n\t\t\t *\n\t\t\t *  @extends {Tone.SignalBase}\n\t\t\t *  @constructor\n\t\t\t *  @example\n\t\t\t *  var a2g = new Tone.AudioToGain();\n\t\t\t */\n\t\t    Tone.AudioToGain = function () {\n\t\t        /**\n\t\t\t\t *  @type {WaveShaperNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t\t            return (x + 1) / 2;\n\t\t        });\n\t\t    };\n\t\t    Tone.extend(Tone.AudioToGain, Tone.SignalBase);\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.AudioToGain} this\n\t\t\t */\n\t\t    Tone.AudioToGain.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._norm.dispose();\n\t\t        this._norm = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.AudioToGain;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Evaluate an expression at audio rate. <br><br>\n\t\t\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t\t *\n\t\t\t *  @extends {Tone.SignalBase}\n\t\t\t *  @constructor\n\t\t\t *  @param {string} expr the expression to generate\n\t\t\t *  @example\n\t\t\t * //adds the signals from input[0] and input[1].\n\t\t\t * var expr = new Tone.Expr(\"$0 + $1\");\n\t\t\t */\n\t\t    Tone.Expr = function () {\n\t\t        var expr = this._replacements(Array.prototype.slice.call(arguments));\n\t\t        var inputCount = this._parseInputs(expr);\n\t\t        /**\n\t\t\t\t *  hold onto all of the nodes for disposal\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._nodes = [];\n\t\t        /**\n\t\t\t\t *  The inputs. The length is determined by the expression. \n\t\t\t\t *  @type {Array}\n\t\t\t\t */\n\t\t        this.input = new Array(inputCount);\n\t\t        //create a gain for each input\n\t\t        for (var i = 0; i < inputCount; i++) {\n\t\t            this.input[i] = this.context.createGain();\n\t\t        }\n\t\t        //parse the syntax tree\n\t\t        var tree = this._parseTree(expr);\n\t\t        //evaluate the results\n\t\t        var result;\n\t\t        try {\n\t\t            result = this._eval(tree);\n\t\t        } catch (e) {\n\t\t            this._disposeNodes();\n\t\t            throw new Error('Tone.Expr: Could evaluate expression: ' + expr);\n\t\t        }\n\t\t        /**\n\t\t\t\t *  The output node is the result of the expression\n\t\t\t\t *  @type {Tone}\n\t\t\t\t */\n\t\t        this.output = result;\n\t\t    };\n\t\t    Tone.extend(Tone.Expr, Tone.SignalBase);\n\t\t    //some helpers to cut down the amount of code\n\t\t    function applyBinary(Constructor, args, self) {\n\t\t        var op = new Constructor();\n\t\t        self._eval(args[0]).connect(op, 0, 0);\n\t\t        self._eval(args[1]).connect(op, 0, 1);\n\t\t        return op;\n\t\t    }\n\t\t    function applyUnary(Constructor, args, self) {\n\t\t        var op = new Constructor();\n\t\t        self._eval(args[0]).connect(op, 0, 0);\n\t\t        return op;\n\t\t    }\n\t\t    function getNumber(arg) {\n\t\t        return arg ? parseFloat(arg) : undefined;\n\t\t    }\n\t\t    function literalNumber(arg) {\n\t\t        return arg && arg.args ? parseFloat(arg.args) : undefined;\n\t\t    }\n\t\t    /*\n\t\t\t *  the Expressions that Tone.Expr can parse.\n\t\t\t *\n\t\t\t *  each expression belongs to a group and contains a regexp \n\t\t\t *  for selecting the operator as well as that operators method\n\t\t\t *  \n\t\t\t *  @type {Object}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Expr._Expressions = {\n\t\t        //values\n\t\t        'value': {\n\t\t            'signal': {\n\t\t                regexp: /^\\d+\\.\\d+|^\\d+/,\n\t\t                method: function (arg) {\n\t\t                    var sig = new Tone.Signal(getNumber(arg));\n\t\t                    return sig;\n\t\t                }\n\t\t            },\n\t\t            'input': {\n\t\t                regexp: /^\\$\\d/,\n\t\t                method: function (arg, self) {\n\t\t                    return self.input[getNumber(arg.substr(1))];\n\t\t                }\n\t\t            }\n\t\t        },\n\t\t        //syntactic glue\n\t\t        'glue': {\n\t\t            '(': { regexp: /^\\(/ },\n\t\t            ')': { regexp: /^\\)/ },\n\t\t            ',': { regexp: /^,/ }\n\t\t        },\n\t\t        //functions\n\t\t        'func': {\n\t\t            'abs': {\n\t\t                regexp: /^abs/,\n\t\t                method: applyUnary.bind(this, Tone.Abs)\n\t\t            },\n\t\t            'mod': {\n\t\t                regexp: /^mod/,\n\t\t                method: function (args, self) {\n\t\t                    var modulus = literalNumber(args[1]);\n\t\t                    var op = new Tone.Modulo(modulus);\n\t\t                    self._eval(args[0]).connect(op);\n\t\t                    return op;\n\t\t                }\n\t\t            },\n\t\t            'pow': {\n\t\t                regexp: /^pow/,\n\t\t                method: function (args, self) {\n\t\t                    var exp = literalNumber(args[1]);\n\t\t                    var op = new Tone.Pow(exp);\n\t\t                    self._eval(args[0]).connect(op);\n\t\t                    return op;\n\t\t                }\n\t\t            },\n\t\t            'a2g': {\n\t\t                regexp: /^a2g/,\n\t\t                method: function (args, self) {\n\t\t                    var op = new Tone.AudioToGain();\n\t\t                    self._eval(args[0]).connect(op);\n\t\t                    return op;\n\t\t                }\n\t\t            }\n\t\t        },\n\t\t        //binary expressions\n\t\t        'binary': {\n\t\t            '+': {\n\t\t                regexp: /^\\+/,\n\t\t                precedence: 1,\n\t\t                method: applyBinary.bind(this, Tone.Add)\n\t\t            },\n\t\t            '-': {\n\t\t                regexp: /^\\-/,\n\t\t                precedence: 1,\n\t\t                method: function (args, self) {\n\t\t                    //both unary and binary op\n\t\t                    if (args.length === 1) {\n\t\t                        return applyUnary(Tone.Negate, args, self);\n\t\t                    } else {\n\t\t                        return applyBinary(Tone.Subtract, args, self);\n\t\t                    }\n\t\t                }\n\t\t            },\n\t\t            '*': {\n\t\t                regexp: /^\\*/,\n\t\t                precedence: 0,\n\t\t                method: applyBinary.bind(this, Tone.Multiply)\n\t\t            }\n\t\t        },\n\t\t        //unary expressions\n\t\t        'unary': {\n\t\t            '-': {\n\t\t                regexp: /^\\-/,\n\t\t                method: applyUnary.bind(this, Tone.Negate)\n\t\t            },\n\t\t            '!': {\n\t\t                regexp: /^\\!/,\n\t\t                method: applyUnary.bind(this, Tone.NOT)\n\t\t            }\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  @param   {string} expr the expression string\n\t\t\t *  @return  {number}      the input count\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Expr.prototype._parseInputs = function (expr) {\n\t\t        var inputArray = expr.match(/\\$\\d/g);\n\t\t        var inputMax = 0;\n\t\t        if (inputArray !== null) {\n\t\t            for (var i = 0; i < inputArray.length; i++) {\n\t\t                var inputNum = parseInt(inputArray[i].substr(1)) + 1;\n\t\t                inputMax = Math.max(inputMax, inputNum);\n\t\t            }\n\t\t        }\n\t\t        return inputMax;\n\t\t    };\n\t\t    /**\n\t\t\t *  @param   {Array} args \tan array of arguments\n\t\t\t *  @return  {string} the results of the replacements being replaced\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Expr.prototype._replacements = function (args) {\n\t\t        var expr = args.shift();\n\t\t        for (var i = 0; i < args.length; i++) {\n\t\t            expr = expr.replace(/\\%/i, args[i]);\n\t\t        }\n\t\t        return expr;\n\t\t    };\n\t\t    /**\n\t\t\t *  tokenize the expression based on the Expressions object\n\t\t\t *  @param   {string} expr \n\t\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Expr.prototype._tokenize = function (expr) {\n\t\t        var position = -1;\n\t\t        var tokens = [];\n\t\t        while (expr.length > 0) {\n\t\t            expr = expr.trim();\n\t\t            var token = getNextToken(expr);\n\t\t            tokens.push(token);\n\t\t            expr = expr.substr(token.value.length);\n\t\t        }\n\t\t        function getNextToken(expr) {\n\t\t            for (var type in Tone.Expr._Expressions) {\n\t\t                var group = Tone.Expr._Expressions[type];\n\t\t                for (var opName in group) {\n\t\t                    var op = group[opName];\n\t\t                    var reg = op.regexp;\n\t\t                    var match = expr.match(reg);\n\t\t                    if (match !== null) {\n\t\t                        return {\n\t\t                            type: type,\n\t\t                            value: match[0],\n\t\t                            method: op.method\n\t\t                        };\n\t\t                    }\n\t\t                }\n\t\t            }\n\t\t            throw new SyntaxError('Tone.Expr: Unexpected token ' + expr);\n\t\t        }\n\t\t        return {\n\t\t            next: function () {\n\t\t                return tokens[++position];\n\t\t            },\n\t\t            peek: function () {\n\t\t                return tokens[position + 1];\n\t\t            }\n\t\t        };\n\t\t    };\n\t\t    /**\n\t\t\t *  recursively parse the string expression into a syntax tree\n\t\t\t *  \n\t\t\t *  @param   {string} expr \n\t\t\t *  @return  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Expr.prototype._parseTree = function (expr) {\n\t\t        var lexer = this._tokenize(expr);\n\t\t        var isUndef = this.isUndef.bind(this);\n\t\t        function matchSyntax(token, syn) {\n\t\t            return !isUndef(token) && token.type === 'glue' && token.value === syn;\n\t\t        }\n\t\t        function matchGroup(token, groupName, prec) {\n\t\t            var ret = false;\n\t\t            var group = Tone.Expr._Expressions[groupName];\n\t\t            if (!isUndef(token)) {\n\t\t                for (var opName in group) {\n\t\t                    var op = group[opName];\n\t\t                    if (op.regexp.test(token.value)) {\n\t\t                        if (!isUndef(prec)) {\n\t\t                            if (op.precedence === prec) {\n\t\t                                return true;\n\t\t                            }\n\t\t                        } else {\n\t\t                            return true;\n\t\t                        }\n\t\t                    }\n\t\t                }\n\t\t            }\n\t\t            return ret;\n\t\t        }\n\t\t        function parseExpression(precedence) {\n\t\t            if (isUndef(precedence)) {\n\t\t                precedence = 5;\n\t\t            }\n\t\t            var expr;\n\t\t            if (precedence < 0) {\n\t\t                expr = parseUnary();\n\t\t            } else {\n\t\t                expr = parseExpression(precedence - 1);\n\t\t            }\n\t\t            var token = lexer.peek();\n\t\t            while (matchGroup(token, 'binary', precedence)) {\n\t\t                token = lexer.next();\n\t\t                expr = {\n\t\t                    operator: token.value,\n\t\t                    method: token.method,\n\t\t                    args: [\n\t\t                        expr,\n\t\t                        parseExpression(precedence - 1)\n\t\t                    ]\n\t\t                };\n\t\t                token = lexer.peek();\n\t\t            }\n\t\t            return expr;\n\t\t        }\n\t\t        function parseUnary() {\n\t\t            var token, expr;\n\t\t            token = lexer.peek();\n\t\t            if (matchGroup(token, 'unary')) {\n\t\t                token = lexer.next();\n\t\t                expr = parseUnary();\n\t\t                return {\n\t\t                    operator: token.value,\n\t\t                    method: token.method,\n\t\t                    args: [expr]\n\t\t                };\n\t\t            }\n\t\t            return parsePrimary();\n\t\t        }\n\t\t        function parsePrimary() {\n\t\t            var token, expr;\n\t\t            token = lexer.peek();\n\t\t            if (isUndef(token)) {\n\t\t                throw new SyntaxError('Tone.Expr: Unexpected termination of expression');\n\t\t            }\n\t\t            if (token.type === 'func') {\n\t\t                token = lexer.next();\n\t\t                return parseFunctionCall(token);\n\t\t            }\n\t\t            if (token.type === 'value') {\n\t\t                token = lexer.next();\n\t\t                return {\n\t\t                    method: token.method,\n\t\t                    args: token.value\n\t\t                };\n\t\t            }\n\t\t            if (matchSyntax(token, '(')) {\n\t\t                lexer.next();\n\t\t                expr = parseExpression();\n\t\t                token = lexer.next();\n\t\t                if (!matchSyntax(token, ')')) {\n\t\t                    throw new SyntaxError('Expected )');\n\t\t                }\n\t\t                return expr;\n\t\t            }\n\t\t            throw new SyntaxError('Tone.Expr: Parse error, cannot process token ' + token.value);\n\t\t        }\n\t\t        function parseFunctionCall(func) {\n\t\t            var token, args = [];\n\t\t            token = lexer.next();\n\t\t            if (!matchSyntax(token, '(')) {\n\t\t                throw new SyntaxError('Tone.Expr: Expected ( in a function call \"' + func.value + '\"');\n\t\t            }\n\t\t            token = lexer.peek();\n\t\t            if (!matchSyntax(token, ')')) {\n\t\t                args = parseArgumentList();\n\t\t            }\n\t\t            token = lexer.next();\n\t\t            if (!matchSyntax(token, ')')) {\n\t\t                throw new SyntaxError('Tone.Expr: Expected ) in a function call \"' + func.value + '\"');\n\t\t            }\n\t\t            return {\n\t\t                method: func.method,\n\t\t                args: args,\n\t\t                name: name\n\t\t            };\n\t\t        }\n\t\t        function parseArgumentList() {\n\t\t            var token, expr, args = [];\n\t\t            while (true) {\n\t\t                expr = parseExpression();\n\t\t                if (isUndef(expr)) {\n\t\t                    // TODO maybe throw exception?\n\t\t                    break;\n\t\t                }\n\t\t                args.push(expr);\n\t\t                token = lexer.peek();\n\t\t                if (!matchSyntax(token, ',')) {\n\t\t                    break;\n\t\t                }\n\t\t                lexer.next();\n\t\t            }\n\t\t            return args;\n\t\t        }\n\t\t        return parseExpression();\n\t\t    };\n\t\t    /**\n\t\t\t *  recursively evaluate the expression tree\n\t\t\t *  @param   {Object} tree \n\t\t\t *  @return  {AudioNode}      the resulting audio node from the expression\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Expr.prototype._eval = function (tree) {\n\t\t        if (!this.isUndef(tree)) {\n\t\t            var node = tree.method(tree.args, this);\n\t\t            this._nodes.push(node);\n\t\t            return node;\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  dispose all the nodes\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Expr.prototype._disposeNodes = function () {\n\t\t        for (var i = 0; i < this._nodes.length; i++) {\n\t\t            var node = this._nodes[i];\n\t\t            if (this.isFunction(node.dispose)) {\n\t\t                node.dispose();\n\t\t            } else if (this.isFunction(node.disconnect)) {\n\t\t                node.disconnect();\n\t\t            }\n\t\t            node = null;\n\t\t            this._nodes[i] = null;\n\t\t        }\n\t\t        this._nodes = null;\n\t\t    };\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t */\n\t\t    Tone.Expr.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._disposeNodes();\n\t\t    };\n\t\t    return Tone.Expr;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.\n\t\t\t *\n\t\t\t *  @extends {Tone.SignalBase}\n\t\t\t *  @constructor\n\t\t\t *  @example\n\t\t\t * var eqPowGain = new Tone.EqualPowerGain();\n\t\t\t */\n\t\t    Tone.EqualPowerGain = function () {\n\t\t        /**\n\t\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._eqPower = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t\t            if (Math.abs(val) < 0.001) {\n\t\t                //should output 0 when input is 0\n\t\t                return 0;\n\t\t            } else {\n\t\t                return this.equalPowerScale(val);\n\t\t            }\n\t\t        }.bind(this), 4096);\n\t\t    };\n\t\t    Tone.extend(Tone.EqualPowerGain, Tone.SignalBase);\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.EqualPowerGain} this\n\t\t\t */\n\t\t    Tone.EqualPowerGain.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._eqPower.dispose();\n\t\t        this._eqPower = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.EqualPowerGain;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t * @class  Tone.Crossfade provides equal power fading between two inputs. \n\t\t\t *         More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n\t\t\t *\n\t\t\t * @constructor\n\t\t\t * @extends {Tone}\n\t\t\t * @param {NormalRange} [initialFade=0.5]\n\t\t\t * @example\n\t\t\t * var crossFade = new Tone.CrossFade(0.5);\n\t\t\t * //connect effect A to crossfade from\n\t\t\t * //effect output 0 to crossfade input 0\n\t\t\t * effectA.connect(crossFade, 0, 0);\n\t\t\t * //connect effect B to crossfade from\n\t\t\t * //effect output 0 to crossfade input 1\n\t\t\t * effectB.connect(crossFade, 0, 1);\n\t\t\t * crossFade.fade.value = 0;\n\t\t\t * // ^ only effectA is output\n\t\t\t * crossFade.fade.value = 1;\n\t\t\t * // ^ only effectB is output\n\t\t\t * crossFade.fade.value = 0.5;\n\t\t\t * // ^ the two signals are mixed equally. \n\t\t\t */\n\t\t    Tone.CrossFade = function (initialFade) {\n\t\t        this.createInsOuts(2, 1);\n\t\t        /**\n\t\t\t\t *  Alias for <code>input[0]</code>. \n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t */\n\t\t        this.a = this.input[0] = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  Alias for <code>input[1]</code>. \n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t */\n\t\t        this.b = this.input[1] = new Tone.Gain();\n\t\t        /**\n\t\t\t\t * \tThe mix between the two inputs. A fade value of 0\n\t\t\t\t * \twill output 100% <code>input[0]</code> and \n\t\t\t\t * \ta value of 1 will output 100% <code>input[1]</code>. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.fade = new Tone.Signal(this.defaultArg(initialFade, 0.5), Tone.Type.NormalRange);\n\t\t        /**\n\t\t\t\t *  equal power gain cross fade\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t\t */\n\t\t        this._equalPowerA = new Tone.EqualPowerGain();\n\t\t        /**\n\t\t\t\t *  equal power gain cross fade\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t\t */\n\t\t        this._equalPowerB = new Tone.EqualPowerGain();\n\t\t        /**\n\t\t\t\t *  invert the incoming signal\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Tone}\n\t\t\t\t */\n\t\t        this._invert = new Tone.Expr('1 - $0');\n\t\t        //connections\n\t\t        this.a.connect(this.output);\n\t\t        this.b.connect(this.output);\n\t\t        this.fade.chain(this._equalPowerB, this.b.gain);\n\t\t        this.fade.chain(this._invert, this._equalPowerA, this.a.gain);\n\t\t        this._readOnly('fade');\n\t\t    };\n\t\t    Tone.extend(Tone.CrossFade);\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.CrossFade} this\n\t\t\t */\n\t\t    Tone.CrossFade.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._writable('fade');\n\t\t        this._equalPowerA.dispose();\n\t\t        this._equalPowerA = null;\n\t\t        this._equalPowerB.dispose();\n\t\t        this._equalPowerB = null;\n\t\t        this.fade.dispose();\n\t\t        this.fade = null;\n\t\t        this._invert.dispose();\n\t\t        this._invert = null;\n\t\t        this.a.dispose();\n\t\t        this.a = null;\n\t\t        this.b.dispose();\n\t\t        this.b = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.CrossFade;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.Filter is a filter which allows for all of the same native methods\n\t\t\t *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface). \n\t\t\t *          Tone.Filter has the added ability to set the filter rolloff at -12 \n\t\t\t *          (default), -24 and -48. \n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone}\n\t\t\t *  @param {Frequency|Object} [frequency] The cutoff frequency of the filter.\n\t\t\t *  @param {string=} type The type of filter.\n\t\t\t *  @param {number=} rolloff The drop in decibels per octave after the cutoff frequency.\n\t\t\t *                            3 choices: -12, -24, and -48\n\t\t\t *  @example\n\t\t\t *  var filter = new Tone.Filter(200, \"highpass\");\n\t\t\t */\n\t\t    Tone.Filter = function () {\n\t\t        this.createInsOuts(1, 1);\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'frequency',\n\t\t            'type',\n\t\t            'rolloff'\n\t\t        ], Tone.Filter.defaults);\n\t\t        /**\n\t\t\t\t *  the filter(s)\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._filters = [];\n\t\t        /**\n\t\t\t\t *  The cutoff frequency of the filter. \n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t\t        /**\n\t\t\t\t *  The detune parameter\n\t\t\t\t *  @type {Cents}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.detune = new Tone.Signal(0, Tone.Type.Cents);\n\t\t        /**\n\t\t\t\t *  The gain of the filter, only used in certain filter types\n\t\t\t\t *  @type {Number}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.gain = new Tone.Signal({\n\t\t            'value': options.gain,\n\t\t            'convert': false\n\t\t        });\n\t\t        /**\n\t\t\t\t *  The Q or Quality of the filter\n\t\t\t\t *  @type {Positive}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.Q = new Tone.Signal(options.Q);\n\t\t        /**\n\t\t\t\t *  the type of the filter\n\t\t\t\t *  @type {string}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._type = options.type;\n\t\t        /**\n\t\t\t\t *  the rolloff value of the filter\n\t\t\t\t *  @type {number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._rolloff = options.rolloff;\n\t\t        //set the rolloff;\n\t\t        this.rolloff = options.rolloff;\n\t\t        this._readOnly([\n\t\t            'detune',\n\t\t            'frequency',\n\t\t            'gain',\n\t\t            'Q'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.Filter);\n\t\t    /**\n\t\t\t *  the default parameters\n\t\t\t *\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.Filter.defaults = {\n\t\t        'type': 'lowpass',\n\t\t        'frequency': 350,\n\t\t        'rolloff': -12,\n\t\t        'Q': 1,\n\t\t        'gain': 0\n\t\t    };\n\t\t    /**\n\t\t\t * The type of the filter. Types: \"lowpass\", \"highpass\", \n\t\t\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\". \n\t\t\t * @memberOf Tone.Filter#\n\t\t\t * @type {string}\n\t\t\t * @name type\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Filter.prototype, 'type', {\n\t\t        get: function () {\n\t\t            return this._type;\n\t\t        },\n\t\t        set: function (type) {\n\t\t            var types = [\n\t\t                'lowpass',\n\t\t                'highpass',\n\t\t                'bandpass',\n\t\t                'lowshelf',\n\t\t                'highshelf',\n\t\t                'notch',\n\t\t                'allpass',\n\t\t                'peaking'\n\t\t            ];\n\t\t            if (types.indexOf(type) === -1) {\n\t\t                throw new TypeError('Tone.Filter: invalid type ' + type);\n\t\t            }\n\t\t            this._type = type;\n\t\t            for (var i = 0; i < this._filters.length; i++) {\n\t\t                this._filters[i].type = type;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The rolloff of the filter which is the drop in db\n\t\t\t * per octave. Implemented internally by cascading filters.\n\t\t\t * Only accepts the values -12, -24, -48 and -96.\n\t\t\t * @memberOf Tone.Filter#\n\t\t\t * @type {number}\n\t\t\t * @name rolloff\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Filter.prototype, 'rolloff', {\n\t\t        get: function () {\n\t\t            return this._rolloff;\n\t\t        },\n\t\t        set: function (rolloff) {\n\t\t            rolloff = parseInt(rolloff, 10);\n\t\t            var possibilities = [\n\t\t                -12,\n\t\t                -24,\n\t\t                -48,\n\t\t                -96\n\t\t            ];\n\t\t            var cascadingCount = possibilities.indexOf(rolloff);\n\t\t            //check the rolloff is valid\n\t\t            if (cascadingCount === -1) {\n\t\t                throw new RangeError('Tone.Filter: rolloff can only be -12, -24, -48 or -96');\n\t\t            }\n\t\t            cascadingCount += 1;\n\t\t            this._rolloff = rolloff;\n\t\t            //first disconnect the filters and throw them away\n\t\t            this.input.disconnect();\n\t\t            for (var i = 0; i < this._filters.length; i++) {\n\t\t                this._filters[i].disconnect();\n\t\t                this._filters[i] = null;\n\t\t            }\n\t\t            this._filters = new Array(cascadingCount);\n\t\t            for (var count = 0; count < cascadingCount; count++) {\n\t\t                var filter = this.context.createBiquadFilter();\n\t\t                filter.type = this._type;\n\t\t                this.frequency.connect(filter.frequency);\n\t\t                this.detune.connect(filter.detune);\n\t\t                this.Q.connect(filter.Q);\n\t\t                this.gain.connect(filter.gain);\n\t\t                this._filters[count] = filter;\n\t\t            }\n\t\t            //connect them up\n\t\t            var connectionChain = [this.input].concat(this._filters).concat([this.output]);\n\t\t            this.connectSeries.apply(this, connectionChain);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @return {Tone.Filter} this\n\t\t\t */\n\t\t    Tone.Filter.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        for (var i = 0; i < this._filters.length; i++) {\n\t\t            this._filters[i].disconnect();\n\t\t            this._filters[i] = null;\n\t\t        }\n\t\t        this._filters = null;\n\t\t        this._writable([\n\t\t            'detune',\n\t\t            'frequency',\n\t\t            'gain',\n\t\t            'Q'\n\t\t        ]);\n\t\t        this.frequency.dispose();\n\t\t        this.Q.dispose();\n\t\t        this.frequency = null;\n\t\t        this.Q = null;\n\t\t        this.detune.dispose();\n\t\t        this.detune = null;\n\t\t        this.gain.dispose();\n\t\t        this.gain = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Filter;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Split the incoming signal into three bands (low, mid, high)\n\t\t\t *         with two crossover frequency controls. \n\t\t\t *\n\t\t\t *  @extends {Tone}\n\t\t\t *  @constructor\n\t\t\t *  @param {Frequency|Object} [lowFrequency] the low/mid crossover frequency\n\t\t\t *  @param {Frequency} [highFrequency] the mid/high crossover frequency\n\t\t\t */\n\t\t    Tone.MultibandSplit = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'lowFrequency',\n\t\t            'highFrequency'\n\t\t        ], Tone.MultibandSplit.defaults);\n\t\t        /**\n\t\t\t\t *  the input\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.input = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  the outputs\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.output = new Array(3);\n\t\t        /**\n\t\t\t\t *  The low band. Alias for <code>output[0]</code>\n\t\t\t\t *  @type {Tone.Filter}\n\t\t\t\t */\n\t\t        this.low = this.output[0] = new Tone.Filter(0, 'lowpass');\n\t\t        /**\n\t\t\t\t *  the lower filter of the mid band\n\t\t\t\t *  @type {Tone.Filter}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lowMidFilter = new Tone.Filter(0, 'highpass');\n\t\t        /**\n\t\t\t\t *  The mid band output. Alias for <code>output[1]</code>\n\t\t\t\t *  @type {Tone.Filter}\n\t\t\t\t */\n\t\t        this.mid = this.output[1] = new Tone.Filter(0, 'lowpass');\n\t\t        /**\n\t\t\t\t *  The high band output. Alias for <code>output[2]</code>\n\t\t\t\t *  @type {Tone.Filter}\n\t\t\t\t */\n\t\t        this.high = this.output[2] = new Tone.Filter(0, 'highpass');\n\t\t        /**\n\t\t\t\t *  The low/mid crossover frequency.\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.lowFrequency = new Tone.Signal(options.lowFrequency, Tone.Type.Frequency);\n\t\t        /**\n\t\t\t\t *  The mid/high crossover frequency.\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.highFrequency = new Tone.Signal(options.highFrequency, Tone.Type.Frequency);\n\t\t        /**\n\t\t\t\t *  The quality of all the filters\n\t\t\t\t *  @type {Number}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.Q = new Tone.Signal(options.Q);\n\t\t        this.input.fan(this.low, this.high);\n\t\t        this.input.chain(this._lowMidFilter, this.mid);\n\t\t        //the frequency control signal\n\t\t        this.lowFrequency.connect(this.low.frequency);\n\t\t        this.lowFrequency.connect(this._lowMidFilter.frequency);\n\t\t        this.highFrequency.connect(this.mid.frequency);\n\t\t        this.highFrequency.connect(this.high.frequency);\n\t\t        //the Q value\n\t\t        this.Q.connect(this.low.Q);\n\t\t        this.Q.connect(this._lowMidFilter.Q);\n\t\t        this.Q.connect(this.mid.Q);\n\t\t        this.Q.connect(this.high.Q);\n\t\t        this._readOnly([\n\t\t            'high',\n\t\t            'mid',\n\t\t            'low',\n\t\t            'highFrequency',\n\t\t            'lowFrequency'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.MultibandSplit);\n\t\t    /**\n\t\t\t *  @private\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.MultibandSplit.defaults = {\n\t\t        'lowFrequency': 400,\n\t\t        'highFrequency': 2500,\n\t\t        'Q': 1\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.MultibandSplit} this\n\t\t\t */\n\t\t    Tone.MultibandSplit.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'high',\n\t\t            'mid',\n\t\t            'low',\n\t\t            'highFrequency',\n\t\t            'lowFrequency'\n\t\t        ]);\n\t\t        this.low.dispose();\n\t\t        this.low = null;\n\t\t        this._lowMidFilter.dispose();\n\t\t        this._lowMidFilter = null;\n\t\t        this.mid.dispose();\n\t\t        this.mid = null;\n\t\t        this.high.dispose();\n\t\t        this.high = null;\n\t\t        this.lowFrequency.dispose();\n\t\t        this.lowFrequency = null;\n\t\t        this.highFrequency.dispose();\n\t\t        this.highFrequency = null;\n\t\t        this.Q.dispose();\n\t\t        this.Q = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.MultibandSplit;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.EQ3 is a three band EQ with control over low, mid, and high gain as\n\t\t\t *         well as the low and high crossover frequencies.\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone}\n\t\t\t *  \n\t\t\t *  @param {Decibels|Object} [lowLevel] The gain applied to the lows.\n\t\t\t *  @param {Decibels} [midLevel] The gain applied to the mid.\n\t\t\t *  @param {Decibels} [highLevel] The gain applied to the high.\n\t\t\t *  @example\n\t\t\t * var eq = new Tone.EQ3(-10, 3, -20);\n\t\t\t */\n\t\t    Tone.EQ3 = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'low',\n\t\t            'mid',\n\t\t            'high'\n\t\t        ], Tone.EQ3.defaults);\n\t\t        /**\n\t\t\t\t *  the output node\n\t\t\t\t *  @type {GainNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.output = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  the multiband split\n\t\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._multibandSplit = this.input = new Tone.MultibandSplit({\n\t\t            'lowFrequency': options.lowFrequency,\n\t\t            'highFrequency': options.highFrequency\n\t\t        });\n\t\t        /**\n\t\t\t\t *  The gain for the lower signals\n\t\t\t\t *  @type  {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lowGain = new Tone.Gain(options.low, Tone.Type.Decibels);\n\t\t        /**\n\t\t\t\t *  The gain for the mid signals\n\t\t\t\t *  @type  {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._midGain = new Tone.Gain(options.mid, Tone.Type.Decibels);\n\t\t        /**\n\t\t\t\t * The gain in decibels of the high part\n\t\t\t\t * @type {Tone.Gain}\n\t\t\t\t * @private\n\t\t\t\t */\n\t\t        this._highGain = new Tone.Gain(options.high, Tone.Type.Decibels);\n\t\t        /**\n\t\t\t\t * The gain in decibels of the low part\n\t\t\t\t * @type {Decibels}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t\t        this.low = this._lowGain.gain;\n\t\t        /**\n\t\t\t\t * The gain in decibels of the mid part\n\t\t\t\t * @type {Decibels}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t\t        this.mid = this._midGain.gain;\n\t\t        /**\n\t\t\t\t * The gain in decibels of the high part\n\t\t\t\t * @type {Decibels}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t\t        this.high = this._highGain.gain;\n\t\t        /**\n\t\t\t\t *  The Q value for all of the filters. \n\t\t\t\t *  @type {Positive}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.Q = this._multibandSplit.Q;\n\t\t        /**\n\t\t\t\t *  The low/mid crossover frequency. \n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.lowFrequency = this._multibandSplit.lowFrequency;\n\t\t        /**\n\t\t\t\t *  The mid/high crossover frequency. \n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.highFrequency = this._multibandSplit.highFrequency;\n\t\t        //the frequency bands\n\t\t        this._multibandSplit.low.chain(this._lowGain, this.output);\n\t\t        this._multibandSplit.mid.chain(this._midGain, this.output);\n\t\t        this._multibandSplit.high.chain(this._highGain, this.output);\n\t\t        this._readOnly([\n\t\t            'low',\n\t\t            'mid',\n\t\t            'high',\n\t\t            'lowFrequency',\n\t\t            'highFrequency'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.EQ3);\n\t\t    /**\n\t\t\t *  the default values\n\t\t\t */\n\t\t    Tone.EQ3.defaults = {\n\t\t        'low': 0,\n\t\t        'mid': 0,\n\t\t        'high': 0,\n\t\t        'lowFrequency': 400,\n\t\t        'highFrequency': 2500\n\t\t    };\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.EQ3} this\n\t\t\t */\n\t\t    Tone.EQ3.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'low',\n\t\t            'mid',\n\t\t            'high',\n\t\t            'lowFrequency',\n\t\t            'highFrequency'\n\t\t        ]);\n\t\t        this._multibandSplit.dispose();\n\t\t        this._multibandSplit = null;\n\t\t        this.lowFrequency = null;\n\t\t        this.highFrequency = null;\n\t\t        this._lowGain.dispose();\n\t\t        this._lowGain = null;\n\t\t        this._midGain.dispose();\n\t\t        this._midGain = null;\n\t\t        this._highGain.dispose();\n\t\t        this._highGain = null;\n\t\t        this.low = null;\n\t\t        this.mid = null;\n\t\t        this.high = null;\n\t\t        this.Q = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.EQ3;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Performs a linear scaling on an input signal.\n\t\t\t *          Scales a NormalRange input to between\n\t\t\t *          outputMin and outputMax.\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.SignalBase}\n\t\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t\t *  @example\n\t\t\t * var scale = new Tone.Scale(50, 100);\n\t\t\t * var signal = new Tone.Signal(0.5).connect(scale);\n\t\t\t * //the output of scale equals 75\n\t\t\t */\n\t\t    Tone.Scale = function (outputMin, outputMax) {\n\t\t        /** \n\t\t\t\t *  @private\n\t\t\t\t *  @type {number}\n\t\t\t\t */\n\t\t        this._outputMin = this.defaultArg(outputMin, 0);\n\t\t        /** \n\t\t\t\t *  @private\n\t\t\t\t *  @type {number}\n\t\t\t\t */\n\t\t        this._outputMax = this.defaultArg(outputMax, 1);\n\t\t        /** \n\t\t\t\t *  @private\n\t\t\t\t *  @type {Tone.Multiply}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._scale = this.input = new Tone.Multiply(1);\n\t\t        /** \n\t\t\t\t *  @private\n\t\t\t\t *  @type {Tone.Add}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._add = this.output = new Tone.Add(0);\n\t\t        this._scale.connect(this._add);\n\t\t        this._setRange();\n\t\t    };\n\t\t    Tone.extend(Tone.Scale, Tone.SignalBase);\n\t\t    /**\n\t\t\t * The minimum output value. This number is output when \n\t\t\t * the value input value is 0. \n\t\t\t * @memberOf Tone.Scale#\n\t\t\t * @type {number}\n\t\t\t * @name min\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Scale.prototype, 'min', {\n\t\t        get: function () {\n\t\t            return this._outputMin;\n\t\t        },\n\t\t        set: function (min) {\n\t\t            this._outputMin = min;\n\t\t            this._setRange();\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The maximum output value. This number is output when \n\t\t\t * the value input value is 1. \n\t\t\t * @memberOf Tone.Scale#\n\t\t\t * @type {number}\n\t\t\t * @name max\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Scale.prototype, 'max', {\n\t\t        get: function () {\n\t\t            return this._outputMax;\n\t\t        },\n\t\t        set: function (max) {\n\t\t            this._outputMax = max;\n\t\t            this._setRange();\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  set the values\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Scale.prototype._setRange = function () {\n\t\t        this._add.value = this._outputMin;\n\t\t        this._scale.value = this._outputMax - this._outputMin;\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.Scale} this\n\t\t\t */\n\t\t    Tone.Scale.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._add.dispose();\n\t\t        this._add = null;\n\t\t        this._scale.dispose();\n\t\t        this._scale = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Scale;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    /**\n\t\t\t *  @class  Performs an exponential scaling on an input signal.\n\t\t\t *          Scales a NormalRange value [0,1] exponentially\n\t\t\t *          to the output range of outputMin to outputMax.\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.SignalBase}\n\t\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t\t *  @param {number} [exponent=2] The exponent which scales the incoming signal.\n\t\t\t *  @example\n\t\t\t * var scaleExp = new Tone.ScaleExp(0, 100, 2);\n\t\t\t * var signal = new Tone.Signal(0.5).connect(scaleExp);\n\t\t\t */\n\t\t    Tone.ScaleExp = function (outputMin, outputMax, exponent) {\n\t\t        /**\n\t\t\t\t *  scale the input to the output range\n\t\t\t\t *  @type {Tone.Scale}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._scale = this.output = new Tone.Scale(outputMin, outputMax);\n\t\t        /**\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Tone.Pow}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._exp = this.input = new Tone.Pow(this.defaultArg(exponent, 2));\n\t\t        this._exp.connect(this._scale);\n\t\t    };\n\t\t    Tone.extend(Tone.ScaleExp, Tone.SignalBase);\n\t\t    /**\n\t\t\t * Instead of interpolating linearly between the <code>min</code> and \n\t\t\t * <code>max</code> values, setting the exponent will interpolate between\n\t\t\t * the two values with an exponential curve. \n\t\t\t * @memberOf Tone.ScaleExp#\n\t\t\t * @type {number}\n\t\t\t * @name exponent\n\t\t\t */\n\t\t    Object.defineProperty(Tone.ScaleExp.prototype, 'exponent', {\n\t\t        get: function () {\n\t\t            return this._exp.value;\n\t\t        },\n\t\t        set: function (exp) {\n\t\t            this._exp.value = exp;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The minimum output value. This number is output when \n\t\t\t * the value input value is 0. \n\t\t\t * @memberOf Tone.ScaleExp#\n\t\t\t * @type {number}\n\t\t\t * @name min\n\t\t\t */\n\t\t    Object.defineProperty(Tone.ScaleExp.prototype, 'min', {\n\t\t        get: function () {\n\t\t            return this._scale.min;\n\t\t        },\n\t\t        set: function (min) {\n\t\t            this._scale.min = min;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The maximum output value. This number is output when \n\t\t\t * the value input value is 1. \n\t\t\t * @memberOf Tone.ScaleExp#\n\t\t\t * @type {number}\n\t\t\t * @name max\n\t\t\t */\n\t\t    Object.defineProperty(Tone.ScaleExp.prototype, 'max', {\n\t\t        get: function () {\n\t\t            return this._scale.max;\n\t\t        },\n\t\t        set: function (max) {\n\t\t            this._scale.max = max;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.ScaleExp} this\n\t\t\t */\n\t\t    Tone.ScaleExp.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._scale.dispose();\n\t\t        this._scale = null;\n\t\t        this._exp.dispose();\n\t\t        this._exp = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.ScaleExp;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  createDelay shim\n\t\t\t *  @private\n\t\t\t */\n\t\t    if (window.DelayNode && !AudioContext.prototype.createDelay) {\n\t\t        AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;\n\t\t    }\n\t\t    /**\n\t\t\t *  @class Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface). \n\t\t\t *  @extends {Tone}\n\t\t\t *  @param {Time=} delayTime The delay applied to the incoming signal.\n\t\t\t *  @param {Time=} maxDelay The maximum delay time. \n\t\t\t */\n\t\t    Tone.Delay = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'delayTime',\n\t\t            'maxDelay'\n\t\t        ], Tone.Delay.defaults);\n\t\t        /**\n\t\t\t\t *  The native delay node\n\t\t\t\t *  @type {DelayNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._delayNode = this.input = this.output = this.context.createDelay(this.toSeconds(options.maxDelay));\n\t\t        /**\n\t\t\t\t *  The amount of time the incoming signal is\n\t\t\t\t *  delayed. \n\t\t\t\t *  @type {Tone.Param}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.delayTime = new Tone.Param({\n\t\t            'param': this._delayNode.delayTime,\n\t\t            'units': Tone.Type.Time,\n\t\t            'value': options.delayTime\n\t\t        });\n\t\t        this._readOnly('delayTime');\n\t\t    };\n\t\t    Tone.extend(Tone.Delay);\n\t\t    /**\n\t\t\t *  The defaults\n\t\t\t *  @const\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t\t    Tone.Delay.defaults = {\n\t\t        'maxDelay': 1,\n\t\t        'delayTime': 0\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @return  {Tone.Delay}  this\n\t\t\t */\n\t\t    Tone.Delay.prototype.dispose = function () {\n\t\t        Tone.Param.prototype.dispose.call(this);\n\t\t        this._delayNode.disconnect();\n\t\t        this._delayNode = null;\n\t\t        this._writable('delayTime');\n\t\t        this.delayTime = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Delay;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Comb filters are basic building blocks for physical modeling. Read more\n\t\t\t *         about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n\t\t\t *\n\t\t\t *  @extends {Tone}\n\t\t\t *  @constructor\n\t\t\t *  @param {Time|Object} [delayTime] The delay time of the filter. \n\t\t\t *  @param {NormalRange=} resonance The amount of feedback the filter has. \n\t\t\t */\n\t\t    Tone.FeedbackCombFilter = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'delayTime',\n\t\t            'resonance'\n\t\t        ], Tone.FeedbackCombFilter.defaults);\n\t\t        /**\n\t\t\t\t *  the delay node\n\t\t\t\t *  @type {DelayNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._delay = this.input = this.output = new Tone.Delay(options.delayTime);\n\t\t        /**\n\t\t\t\t *  The amount of delay of the comb filter. \n\t\t\t\t *  @type {Time}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.delayTime = this._delay.delayTime;\n\t\t        /**\n\t\t\t\t *  the feedback node\n\t\t\t\t *  @type {GainNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t\t        /**\n\t\t\t\t *  The amount of feedback of the delayed signal. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.resonance = this._feedback.gain;\n\t\t        this._delay.chain(this._feedback, this._delay);\n\t\t        this._readOnly([\n\t\t            'resonance',\n\t\t            'delayTime'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.FeedbackCombFilter);\n\t\t    /**\n\t\t\t *  the default parameters\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.FeedbackCombFilter.defaults = {\n\t\t        'delayTime': 0.1,\n\t\t        'resonance': 0.5\n\t\t    };\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.FeedbackCombFilter} this\n\t\t\t */\n\t\t    Tone.FeedbackCombFilter.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'resonance',\n\t\t            'delayTime'\n\t\t        ]);\n\t\t        this._delay.dispose();\n\t\t        this._delay = null;\n\t\t        this.delayTime = null;\n\t\t        this._feedback.dispose();\n\t\t        this._feedback = null;\n\t\t        this.resonance = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.FeedbackCombFilter;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.Follower is a  crude envelope follower which will follow \n\t\t\t *          the amplitude of an incoming signal. \n\t\t\t *          Take care with small (< 0.02) attack or decay values \n\t\t\t *          as follower has some ripple which is exaggerated\n\t\t\t *          at these values. Read more about envelope followers (also known \n\t\t\t *          as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).\n\t\t\t *  \n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone}\n\t\t\t *  @param {Time|Object} [attack] The rate at which the follower rises.\n\t\t\t *  @param {Time=} release The rate at which the folower falls. \n\t\t\t *  @example\n\t\t\t * var follower = new Tone.Follower(0.2, 0.4);\n\t\t\t */\n\t\t    Tone.Follower = function () {\n\t\t        this.createInsOuts(1, 1);\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'attack',\n\t\t            'release'\n\t\t        ], Tone.Follower.defaults);\n\t\t        /**\n\t\t\t\t *  @type {Tone.Abs}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._abs = new Tone.Abs();\n\t\t        /**\n\t\t\t\t *  the lowpass filter which smooths the input\n\t\t\t\t *  @type {BiquadFilterNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._filter = this.context.createBiquadFilter();\n\t\t        this._filter.type = 'lowpass';\n\t\t        this._filter.frequency.value = 0;\n\t\t        this._filter.Q.value = -100;\n\t\t        /**\n\t\t\t\t *  @type {WaveShaperNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._frequencyValues = new Tone.WaveShaper();\n\t\t        /**\n\t\t\t\t *  @type {Tone.Subtract}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._sub = new Tone.Subtract();\n\t\t        /**\n\t\t\t\t *  @type {Tone.Delay}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._delay = new Tone.Delay(this.blockTime);\n\t\t        /**\n\t\t\t\t *  this keeps it far from 0, even for very small differences\n\t\t\t\t *  @type {Tone.Multiply}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._mult = new Tone.Multiply(10000);\n\t\t        /**\n\t\t\t\t *  @private\n\t\t\t\t *  @type {number}\n\t\t\t\t */\n\t\t        this._attack = options.attack;\n\t\t        /**\n\t\t\t\t *  @private\n\t\t\t\t *  @type {number}\n\t\t\t\t */\n\t\t        this._release = options.release;\n\t\t        //the smoothed signal to get the values\n\t\t        this.input.chain(this._abs, this._filter, this.output);\n\t\t        //the difference path\n\t\t        this._abs.connect(this._sub, 0, 1);\n\t\t        this._filter.chain(this._delay, this._sub);\n\t\t        //threshold the difference and use the thresh to set the frequency\n\t\t        this._sub.chain(this._mult, this._frequencyValues, this._filter.frequency);\n\t\t        //set the attack and release values in the table\n\t\t        this._setAttackRelease(this._attack, this._release);\n\t\t    };\n\t\t    Tone.extend(Tone.Follower);\n\t\t    /**\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.Follower.defaults = {\n\t\t        'attack': 0.05,\n\t\t        'release': 0.5\n\t\t    };\n\t\t    /**\n\t\t\t *  sets the attack and release times in the wave shaper\n\t\t\t *  @param   {Time} attack  \n\t\t\t *  @param   {Time} release \n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Follower.prototype._setAttackRelease = function (attack, release) {\n\t\t        var minTime = this.blockTime;\n\t\t        attack = Tone.Time(attack).toFrequency();\n\t\t        release = Tone.Time(release).toFrequency();\n\t\t        attack = Math.max(attack, minTime);\n\t\t        release = Math.max(release, minTime);\n\t\t        this._frequencyValues.setMap(function (val) {\n\t\t            if (val <= 0) {\n\t\t                return attack;\n\t\t            } else {\n\t\t                return release;\n\t\t            }\n\t\t        });\n\t\t    };\n\t\t    /**\n\t\t\t * The attack time.\n\t\t\t * @memberOf Tone.Follower#\n\t\t\t * @type {Time}\n\t\t\t * @name attack\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Follower.prototype, 'attack', {\n\t\t        get: function () {\n\t\t            return this._attack;\n\t\t        },\n\t\t        set: function (attack) {\n\t\t            this._attack = attack;\n\t\t            this._setAttackRelease(this._attack, this._release);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The release time.\n\t\t\t * @memberOf Tone.Follower#\n\t\t\t * @type {Time}\n\t\t\t * @name release\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Follower.prototype, 'release', {\n\t\t        get: function () {\n\t\t            return this._release;\n\t\t        },\n\t\t        set: function (release) {\n\t\t            this._release = release;\n\t\t            this._setAttackRelease(this._attack, this._release);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Borrows the connect method from Signal so that the output can be used\n\t\t\t *  as a Tone.Signal control signal.\n\t\t\t *  @function\n\t\t\t */\n\t\t    Tone.Follower.prototype.connect = Tone.Signal.prototype.connect;\n\t\t    /**\n\t\t\t *  dispose\n\t\t\t *  @returns {Tone.Follower} this\n\t\t\t */\n\t\t    Tone.Follower.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._filter.disconnect();\n\t\t        this._filter = null;\n\t\t        this._frequencyValues.disconnect();\n\t\t        this._frequencyValues = null;\n\t\t        this._delay.dispose();\n\t\t        this._delay = null;\n\t\t        this._sub.disconnect();\n\t\t        this._sub = null;\n\t\t        this._abs.dispose();\n\t\t        this._abs = null;\n\t\t        this._mult.dispose();\n\t\t        this._mult = null;\n\t\t        this._curve = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Follower;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.ScaledEnvelop is an envelope which can be scaled \n\t\t\t *         to any range. It's useful for applying an envelope \n\t\t\t *         to a frequency or any other non-NormalRange signal \n\t\t\t *         parameter. \n\t\t\t *\n\t\t\t *  @extends {Tone.Envelope}\n\t\t\t *  @constructor\n\t\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t\t *  @example\n\t\t\t *  var scaledEnv = new Tone.ScaledEnvelope({\n\t\t\t *  \t\"attack\" : 0.2,\n\t\t\t *  \t\"min\" : 200,\n\t\t\t *  \t\"max\" : 2000\n\t\t\t *  });\n\t\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t\t */\n\t\t    Tone.ScaledEnvelope = function () {\n\t\t        //get all of the defaults\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'attack',\n\t\t            'decay',\n\t\t            'sustain',\n\t\t            'release'\n\t\t        ], Tone.Envelope.defaults);\n\t\t        Tone.Envelope.call(this, options);\n\t\t        options = this.defaultArg(options, Tone.ScaledEnvelope.defaults);\n\t\t        /** \n\t\t\t\t *  scale the incoming signal by an exponent\n\t\t\t\t *  @type {Tone.Pow}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._exp = this.output = new Tone.Pow(options.exponent);\n\t\t        /**\n\t\t\t\t *  scale the signal to the desired range\n\t\t\t\t *  @type {Tone.Multiply}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._scale = this.output = new Tone.Scale(options.min, options.max);\n\t\t        this._sig.chain(this._exp, this._scale);\n\t\t    };\n\t\t    Tone.extend(Tone.ScaledEnvelope, Tone.Envelope);\n\t\t    /**\n\t\t\t *  the default parameters\n\t\t\t *  @static\n\t\t\t */\n\t\t    Tone.ScaledEnvelope.defaults = {\n\t\t        'min': 0,\n\t\t        'max': 1,\n\t\t        'exponent': 1\n\t\t    };\n\t\t    /**\n\t\t\t * The envelope's min output value. This is the value which it\n\t\t\t * starts at. \n\t\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t\t * @type {number}\n\t\t\t * @name min\n\t\t\t */\n\t\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'min', {\n\t\t        get: function () {\n\t\t            return this._scale.min;\n\t\t        },\n\t\t        set: function (min) {\n\t\t            this._scale.min = min;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The envelope's max output value. In other words, the value\n\t\t\t * at the peak of the attack portion of the envelope. \n\t\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t\t * @type {number}\n\t\t\t * @name max\n\t\t\t */\n\t\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'max', {\n\t\t        get: function () {\n\t\t            return this._scale.max;\n\t\t        },\n\t\t        set: function (max) {\n\t\t            this._scale.max = max;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The envelope's exponent value. \n\t\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t\t * @type {number}\n\t\t\t * @name exponent\n\t\t\t */\n\t\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'exponent', {\n\t\t        get: function () {\n\t\t            return this._exp.value;\n\t\t        },\n\t\t        set: function (exp) {\n\t\t            this._exp.value = exp;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.ScaledEnvelope} this\n\t\t\t */\n\t\t    Tone.ScaledEnvelope.prototype.dispose = function () {\n\t\t        Tone.Envelope.prototype.dispose.call(this);\n\t\t        this._scale.dispose();\n\t\t        this._scale = null;\n\t\t        this._exp.dispose();\n\t\t        this._exp = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.ScaledEnvelope;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`\n\t\t\t *         it's got a `baseFrequency` and `octaves` parameter. \n\t\t\t *\n\t\t\t *  @extends {Tone.Envelope}\n\t\t\t *  @constructor\n\t\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t\t *  @example\n\t\t\t *  var env = new Tone.FrequencyEnvelope({\n\t\t\t *  \t\"attack\" : 0.2,\n\t\t\t *  \t\"baseFrequency\" : \"C2\",\n\t\t\t *  \t\"octaves\" : 4\n\t\t\t *  });\n\t\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t\t */\n\t\t    Tone.FrequencyEnvelope = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'attack',\n\t\t            'decay',\n\t\t            'sustain',\n\t\t            'release'\n\t\t        ], Tone.Envelope.defaults);\n\t\t        Tone.ScaledEnvelope.call(this, options);\n\t\t        options = this.defaultArg(options, Tone.FrequencyEnvelope.defaults);\n\t\t        /**\n\t\t\t\t *  Stores the octave value\n\t\t\t\t *  @type {Positive}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._octaves = options.octaves;\n\t\t        //setup\n\t\t        this.baseFrequency = options.baseFrequency;\n\t\t        this.octaves = options.octaves;\n\t\t    };\n\t\t    Tone.extend(Tone.FrequencyEnvelope, Tone.Envelope);\n\t\t    /**\n\t\t\t *  the default parameters\n\t\t\t *  @static\n\t\t\t */\n\t\t    Tone.FrequencyEnvelope.defaults = {\n\t\t        'baseFrequency': 200,\n\t\t        'octaves': 4,\n\t\t        'exponent': 2\n\t\t    };\n\t\t    /**\n\t\t\t * The envelope's mininum output value. This is the value which it\n\t\t\t * starts at. \n\t\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t\t * @type {Frequency}\n\t\t\t * @name baseFrequency\n\t\t\t */\n\t\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'baseFrequency', {\n\t\t        get: function () {\n\t\t            return this._scale.min;\n\t\t        },\n\t\t        set: function (min) {\n\t\t            this._scale.min = this.toFrequency(min);\n\t\t            //also update the octaves\n\t\t            this.octaves = this._octaves;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The number of octaves above the baseFrequency that the\n\t\t\t * envelope will scale to.\n\t\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t\t * @type {Positive}\n\t\t\t * @name octaves\n\t\t\t */\n\t\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'octaves', {\n\t\t        get: function () {\n\t\t            return this._octaves;\n\t\t        },\n\t\t        set: function (octaves) {\n\t\t            this._octaves = octaves;\n\t\t            this._scale.max = this.baseFrequency * Math.pow(2, octaves);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The envelope's exponent value. \n\t\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t\t * @type {number}\n\t\t\t * @name exponent\n\t\t\t */\n\t\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'exponent', {\n\t\t        get: function () {\n\t\t            return this._exp.value;\n\t\t        },\n\t\t        set: function (exp) {\n\t\t            this._exp.value = exp;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.FrequencyEnvelope} this\n\t\t\t */\n\t\t    Tone.FrequencyEnvelope.prototype.dispose = function () {\n\t\t        Tone.ScaledEnvelope.prototype.dispose.call(this);\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.FrequencyEnvelope;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.Gate only passes a signal through when the incoming \n\t\t\t *          signal exceeds a specified threshold. To do this, Gate uses \n\t\t\t *          a Tone.Follower to follow the amplitude of the incoming signal. \n\t\t\t *          A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).\n\t\t\t *  \n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone}\n\t\t\t *  @param {Decibels|Object} [threshold] The threshold above which the gate will open. \n\t\t\t *  @param {Time=} attack The follower's attack time\n\t\t\t *  @param {Time=} release The follower's release time\n\t\t\t *  @example\n\t\t\t * var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();\n\t\t\t * var mic = new Tone.UserMedia().connect(gate);\n\t\t\t * //the gate will only pass through the incoming \n\t\t\t * //signal when it's louder than -30db\n\t\t\t */\n\t\t    Tone.Gate = function () {\n\t\t        this.createInsOuts(1, 1);\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'threshold',\n\t\t            'attack',\n\t\t            'release'\n\t\t        ], Tone.Gate.defaults);\n\t\t        /**\n\t\t\t\t *  @type {Tone.Follower}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._follower = new Tone.Follower(options.attack, options.release);\n\t\t        /**\n\t\t\t\t *  @type {Tone.GreaterThan}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._gt = new Tone.GreaterThan(this.dbToGain(options.threshold));\n\t\t        //the connections\n\t\t        this.input.connect(this.output);\n\t\t        //the control signal\n\t\t        this.input.chain(this._gt, this._follower, this.output.gain);\n\t\t    };\n\t\t    Tone.extend(Tone.Gate);\n\t\t    /**\n\t\t\t *  @const\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.Gate.defaults = {\n\t\t        'attack': 0.1,\n\t\t        'release': 0.1,\n\t\t        'threshold': -40\n\t\t    };\n\t\t    /**\n\t\t\t * The threshold of the gate in decibels\n\t\t\t * @memberOf Tone.Gate#\n\t\t\t * @type {Decibels}\n\t\t\t * @name threshold\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Gate.prototype, 'threshold', {\n\t\t        get: function () {\n\t\t            return this.gainToDb(this._gt.value);\n\t\t        },\n\t\t        set: function (thresh) {\n\t\t            this._gt.value = this.dbToGain(thresh);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The attack speed of the gate\n\t\t\t * @memberOf Tone.Gate#\n\t\t\t * @type {Time}\n\t\t\t * @name attack\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Gate.prototype, 'attack', {\n\t\t        get: function () {\n\t\t            return this._follower.attack;\n\t\t        },\n\t\t        set: function (attackTime) {\n\t\t            this._follower.attack = attackTime;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The release speed of the gate\n\t\t\t * @memberOf Tone.Gate#\n\t\t\t * @type {Time}\n\t\t\t * @name release\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Gate.prototype, 'release', {\n\t\t        get: function () {\n\t\t            return this._follower.release;\n\t\t        },\n\t\t        set: function (releaseTime) {\n\t\t            this._follower.release = releaseTime;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.Gate} this\n\t\t\t */\n\t\t    Tone.Gate.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._follower.dispose();\n\t\t        this._gt.dispose();\n\t\t        this._follower = null;\n\t\t        this._gt = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Gate;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  A Timeline State. Provides the methods: <code>setStateAtTime(\"state\", time)</code>\n\t\t\t *          and <code>getValueAtTime(time)</code>.\n\t\t\t *\n\t\t\t *  @extends {Tone.Timeline}\n\t\t\t *  @param {String} initial The initial state of the TimelineState. \n\t\t\t *                          Defaults to <code>undefined</code>\n\t\t\t */\n\t\t    Tone.TimelineState = function (initial) {\n\t\t        Tone.Timeline.call(this);\n\t\t        /**\n\t\t\t\t *  The initial state\n\t\t\t\t *  @private\n\t\t\t\t *  @type {String}\n\t\t\t\t */\n\t\t        this._initial = initial;\n\t\t    };\n\t\t    Tone.extend(Tone.TimelineState, Tone.Timeline);\n\t\t    /**\n\t\t\t *  Returns the scheduled state scheduled before or at\n\t\t\t *  the given time.\n\t\t\t *  @param  {Number}  time  The time to query.\n\t\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t\t */\n\t\t    Tone.TimelineState.prototype.getValueAtTime = function (time) {\n\t\t        var event = this.get(time);\n\t\t        if (event !== null) {\n\t\t            return event.state;\n\t\t        } else {\n\t\t            return this._initial;\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Returns the scheduled state scheduled before or at\n\t\t\t *  the given time.\n\t\t\t *  @param  {String}  state The name of the state to set.\n\t\t\t *  @param  {Number}  time  The time to query.\n\t\t\t */\n\t\t    Tone.TimelineState.prototype.setStateAtTime = function (state, time) {\n\t\t        this.add({\n\t\t            'state': state,\n\t\t            'time': time\n\t\t        });\n\t\t    };\n\t\t    return Tone.TimelineState;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  A sample accurate clock which provides a callback at the given rate. \n\t\t\t *          While the callback is not sample-accurate (it is still susceptible to\n\t\t\t *          loose JS timing), the time passed in as the argument to the callback\n\t\t\t *          is precise. For most applications, it is better to use Tone.Transport\n\t\t\t *          instead of the Clock by itself since you can synchronize multiple callbacks.\n\t\t\t *\n\t\t\t * \t@constructor\n\t\t\t *  @extends {Tone.Emitter}\n\t\t\t * \t@param {function} callback The callback to be invoked with the time of the audio event\n\t\t\t * \t@param {Frequency} frequency The rate of the callback\n\t\t\t * \t@example\n\t\t\t * //the callback will be invoked approximately once a second\n\t\t\t * //and will print the time exactly once a second apart.\n\t\t\t * var clock = new Tone.Clock(function(time){\n\t\t\t * \tconsole.log(time);\n\t\t\t * }, 1);\n\t\t\t */\n\t\t    Tone.Clock = function () {\n\t\t        Tone.Emitter.call(this);\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'callback',\n\t\t            'frequency'\n\t\t        ], Tone.Clock.defaults);\n\t\t        /**\n\t\t\t\t *  The callback function to invoke at the scheduled tick.\n\t\t\t\t *  @type  {Function}\n\t\t\t\t */\n\t\t        this.callback = options.callback;\n\t\t        /**\n\t\t\t\t *  The next time the callback is scheduled.\n\t\t\t\t *  @type {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._nextTick = 0;\n\t\t        /**\n\t\t\t\t *  The last state of the clock.\n\t\t\t\t *  @type  {State}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lastState = Tone.State.Stopped;\n\t\t        /**\n\t\t\t\t *  The rate the callback function should be invoked. \n\t\t\t\t *  @type  {BPM}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.frequency = new Tone.TimelineSignal(options.frequency, Tone.Type.Frequency);\n\t\t        this._readOnly('frequency');\n\t\t        /**\n\t\t\t\t *  The number of times the callback was invoked. Starts counting at 0\n\t\t\t\t *  and increments after the callback was invoked. \n\t\t\t\t *  @type {Ticks}\n\t\t\t\t *  @readOnly\n\t\t\t\t */\n\t\t        this.ticks = 0;\n\t\t        /**\n\t\t\t\t *  The state timeline\n\t\t\t\t *  @type {Tone.TimelineState}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t\t        /**\n\t\t\t\t *  The loop function bound to its context. \n\t\t\t\t *  This is necessary to remove the event in the end.\n\t\t\t\t *  @type {Function}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._boundLoop = this._loop.bind(this);\n\t\t        //bind a callback to the worker thread\n\t\t        this.context.on('tick', this._boundLoop);\n\t\t    };\n\t\t    Tone.extend(Tone.Clock, Tone.Emitter);\n\t\t    /**\n\t\t\t *  The defaults\n\t\t\t *  @const\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t\t    Tone.Clock.defaults = {\n\t\t        'callback': Tone.noOp,\n\t\t        'frequency': 1,\n\t\t        'lookAhead': 'auto'\n\t\t    };\n\t\t    /**\n\t\t\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t\t\t *  @type {Tone.State}\n\t\t\t *  @readOnly\n\t\t\t *  @memberOf Tone.Clock#\n\t\t\t *  @name state\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Clock.prototype, 'state', {\n\t\t        get: function () {\n\t\t            return this._state.getValueAtTime(this.now());\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Start the clock at the given time. Optionally pass in an offset\n\t\t\t *  of where to start the tick counter from.\n\t\t\t *  @param  {Time}  time    The time the clock should start\n\t\t\t *  @param  {Ticks=}  offset  Where the tick counter starts counting from.\n\t\t\t *  @return  {Tone.Clock}  this\n\t\t\t */\n\t\t    Tone.Clock.prototype.start = function (time, offset) {\n\t\t        time = this.toSeconds(time);\n\t\t        if (this._state.getValueAtTime(time) !== Tone.State.Started) {\n\t\t            this._state.add({\n\t\t                'state': Tone.State.Started,\n\t\t                'time': time,\n\t\t                'offset': offset\n\t\t            });\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t\t *  @returns {Tone.Clock} this\n\t\t\t *  @example\n\t\t\t * clock.stop();\n\t\t\t */\n\t\t    Tone.Clock.prototype.stop = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        this._state.cancel(time);\n\t\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Pause the clock. Pausing does not reset the tick counter.\n\t\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t\t *  @returns {Tone.Clock} this\n\t\t\t */\n\t\t    Tone.Clock.prototype.pause = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t\t            this._state.setStateAtTime(Tone.State.Paused, time);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  The scheduling loop.\n\t\t\t *  @param  {Number}  time  The current page time starting from 0\n\t\t\t *                          when the page was loaded.\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Clock.prototype._loop = function () {\n\t\t        //get the frequency value to compute the value of the next loop\n\t\t        var now = this.now();\n\t\t        //if it's started\n\t\t        var lookAhead = this.context.lookAhead;\n\t\t        var updateInterval = this.context.updateInterval;\n\t\t        var lagCompensation = this.context.lag * 2;\n\t\t        var loopInterval = now + lookAhead + updateInterval + lagCompensation;\n\t\t        while (loopInterval > this._nextTick && this._state) {\n\t\t            var currentState = this._state.getValueAtTime(this._nextTick);\n\t\t            if (currentState !== this._lastState) {\n\t\t                this._lastState = currentState;\n\t\t                var event = this._state.get(this._nextTick);\n\t\t                // emit an event\n\t\t                if (currentState === Tone.State.Started) {\n\t\t                    //correct the time\n\t\t                    this._nextTick = event.time;\n\t\t                    if (!this.isUndef(event.offset)) {\n\t\t                        this.ticks = event.offset;\n\t\t                    }\n\t\t                    this.emit('start', event.time, this.ticks);\n\t\t                } else if (currentState === Tone.State.Stopped) {\n\t\t                    this.ticks = 0;\n\t\t                    this.emit('stop', event.time);\n\t\t                } else if (currentState === Tone.State.Paused) {\n\t\t                    this.emit('pause', event.time);\n\t\t                }\n\t\t            }\n\t\t            var tickTime = this._nextTick;\n\t\t            if (this.frequency) {\n\t\t                this._nextTick += 1 / this.frequency.getValueAtTime(this._nextTick);\n\t\t                if (currentState === Tone.State.Started) {\n\t\t                    this.callback(tickTime);\n\t\t                    this.ticks++;\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Returns the scheduled state at the given time.\n\t\t\t *  @param  {Time}  time  The time to query.\n\t\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t\t *  @example\n\t\t\t * clock.start(\"+0.1\");\n\t\t\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t\t\t */\n\t\t    Tone.Clock.prototype.getStateAtTime = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        return this._state.getValueAtTime(time);\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up\n\t\t\t *  @returns {Tone.Clock} this\n\t\t\t */\n\t\t    Tone.Clock.prototype.dispose = function () {\n\t\t        Tone.Emitter.prototype.dispose.call(this);\n\t\t        this.context.off('tick', this._boundLoop);\n\t\t        this._writable('frequency');\n\t\t        this.frequency.dispose();\n\t\t        this.frequency = null;\n\t\t        this._boundLoop = null;\n\t\t        this._nextTick = Infinity;\n\t\t        this.callback = null;\n\t\t        this._state.dispose();\n\t\t        this._state = null;\n\t\t    };\n\t\t    return Tone.Clock;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Similar to Tone.Timeline, but all events represent\n\t\t\t *         intervals with both \"time\" and \"duration\" times. The \n\t\t\t *         events are placed in a tree structure optimized\n\t\t\t *         for querying an intersection point with the timeline\n\t\t\t *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n\t\t\t *         to represent the data.\n\t\t\t *  @extends {Tone}\n\t\t\t */\n\t\t    Tone.IntervalTimeline = function () {\n\t\t        /**\n\t\t\t\t *  The root node of the inteval tree\n\t\t\t\t *  @type  {IntervalNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._root = null;\n\t\t        /**\n\t\t\t\t *  Keep track of the length of the timeline.\n\t\t\t\t *  @type  {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._length = 0;\n\t\t    };\n\t\t    Tone.extend(Tone.IntervalTimeline);\n\t\t    /**\n\t\t\t *  The event to add to the timeline. All events must \n\t\t\t *  have a time and duration value\n\t\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t\t */\n\t\t    Tone.IntervalTimeline.prototype.add = function (event) {\n\t\t        if (this.isUndef(event.time) || this.isUndef(event.duration)) {\n\t\t            throw new Error('Tone.IntervalTimeline: events must have time and duration parameters');\n\t\t        }\n\t\t        var node = new IntervalNode(event.time, event.time + event.duration, event);\n\t\t        if (this._root === null) {\n\t\t            this._root = node;\n\t\t        } else {\n\t\t            this._root.insert(node);\n\t\t        }\n\t\t        this._length++;\n\t\t        // Restructure tree to be balanced\n\t\t        while (node !== null) {\n\t\t            node.updateHeight();\n\t\t            node.updateMax();\n\t\t            this._rebalance(node);\n\t\t            node = node.parent;\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Remove an event from the timeline.\n\t\t\t *  @param  {Object}  event  The event to remove from the timeline\n\t\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t\t */\n\t\t    Tone.IntervalTimeline.prototype.remove = function (event) {\n\t\t        if (this._root !== null) {\n\t\t            var results = [];\n\t\t            this._root.search(event.time, results);\n\t\t            for (var i = 0; i < results.length; i++) {\n\t\t                var node = results[i];\n\t\t                if (node.event === event) {\n\t\t                    this._removeNode(node);\n\t\t                    this._length--;\n\t\t                    break;\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  The number of items in the timeline.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.IntervalTimeline#\n\t\t\t *  @name length\n\t\t\t *  @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.IntervalTimeline.prototype, 'length', {\n\t\t        get: function () {\n\t\t            return this._length;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Remove events whose time time is after the given time\n\t\t\t *  @param  {Number}  time  The time to query.\n\t\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t\t */\n\t\t    Tone.IntervalTimeline.prototype.cancel = function (after) {\n\t\t        this.forEachAfter(after, function (event) {\n\t\t            this.remove(event);\n\t\t        }.bind(this));\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Set the root node as the given node\n\t\t\t *  @param {IntervalNode} node\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.IntervalTimeline.prototype._setRoot = function (node) {\n\t\t        this._root = node;\n\t\t        if (this._root !== null) {\n\t\t            this._root.parent = null;\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Replace the references to the node in the node's parent\n\t\t\t *  with the replacement node.\n\t\t\t *  @param  {IntervalNode}  node        \n\t\t\t *  @param  {IntervalNode}  replacement \n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.IntervalTimeline.prototype._replaceNodeInParent = function (node, replacement) {\n\t\t        if (node.parent !== null) {\n\t\t            if (node.isLeftChild()) {\n\t\t                node.parent.left = replacement;\n\t\t            } else {\n\t\t                node.parent.right = replacement;\n\t\t            }\n\t\t            this._rebalance(node.parent);\n\t\t        } else {\n\t\t            this._setRoot(replacement);\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Remove the node from the tree and replace it with \n\t\t\t *  a successor which follows the schema.\n\t\t\t *  @param  {IntervalNode}  node\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.IntervalTimeline.prototype._removeNode = function (node) {\n\t\t        if (node.left === null && node.right === null) {\n\t\t            this._replaceNodeInParent(node, null);\n\t\t        } else if (node.right === null) {\n\t\t            this._replaceNodeInParent(node, node.left);\n\t\t        } else if (node.left === null) {\n\t\t            this._replaceNodeInParent(node, node.right);\n\t\t        } else {\n\t\t            var balance = node.getBalance();\n\t\t            var replacement, temp;\n\t\t            if (balance > 0) {\n\t\t                if (node.left.right === null) {\n\t\t                    replacement = node.left;\n\t\t                    replacement.right = node.right;\n\t\t                    temp = replacement;\n\t\t                } else {\n\t\t                    replacement = node.left.right;\n\t\t                    while (replacement.right !== null) {\n\t\t                        replacement = replacement.right;\n\t\t                    }\n\t\t                    replacement.parent.right = replacement.left;\n\t\t                    temp = replacement.parent;\n\t\t                    replacement.left = node.left;\n\t\t                    replacement.right = node.right;\n\t\t                }\n\t\t            } else {\n\t\t                if (node.right.left === null) {\n\t\t                    replacement = node.right;\n\t\t                    replacement.left = node.left;\n\t\t                    temp = replacement;\n\t\t                } else {\n\t\t                    replacement = node.right.left;\n\t\t                    while (replacement.left !== null) {\n\t\t                        replacement = replacement.left;\n\t\t                    }\n\t\t                    replacement.parent = replacement.parent;\n\t\t                    replacement.parent.left = replacement.right;\n\t\t                    temp = replacement.parent;\n\t\t                    replacement.left = node.left;\n\t\t                    replacement.right = node.right;\n\t\t                }\n\t\t            }\n\t\t            if (node.parent !== null) {\n\t\t                if (node.isLeftChild()) {\n\t\t                    node.parent.left = replacement;\n\t\t                } else {\n\t\t                    node.parent.right = replacement;\n\t\t                }\n\t\t            } else {\n\t\t                this._setRoot(replacement);\n\t\t            }\n\t\t            // this._replaceNodeInParent(node, replacement);\n\t\t            this._rebalance(temp);\n\t\t        }\n\t\t        node.dispose();\n\t\t    };\n\t\t    /**\n\t\t\t *  Rotate the tree to the left\n\t\t\t *  @param  {IntervalNode}  node\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.IntervalTimeline.prototype._rotateLeft = function (node) {\n\t\t        var parent = node.parent;\n\t\t        var isLeftChild = node.isLeftChild();\n\t\t        // Make node.right the new root of this sub tree (instead of node)\n\t\t        var pivotNode = node.right;\n\t\t        node.right = pivotNode.left;\n\t\t        pivotNode.left = node;\n\t\t        if (parent !== null) {\n\t\t            if (isLeftChild) {\n\t\t                parent.left = pivotNode;\n\t\t            } else {\n\t\t                parent.right = pivotNode;\n\t\t            }\n\t\t        } else {\n\t\t            this._setRoot(pivotNode);\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Rotate the tree to the right\n\t\t\t *  @param  {IntervalNode}  node\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.IntervalTimeline.prototype._rotateRight = function (node) {\n\t\t        var parent = node.parent;\n\t\t        var isLeftChild = node.isLeftChild();\n\t\t        // Make node.left the new root of this sub tree (instead of node)\n\t\t        var pivotNode = node.left;\n\t\t        node.left = pivotNode.right;\n\t\t        pivotNode.right = node;\n\t\t        if (parent !== null) {\n\t\t            if (isLeftChild) {\n\t\t                parent.left = pivotNode;\n\t\t            } else {\n\t\t                parent.right = pivotNode;\n\t\t            }\n\t\t        } else {\n\t\t            this._setRoot(pivotNode);\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Balance the BST\n\t\t\t *  @param  {IntervalNode}  node\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.IntervalTimeline.prototype._rebalance = function (node) {\n\t\t        var balance = node.getBalance();\n\t\t        if (balance > 1) {\n\t\t            if (node.left.getBalance() < 0) {\n\t\t                this._rotateLeft(node.left);\n\t\t            } else {\n\t\t                this._rotateRight(node);\n\t\t            }\n\t\t        } else if (balance < -1) {\n\t\t            if (node.right.getBalance() > 0) {\n\t\t                this._rotateRight(node.right);\n\t\t            } else {\n\t\t                this._rotateLeft(node);\n\t\t            }\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Get an event whose time and duration span the give time. Will\n\t\t\t *  return the match whose \"time\" value is closest to the given time.\n\t\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t\t *  @return  {Object}  The event which spans the desired time\n\t\t\t */\n\t\t    Tone.IntervalTimeline.prototype.get = function (time) {\n\t\t        if (this._root !== null) {\n\t\t            var results = [];\n\t\t            this._root.search(time, results);\n\t\t            if (results.length > 0) {\n\t\t                var max = results[0];\n\t\t                for (var i = 1; i < results.length; i++) {\n\t\t                    if (results[i].low > max.low) {\n\t\t                        max = results[i];\n\t\t                    }\n\t\t                }\n\t\t                return max.event;\n\t\t            }\n\t\t        }\n\t\t        return null;\n\t\t    };\n\t\t    /**\n\t\t\t *  Iterate over everything in the timeline.\n\t\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t\t */\n\t\t    Tone.IntervalTimeline.prototype.forEach = function (callback) {\n\t\t        if (this._root !== null) {\n\t\t            var allNodes = [];\n\t\t            if (this._root !== null) {\n\t\t                this._root.traverse(function (node) {\n\t\t                    allNodes.push(node);\n\t\t                });\n\t\t            }\n\t\t            for (var i = 0; i < allNodes.length; i++) {\n\t\t                var ev = allNodes[i].event;\n\t\t                if (ev) {\n\t\t                    callback(ev);\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Iterate over everything in the array in which the given time\n\t\t\t *  overlaps with the time and duration time of the event.\n\t\t\t *  @param  {Number}  time The time to check if items are overlapping\n\t\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t\t */\n\t\t    Tone.IntervalTimeline.prototype.forEachAtTime = function (time, callback) {\n\t\t        if (this._root !== null) {\n\t\t            var results = [];\n\t\t            this._root.search(time, results);\n\t\t            for (var i = results.length - 1; i >= 0; i--) {\n\t\t                var ev = results[i].event;\n\t\t                if (ev) {\n\t\t                    callback(ev);\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Iterate over everything in the array in which the time is greater\n\t\t\t *  than the given time.\n\t\t\t *  @param  {Number}  time The time to check if items are before\n\t\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t\t */\n\t\t    Tone.IntervalTimeline.prototype.forEachAfter = function (time, callback) {\n\t\t        if (this._root !== null) {\n\t\t            var results = [];\n\t\t            this._root.searchAfter(time, results);\n\t\t            for (var i = results.length - 1; i >= 0; i--) {\n\t\t                var ev = results[i].event;\n\t\t                if (ev) {\n\t\t                    callback(ev);\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up\n\t\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t\t */\n\t\t    Tone.IntervalTimeline.prototype.dispose = function () {\n\t\t        var allNodes = [];\n\t\t        if (this._root !== null) {\n\t\t            this._root.traverse(function (node) {\n\t\t                allNodes.push(node);\n\t\t            });\n\t\t        }\n\t\t        for (var i = 0; i < allNodes.length; i++) {\n\t\t            allNodes[i].dispose();\n\t\t        }\n\t\t        allNodes = null;\n\t\t        this._root = null;\n\t\t        return this;\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tINTERVAL NODE HELPER\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Represents a node in the binary search tree, with the addition\n\t\t\t *  of a \"high\" value which keeps track of the highest value of\n\t\t\t *  its children. \n\t\t\t *  References: \n\t\t\t *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n\t\t\t *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n\t\t\t *  @param {Number} low\n\t\t\t *  @param {Number} high\n\t\t\t *  @private\n\t\t\t */\n\t\t    var IntervalNode = function (low, high, event) {\n\t\t        //the event container\n\t\t        this.event = event;\n\t\t        //the low value\n\t\t        this.low = low;\n\t\t        //the high value\n\t\t        this.high = high;\n\t\t        //the high value for this and all child nodes\n\t\t        this.max = this.high;\n\t\t        //the nodes to the left\n\t\t        this._left = null;\n\t\t        //the nodes to the right\n\t\t        this._right = null;\n\t\t        //the parent node\n\t\t        this.parent = null;\n\t\t        //the number of child nodes\n\t\t        this.height = 0;\n\t\t    };\n\t\t    /** \n\t\t\t *  Insert a node into the correct spot in the tree\n\t\t\t *  @param  {IntervalNode}  node\n\t\t\t */\n\t\t    IntervalNode.prototype.insert = function (node) {\n\t\t        if (node.low <= this.low) {\n\t\t            if (this.left === null) {\n\t\t                this.left = node;\n\t\t            } else {\n\t\t                this.left.insert(node);\n\t\t            }\n\t\t        } else {\n\t\t            if (this.right === null) {\n\t\t                this.right = node;\n\t\t            } else {\n\t\t                this.right.insert(node);\n\t\t            }\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Search the tree for nodes which overlap \n\t\t\t *  with the given point\n\t\t\t *  @param  {Number}  point  The point to query\n\t\t\t *  @param  {Array}  results  The array to put the results\n\t\t\t */\n\t\t    IntervalNode.prototype.search = function (point, results) {\n\t\t        // If p is to the right of the rightmost point of any interval\n\t\t        // in this node and all children, there won't be any matches.\n\t\t        if (point > this.max) {\n\t\t            return;\n\t\t        }\n\t\t        // Search left children\n\t\t        if (this.left !== null) {\n\t\t            this.left.search(point, results);\n\t\t        }\n\t\t        // Check this node\n\t\t        if (this.low <= point && this.high > point) {\n\t\t            results.push(this);\n\t\t        }\n\t\t        // If p is to the left of the time of this interval,\n\t\t        // then it can't be in any child to the right.\n\t\t        if (this.low > point) {\n\t\t            return;\n\t\t        }\n\t\t        // Search right children\n\t\t        if (this.right !== null) {\n\t\t            this.right.search(point, results);\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Search the tree for nodes which are less \n\t\t\t *  than the given point\n\t\t\t *  @param  {Number}  point  The point to query\n\t\t\t *  @param  {Array}  results  The array to put the results\n\t\t\t */\n\t\t    IntervalNode.prototype.searchAfter = function (point, results) {\n\t\t        // Check this node\n\t\t        if (this.low >= point) {\n\t\t            results.push(this);\n\t\t            if (this.left !== null) {\n\t\t                this.left.searchAfter(point, results);\n\t\t            }\n\t\t        }\n\t\t        // search the right side\n\t\t        if (this.right !== null) {\n\t\t            this.right.searchAfter(point, results);\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Invoke the callback on this element and both it's branches\n\t\t\t *  @param  {Function}  callback\n\t\t\t */\n\t\t    IntervalNode.prototype.traverse = function (callback) {\n\t\t        callback(this);\n\t\t        if (this.left !== null) {\n\t\t            this.left.traverse(callback);\n\t\t        }\n\t\t        if (this.right !== null) {\n\t\t            this.right.traverse(callback);\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Update the height of the node\n\t\t\t */\n\t\t    IntervalNode.prototype.updateHeight = function () {\n\t\t        if (this.left !== null && this.right !== null) {\n\t\t            this.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t        } else if (this.right !== null) {\n\t\t            this.height = this.right.height + 1;\n\t\t        } else if (this.left !== null) {\n\t\t            this.height = this.left.height + 1;\n\t\t        } else {\n\t\t            this.height = 0;\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Update the height of the node\n\t\t\t */\n\t\t    IntervalNode.prototype.updateMax = function () {\n\t\t        this.max = this.high;\n\t\t        if (this.left !== null) {\n\t\t            this.max = Math.max(this.max, this.left.max);\n\t\t        }\n\t\t        if (this.right !== null) {\n\t\t            this.max = Math.max(this.max, this.right.max);\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  The balance is how the leafs are distributed on the node\n\t\t\t *  @return  {Number}  Negative numbers are balanced to the right\n\t\t\t */\n\t\t    IntervalNode.prototype.getBalance = function () {\n\t\t        var balance = 0;\n\t\t        if (this.left !== null && this.right !== null) {\n\t\t            balance = this.left.height - this.right.height;\n\t\t        } else if (this.left !== null) {\n\t\t            balance = this.left.height + 1;\n\t\t        } else if (this.right !== null) {\n\t\t            balance = -(this.right.height + 1);\n\t\t        }\n\t\t        return balance;\n\t\t    };\n\t\t    /**\n\t\t\t *  @returns {Boolean} true if this node is the left child\n\t\t\t *  of its parent\n\t\t\t */\n\t\t    IntervalNode.prototype.isLeftChild = function () {\n\t\t        return this.parent !== null && this.parent.left === this;\n\t\t    };\n\t\t    /**\n\t\t\t *  get/set the left node\n\t\t\t *  @type {IntervalNode}\n\t\t\t */\n\t\t    Object.defineProperty(IntervalNode.prototype, 'left', {\n\t\t        get: function () {\n\t\t            return this._left;\n\t\t        },\n\t\t        set: function (node) {\n\t\t            this._left = node;\n\t\t            if (node !== null) {\n\t\t                node.parent = this;\n\t\t            }\n\t\t            this.updateHeight();\n\t\t            this.updateMax();\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  get/set the right node\n\t\t\t *  @type {IntervalNode}\n\t\t\t */\n\t\t    Object.defineProperty(IntervalNode.prototype, 'right', {\n\t\t        get: function () {\n\t\t            return this._right;\n\t\t        },\n\t\t        set: function (node) {\n\t\t            this._right = node;\n\t\t            if (node !== null) {\n\t\t                node.parent = this;\n\t\t            }\n\t\t            this.updateHeight();\n\t\t            this.updateMax();\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  null out references.\n\t\t\t */\n\t\t    IntervalNode.prototype.dispose = function () {\n\t\t        this.parent = null;\n\t\t        this._left = null;\n\t\t        this._right = null;\n\t\t        this.event = null;\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tEND INTERVAL NODE HELPER\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    return Tone.IntervalTimeline;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Transport for timing musical events.\n\t\t\t *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n\t\t\t *          Tone.Transport timing events pass in the exact time of the scheduled event\n\t\t\t *          in the argument of the callback function. Pass that time value to the object\n\t\t\t *          you're scheduling. <br><br>\n\t\t\t *          A single transport is created for you when the library is initialized. \n\t\t\t *          <br><br>\n\t\t\t *          The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n\t\t\t *          called with the time of that event as the argument. \n\t\t\t *\n\t\t\t *  @extends {Tone.Emitter}\n\t\t\t *  @singleton\n\t\t\t *  @example\n\t\t\t * //repeated event every 8th note\n\t\t\t * Tone.Transport.scheduleRepeat(function(time){\n\t\t\t * \t//do something with the time\n\t\t\t * }, \"8n\");\n\t\t\t *  @example\n\t\t\t * //schedule an event on the 16th measure\n\t\t\t * Tone.Transport.schedule(function(time){\n\t\t\t * \t//do something with the time\n\t\t\t * }, \"16:0:0\");\n\t\t\t */\n\t\t    Tone.Transport = function () {\n\t\t        Tone.Emitter.call(this);\n\t\t        ///////////////////////////////////////////////////////////////////////\n\t\t        //\tLOOPING\n\t\t        //////////////////////////////////////////////////////////////////////\n\t\t        /** \n\t\t\t\t * \tIf the transport loops or not.\n\t\t\t\t *  @type {boolean}\n\t\t\t\t */\n\t\t        this.loop = false;\n\t\t        /** \n\t\t\t\t * \tThe loop start position in ticks\n\t\t\t\t *  @type {Ticks}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._loopStart = 0;\n\t\t        /** \n\t\t\t\t * \tThe loop end position in ticks\n\t\t\t\t *  @type {Ticks}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._loopEnd = 0;\n\t\t        ///////////////////////////////////////////////////////////////////////\n\t\t        //\tCLOCK/TEMPO\n\t\t        //////////////////////////////////////////////////////////////////////\n\t\t        /**\n\t\t\t\t *  Pulses per quarter is the number of ticks per quarter note.\n\t\t\t\t *  @private\n\t\t\t\t *  @type  {Number}\n\t\t\t\t */\n\t\t        this._ppq = TransportConstructor.defaults.PPQ;\n\t\t        /**\n\t\t\t\t *  watches the main oscillator for timing ticks\n\t\t\t\t *  initially starts at 120bpm\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Tone.Clock}\n\t\t\t\t */\n\t\t        this._clock = new Tone.Clock({\n\t\t            'callback': this._processTick.bind(this),\n\t\t            'frequency': 0\n\t\t        });\n\t\t        this._bindClockEvents();\n\t\t        /**\n\t\t\t\t *  The Beats Per Minute of the Transport. \n\t\t\t\t *  @type {BPM}\n\t\t\t\t *  @signal\n\t\t\t\t *  @example\n\t\t\t\t * Tone.Transport.bpm.value = 80;\n\t\t\t\t * //ramp the bpm to 120 over 10 seconds\n\t\t\t\t * Tone.Transport.bpm.rampTo(120, 10);\n\t\t\t\t */\n\t\t        this.bpm = this._clock.frequency;\n\t\t        this.bpm._toUnits = this._toUnits.bind(this);\n\t\t        this.bpm._fromUnits = this._fromUnits.bind(this);\n\t\t        this.bpm.units = Tone.Type.BPM;\n\t\t        this.bpm.value = TransportConstructor.defaults.bpm;\n\t\t        this._readOnly('bpm');\n\t\t        /**\n\t\t\t\t *  The time signature, or more accurately the numerator\n\t\t\t\t *  of the time signature over a denominator of 4. \n\t\t\t\t *  @type {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._timeSignature = TransportConstructor.defaults.timeSignature;\n\t\t        ///////////////////////////////////////////////////////////////////////\n\t\t        //\tTIMELINE EVENTS\n\t\t        //////////////////////////////////////////////////////////////////////\n\t\t        /**\n\t\t\t\t *  All the events in an object to keep track by ID\n\t\t\t\t *  @type {Object}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._scheduledEvents = {};\n\t\t        /**\n\t\t\t\t *  The event ID counter\n\t\t\t\t *  @type {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._eventID = 0;\n\t\t        /**\n\t\t\t\t * \tThe scheduled events.\n\t\t\t\t *  @type {Tone.Timeline}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._timeline = new Tone.Timeline();\n\t\t        /**\n\t\t\t\t *  Repeated events\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._repeatedEvents = new Tone.IntervalTimeline();\n\t\t        /**\n\t\t\t\t *  Events that occur once\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._onceEvents = new Tone.Timeline();\n\t\t        /** \n\t\t\t\t *  All of the synced Signals\n\t\t\t\t *  @private \n\t\t\t\t *  @type {Array}\n\t\t\t\t */\n\t\t        this._syncedSignals = [];\n\t\t        ///////////////////////////////////////////////////////////////////////\n\t\t        //\tSWING\n\t\t        //////////////////////////////////////////////////////////////////////\n\t\t        /**\n\t\t\t\t *  The subdivision of the swing\n\t\t\t\t *  @type  {Ticks}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._swingTicks = TransportConstructor.defaults.PPQ / 2;\n\t\t        //8n\n\t\t        /**\n\t\t\t\t *  The swing amount\n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._swingAmount = 0;\n\t\t    };\n\t\t    Tone.extend(Tone.Transport, Tone.Emitter);\n\t\t    /**\n\t\t\t *  the defaults\n\t\t\t *  @type {Object}\n\t\t\t *  @const\n\t\t\t *  @static\n\t\t\t */\n\t\t    Tone.Transport.defaults = {\n\t\t        'bpm': 120,\n\t\t        'swing': 0,\n\t\t        'swingSubdivision': '8n',\n\t\t        'timeSignature': 4,\n\t\t        'loopStart': 0,\n\t\t        'loopEnd': '4m',\n\t\t        'PPQ': 192\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////////\n\t\t    //\tTICKS\n\t\t    ///////////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  called on every tick\n\t\t\t *  @param   {number} tickTime clock relative tick time\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Transport.prototype._processTick = function (tickTime) {\n\t\t        var ticks = this._clock.ticks;\n\t\t        //handle swing\n\t\t        if (this._swingAmount > 0 && ticks % this._ppq !== 0 && //not on a downbeat\n\t\t            ticks % (this._swingTicks * 2) !== 0) {\n\t\t            //add some swing\n\t\t            var progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);\n\t\t            var amount = Math.sin(progress * Math.PI) * this._swingAmount;\n\t\t            tickTime += Tone.Time(this._swingTicks * 2 / 3, 'i') * amount;\n\t\t        }\n\t\t        //do the loop test\n\t\t        if (this.loop) {\n\t\t            if (ticks === this._loopEnd) {\n\t\t                this.emit('loopEnd', tickTime);\n\t\t                this._clock.ticks = this._loopStart;\n\t\t                ticks = this._loopStart;\n\t\t                this.emit('loopStart', tickTime, this.seconds);\n\t\t                this.emit('loop', tickTime);\n\t\t            }\n\t\t        }\n\t\t        //process the single occurrence events\n\t\t        this._onceEvents.forEachBefore(ticks, function (event) {\n\t\t            event.callback(tickTime);\n\t\t            //remove the event\n\t\t            delete this._scheduledEvents[event.id.toString()];\n\t\t        }.bind(this));\n\t\t        //and clear the single occurrence timeline\n\t\t        this._onceEvents.cancelBefore(ticks);\n\t\t        //fire the next tick events if their time has come\n\t\t        this._timeline.forEachAtTime(ticks, function (event) {\n\t\t            event.callback(tickTime);\n\t\t        });\n\t\t        //process the repeated events\n\t\t        this._repeatedEvents.forEachAtTime(ticks, function (event) {\n\t\t            if ((ticks - event.time) % event.interval === 0) {\n\t\t                event.callback(tickTime);\n\t\t            }\n\t\t        });\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////////\n\t\t    //\tSCHEDULABLE EVENTS\n\t\t    ///////////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Schedule an event along the timeline.\n\t\t\t *  @param {Function} callback The callback to be invoked at the time.\n\t\t\t *  @param {TransportTime}  time The time to invoke the callback at.\n\t\t\t *  @return {Number} The id of the event which can be used for canceling the event. \n\t\t\t *  @example\n\t\t\t * //trigger the callback when the Transport reaches the desired time\n\t\t\t * Tone.Transport.schedule(function(time){\n\t\t\t * \tenvelope.triggerAttack(time);\n\t\t\t * }, \"128i\");\n\t\t\t */\n\t\t    Tone.Transport.prototype.schedule = function (callback, time) {\n\t\t        var event = {\n\t\t            'time': this.toTicks(time),\n\t\t            'callback': callback\n\t\t        };\n\t\t        var id = this._eventID++;\n\t\t        this._scheduledEvents[id.toString()] = {\n\t\t            'event': event,\n\t\t            'timeline': this._timeline\n\t\t        };\n\t\t        this._timeline.add(event);\n\t\t        return id;\n\t\t    };\n\t\t    /**\n\t\t\t *  Schedule a repeated event along the timeline. The event will fire\n\t\t\t *  at the `interval` starting at the `startTime` and for the specified\n\t\t\t *  `duration`. \n\t\t\t *  @param  {Function}  callback   The callback to invoke.\n\t\t\t *  @param  {Time}    interval   The duration between successive\n\t\t\t *                               callbacks.\n\t\t\t *  @param  {TimelinePosition=}    startTime  When along the timeline the events should\n\t\t\t *                               start being invoked.\n\t\t\t *  @param {Time} [duration=Infinity] How long the event should repeat. \n\t\t\t *  @return  {Number}    The ID of the scheduled event. Use this to cancel\n\t\t\t *                           the event. \n\t\t\t *  @example\n\t\t\t * //a callback invoked every eighth note after the first measure\n\t\t\t * Tone.Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t\t\t */\n\t\t    Tone.Transport.prototype.scheduleRepeat = function (callback, interval, startTime, duration) {\n\t\t        if (interval <= 0) {\n\t\t            throw new Error('Tone.Transport: repeat events must have an interval larger than 0');\n\t\t        }\n\t\t        var event = {\n\t\t            'time': this.toTicks(startTime),\n\t\t            'duration': this.toTicks(this.defaultArg(duration, Infinity)),\n\t\t            'interval': this.toTicks(interval),\n\t\t            'callback': callback\n\t\t        };\n\t\t        var id = this._eventID++;\n\t\t        this._scheduledEvents[id.toString()] = {\n\t\t            'event': event,\n\t\t            'timeline': this._repeatedEvents\n\t\t        };\n\t\t        this._repeatedEvents.add(event);\n\t\t        return id;\n\t\t    };\n\t\t    /**\n\t\t\t *  Schedule an event that will be removed after it is invoked. \n\t\t\t *  Note that if the given time is less than the current transport time, \n\t\t\t *  the event will be invoked immediately. \n\t\t\t *  @param {Function} callback The callback to invoke once.\n\t\t\t *  @param {TransportTime} time The time the callback should be invoked.\n\t\t\t *  @returns {Number} The ID of the scheduled event. \n\t\t\t */\n\t\t    Tone.Transport.prototype.scheduleOnce = function (callback, time) {\n\t\t        var id = this._eventID++;\n\t\t        var event = {\n\t\t            'time': this.toTicks(time),\n\t\t            'callback': callback,\n\t\t            'id': id\n\t\t        };\n\t\t        this._scheduledEvents[id.toString()] = {\n\t\t            'event': event,\n\t\t            'timeline': this._onceEvents\n\t\t        };\n\t\t        this._onceEvents.add(event);\n\t\t        return id;\n\t\t    };\n\t\t    /**\n\t\t\t *  Clear the passed in event id from the timeline\n\t\t\t *  @param {Number} eventId The id of the event.\n\t\t\t *  @returns {Tone.Transport} this\n\t\t\t */\n\t\t    Tone.Transport.prototype.clear = function (eventId) {\n\t\t        if (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t\t            var item = this._scheduledEvents[eventId.toString()];\n\t\t            item.timeline.remove(item.event);\n\t\t            delete this._scheduledEvents[eventId.toString()];\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Remove scheduled events from the timeline after\n\t\t\t *  the given time. Repeated events will be removed\n\t\t\t *  if their startTime is after the given time\n\t\t\t *  @param {TransportTime} [after=0] Clear all events after\n\t\t\t *                          this time. \n\t\t\t *  @returns {Tone.Transport} this\n\t\t\t */\n\t\t    Tone.Transport.prototype.cancel = function (after) {\n\t\t        after = this.defaultArg(after, 0);\n\t\t        after = this.toTicks(after);\n\t\t        this._timeline.cancel(after);\n\t\t        this._onceEvents.cancel(after);\n\t\t        this._repeatedEvents.cancel(after);\n\t\t        return this;\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////////\n\t\t    //\tSTART/STOP/PAUSE\n\t\t    ///////////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Bind start/stop/pause events from the clock and emit them.\n\t\t\t */\n\t\t    Tone.Transport.prototype._bindClockEvents = function () {\n\t\t        this._clock.on('start', function (time, offset) {\n\t\t            offset = Tone.Time(this._clock.ticks, 'i').toSeconds();\n\t\t            this.emit('start', time, offset);\n\t\t        }.bind(this));\n\t\t        this._clock.on('stop', function (time) {\n\t\t            this.emit('stop', time);\n\t\t        }.bind(this));\n\t\t        this._clock.on('pause', function (time) {\n\t\t            this.emit('pause', time);\n\t\t        }.bind(this));\n\t\t    };\n\t\t    /**\n\t\t\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t\t\t *  @type {Tone.State}\n\t\t\t *  @readOnly\n\t\t\t *  @memberOf Tone.Transport#\n\t\t\t *  @name state\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Transport.prototype, 'state', {\n\t\t        get: function () {\n\t\t            return this._clock.getStateAtTime(this.now());\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Start the transport and all sources synced to the transport.\n\t\t\t *  @param  {Time} [time=now] The time when the transport should start.\n\t\t\t *  @param  {TransportTime=} offset The timeline offset to start the transport.\n\t\t\t *  @returns {Tone.Transport} this\n\t\t\t *  @example\n\t\t\t * //start the transport in one second starting at beginning of the 5th measure. \n\t\t\t * Tone.Transport.start(\"+1\", \"4:0:0\");\n\t\t\t */\n\t\t    Tone.Transport.prototype.start = function (time, offset) {\n\t\t        //start the clock\n\t\t        if (!this.isUndef(offset)) {\n\t\t            offset = this.toTicks(offset);\n\t\t        }\n\t\t        this._clock.start(time, offset);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Stop the transport and all sources synced to the transport.\n\t\t\t *  @param  {Time} [time=now] The time when the transport should stop. \n\t\t\t *  @returns {Tone.Transport} this\n\t\t\t *  @example\n\t\t\t * Tone.Transport.stop();\n\t\t\t */\n\t\t    Tone.Transport.prototype.stop = function (time) {\n\t\t        this._clock.stop(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Pause the transport and all sources synced to the transport.\n\t\t\t *  @param  {Time} [time=now]\n\t\t\t *  @returns {Tone.Transport} this\n\t\t\t */\n\t\t    Tone.Transport.prototype.pause = function (time) {\n\t\t        this._clock.pause(time);\n\t\t        return this;\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////////\n\t\t    //\tSETTERS/GETTERS\n\t\t    ///////////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  The time signature as just the numerator over 4. \n\t\t\t *  For example 4/4 would be just 4 and 6/8 would be 3.\n\t\t\t *  @memberOf Tone.Transport#\n\t\t\t *  @type {Number|Array}\n\t\t\t *  @name timeSignature\n\t\t\t *  @example\n\t\t\t * //common time\n\t\t\t * Tone.Transport.timeSignature = 4;\n\t\t\t * // 7/8\n\t\t\t * Tone.Transport.timeSignature = [7, 8];\n\t\t\t * //this will be reduced to a single number\n\t\t\t * Tone.Transport.timeSignature; //returns 3.5\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Transport.prototype, 'timeSignature', {\n\t\t        get: function () {\n\t\t            return this._timeSignature;\n\t\t        },\n\t\t        set: function (timeSig) {\n\t\t            if (this.isArray(timeSig)) {\n\t\t                timeSig = timeSig[0] / timeSig[1] * 4;\n\t\t            }\n\t\t            this._timeSignature = timeSig;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * When the Tone.Transport.loop = true, this is the starting position of the loop.\n\t\t\t * @memberOf Tone.Transport#\n\t\t\t * @type {TransportTime}\n\t\t\t * @name loopStart\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Transport.prototype, 'loopStart', {\n\t\t        get: function () {\n\t\t            return Tone.TransportTime(this._loopStart, 'i').toSeconds();\n\t\t        },\n\t\t        set: function (startPosition) {\n\t\t            this._loopStart = this.toTicks(startPosition);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * When the Tone.Transport.loop = true, this is the ending position of the loop.\n\t\t\t * @memberOf Tone.Transport#\n\t\t\t * @type {TransportTime}\n\t\t\t * @name loopEnd\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Transport.prototype, 'loopEnd', {\n\t\t        get: function () {\n\t\t            return Tone.TransportTime(this._loopEnd, 'i').toSeconds();\n\t\t        },\n\t\t        set: function (endPosition) {\n\t\t            this._loopEnd = this.toTicks(endPosition);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Set the loop start and stop at the same time. \n\t\t\t *  @param {TransportTime} startPosition \n\t\t\t *  @param {TransportTime} endPosition   \n\t\t\t *  @returns {Tone.Transport} this\n\t\t\t *  @example\n\t\t\t * //loop over the first measure\n\t\t\t * Tone.Transport.setLoopPoints(0, \"1m\");\n\t\t\t * Tone.Transport.loop = true;\n\t\t\t */\n\t\t    Tone.Transport.prototype.setLoopPoints = function (startPosition, endPosition) {\n\t\t        this.loopStart = startPosition;\n\t\t        this.loopEnd = endPosition;\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  The swing value. Between 0-1 where 1 equal to \n\t\t\t *  the note + half the subdivision.\n\t\t\t *  @memberOf Tone.Transport#\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @name swing\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Transport.prototype, 'swing', {\n\t\t        get: function () {\n\t\t            return this._swingAmount;\n\t\t        },\n\t\t        set: function (amount) {\n\t\t            //scale the values to a normal range\n\t\t            this._swingAmount = amount;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Set the subdivision which the swing will be applied to. \n\t\t\t *  The default value is an 8th note. Value must be less \n\t\t\t *  than a quarter note.\n\t\t\t *  \n\t\t\t *  @memberOf Tone.Transport#\n\t\t\t *  @type {Time}\n\t\t\t *  @name swingSubdivision\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Transport.prototype, 'swingSubdivision', {\n\t\t        get: function () {\n\t\t            return Tone.Time(this._swingTicks, 'i').toNotation();\n\t\t        },\n\t\t        set: function (subdivision) {\n\t\t            this._swingTicks = this.toTicks(subdivision);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t\t\t *  Setting the value will jump to that position right away. \n\t\t\t *  @memberOf Tone.Transport#\n\t\t\t *  @type {BarsBeatsSixteenths}\n\t\t\t *  @name position\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Transport.prototype, 'position', {\n\t\t        get: function () {\n\t\t            return Tone.TransportTime(this.ticks, 'i').toBarsBeatsSixteenths();\n\t\t        },\n\t\t        set: function (progress) {\n\t\t            var ticks = this.toTicks(progress);\n\t\t            this.ticks = ticks;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The Transport's position in seconds\n\t\t\t *  Setting the value will jump to that position right away. \n\t\t\t *  @memberOf Tone.Transport#\n\t\t\t *  @type {Seconds}\n\t\t\t *  @name seconds\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Transport.prototype, 'seconds', {\n\t\t        get: function () {\n\t\t            return Tone.TransportTime(this.ticks, 'i').toSeconds();\n\t\t        },\n\t\t        set: function (progress) {\n\t\t            var ticks = this.toTicks(progress);\n\t\t            this.ticks = ticks;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The Transport's loop position as a normalized value. Always\n\t\t\t *  returns 0 if the transport if loop is not true. \n\t\t\t *  @memberOf Tone.Transport#\n\t\t\t *  @name progress\n\t\t\t *  @type {NormalRange}\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Transport.prototype, 'progress', {\n\t\t        get: function () {\n\t\t            if (this.loop) {\n\t\t                return (this.ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t            } else {\n\t\t                return 0;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The transports current tick position.\n\t\t\t *  \n\t\t\t *  @memberOf Tone.Transport#\n\t\t\t *  @type {Ticks}\n\t\t\t *  @name ticks\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Transport.prototype, 'ticks', {\n\t\t        get: function () {\n\t\t            return this._clock.ticks;\n\t\t        },\n\t\t        set: function (t) {\n\t\t            if (this._clock.ticks !== t) {\n\t\t                var now = this.now();\n\t\t                //stop everything synced to the transport\n\t\t                if (this.state === Tone.State.Started) {\n\t\t                    this.emit('stop', now);\n\t\t                    this._clock.ticks = t;\n\t\t                    //restart it with the new time\n\t\t                    this.emit('start', now, this.seconds);\n\t\t                } else {\n\t\t                    this._clock.ticks = t;\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Pulses Per Quarter note. This is the smallest resolution\n\t\t\t *  the Transport timing supports. This should be set once\n\t\t\t *  on initialization and not set again. Changing this value \n\t\t\t *  after other objects have been created can cause problems. \n\t\t\t *  \n\t\t\t *  @memberOf Tone.Transport#\n\t\t\t *  @type {Number}\n\t\t\t *  @name PPQ\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Transport.prototype, 'PPQ', {\n\t\t        get: function () {\n\t\t            return this._ppq;\n\t\t        },\n\t\t        set: function (ppq) {\n\t\t            var bpm = this.bpm.value;\n\t\t            this._ppq = ppq;\n\t\t            this.bpm.value = bpm;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The hint to the type of playback. Affects tradeoffs between audio \n\t\t\t *  output latency and responsiveness. \n\t\t\t *  \n\t\t\t *  In addition to setting the value in seconds, the latencyHint also\n\t\t\t *  accepts the strings \"interactive\" (prioritizes low latency), \n\t\t\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t\t\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often). \n\t\t\t *  @memberOf Tone.Transport#\n\t\t\t *  @type {Seconds|String}\n\t\t\t *  @name latencyHint\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Transport.prototype, 'latencyHint', {\n\t\t        get: function () {\n\t\t            return Tone.Clock.latencyHint;\n\t\t        },\n\t\t        set: function (hint) {\n\t\t            Tone.Clock.latencyHint = hint;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Convert from BPM to frequency (factoring in PPQ)\n\t\t\t *  @param  {BPM}  bpm The BPM value to convert to frequency\n\t\t\t *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Transport.prototype._fromUnits = function (bpm) {\n\t\t        return 1 / (60 / bpm / this.PPQ);\n\t\t    };\n\t\t    /**\n\t\t\t *  Convert from frequency (with PPQ) into BPM\n\t\t\t *  @param  {Frequency}  freq The clocks frequency to convert to BPM\n\t\t\t *  @return  {BPM}  The frequency value as BPM.\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Transport.prototype._toUnits = function (freq) {\n\t\t        return freq / this.PPQ * 60;\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////////\n\t\t    //\tSYNCING\n\t\t    ///////////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Returns the time aligned to the next subdivision\n\t\t\t *  of the Transport. If the Transport is not started,\n\t\t\t *  it will return 0.\n\t\t\t *  Note: this will not work precisely during tempo ramps.\n\t\t\t *  @param  {Time}  subdivision  The subdivision to quantize to\n\t\t\t *  @return  {Number}  The context time of the next subdivision.\n\t\t\t *  @example\n\t\t\t * Tone.Transport.start(); //the transport must be started\n\t\t\t * Tone.Transport.nextSubdivision(\"4n\");\n\t\t\t */\n\t\t    Tone.Transport.prototype.nextSubdivision = function (subdivision) {\n\t\t        subdivision = this.toSeconds(subdivision);\n\t\t        //if the transport's not started, return 0\n\t\t        var now;\n\t\t        if (this.state === Tone.State.Started) {\n\t\t            now = this._clock._nextTick;\n\t\t        } else {\n\t\t            return 0;\n\t\t        }\n\t\t        var transportPos = Tone.Time(this.ticks, 'i');\n\t\t        var remainingTime = subdivision - transportPos % subdivision;\n\t\t        if (remainingTime === 0) {\n\t\t            remainingTime = subdivision;\n\t\t        }\n\t\t        return now + remainingTime;\n\t\t    };\n\t\t    /**\n\t\t\t *  Attaches the signal to the tempo control signal so that \n\t\t\t *  any changes in the tempo will change the signal in the same\n\t\t\t *  ratio. \n\t\t\t *  \n\t\t\t *  @param  {Tone.Signal} signal \n\t\t\t *  @param {number=} ratio Optionally pass in the ratio between\n\t\t\t *                         the two signals. Otherwise it will be computed\n\t\t\t *                         based on their current values. \n\t\t\t *  @returns {Tone.Transport} this\n\t\t\t */\n\t\t    Tone.Transport.prototype.syncSignal = function (signal, ratio) {\n\t\t        if (!ratio) {\n\t\t            //get the sync ratio\n\t\t            if (signal._param.value !== 0) {\n\t\t                ratio = signal._param.value / this.bpm._param.value;\n\t\t            } else {\n\t\t                ratio = 0;\n\t\t            }\n\t\t        }\n\t\t        var ratioSignal = new Tone.Gain(ratio);\n\t\t        this.bpm.chain(ratioSignal, signal._param);\n\t\t        this._syncedSignals.push({\n\t\t            'ratio': ratioSignal,\n\t\t            'signal': signal,\n\t\t            'initial': signal._param.value\n\t\t        });\n\t\t        signal._param.value = 0;\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Unsyncs a previously synced signal from the transport's control. \n\t\t\t *  See Tone.Transport.syncSignal.\n\t\t\t *  @param  {Tone.Signal} signal \n\t\t\t *  @returns {Tone.Transport} this\n\t\t\t */\n\t\t    Tone.Transport.prototype.unsyncSignal = function (signal) {\n\t\t        for (var i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t\t            var syncedSignal = this._syncedSignals[i];\n\t\t            if (syncedSignal.signal === signal) {\n\t\t                syncedSignal.ratio.dispose();\n\t\t                syncedSignal.signal._param.value = syncedSignal.initial;\n\t\t                this._syncedSignals.splice(i, 1);\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.Transport} this\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Transport.prototype.dispose = function () {\n\t\t        Tone.Emitter.prototype.dispose.call(this);\n\t\t        this._clock.dispose();\n\t\t        this._clock = null;\n\t\t        this._writable('bpm');\n\t\t        this.bpm = null;\n\t\t        this._timeline.dispose();\n\t\t        this._timeline = null;\n\t\t        this._onceEvents.dispose();\n\t\t        this._onceEvents = null;\n\t\t        this._repeatedEvents.dispose();\n\t\t        this._repeatedEvents = null;\n\t\t        return this;\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////////\n\t\t    //\tINITIALIZATION\n\t\t    ///////////////////////////////////////////////////////////////////////////////\n\t\t    var TransportConstructor = Tone.Transport;\n\t\t    Tone.Transport = new TransportConstructor();\n\t\t    Tone.Context.on('init', function (context) {\n\t\t        if (context.Transport instanceof TransportConstructor) {\n\t\t            Tone.Transport = context.Transport;\n\t\t        } else {\n\t\t            Tone.Transport = new TransportConstructor();\n\t\t            //store the Transport on the context so it can be retrieved later\n\t\t            context.Transport = Tone.Transport;\n\t\t        }\n\t\t    });\n\t\t    return Tone.Transport;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.Volume is a simple volume node, useful for creating a volume fader. \n\t\t\t *\n\t\t\t *  @extends {Tone}\n\t\t\t *  @constructor\n\t\t\t *  @param {Decibels} [volume=0] the initial volume\n\t\t\t *  @example\n\t\t\t * var vol = new Tone.Volume(-12);\n\t\t\t * instrument.chain(vol, Tone.Master);\n\t\t\t */\n\t\t    Tone.Volume = function () {\n\t\t        var options = this.optionsObject(arguments, ['volume'], Tone.Volume.defaults);\n\t\t        /**\n\t\t\t\t * the output node\n\t\t\t\t * @type {GainNode}\n\t\t\t\t * @private\n\t\t\t\t */\n\t\t        this.output = this.input = new Tone.Gain(options.volume, Tone.Type.Decibels);\n\t\t        /**\n\t\t\t\t * The unmuted volume\n\t\t\t\t * @type {Decibels}\n\t\t\t\t * @private\n\t\t\t\t */\n\t\t        this._unmutedVolume = options.volume;\n\t\t        /**\n\t\t\t\t *  The volume control in decibels. \n\t\t\t\t *  @type {Decibels}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.volume = this.output.gain;\n\t\t        this._readOnly('volume');\n\t\t        //set the mute initially\n\t\t        this.mute = options.mute;\n\t\t    };\n\t\t    Tone.extend(Tone.Volume);\n\t\t    /**\n\t\t\t *  Defaults\n\t\t\t *  @type  {Object}\n\t\t\t *  @const\n\t\t\t *  @static\n\t\t\t */\n\t\t    Tone.Volume.defaults = {\n\t\t        'volume': 0,\n\t\t        'mute': false\n\t\t    };\n\t\t    /**\n\t\t\t * Mute the output. \n\t\t\t * @memberOf Tone.Volume#\n\t\t\t * @type {boolean}\n\t\t\t * @name mute\n\t\t\t * @example\n\t\t\t * //mute the output\n\t\t\t * volume.mute = true;\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Volume.prototype, 'mute', {\n\t\t        get: function () {\n\t\t            return this.volume.value === -Infinity;\n\t\t        },\n\t\t        set: function (mute) {\n\t\t            if (!this.mute && mute) {\n\t\t                this._unmutedVolume = this.volume.value;\n\t\t                //maybe it should ramp here?\n\t\t                this.volume.value = -Infinity;\n\t\t            } else if (this.mute && !mute) {\n\t\t                this.volume.value = this._unmutedVolume;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.Volume} this\n\t\t\t */\n\t\t    Tone.Volume.prototype.dispose = function () {\n\t\t        this.input.dispose();\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._writable('volume');\n\t\t        this.volume.dispose();\n\t\t        this.volume = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Volume;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  A single master output which is connected to the\n\t\t\t *          AudioDestinationNode (aka your speakers). \n\t\t\t *          It provides useful conveniences such as the ability \n\t\t\t *          to set the volume and mute the entire application. \n\t\t\t *          It also gives you the ability to apply master effects to your application. \n\t\t\t *          <br><br>\n\t\t\t *          Like Tone.Transport, A single Tone.Master is created\n\t\t\t *          on initialization and you do not need to explicitly construct one.\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone}\n\t\t\t *  @singleton\n\t\t\t *  @example\n\t\t\t * //the audio will go from the oscillator to the speakers\n\t\t\t * oscillator.connect(Tone.Master);\n\t\t\t * //a convenience for connecting to the master output is also provided:\n\t\t\t * oscillator.toMaster();\n\t\t\t * //the above two examples are equivalent.\n\t\t\t */\n\t\t    Tone.Master = function () {\n\t\t        this.createInsOuts(1, 1);\n\t\t        /**\n\t\t\t\t *  The private volume node\n\t\t\t\t *  @type  {Tone.Volume}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._volume = this.output = new Tone.Volume();\n\t\t        /**\n\t\t\t\t * The volume of the master output.\n\t\t\t\t * @type {Decibels}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t\t        this.volume = this._volume.volume;\n\t\t        this._readOnly('volume');\n\t\t        //connections\n\t\t        this.input.chain(this.output, this.context.destination);\n\t\t    };\n\t\t    Tone.extend(Tone.Master);\n\t\t    /**\n\t\t\t *  @type {Object}\n\t\t\t *  @const\n\t\t\t */\n\t\t    Tone.Master.defaults = {\n\t\t        'volume': 0,\n\t\t        'mute': false\n\t\t    };\n\t\t    /**\n\t\t\t * Mute the output. \n\t\t\t * @memberOf Tone.Master#\n\t\t\t * @type {boolean}\n\t\t\t * @name mute\n\t\t\t * @example\n\t\t\t * //mute the output\n\t\t\t * Tone.Master.mute = true;\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Master.prototype, 'mute', {\n\t\t        get: function () {\n\t\t            return this._volume.mute;\n\t\t        },\n\t\t        set: function (mute) {\n\t\t            this._volume.mute = mute;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously \n\t\t\t *  chained in the master effects chain. \n\t\t\t *  @param {AudioNode|Tone...} args All arguments will be connected in a row\n\t\t\t *                                  and the Master will be routed through it.\n\t\t\t *  @return  {Tone.Master}  this\n\t\t\t *  @example\n\t\t\t * //some overall compression to keep the levels in check\n\t\t\t * var masterCompressor = new Tone.Compressor({\n\t\t\t * \t\"threshold\" : -6,\n\t\t\t * \t\"ratio\" : 3,\n\t\t\t * \t\"attack\" : 0.5,\n\t\t\t * \t\"release\" : 0.1\n\t\t\t * });\n\t\t\t * //give a little boost to the lows\n\t\t\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t\t\t * //route everything through the filter \n\t\t\t * //and compressor before going to the speakers\n\t\t\t * Tone.Master.chain(lowBump, masterCompressor);\n\t\t\t */\n\t\t    Tone.Master.prototype.chain = function () {\n\t\t        this.input.disconnect();\n\t\t        this.input.chain.apply(this.input, arguments);\n\t\t        arguments[arguments.length - 1].connect(this.output);\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up\n\t\t\t *  @return  {Tone.Master}  this\n\t\t\t */\n\t\t    Tone.Master.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._writable('volume');\n\t\t        this._volume.dispose();\n\t\t        this._volume = null;\n\t\t        this.volume = null;\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //\tAUGMENT TONE's PROTOTYPE\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    /**\n\t\t\t *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)\n\t\t\t *  @returns {Tone} this\n\t\t\t *  @example\n\t\t\t * //connect an oscillator to the master output\n\t\t\t * var osc = new Tone.Oscillator().toMaster();\n\t\t\t */\n\t\t    Tone.prototype.toMaster = function () {\n\t\t        this.connect(Tone.Master);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Also augment AudioNode's prototype to include toMaster\n\t\t\t *  as a convenience\n\t\t\t *  @returns {AudioNode} this\n\t\t\t */\n\t\t    AudioNode.prototype.toMaster = function () {\n\t\t        this.connect(Tone.Master);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  initialize the module and listen for new audio contexts\n\t\t\t */\n\t\t    var MasterConstructor = Tone.Master;\n\t\t    Tone.Master = new MasterConstructor();\n\t\t    Tone.Context.on('init', function (context) {\n\t\t        // if it already exists, just restore it\n\t\t        if (context.Master instanceof MasterConstructor) {\n\t\t            Tone.Master = context.Master;\n\t\t        } else {\n\t\t            Tone.Master = new MasterConstructor();\n\t\t        }\n\t\t        context.Master = Tone.Master;\n\t\t    });\n\t\t    return Tone.Master;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Base class for sources. Sources have start/stop methods\n\t\t\t *          and the ability to be synced to the \n\t\t\t *          start/stop of Tone.Transport. \n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone}\n\t\t\t *  @example\n\t\t\t * //Multiple state change events can be chained together,\n\t\t\t * //but must be set in the correct order and with ascending times\n\t\t\t * \n\t\t\t * // OK\n\t\t\t * state.start().stop(\"+0.2\");\n\t\t\t * // AND\n\t\t\t * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n\t\t\t *\n\t\t\t * // BAD\n\t\t\t * state.stop(\"+0.2\").start();\n\t\t\t * // OR\n\t\t\t * state.start(\"+0.3\").stop(\"+0.2\");\n\t\t\t * \n\t\t\t */\n\t\t    Tone.Source = function (options) {\n\t\t        // this.createInsOuts(0, 1);\n\t\t        options = this.defaultArg(options, Tone.Source.defaults);\n\t\t        /**\n\t\t\t\t *  The output volume node\n\t\t\t\t *  @type  {Tone.Volume}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t\t        /**\n\t\t\t\t * The volume of the output in decibels.\n\t\t\t\t * @type {Decibels}\n\t\t\t\t * @signal\n\t\t\t\t * @example\n\t\t\t\t * source.volume.value = -6;\n\t\t\t\t */\n\t\t        this.volume = this._volume.volume;\n\t\t        this._readOnly('volume');\n\t\t        /**\n\t\t\t\t * \tKeep track of the scheduled state.\n\t\t\t\t *  @type {Tone.TimelineState}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t\t        this._state.memory = 10;\n\t\t        /**\n\t\t\t\t *  The synced `start` callback function from the transport\n\t\t\t\t *  @type {Function}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._synced = false;\n\t\t        /**\n\t\t\t\t *  Keep track of all of the scheduled event ids\n\t\t\t\t *  @type  {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._scheduled = [];\n\t\t        //make the output explicitly stereo\n\t\t        this._volume.output.output.channelCount = 2;\n\t\t        this._volume.output.output.channelCountMode = 'explicit';\n\t\t        //mute initially\n\t\t        this.mute = options.mute;\n\t\t    };\n\t\t    Tone.extend(Tone.Source);\n\t\t    /**\n\t\t\t *  The default parameters\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.Source.defaults = {\n\t\t        'volume': 0,\n\t\t        'mute': false\n\t\t    };\n\t\t    /**\n\t\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t\t *  @type {Tone.State}\n\t\t\t *  @readOnly\n\t\t\t *  @memberOf Tone.Source#\n\t\t\t *  @name state\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Source.prototype, 'state', {\n\t\t        get: function () {\n\t\t            if (this._synced) {\n\t\t                if (Tone.Transport.state === Tone.State.Started) {\n\t\t                    return this._state.getValueAtTime(Tone.Transport.seconds);\n\t\t                } else {\n\t\t                    return Tone.State.Stopped;\n\t\t                }\n\t\t            } else {\n\t\t                return this._state.getValueAtTime(this.now());\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * Mute the output. \n\t\t\t * @memberOf Tone.Source#\n\t\t\t * @type {boolean}\n\t\t\t * @name mute\n\t\t\t * @example\n\t\t\t * //mute the output\n\t\t\t * source.mute = true;\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Source.prototype, 'mute', {\n\t\t        get: function () {\n\t\t            return this._volume.mute;\n\t\t        },\n\t\t        set: function (mute) {\n\t\t            this._volume.mute = mute;\n\t\t        }\n\t\t    });\n\t\t    //overwrite these functions\n\t\t    Tone.Source.prototype._start = Tone.noOp;\n\t\t    Tone.Source.prototype._stop = Tone.noOp;\n\t\t    /**\n\t\t\t *  Start the source at the specified time. If no time is given, \n\t\t\t *  start the source now.\n\t\t\t *  @param  {Time} [time=now] When the source should be started.\n\t\t\t *  @returns {Tone.Source} this\n\t\t\t *  @example\n\t\t\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t\t\t */\n\t\t    Tone.Source.prototype.start = function (time, offset, duration) {\n\t\t        if (this.isUndef(time) && this._synced) {\n\t\t            time = Tone.Transport.seconds;\n\t\t        } else {\n\t\t            time = this.toSeconds(time);\n\t\t        }\n\t\t        //if it's started, stop it and restart it\n\t\t        if (!this.retrigger && this._state.getValueAtTime(time) === Tone.State.Started) {\n\t\t            this.stop(time);\n\t\t        }\n\t\t        this._state.setStateAtTime(Tone.State.Started, time);\n\t\t        if (this._synced) {\n\t\t            // add the offset time to the event\n\t\t            var event = this._state.get(time);\n\t\t            event.offset = this.defaultArg(offset, 0);\n\t\t            event.duration = duration;\n\t\t            var sched = Tone.Transport.schedule(function (t) {\n\t\t                this._start(t, offset, duration);\n\t\t            }.bind(this), time);\n\t\t            this._scheduled.push(sched);\n\t\t        } else {\n\t\t            this._start.apply(this, arguments);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Stop the source at the specified time. If no time is given, \n\t\t\t *  stop the source now.\n\t\t\t *  @param  {Time} [time=now] When the source should be stopped. \n\t\t\t *  @returns {Tone.Source} this\n\t\t\t *  @example\n\t\t\t * source.stop(); // stops the source immediately\n\t\t\t */\n\t\t    Tone.Source.prototype.stop = function (time) {\n\t\t        if (this.isUndef(time) && this._synced) {\n\t\t            time = Tone.Transport.seconds;\n\t\t        } else {\n\t\t            time = this.toSeconds(time);\n\t\t        }\n\t\t        this._state.cancel(time);\n\t\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t\t        if (!this._synced) {\n\t\t            this._stop.apply(this, arguments);\n\t\t        } else {\n\t\t            var sched = Tone.Transport.schedule(this._stop.bind(this), time);\n\t\t            this._scheduled.push(sched);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Sync the source to the Transport so that all subsequent\n\t\t\t *  calls to `start` and `stop` are synced to the TransportTime\n\t\t\t *  instead of the AudioContext time. \n\t\t\t *\n\t\t\t *  @returns {Tone.Source} this\n\t\t\t *  @example\n\t\t\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t\t\t * source.sync().start(0).stop(0.3);\n\t\t\t * //start the transport.\n\t\t\t * Tone.Transport.start();\n\t\t\t *\n\t\t\t *  @example\n\t\t\t * //start the transport with an offset and the sync'ed sources\n\t\t\t * //will start in the correct position\n\t\t\t * source.sync().start(0.1);\n\t\t\t * //the source will be invoked with an offset of 0.4\n\t\t\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t\t\t */\n\t\t    Tone.Source.prototype.sync = function () {\n\t\t        this._synced = true;\n\t\t        Tone.Transport.on('start loopStart', function (time, offset) {\n\t\t            if (offset > 0) {\n\t\t                // get the playback state at that time\n\t\t                var stateEvent = this._state.get(offset);\n\t\t                // listen for start events which may occur in the middle of the sync'ed time\n\t\t                if (stateEvent && stateEvent.state === Tone.State.Started && stateEvent.time !== offset) {\n\t\t                    // get the offset\n\t\t                    var startOffset = offset - this.toSeconds(stateEvent.time);\n\t\t                    var duration;\n\t\t                    if (stateEvent.duration) {\n\t\t                        duration = this.toSeconds(stateEvent.duration) - startOffset;\n\t\t                    }\n\t\t                    this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t\t                }\n\t\t            }\n\t\t        }.bind(this));\n\t\t        Tone.Transport.on('stop pause loopEnd', function (time) {\n\t\t            if (this._state.getValueAtTime(Tone.Transport.seconds) === Tone.State.Started) {\n\t\t                this._stop(time);\n\t\t            }\n\t\t        }.bind(this));\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t\t\t *  @returns {Tone.Source} this\n\t\t\t */\n\t\t    Tone.Source.prototype.unsync = function () {\n\t\t        this._synced = false;\n\t\t        Tone.Transport.off('start stop pause loopEnd loopStart');\n\t\t        // clear all of the scheduled ids\n\t\t        for (var i = 0; i < this._scheduled.length; i++) {\n\t\t            var id = this._scheduled[i];\n\t\t            Tone.Transport.clear(id);\n\t\t        }\n\t\t        this._scheduled = [];\n\t\t        this._state.cancel(0);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *\tClean up.\n\t\t\t *  @return {Tone.Source} this\n\t\t\t */\n\t\t    Tone.Source.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this.unsync();\n\t\t        this._scheduled = null;\n\t\t        this._writable('volume');\n\t\t        this._volume.dispose();\n\t\t        this._volume = null;\n\t\t        this.volume = null;\n\t\t        this._state.dispose();\n\t\t        this._state = null;\n\t\t    };\n\t\t    return Tone.Source;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  OscillatorNode shim\n\t\t\t *  @private\n\t\t\t */\n\t\t    if (window.OscillatorNode && !OscillatorNode.prototype.start) {\n\t\t        OscillatorNode.prototype.start = OscillatorNode.prototype.noteOn;\n\t\t        OscillatorNode.prototype.stop = OscillatorNode.prototype.noteOff;\n\t\t        if (!OscillatorNode.prototype.setPeriodicWave) {\n\t\t            OscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;\n\t\t        }\n\t\t        if (!AudioContext.prototype.createPeriodicWave) {\n\t\t            AudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;\n\t\t        }\n\t\t    }\n\t\t    /**\n\t\t\t *  @class Tone.Oscillator supports a number of features including\n\t\t\t *         phase rotation, multiple oscillator types (see Tone.Oscillator.type), \n\t\t\t *         and Transport syncing (see Tone.Oscillator.syncFrequency).\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Source}\n\t\t\t *  @param {Frequency} [frequency] Starting frequency\n\t\t\t *  @param {string} [type] The oscillator type. Read more about type below.\n\t\t\t *  @example\n\t\t\t * //make and start a 440hz sine tone\n\t\t\t * var osc = new Tone.Oscillator(440, \"sine\").toMaster().start();\n\t\t\t */\n\t\t    Tone.Oscillator = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'frequency',\n\t\t            'type'\n\t\t        ], Tone.Oscillator.defaults);\n\t\t        Tone.Source.call(this, options);\n\t\t        /**\n\t\t\t\t *  the main oscillator\n\t\t\t\t *  @type {OscillatorNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._oscillator = null;\n\t\t        /**\n\t\t\t\t *  The frequency control.\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t\t        /**\n\t\t\t\t *  The detune control signal.\n\t\t\t\t *  @type {Cents}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t\t        /**\n\t\t\t\t *  the periodic wave\n\t\t\t\t *  @type {PeriodicWave}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._wave = null;\n\t\t        /**\n\t\t\t\t *  The partials of the oscillator\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._partials = this.defaultArg(options.partials, [1]);\n\t\t        /**\n\t\t\t\t *  the phase of the oscillator\n\t\t\t\t *  between 0 - 360\n\t\t\t\t *  @type {number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._phase = options.phase;\n\t\t        /**\n\t\t\t\t *  the type of the oscillator\n\t\t\t\t *  @type {string}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._type = null;\n\t\t        //setup\n\t\t        this.type = options.type;\n\t\t        this.phase = this._phase;\n\t\t        this._readOnly([\n\t\t            'frequency',\n\t\t            'detune'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.Oscillator, Tone.Source);\n\t\t    /**\n\t\t\t *  the default parameters\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.Oscillator.defaults = {\n\t\t        'type': 'sine',\n\t\t        'frequency': 440,\n\t\t        'detune': 0,\n\t\t        'phase': 0,\n\t\t        'partials': []\n\t\t    };\n\t\t    /**\n\t\t\t *  The Oscillator types\n\t\t\t *  @enum {String}\n\t\t\t */\n\t\t    Tone.Oscillator.Type = {\n\t\t        Sine: 'sine',\n\t\t        Triangle: 'triangle',\n\t\t        Sawtooth: 'sawtooth',\n\t\t        Square: 'square',\n\t\t        Custom: 'custom'\n\t\t    };\n\t\t    /**\n\t\t\t *  start the oscillator\n\t\t\t *  @param  {Time} [time=now] \n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Oscillator.prototype._start = function (time) {\n\t\t        //new oscillator with previous values\n\t\t        this._oscillator = this.context.createOscillator();\n\t\t        this._oscillator.setPeriodicWave(this._wave);\n\t\t        //connect the control signal to the oscillator frequency & detune\n\t\t        this._oscillator.connect(this.output);\n\t\t        this.frequency.connect(this._oscillator.frequency);\n\t\t        this.detune.connect(this._oscillator.detune);\n\t\t        //start the oscillator\n\t\t        this._oscillator.start(this.toSeconds(time));\n\t\t    };\n\t\t    /**\n\t\t\t *  stop the oscillator\n\t\t\t *  @private\n\t\t\t *  @param  {Time} [time=now] (optional) timing parameter\n\t\t\t *  @returns {Tone.Oscillator} this\n\t\t\t */\n\t\t    Tone.Oscillator.prototype._stop = function (time) {\n\t\t        if (this._oscillator) {\n\t\t            this._oscillator.stop(this.toSeconds(time));\n\t\t            this._oscillator = null;\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t\t\t *  will also affect the oscillators frequency. \n\t\t\t *  @returns {Tone.Oscillator} this\n\t\t\t *  @example\n\t\t\t * Tone.Transport.bpm.value = 120;\n\t\t\t * osc.frequency.value = 440;\n\t\t\t * //the ration between the bpm and the frequency will be maintained\n\t\t\t * osc.syncFrequency();\n\t\t\t * Tone.Transport.bpm.value = 240; \n\t\t\t * // the frequency of the oscillator is doubled to 880\n\t\t\t */\n\t\t    Tone.Oscillator.prototype.syncFrequency = function () {\n\t\t        Tone.Transport.syncSignal(this.frequency);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Unsync the oscillator's frequency from the Transport. \n\t\t\t *  See Tone.Oscillator.syncFrequency\n\t\t\t *  @returns {Tone.Oscillator} this\n\t\t\t */\n\t\t    Tone.Oscillator.prototype.unsyncFrequency = function () {\n\t\t        Tone.Transport.unsyncSignal(this.frequency);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t\t\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t\t\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t\t\t * 8 partials of the triangle wave.\n\t\t\t * <br><br> \n\t\t\t * Uses PeriodicWave internally even for native types so that it can set the phase. \n\t\t\t * PeriodicWave equations are from the \n\t\t\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t\t\t *  \n\t\t\t * @memberOf Tone.Oscillator#\n\t\t\t * @type {string}\n\t\t\t * @name type\n\t\t\t * @example\n\t\t\t * //set it to a square wave\n\t\t\t * osc.type = \"square\";\n\t\t\t * @example\n\t\t\t * //set the first 6 partials of a sawtooth wave\n\t\t\t * osc.type = \"sawtooth6\";\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Oscillator.prototype, 'type', {\n\t\t        get: function () {\n\t\t            return this._type;\n\t\t        },\n\t\t        set: function (type) {\n\t\t            var coefs = this._getRealImaginary(type, this._phase);\n\t\t            var periodicWave = this.context.createPeriodicWave(coefs[0], coefs[1]);\n\t\t            this._wave = periodicWave;\n\t\t            if (this._oscillator !== null) {\n\t\t                this._oscillator.setPeriodicWave(this._wave);\n\t\t            }\n\t\t            this._type = type;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Returns the real and imaginary components based \n\t\t\t *  on the oscillator type.\n\t\t\t *  @returns {Array} [real, imaginary]\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Oscillator.prototype._getRealImaginary = function (type, phase) {\n\t\t        var fftSize = 4096;\n\t\t        var periodicWaveSize = fftSize / 2;\n\t\t        var real = new Float32Array(periodicWaveSize);\n\t\t        var imag = new Float32Array(periodicWaveSize);\n\t\t        var partialCount = 1;\n\t\t        if (type === Tone.Oscillator.Type.Custom) {\n\t\t            partialCount = this._partials.length + 1;\n\t\t            periodicWaveSize = partialCount;\n\t\t        } else {\n\t\t            var partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t\t            if (partial) {\n\t\t                partialCount = parseInt(partial[2]) + 1;\n\t\t                type = partial[1];\n\t\t                partialCount = Math.max(partialCount, 2);\n\t\t                periodicWaveSize = partialCount;\n\t\t            }\n\t\t        }\n\t\t        for (var n = 1; n < periodicWaveSize; ++n) {\n\t\t            var piFactor = 2 / (n * Math.PI);\n\t\t            var b;\n\t\t            switch (type) {\n\t\t            case Tone.Oscillator.Type.Sine:\n\t\t                b = n <= partialCount ? 1 : 0;\n\t\t                break;\n\t\t            case Tone.Oscillator.Type.Square:\n\t\t                b = n & 1 ? 2 * piFactor : 0;\n\t\t                break;\n\t\t            case Tone.Oscillator.Type.Sawtooth:\n\t\t                b = piFactor * (n & 1 ? 1 : -1);\n\t\t                break;\n\t\t            case Tone.Oscillator.Type.Triangle:\n\t\t                if (n & 1) {\n\t\t                    b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);\n\t\t                } else {\n\t\t                    b = 0;\n\t\t                }\n\t\t                break;\n\t\t            case Tone.Oscillator.Type.Custom:\n\t\t                b = this._partials[n - 1];\n\t\t                break;\n\t\t            default:\n\t\t                throw new TypeError('Tone.Oscillator: invalid type: ' + type);\n\t\t            }\n\t\t            if (b !== 0) {\n\t\t                real[n] = -b * Math.sin(phase * n);\n\t\t                imag[n] = b * Math.cos(phase * n);\n\t\t            } else {\n\t\t                real[n] = 0;\n\t\t                imag[n] = 0;\n\t\t            }\n\t\t        }\n\t\t        return [\n\t\t            real,\n\t\t            imag\n\t\t        ];\n\t\t    };\n\t\t    /**\n\t\t\t *  Compute the inverse FFT for a given phase.\t\n\t\t\t *  @param  {Float32Array}  real\n\t\t\t *  @param  {Float32Array}  imag \n\t\t\t *  @param  {NormalRange}  phase \n\t\t\t *  @return  {AudioRange}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Oscillator.prototype._inverseFFT = function (real, imag, phase) {\n\t\t        var sum = 0;\n\t\t        var len = real.length;\n\t\t        for (var i = 0; i < len; i++) {\n\t\t            sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t\t        }\n\t\t        return sum;\n\t\t    };\n\t\t    /**\n\t\t\t *  Returns the initial value of the oscillator.\n\t\t\t *  @return  {AudioRange}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Oscillator.prototype._getInitialValue = function () {\n\t\t        var coefs = this._getRealImaginary(this._type, 0);\n\t\t        var real = coefs[0];\n\t\t        var imag = coefs[1];\n\t\t        var maxValue = 0;\n\t\t        var twoPi = Math.PI * 2;\n\t\t        //check for peaks in 8 places\n\t\t        for (var i = 0; i < 8; i++) {\n\t\t            maxValue = Math.max(this._inverseFFT(real, imag, i / 8 * twoPi), maxValue);\n\t\t        }\n\t\t        return -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t\t    };\n\t\t    /**\n\t\t\t * The partials of the waveform. A partial represents \n\t\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t\t * fundamental frequency, the second is the octave and so on\n\t\t\t * following the harmonic series. \n\t\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t\t * The value is an empty array when the type is not \"custom\". \n\t\t\t * @memberOf Tone.Oscillator#\n\t\t\t * @type {Array}\n\t\t\t * @name partials\n\t\t\t * @example\n\t\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Oscillator.prototype, 'partials', {\n\t\t        get: function () {\n\t\t            if (this._type !== Tone.Oscillator.Type.Custom) {\n\t\t                return [];\n\t\t            } else {\n\t\t                return this._partials;\n\t\t            }\n\t\t        },\n\t\t        set: function (partials) {\n\t\t            this._partials = partials;\n\t\t            this.type = Tone.Oscillator.Type.Custom;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The phase of the oscillator in degrees. \n\t\t\t * @memberOf Tone.Oscillator#\n\t\t\t * @type {Degrees}\n\t\t\t * @name phase\n\t\t\t * @example\n\t\t\t * osc.phase = 180; //flips the phase of the oscillator\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Oscillator.prototype, 'phase', {\n\t\t        get: function () {\n\t\t            return this._phase * (180 / Math.PI);\n\t\t        },\n\t\t        set: function (phase) {\n\t\t            this._phase = phase * Math.PI / 180;\n\t\t            //reset the type\n\t\t            this.type = this._type;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Dispose and disconnect.\n\t\t\t *  @return {Tone.Oscillator} this\n\t\t\t */\n\t\t    Tone.Oscillator.prototype.dispose = function () {\n\t\t        Tone.Source.prototype.dispose.call(this);\n\t\t        if (this._oscillator !== null) {\n\t\t            this._oscillator.disconnect();\n\t\t            this._oscillator = null;\n\t\t        }\n\t\t        this._wave = null;\n\t\t        this._writable([\n\t\t            'frequency',\n\t\t            'detune'\n\t\t        ]);\n\t\t        this.frequency.dispose();\n\t\t        this.frequency = null;\n\t\t        this.detune.dispose();\n\t\t        this.detune = null;\n\t\t        this._partials = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Oscillator;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    /**\n\t\t\t *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be\n\t\t\t *         it's own class is that many browsers optimize out Tone.Signal\n\t\t\t *         with a value of 0 and will not process nodes further down the graph. \n\t\t\t *  @extends {Tone}\n\t\t\t */\n\t\t    Tone.Zero = function () {\n\t\t        /**\n\t\t\t\t *  The gain node\n\t\t\t\t *  @type  {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._gain = this.input = this.output = new Tone.Gain();\n\t\t        this.context.getConstant(0).connect(this._gain);\n\t\t    };\n\t\t    Tone.extend(Tone.Zero);\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @return  {Tone.Zero}  this\n\t\t\t */\n\t\t    Tone.Zero.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._gain.dispose();\n\t\t        this._gain = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Zero;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  LFO stands for low frequency oscillator. Tone.LFO produces an output signal \n\t\t\t *          which can be attached to an AudioParam or Tone.Signal \n\t\t\t *          in order to modulate that parameter with an oscillator. The LFO can \n\t\t\t *          also be synced to the transport to start/stop and change when the tempo changes.\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Oscillator}\n\t\t\t *  @param {Frequency|Object} [frequency] The frequency of the oscillation. Typically, LFOs will be\n\t\t\t *                               in the frequency range of 0.1 to 10 hertz. \n\t\t\t *  @param {number=} min The minimum output value of the LFO. \n\t\t\t *  @param {number=} max The maximum value of the LFO. \n\t\t\t *  @example\n\t\t\t * var lfo = new Tone.LFO(\"4n\", 400, 4000);\n\t\t\t * lfo.connect(filter.frequency);\n\t\t\t */\n\t\t    Tone.LFO = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'frequency',\n\t\t            'min',\n\t\t            'max'\n\t\t        ], Tone.LFO.defaults);\n\t\t        /** \n\t\t\t\t *  The oscillator. \n\t\t\t\t *  @type {Tone.Oscillator}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._oscillator = new Tone.Oscillator({\n\t\t            'frequency': options.frequency,\n\t\t            'type': options.type\n\t\t        });\n\t\t        /**\n\t\t\t\t *  the lfo's frequency\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.frequency = this._oscillator.frequency;\n\t\t        /**\n\t\t\t\t * The amplitude of the LFO, which controls the output range between\n\t\t\t\t * the min and max output. For example if the min is -10 and the max \n\t\t\t\t * is 10, setting the amplitude to 0.5 would make the LFO modulate\n\t\t\t\t * between -5 and 5. \n\t\t\t\t * @type {Number}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t\t        this.amplitude = this._oscillator.volume;\n\t\t        this.amplitude.units = Tone.Type.NormalRange;\n\t\t        this.amplitude.value = options.amplitude;\n\t\t        /**\n\t\t\t\t *  The signal which is output when the LFO is stopped\n\t\t\t\t *  @type  {Tone.Signal}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._stoppedSignal = new Tone.Signal(0, Tone.Type.AudioRange);\n\t\t        /**\n\t\t\t\t *  Just outputs zeros.\n\t\t\t\t *  @type {Tone.Zero}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._zeros = new Tone.Zero();\n\t\t        /**\n\t\t\t\t *  The value that the LFO outputs when it's stopped\n\t\t\t\t *  @type {AudioRange}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._stoppedValue = 0;\n\t\t        /**\n\t\t\t\t *  @type {Tone.AudioToGain} \n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._a2g = new Tone.AudioToGain();\n\t\t        /**\n\t\t\t\t *  @type {Tone.Scale} \n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._scaler = this.output = new Tone.Scale(options.min, options.max);\n\t\t        /**\n\t\t\t\t *  the units of the LFO (used for converting)\n\t\t\t\t *  @type {Tone.Type} \n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._units = Tone.Type.Default;\n\t\t        this.units = options.units;\n\t\t        //connect it up\n\t\t        this._oscillator.chain(this._a2g, this._scaler);\n\t\t        this._zeros.connect(this._a2g);\n\t\t        this._stoppedSignal.connect(this._a2g);\n\t\t        this._readOnly([\n\t\t            'amplitude',\n\t\t            'frequency'\n\t\t        ]);\n\t\t        this.phase = options.phase;\n\t\t    };\n\t\t    Tone.extend(Tone.LFO, Tone.Oscillator);\n\t\t    /**\n\t\t\t *  the default parameters\n\t\t\t *\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.LFO.defaults = {\n\t\t        'type': 'sine',\n\t\t        'min': 0,\n\t\t        'max': 1,\n\t\t        'phase': 0,\n\t\t        'frequency': '4n',\n\t\t        'amplitude': 1,\n\t\t        'units': Tone.Type.Default\n\t\t    };\n\t\t    /**\n\t\t\t *  Start the LFO. \n\t\t\t *  @param  {Time} [time=now] the time the LFO will start\n\t\t\t *  @returns {Tone.LFO} this\n\t\t\t */\n\t\t    Tone.LFO.prototype.start = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        this._stoppedSignal.setValueAtTime(0, time);\n\t\t        this._oscillator.start(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Stop the LFO. \n\t\t\t *  @param  {Time} [time=now] the time the LFO will stop\n\t\t\t *  @returns {Tone.LFO} this\n\t\t\t */\n\t\t    Tone.LFO.prototype.stop = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        this._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\t\t        this._oscillator.stop(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Sync the start/stop/pause to the transport \n\t\t\t *  and the frequency to the bpm of the transport\n\t\t\t *  @returns {Tone.LFO} this\n\t\t\t *  @example\n\t\t\t *  lfo.frequency.value = \"8n\";\n\t\t\t *  lfo.sync().start(0)\n\t\t\t *  //the rate of the LFO will always be an eighth note, \n\t\t\t *  //even as the tempo changes\n\t\t\t */\n\t\t    Tone.LFO.prototype.sync = function () {\n\t\t        this._oscillator.sync();\n\t\t        this._oscillator.syncFrequency();\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  unsync the LFO from transport control\n\t\t\t *  @returns {Tone.LFO} this\n\t\t\t */\n\t\t    Tone.LFO.prototype.unsync = function () {\n\t\t        this._oscillator.unsync();\n\t\t        this._oscillator.unsyncFrequency();\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * The miniumum output of the LFO.\n\t\t\t * @memberOf Tone.LFO#\n\t\t\t * @type {number}\n\t\t\t * @name min\n\t\t\t */\n\t\t    Object.defineProperty(Tone.LFO.prototype, 'min', {\n\t\t        get: function () {\n\t\t            return this._toUnits(this._scaler.min);\n\t\t        },\n\t\t        set: function (min) {\n\t\t            min = this._fromUnits(min);\n\t\t            this._scaler.min = min;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The maximum output of the LFO.\n\t\t\t * @memberOf Tone.LFO#\n\t\t\t * @type {number}\n\t\t\t * @name max\n\t\t\t */\n\t\t    Object.defineProperty(Tone.LFO.prototype, 'max', {\n\t\t        get: function () {\n\t\t            return this._toUnits(this._scaler.max);\n\t\t        },\n\t\t        set: function (max) {\n\t\t            max = this._fromUnits(max);\n\t\t            this._scaler.max = max;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The type of the oscillator: sine, square, sawtooth, triangle. \n\t\t\t * @memberOf Tone.LFO#\n\t\t\t * @type {string}\n\t\t\t * @name type\n\t\t\t */\n\t\t    Object.defineProperty(Tone.LFO.prototype, 'type', {\n\t\t        get: function () {\n\t\t            return this._oscillator.type;\n\t\t        },\n\t\t        set: function (type) {\n\t\t            this._oscillator.type = type;\n\t\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t\t            this._stoppedSignal.value = this._stoppedValue;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The phase of the LFO.\n\t\t\t * @memberOf Tone.LFO#\n\t\t\t * @type {number}\n\t\t\t * @name phase\n\t\t\t */\n\t\t    Object.defineProperty(Tone.LFO.prototype, 'phase', {\n\t\t        get: function () {\n\t\t            return this._oscillator.phase;\n\t\t        },\n\t\t        set: function (phase) {\n\t\t            this._oscillator.phase = phase;\n\t\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t\t            this._stoppedSignal.value = this._stoppedValue;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The output units of the LFO.\n\t\t\t * @memberOf Tone.LFO#\n\t\t\t * @type {Tone.Type}\n\t\t\t * @name units\n\t\t\t */\n\t\t    Object.defineProperty(Tone.LFO.prototype, 'units', {\n\t\t        get: function () {\n\t\t            return this._units;\n\t\t        },\n\t\t        set: function (val) {\n\t\t            var currentMin = this.min;\n\t\t            var currentMax = this.max;\n\t\t            //convert the min and the max\n\t\t            this._units = val;\n\t\t            this.min = currentMin;\n\t\t            this.max = currentMax;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * Mute the output. \n\t\t\t * @memberOf Tone.LFO#\n\t\t\t * @type {Boolean}\n\t\t\t * @name mute\n\t\t\t */\n\t\t    Object.defineProperty(Tone.LFO.prototype, 'mute', {\n\t\t        get: function () {\n\t\t            return this._oscillator.mute;\n\t\t        },\n\t\t        set: function (mute) {\n\t\t            this._oscillator.mute = mute;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t\t *  @type {Tone.State}\n\t\t\t *  @readOnly\n\t\t\t *  @memberOf Tone.LFO#\n\t\t\t *  @name state\n\t\t\t */\n\t\t    Object.defineProperty(Tone.LFO.prototype, 'state', {\n\t\t        get: function () {\n\t\t            return this._oscillator.state;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Connect the output of the LFO to an AudioParam, AudioNode, or Tone Node. \n\t\t\t *  Tone.LFO will automatically convert to the destination units of the \n\t\t\t *  will get the units from the connected node.\n\t\t\t *  @param  {Tone | AudioParam | AudioNode} node \n\t\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t\t *  @returns {Tone.LFO} this\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.LFO.prototype.connect = function (node) {\n\t\t        if (node.constructor === Tone.Signal || node.constructor === Tone.Param || node.constructor === Tone.TimelineSignal) {\n\t\t            this.convert = node.convert;\n\t\t            this.units = node.units;\n\t\t        }\n\t\t        Tone.Signal.prototype.connect.apply(this, arguments);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  private method borrowed from Param converts \n\t\t\t *  units from their destination value\n\t\t\t *  @function\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.LFO.prototype._fromUnits = Tone.Param.prototype._fromUnits;\n\t\t    /**\n\t\t\t *  private method borrowed from Param converts \n\t\t\t *  units to their destination value\n\t\t\t *  @function\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.LFO.prototype._toUnits = Tone.Param.prototype._toUnits;\n\t\t    /**\n\t\t\t *  disconnect and dispose\n\t\t\t *  @returns {Tone.LFO} this\n\t\t\t */\n\t\t    Tone.LFO.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'amplitude',\n\t\t            'frequency'\n\t\t        ]);\n\t\t        this._oscillator.dispose();\n\t\t        this._oscillator = null;\n\t\t        this._stoppedSignal.dispose();\n\t\t        this._stoppedSignal = null;\n\t\t        this._zeros.dispose();\n\t\t        this._zeros = null;\n\t\t        this._scaler.dispose();\n\t\t        this._scaler = null;\n\t\t        this._a2g.dispose();\n\t\t        this._a2g = null;\n\t\t        this.frequency = null;\n\t\t        this.amplitude = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.LFO;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.Limiter will limit the loudness of an incoming signal. \n\t\t\t *         It is composed of a Tone.Compressor with a fast attack \n\t\t\t *         and release. Limiters are commonly used to safeguard against \n\t\t\t *         signal clipping. Unlike a compressor, limiters do not provide \n\t\t\t *         smooth gain reduction and almost completely prevent \n\t\t\t *         additional gain above the threshold.\n\t\t\t *\n\t\t\t *  @extends {Tone}\n\t\t\t *  @constructor\n\t\t\t *  @param {number} threshold The theshold above which the limiting is applied. \n\t\t\t *  @example\n\t\t\t *  var limiter = new Tone.Limiter(-6);\n\t\t\t */\n\t\t    Tone.Limiter = function () {\n\t\t        var options = this.optionsObject(arguments, ['threshold'], Tone.Limiter.defaults);\n\t\t        /**\n\t\t\t\t *  the compressor\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Tone.Compressor}\n\t\t\t\t */\n\t\t        this._compressor = this.input = this.output = new Tone.Compressor({\n\t\t            'attack': 0.001,\n\t\t            'decay': 0.001,\n\t\t            'threshold': options.threshold\n\t\t        });\n\t\t        /**\n\t\t\t\t * The threshold of of the limiter\n\t\t\t\t * @type {Decibel}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t\t        this.threshold = this._compressor.threshold;\n\t\t        this._readOnly('threshold');\n\t\t    };\n\t\t    Tone.extend(Tone.Limiter);\n\t\t    /**\n\t\t\t *  The default value\n\t\t\t *  @type {Object}\n\t\t\t *  @const\n\t\t\t *  @static\n\t\t\t */\n\t\t    Tone.Limiter.defaults = { 'threshold': -12 };\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.Limiter} this\n\t\t\t */\n\t\t    Tone.Limiter.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._compressor.dispose();\n\t\t        this._compressor = null;\n\t\t        this._writable('threshold');\n\t\t        this.threshold = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Limiter;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.Lowpass is a lowpass feedback comb filter. It is similar to \n\t\t\t *         Tone.FeedbackCombFilter, but includes a lowpass filter.\n\t\t\t *\n\t\t\t *  @extends {Tone}\n\t\t\t *  @constructor\n\t\t\t *  @param {Time|Object} [delayTime] The delay time of the comb filter\n\t\t\t *  @param {NormalRange=} resonance The resonance (feedback) of the comb filter\n\t\t\t *  @param {Frequency=} dampening The cutoff of the lowpass filter dampens the\n\t\t\t *                                signal as it is fedback. \n\t\t\t */\n\t\t    Tone.LowpassCombFilter = function () {\n\t\t        this.createInsOuts(1, 1);\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'delayTime',\n\t\t            'resonance',\n\t\t            'dampening'\n\t\t        ], Tone.LowpassCombFilter.defaults);\n\t\t        /**\n\t\t\t\t *  the delay node\n\t\t\t\t *  @type {DelayNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._delay = this.input = new Tone.Delay(options.delayTime);\n\t\t        /**\n\t\t\t\t *  The delayTime of the comb filter. \n\t\t\t\t *  @type {Time}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.delayTime = this._delay.delayTime;\n\t\t        /**\n\t\t\t\t *  the lowpass filter\n\t\t\t\t *  @type  {BiquadFilterNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lowpass = this.output = this.context.createBiquadFilter();\n\t\t        this._lowpass.Q.value = -3.0102999566398125;\n\t\t        this._lowpass.type = 'lowpass';\n\t\t        /**\n\t\t\t\t *  The dampening control of the feedback\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.dampening = new Tone.Param({\n\t\t            'param': this._lowpass.frequency,\n\t\t            'units': Tone.Type.Frequency,\n\t\t            'value': options.dampening\n\t\t        });\n\t\t        /**\n\t\t\t\t *  the feedback gain\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t\t        /**\n\t\t\t\t *  The amount of feedback of the delayed signal. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.resonance = this._feedback.gain;\n\t\t        //connections\n\t\t        this._delay.chain(this._lowpass, this._feedback, this._delay);\n\t\t        this._readOnly([\n\t\t            'dampening',\n\t\t            'resonance',\n\t\t            'delayTime'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.LowpassCombFilter);\n\t\t    /**\n\t\t\t *  the default parameters\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.LowpassCombFilter.defaults = {\n\t\t        'delayTime': 0.1,\n\t\t        'resonance': 0.5,\n\t\t        'dampening': 3000\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.LowpassCombFilter} this\n\t\t\t */\n\t\t    Tone.LowpassCombFilter.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'dampening',\n\t\t            'resonance',\n\t\t            'delayTime'\n\t\t        ]);\n\t\t        this.dampening.dispose();\n\t\t        this.dampening = null;\n\t\t        this.resonance.dispose();\n\t\t        this.resonance = null;\n\t\t        this._delay.dispose();\n\t\t        this._delay = null;\n\t\t        this.delayTime = null;\n\t\t        this._lowpass.disconnect();\n\t\t        this._lowpass = null;\n\t\t        this._feedback.disconnect();\n\t\t        this._feedback = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.LowpassCombFilter;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.Merge brings two signals into the left and right \n\t\t\t *          channels of a single stereo channel.\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone}\n\t\t\t *  @example\n\t\t\t * var merge = new Tone.Merge().toMaster();\n\t\t\t * //routing a sine tone in the left channel\n\t\t\t * //and noise in the right channel\n\t\t\t * var osc = new Tone.Oscillator().connect(merge.left);\n\t\t\t * var noise = new Tone.Noise().connect(merge.right);\n\t\t\t * //starting our oscillators\n\t\t\t * noise.start();\n\t\t\t * osc.start();\n\t\t\t */\n\t\t    Tone.Merge = function () {\n\t\t        this.createInsOuts(2, 0);\n\t\t        /**\n\t\t\t\t *  The left input channel.\n\t\t\t\t *  Alias for <code>input[0]</code>\n\t\t\t\t *  @type {GainNode}\n\t\t\t\t */\n\t\t        this.left = this.input[0] = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  The right input channel.\n\t\t\t\t *  Alias for <code>input[1]</code>.\n\t\t\t\t *  @type {GainNode}\n\t\t\t\t */\n\t\t        this.right = this.input[1] = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  the merger node for the two channels\n\t\t\t\t *  @type {ChannelMergerNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._merger = this.output = this.context.createChannelMerger(2);\n\t\t        //connections\n\t\t        this.left.connect(this._merger, 0, 0);\n\t\t        this.right.connect(this._merger, 0, 1);\n\t\t        this.left.channelCount = 1;\n\t\t        this.right.channelCount = 1;\n\t\t        this.left.channelCountMode = 'explicit';\n\t\t        this.right.channelCountMode = 'explicit';\n\t\t    };\n\t\t    Tone.extend(Tone.Merge);\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.Merge} this\n\t\t\t */\n\t\t    Tone.Merge.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this.left.dispose();\n\t\t        this.left = null;\n\t\t        this.right.dispose();\n\t\t        this.right = null;\n\t\t        this._merger.disconnect();\n\t\t        this._merger = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Merge;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n\t\t\t *          of an input signal with some averaging applied. It can also get the raw \n\t\t\t *          value of the input signal.\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone}\n\t\t\t *  @param {String} type Either \"level\" or \"signal\". \n\t\t\t *  @param {Number} smoothing The amount of smoothing applied between frames.\n\t\t\t *  @example\n\t\t\t * var meter = new Tone.Meter();\n\t\t\t * var mic = new Tone.UserMedia().start();\n\t\t\t * //connect mic to the meter\n\t\t\t * mic.connect(meter);\n\t\t\t * //the current level of the mic input\n\t\t\t * var level = meter.value;\n\t\t\t */\n\t\t    Tone.Meter = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'type',\n\t\t            'smoothing'\n\t\t        ], Tone.Meter.defaults);\n\t\t        /**\n\t\t\t\t *  The type of the meter, either \"level\" or \"signal\". \n\t\t\t\t *  A \"level\" meter will return the volume level (rms) of the \n\t\t\t\t *  input signal and a \"signal\" meter will return\n\t\t\t\t *  the signal value of the input. \n\t\t\t\t *  @type  {String}\n\t\t\t\t */\n\t\t        this.type = options.type;\n\t\t        /**\n\t\t\t\t *  The analyser node which computes the levels.\n\t\t\t\t *  @private\n\t\t\t\t *  @type  {Tone.Analyser}\n\t\t\t\t */\n\t\t        this.input = this.output = this._analyser = new Tone.Analyser('waveform', 512);\n\t\t        this._analyser.returnType = 'float';\n\t\t        /**\n\t\t\t\t *  The amount of carryover between the current and last frame. \n\t\t\t\t *  Only applied meter for \"level\" type.\n\t\t\t\t *  @type  {Number}\n\t\t\t\t */\n\t\t        this.smoothing = options.smoothing;\n\t\t        /**\n\t\t\t\t *  The last computed value\n\t\t\t\t *  @type {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lastValue = 0;\n\t\t    };\n\t\t    Tone.extend(Tone.Meter);\n\t\t    /**\n\t\t\t *  @private\n\t\t\t *  @enum {String}\n\t\t\t */\n\t\t    Tone.Meter.Type = {\n\t\t        Level: 'level',\n\t\t        Signal: 'signal'\n\t\t    };\n\t\t    /**\n\t\t\t *  The defaults\n\t\t\t *  @type {Object}\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t */\n\t\t    Tone.Meter.defaults = {\n\t\t        'smoothing': 0.8,\n\t\t        'type': Tone.Meter.Type.Level\n\t\t    };\n\t\t    /**\n\t\t\t * The current value of the meter. A value of 1 is\n\t\t\t * \"unity\".\n\t\t\t * @memberOf Tone.Meter#\n\t\t\t * @type {Number}\n\t\t\t * @name value\n\t\t\t * @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Meter.prototype, 'value', {\n\t\t        get: function () {\n\t\t            var signal = this._analyser.analyse();\n\t\t            if (this.type === Tone.Meter.Type.Level) {\n\t\t                //rms\n\t\t                var sum = 0;\n\t\t                for (var i = 0; i < signal.length; i++) {\n\t\t                    sum += Math.pow(signal[i], 2);\n\t\t                }\n\t\t                var rms = Math.sqrt(sum / signal.length);\n\t\t                //smooth it\n\t\t                rms = Math.max(rms, this._lastValue * this.smoothing);\n\t\t                this._lastValue = rms;\n\t\t                //scale it\n\t\t                var unity = 0.35;\n\t\t                var val = rms / unity;\n\t\t                //scale the output curve\n\t\t                return Math.sqrt(val);\n\t\t            } else {\n\t\t                return signal[0];\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.Meter} this\n\t\t\t */\n\t\t    Tone.Meter.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._analyser.dispose();\n\t\t        this._analyser = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Meter;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *\t@class  Tone.Split splits an incoming signal into left and right channels.\n\t\t\t *\t\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone}\n\t\t\t *  @example\n\t\t\t * var split = new Tone.Split();\n\t\t\t * stereoSignal.connect(split);\n\t\t\t */\n\t\t    Tone.Split = function () {\n\t\t        this.createInsOuts(0, 2);\n\t\t        /** \n\t\t\t\t *  @type {ChannelSplitterNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._splitter = this.input = this.context.createChannelSplitter(2);\n\t\t        /** \n\t\t\t\t *  Left channel output. \n\t\t\t\t *  Alias for <code>output[0]</code>\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t */\n\t\t        this.left = this.output[0] = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  Right channel output.\n\t\t\t\t *  Alias for <code>output[1]</code>\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t */\n\t\t        this.right = this.output[1] = new Tone.Gain();\n\t\t        //connections\n\t\t        this._splitter.connect(this.left, 0, 0);\n\t\t        this._splitter.connect(this.right, 1, 0);\n\t\t    };\n\t\t    Tone.extend(Tone.Split);\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.Split} this\n\t\t\t */\n\t\t    Tone.Split.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._splitter.disconnect();\n\t\t        this.left.dispose();\n\t\t        this.left = null;\n\t\t        this.right.dispose();\n\t\t        this.right = null;\n\t\t        this._splitter = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Split;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t\t *         (which comes out of both the left and the right channel) \n\t\t\t *         and the 'side' (which only comes out of the the side channels). <br><br>\n\t\t\t *         <code>\n\t\t\t *         Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>\n\t\t\t *         Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>\n\t\t\t *         </code>\n\t\t\t *\n\t\t\t *  @extends {Tone}\n\t\t\t *  @constructor\n\t\t\t */\n\t\t    Tone.MidSideSplit = function () {\n\t\t        this.createInsOuts(0, 2);\n\t\t        /**\n\t\t\t\t *  split the incoming signal into left and right channels\n\t\t\t\t *  @type  {Tone.Split}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._split = this.input = new Tone.Split();\n\t\t        /**\n\t\t\t\t *  The mid send. Connect to mid processing. Alias for\n\t\t\t\t *  <code>output[0]</code>\n\t\t\t\t *  @type {Tone.Expr}\n\t\t\t\t */\n\t\t        this.mid = this.output[0] = new Tone.Expr('($0 + $1) * $2');\n\t\t        /**\n\t\t\t\t *  The side output. Connect to side processing. Alias for\n\t\t\t\t *  <code>output[1]</code>\n\t\t\t\t *  @type {Tone.Expr}\n\t\t\t\t */\n\t\t        this.side = this.output[1] = new Tone.Expr('($0 - $1) * $2');\n\t\t        this._split.connect(this.mid, 0, 0);\n\t\t        this._split.connect(this.mid, 1, 1);\n\t\t        this._split.connect(this.side, 0, 0);\n\t\t        this._split.connect(this.side, 1, 1);\n\t\t        this.context.getConstant(Math.SQRT1_2).connect(this.mid, 0, 2);\n\t\t        this.context.getConstant(Math.SQRT1_2).connect(this.side, 0, 2);\n\t\t    };\n\t\t    Tone.extend(Tone.MidSideSplit);\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.MidSideSplit} this\n\t\t\t */\n\t\t    Tone.MidSideSplit.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this.mid.dispose();\n\t\t        this.mid = null;\n\t\t        this.side.dispose();\n\t\t        this.side = null;\n\t\t        this._split.dispose();\n\t\t        this._split = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.MidSideSplit;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t\t *         (which comes out of both the left and the right channel) \n\t\t\t *         and the 'side' (which only comes out of the the side channels). \n\t\t\t *         MidSideMerge merges the mid and side signal after they've been seperated\n\t\t\t *         by Tone.MidSideSplit.<br><br>\n\t\t\t *         <code>\n\t\t\t *         Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>\n\t\t\t *         Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>\n\t\t\t *         </code>\n\t\t\t *\n\t\t\t *  @extends {Tone.StereoEffect}\n\t\t\t *  @constructor\n\t\t\t */\n\t\t    Tone.MidSideMerge = function () {\n\t\t        this.createInsOuts(2, 0);\n\t\t        /**\n\t\t\t\t *  The mid signal input. Alias for\n\t\t\t\t *  <code>input[0]</code>\n\t\t\t\t *  @type  {Tone.Gain}\n\t\t\t\t */\n\t\t        this.mid = this.input[0] = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  recombine the mid/side into Left\n\t\t\t\t *  @type {Tone.Expr}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._left = new Tone.Expr('($0 + $1) * $2');\n\t\t        /**\n\t\t\t\t *  The side signal input. Alias for\n\t\t\t\t *  <code>input[1]</code>\n\t\t\t\t *  @type  {Tone.Gain}\n\t\t\t\t */\n\t\t        this.side = this.input[1] = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  recombine the mid/side into Right\n\t\t\t\t *  @type {Tone.Expr}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._right = new Tone.Expr('($0 - $1) * $2');\n\t\t        /**\n\t\t\t\t *  Merge the left/right signal back into a stereo signal.\n\t\t\t\t *  @type {Tone.Merge}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._merge = this.output = new Tone.Merge();\n\t\t        this.mid.connect(this._left, 0, 0);\n\t\t        this.side.connect(this._left, 0, 1);\n\t\t        this.mid.connect(this._right, 0, 0);\n\t\t        this.side.connect(this._right, 0, 1);\n\t\t        this._left.connect(this._merge, 0, 0);\n\t\t        this._right.connect(this._merge, 0, 1);\n\t\t        this.context.getConstant(Math.SQRT1_2).connect(this._left, 0, 2);\n\t\t        this.context.getConstant(Math.SQRT1_2).connect(this._right, 0, 2);\n\t\t    };\n\t\t    Tone.extend(Tone.MidSideMerge);\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.MidSideMerge} this\n\t\t\t */\n\t\t    Tone.MidSideMerge.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this.mid.dispose();\n\t\t        this.mid = null;\n\t\t        this.side.dispose();\n\t\t        this.side = null;\n\t\t        this._left.dispose();\n\t\t        this._left = null;\n\t\t        this._right.dispose();\n\t\t        this._right = null;\n\t\t        this._merge.dispose();\n\t\t        this._merge = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.MidSideMerge;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.MidSideCompressor applies two different compressors to the mid\n\t\t\t *         and side signal components. See Tone.MidSideSplit. \n\t\t\t *\n\t\t\t *  @extends {Tone}\n\t\t\t *  @param {Object} options The options that are passed to the mid and side\n\t\t\t *                          compressors. \n\t\t\t *  @constructor\n\t\t\t */\n\t\t    Tone.MidSideCompressor = function (options) {\n\t\t        options = this.defaultArg(options, Tone.MidSideCompressor.defaults);\n\t\t        /**\n\t\t\t\t *  the mid/side split\n\t\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._midSideSplit = this.input = new Tone.MidSideSplit();\n\t\t        /**\n\t\t\t\t *  the mid/side recombination\n\t\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._midSideMerge = this.output = new Tone.MidSideMerge();\n\t\t        /**\n\t\t\t\t *  The compressor applied to the mid signal\n\t\t\t\t *  @type  {Tone.Compressor}\n\t\t\t\t */\n\t\t        this.mid = new Tone.Compressor(options.mid);\n\t\t        /**\n\t\t\t\t *  The compressor applied to the side signal\n\t\t\t\t *  @type  {Tone.Compressor}\n\t\t\t\t */\n\t\t        this.side = new Tone.Compressor(options.side);\n\t\t        this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n\t\t        this._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n\t\t        this._readOnly([\n\t\t            'mid',\n\t\t            'side'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.MidSideCompressor);\n\t\t    /**\n\t\t\t *  @const\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.MidSideCompressor.defaults = {\n\t\t        'mid': {\n\t\t            'ratio': 3,\n\t\t            'threshold': -24,\n\t\t            'release': 0.03,\n\t\t            'attack': 0.02,\n\t\t            'knee': 16\n\t\t        },\n\t\t        'side': {\n\t\t            'ratio': 6,\n\t\t            'threshold': -30,\n\t\t            'release': 0.25,\n\t\t            'attack': 0.03,\n\t\t            'knee': 10\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.MidSideCompressor} this\n\t\t\t */\n\t\t    Tone.MidSideCompressor.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'mid',\n\t\t            'side'\n\t\t        ]);\n\t\t        this.mid.dispose();\n\t\t        this.mid = null;\n\t\t        this.side.dispose();\n\t\t        this.side = null;\n\t\t        this._midSideSplit.dispose();\n\t\t        this._midSideSplit = null;\n\t\t        this._midSideMerge.dispose();\n\t\t        this._midSideMerge = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.MidSideCompressor;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.Mono coerces the incoming mono or stereo signal into a mono signal\n\t\t\t *         where both left and right channels have the same value. This can be useful \n\t\t\t *         for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n\t\t\t *\n\t\t\t *  @extends {Tone}\n\t\t\t *  @constructor\n\t\t\t */\n\t\t    Tone.Mono = function () {\n\t\t        this.createInsOuts(1, 0);\n\t\t        /**\n\t\t\t\t *  merge the signal\n\t\t\t\t *  @type {Tone.Merge}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._merge = this.output = new Tone.Merge();\n\t\t        this.input.connect(this._merge, 0, 0);\n\t\t        this.input.connect(this._merge, 0, 1);\n\t\t        this.input.gain.value = this.dbToGain(-10);\n\t\t    };\n\t\t    Tone.extend(Tone.Mono);\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.Mono} this\n\t\t\t */\n\t\t    Tone.Mono.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._merge.dispose();\n\t\t        this._merge = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Mono;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class A compressor with seperate controls over low/mid/high dynamics\n\t\t\t *\n\t\t\t *  @extends {Tone}\n\t\t\t *  @constructor\n\t\t\t *  @param {Object} options The low/mid/high compressor settings.\n\t\t\t *  @example\n\t\t\t *  var multiband = new Tone.MultibandCompressor({\n\t\t\t *  \t\"lowFrequency\" : 200,\n\t\t\t *  \t\"highFrequency\" : 1300\n\t\t\t *  \t\"low\" : {\n\t\t\t *  \t\t\"threshold\" : -12\n\t\t\t *  \t}\n\t\t\t *  })\n\t\t\t */\n\t\t    Tone.MultibandCompressor = function (options) {\n\t\t        options = this.defaultArg(arguments, Tone.MultibandCompressor.defaults);\n\t\t        /**\n\t\t\t\t *  split the incoming signal into high/mid/low\n\t\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._splitter = this.input = new Tone.MultibandSplit({\n\t\t            'lowFrequency': options.lowFrequency,\n\t\t            'highFrequency': options.highFrequency\n\t\t        });\n\t\t        /**\n\t\t\t\t *  low/mid crossover frequency.\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.lowFrequency = this._splitter.lowFrequency;\n\t\t        /**\n\t\t\t\t *  mid/high crossover frequency.\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.highFrequency = this._splitter.highFrequency;\n\t\t        /**\n\t\t\t\t *  the output\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.output = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  The compressor applied to the low frequencies.\n\t\t\t\t *  @type {Tone.Compressor}\n\t\t\t\t */\n\t\t        this.low = new Tone.Compressor(options.low);\n\t\t        /**\n\t\t\t\t *  The compressor applied to the mid frequencies.\n\t\t\t\t *  @type {Tone.Compressor}\n\t\t\t\t */\n\t\t        this.mid = new Tone.Compressor(options.mid);\n\t\t        /**\n\t\t\t\t *  The compressor applied to the high frequencies.\n\t\t\t\t *  @type {Tone.Compressor}\n\t\t\t\t */\n\t\t        this.high = new Tone.Compressor(options.high);\n\t\t        //connect the compressor\n\t\t        this._splitter.low.chain(this.low, this.output);\n\t\t        this._splitter.mid.chain(this.mid, this.output);\n\t\t        this._splitter.high.chain(this.high, this.output);\n\t\t        this._readOnly([\n\t\t            'high',\n\t\t            'mid',\n\t\t            'low',\n\t\t            'highFrequency',\n\t\t            'lowFrequency'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.MultibandCompressor);\n\t\t    /**\n\t\t\t *  @const\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.MultibandCompressor.defaults = {\n\t\t        'low': Tone.Compressor.defaults,\n\t\t        'mid': Tone.Compressor.defaults,\n\t\t        'high': Tone.Compressor.defaults,\n\t\t        'lowFrequency': 250,\n\t\t        'highFrequency': 2000\n\t\t    };\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.MultibandCompressor} this\n\t\t\t */\n\t\t    Tone.MultibandCompressor.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._splitter.dispose();\n\t\t        this._writable([\n\t\t            'high',\n\t\t            'mid',\n\t\t            'low',\n\t\t            'highFrequency',\n\t\t            'lowFrequency'\n\t\t        ]);\n\t\t        this.low.dispose();\n\t\t        this.mid.dispose();\n\t\t        this.high.dispose();\n\t\t        this._splitter = null;\n\t\t        this.low = null;\n\t\t        this.mid = null;\n\t\t        this.high = null;\n\t\t        this.lowFrequency = null;\n\t\t        this.highFrequency = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.MultibandCompressor;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.Panner is an equal power Left/Right Panner and does not\n\t\t\t *          support 3D. Panner uses the StereoPannerNode when available. \n\t\t\t *  \n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone}\n\t\t\t *  @param {NormalRange} [initialPan=0] The initail panner value (defaults to 0 = center)\n\t\t\t *  @example\n\t\t\t *  //pan the input signal hard right. \n\t\t\t *  var panner = new Tone.Panner(1);\n\t\t\t */\n\t\t    Tone.Panner = function (initialPan) {\n\t\t        if (this._hasStereoPanner) {\n\t\t            /**\n\t\t\t\t\t *  the panner node\n\t\t\t\t\t *  @type {StereoPannerNode}\n\t\t\t\t\t *  @private\n\t\t\t\t\t */\n\t\t            this._panner = this.input = this.output = this.context.createStereoPanner();\n\t\t            /**\n\t\t\t\t\t *  The pan control. -1 = hard left, 1 = hard right. \n\t\t\t\t\t *  @type {NormalRange}\n\t\t\t\t\t *  @signal\n\t\t\t\t\t */\n\t\t            this.pan = this._panner.pan;\n\t\t        } else {\n\t\t            /**\n\t\t\t\t\t *  the dry/wet knob\n\t\t\t\t\t *  @type {Tone.CrossFade}\n\t\t\t\t\t *  @private\n\t\t\t\t\t */\n\t\t            this._crossFade = new Tone.CrossFade();\n\t\t            /**\n\t\t\t\t\t *  @type {Tone.Merge}\n\t\t\t\t\t *  @private\n\t\t\t\t\t */\n\t\t            this._merger = this.output = new Tone.Merge();\n\t\t            /**\n\t\t\t\t\t *  @type {Tone.Split}\n\t\t\t\t\t *  @private\n\t\t\t\t\t */\n\t\t            this._splitter = this.input = new Tone.Split();\n\t\t            /**\n\t\t\t\t\t *  The pan control. -1 = hard left, 1 = hard right. \n\t\t\t\t\t *  @type {AudioRange}\n\t\t\t\t\t *  @signal\n\t\t\t\t\t */\n\t\t            this.pan = new Tone.Signal(0, Tone.Type.AudioRange);\n\t\t            /**\n\t\t\t\t\t *  always sends 0\n\t\t\t\t\t *  @type {Tone.Zero}\n\t\t\t\t\t *  @private\n\t\t\t\t\t */\n\t\t            this._zero = new Tone.Zero();\n\t\t            /**\n\t\t\t\t\t *  The analog to gain conversion\n\t\t\t\t\t *  @type  {Tone.AudioToGain}\n\t\t\t\t\t *  @private\n\t\t\t\t\t */\n\t\t            this._a2g = new Tone.AudioToGain();\n\t\t            //CONNECTIONS:\n\t\t            this._zero.connect(this._a2g);\n\t\t            this.pan.chain(this._a2g, this._crossFade.fade);\n\t\t            //left channel is a, right channel is b\n\t\t            this._splitter.connect(this._crossFade, 0, 0);\n\t\t            this._splitter.connect(this._crossFade, 1, 1);\n\t\t            //merge it back together\n\t\t            this._crossFade.a.connect(this._merger, 0, 0);\n\t\t            this._crossFade.b.connect(this._merger, 0, 1);\n\t\t        }\n\t\t        //initial value\n\t\t        this.pan.value = this.defaultArg(initialPan, 0);\n\t\t        this._readOnly('pan');\n\t\t    };\n\t\t    Tone.extend(Tone.Panner);\n\t\t    /**\n\t\t\t *  indicates if the panner is using the new StereoPannerNode internally\n\t\t\t *  @type  {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Panner.prototype._hasStereoPanner = Tone.prototype.isFunction(Tone.context.createStereoPanner);\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.Panner} this\n\t\t\t */\n\t\t    Tone.Panner.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._writable('pan');\n\t\t        if (this._hasStereoPanner) {\n\t\t            this._panner.disconnect();\n\t\t            this._panner = null;\n\t\t            this.pan = null;\n\t\t        } else {\n\t\t            this._zero.dispose();\n\t\t            this._zero = null;\n\t\t            this._crossFade.dispose();\n\t\t            this._crossFade = null;\n\t\t            this._splitter.dispose();\n\t\t            this._splitter = null;\n\t\t            this._merger.dispose();\n\t\t            this._merger = null;\n\t\t            this.pan.dispose();\n\t\t            this.pan = null;\n\t\t            this._a2g.dispose();\n\t\t            this._a2g = null;\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Panner;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  A spatialized panner node which supports equalpower or HRTF panning.\n\t\t\t *          Tries to normalize the API across various browsers. See Tone.Listener\n\t\t\t *  \n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone}\n\t\t\t *  @param {Number} positionX The initial x position.\n\t\t\t *  @param {Number} positionY The initial y position.\n\t\t\t *  @param {Number} positionZ The initial z position.\n\t\t\t */\n\t\t    Tone.Panner3D = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'positionX',\n\t\t            'positionY',\n\t\t            'positionZ'\n\t\t        ], Tone.Panner3D.defaults);\n\t\t        /**\n\t\t\t\t *  The panner node\n\t\t\t\t *  @type {PannerNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._panner = this.input = this.output = this.context.createPanner();\n\t\t        //set some values\n\t\t        this._panner.panningModel = options.panningModel;\n\t\t        this._panner.maxDistance = options.maxDistance;\n\t\t        this._panner.distanceModel = options.distanceModel;\n\t\t        this._panner.coneOuterGain = options.coneOuterGain;\n\t\t        this._panner.coneOuterAngle = options.coneOuterAngle;\n\t\t        this._panner.coneInnerAngle = options.coneInnerAngle;\n\t\t        this._panner.refDistance = options.refDistance;\n\t\t        this._panner.rolloffFactor = options.rolloffFactor;\n\t\t        /**\n\t\t\t\t *  Holds the current orientation\n\t\t\t\t *  @type  {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._orientation = [\n\t\t            options.orientationX,\n\t\t            options.orientationY,\n\t\t            options.orientationZ\n\t\t        ];\n\t\t        /**\n\t\t\t\t *  Holds the current position\n\t\t\t\t *  @type  {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._position = [\n\t\t            options.positionX,\n\t\t            options.positionY,\n\t\t            options.positionZ\n\t\t        ];\n\t\t        // set the default position/orientation\n\t\t        this.orientationX = options.orientationX;\n\t\t        this.orientationY = options.orientationY;\n\t\t        this.orientationZ = options.orientationZ;\n\t\t        this.positionX = options.positionX;\n\t\t        this.positionY = options.positionY;\n\t\t        this.positionZ = options.positionZ;\n\t\t    };\n\t\t    Tone.extend(Tone.Panner3D);\n\t\t    /**\n\t\t\t *  the default parameters\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type {Object}\n\t\t\t *  Defaults according to the specification\n\t\t\t */\n\t\t    Tone.Panner3D.defaults = {\n\t\t        'positionX': 0,\n\t\t        'positionY': 0,\n\t\t        'positionZ': 0,\n\t\t        'orientationX': 0,\n\t\t        'orientationY': 0,\n\t\t        'orientationZ': 0,\n\t\t        'panningModel': 'equalpower',\n\t\t        'maxDistance': 10000,\n\t\t        'distanceModel': 'inverse',\n\t\t        'coneOuterGain': 0,\n\t\t        'coneOuterAngle': 360,\n\t\t        'coneInnerAngle': 360,\n\t\t        'refDistance': 1,\n\t\t        'rolloffFactor': 1\n\t\t    };\n\t\t    /**\n\t\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t\t    Tone.Panner3D.prototype._rampTimeConstant = 0.01;\n\t\t    /**\n\t\t\t *  Sets the position of the source in 3d space.\t\n\t\t\t *  @param  {Number}  x\n\t\t\t *  @param  {Number}  y\n\t\t\t *  @param  {Number}  z\n\t\t\t *  @return {Tone.Panner3D} this\n\t\t\t */\n\t\t    Tone.Panner3D.prototype.setPosition = function (x, y, z) {\n\t\t        if (this._panner.positionX) {\n\t\t            var now = this.now();\n\t\t            this._panner.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t\t            this._panner.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t\t            this._panner.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t\t        } else {\n\t\t            this._panner.setPosition(x, y, z);\n\t\t        }\n\t\t        this._position = Array.prototype.slice.call(arguments);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Sets the orientation of the source in 3d space.\t\n\t\t\t *  @param  {Number}  x\n\t\t\t *  @param  {Number}  y\n\t\t\t *  @param  {Number}  z\n\t\t\t *  @return {Tone.Panner3D} this\n\t\t\t */\n\t\t    Tone.Panner3D.prototype.setOrientation = function (x, y, z) {\n\t\t        if (this._panner.orientationX) {\n\t\t            var now = this.now();\n\t\t            this._panner.orientationX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t\t            this._panner.orientationY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t\t            this._panner.orientationZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t\t        } else {\n\t\t            this._panner.setOrientation(x, y, z);\n\t\t        }\n\t\t        this._orientation = Array.prototype.slice.call(arguments);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  The x position of the panner object.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Panner3D#\n\t\t\t *  @name positionX\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionX', {\n\t\t        set: function (pos) {\n\t\t            this._position[0] = pos;\n\t\t            this.setPosition.apply(this, this._position);\n\t\t        },\n\t\t        get: function () {\n\t\t            return this._position[0];\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The y position of the panner object.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Panner3D#\n\t\t\t *  @name positionY\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionY', {\n\t\t        set: function (pos) {\n\t\t            this._position[1] = pos;\n\t\t            this.setPosition.apply(this, this._position);\n\t\t        },\n\t\t        get: function () {\n\t\t            return this._position[1];\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The z position of the panner object.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Panner3D#\n\t\t\t *  @name positionZ\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionZ', {\n\t\t        set: function (pos) {\n\t\t            this._position[2] = pos;\n\t\t            this.setPosition.apply(this, this._position);\n\t\t        },\n\t\t        get: function () {\n\t\t            return this._position[2];\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The x orientation of the panner object.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Panner3D#\n\t\t\t *  @name orientationX\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationX', {\n\t\t        set: function (pos) {\n\t\t            this._orientation[0] = pos;\n\t\t            this.setOrientation.apply(this, this._orientation);\n\t\t        },\n\t\t        get: function () {\n\t\t            return this._orientation[0];\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The y orientation of the panner object.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Panner3D#\n\t\t\t *  @name orientationY\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationY', {\n\t\t        set: function (pos) {\n\t\t            this._orientation[1] = pos;\n\t\t            this.setOrientation.apply(this, this._orientation);\n\t\t        },\n\t\t        get: function () {\n\t\t            return this._orientation[1];\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The z orientation of the panner object.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Panner3D#\n\t\t\t *  @name orientationZ\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationZ', {\n\t\t        set: function (pos) {\n\t\t            this._orientation[2] = pos;\n\t\t            this.setOrientation.apply(this, this._orientation);\n\t\t        },\n\t\t        get: function () {\n\t\t            return this._orientation[2];\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Proxy a property on the panner to an exposed public propery\n\t\t\t *  @param  {String}  prop\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Panner3D._aliasProperty = function (prop) {\n\t\t        Object.defineProperty(Tone.Panner3D.prototype, prop, {\n\t\t            set: function (val) {\n\t\t                this._panner[prop] = val;\n\t\t            },\n\t\t            get: function () {\n\t\t                return this._panner[prop];\n\t\t            }\n\t\t        });\n\t\t    };\n\t\t    /**\n\t\t\t *  The panning model. Either \"equalpower\" or \"HRTF\".\n\t\t\t *  @type {String}\n\t\t\t *  @memberOf Tone.Panner3D#\n\t\t\t *  @name panningModel\n\t\t\t */\n\t\t    Tone.Panner3D._aliasProperty('panningModel');\n\t\t    /**\n\t\t\t *  A reference distance for reducing volume as source move further from the listener\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Panner3D#\n\t\t\t *  @name refDistance\n\t\t\t */\n\t\t    Tone.Panner3D._aliasProperty('refDistance');\n\t\t    /**\n\t\t\t *  Describes how quickly the volume is reduced as source moves away from listener.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Panner3D#\n\t\t\t *  @name rolloffFactor\n\t\t\t */\n\t\t    Tone.Panner3D._aliasProperty('rolloffFactor');\n\t\t    /**\n\t\t\t *  The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n\t\t\t *  @type {String}\n\t\t\t *  @memberOf Tone.Panner3D#\n\t\t\t *  @name distanceModel\n\t\t\t */\n\t\t    Tone.Panner3D._aliasProperty('distanceModel');\n\t\t    /**\n\t\t\t *  The angle, in degrees, inside of which there will be no volume reduction\n\t\t\t *  @type {Degrees}\n\t\t\t *  @memberOf Tone.Panner3D#\n\t\t\t *  @name coneInnerAngle\n\t\t\t */\n\t\t    Tone.Panner3D._aliasProperty('coneInnerAngle');\n\t\t    /**\n\t\t\t *  The angle, in degrees, outside of which the volume will be reduced \n\t\t\t *  to a constant value of coneOuterGain\n\t\t\t *  @type {Degrees}\n\t\t\t *  @memberOf Tone.Panner3D#\n\t\t\t *  @name coneOuterAngle\n\t\t\t */\n\t\t    Tone.Panner3D._aliasProperty('coneOuterAngle');\n\t\t    /**\n\t\t\t *  The gain outside of the coneOuterAngle\n\t\t\t *  @type {Gain}\n\t\t\t *  @memberOf Tone.Panner3D#\n\t\t\t *  @name coneOuterGain\n\t\t\t */\n\t\t    Tone.Panner3D._aliasProperty('coneOuterGain');\n\t\t    /**\n\t\t\t *  The maximum distance between source and listener, \n\t\t\t *  after which the volume will not be reduced any further.\n\t\t\t *  @type {Positive}\n\t\t\t *  @memberOf Tone.Panner3D#\n\t\t\t *  @name maxDistance\n\t\t\t */\n\t\t    Tone.Panner3D._aliasProperty('maxDistance');\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.Panner3D} this\n\t\t\t */\n\t\t    Tone.Panner3D.prototype.dispose = function () {\n\t\t        this._panner.disconnect();\n\t\t        this._panner = null;\n\t\t        this._orientation = null;\n\t\t        this._position = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Panner3D;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.PanVol is a Tone.Panner and Tone.Volume in one.\n\t\t\t *\n\t\t\t *  @extends {Tone}\n\t\t\t *  @constructor\n\t\t\t *  @param {AudioRange} pan the initial pan\n\t\t\t *  @param {number} volume The output volume. \n\t\t\t *  @example\n\t\t\t * //pan the incoming signal left and drop the volume\n\t\t\t * var panVol = new Tone.PanVol(0.25, -12);\n\t\t\t */\n\t\t    Tone.PanVol = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'pan',\n\t\t            'volume'\n\t\t        ], Tone.PanVol.defaults);\n\t\t        /**\n\t\t\t\t *  The panning node\n\t\t\t\t *  @type {Tone.Panner}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._panner = this.input = new Tone.Panner(options.pan);\n\t\t        /**\n\t\t\t\t *  The L/R panning control.\n\t\t\t\t *  @type {AudioRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.pan = this._panner.pan;\n\t\t        /**\n\t\t\t\t *  The volume node\n\t\t\t\t *  @type {Tone.Volume}\n\t\t\t\t */\n\t\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t\t        /**\n\t\t\t\t *  The volume control in decibels. \n\t\t\t\t *  @type {Decibels}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.volume = this._volume.volume;\n\t\t        //connections\n\t\t        this._panner.connect(this._volume);\n\t\t        this._readOnly([\n\t\t            'pan',\n\t\t            'volume'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.PanVol);\n\t\t    /**\n\t\t\t *  The defaults\n\t\t\t *  @type  {Object}\n\t\t\t *  @const\n\t\t\t *  @static\n\t\t\t */\n\t\t    Tone.PanVol.defaults = {\n\t\t        'pan': 0.5,\n\t\t        'volume': 0\n\t\t    };\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.PanVol} this\n\t\t\t */\n\t\t    Tone.PanVol.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'pan',\n\t\t            'volume'\n\t\t        ]);\n\t\t        this._panner.dispose();\n\t\t        this._panner = null;\n\t\t        this.pan = null;\n\t\t        this._volume.dispose();\n\t\t        this._volume = null;\n\t\t        this.volume = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.PanVol;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.CtrlInterpolate will interpolate between given values based\n\t\t\t *         on the \"index\" property. Passing in an array or object literal\n\t\t\t *         will interpolate each of the parameters. Note (i.e. \"C3\")\n\t\t\t *         and Time (i.e. \"4n + 2\") can be interpolated. All other values are\n\t\t\t *         assumed to be numbers. \n\t\t\t *  @example\n\t\t\t * var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);\n\t\t\t * interp.index = 0.75;\n\t\t\t * interp.value; //returns 1.5\n\t\t\t *\n\t\t\t *  @example\n\t\t\t * var interp = new Tone.CtrlInterpolate([\n\t\t\t * \t[2, 4, 5],\n\t\t\t * \t[9, 3, 2],\n\t\t\t * ]);\n\t\t\t * @param {Array} values The array of values to interpolate over\n\t\t\t * @param {Positive} index The initial interpolation index.\n\t\t\t * @extends {Tone}\n\t\t\t */\n\t\t    Tone.CtrlInterpolate = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'values',\n\t\t            'index'\n\t\t        ], Tone.CtrlInterpolate.defaults);\n\t\t        /**\n\t\t\t\t *  The values to interpolate between\n\t\t\t\t *  @type  {Array}\n\t\t\t\t */\n\t\t        this.values = options.values;\n\t\t        /**\n\t\t\t\t *  The interpolated index between values. For example: a value of 1.5\n\t\t\t\t *  would interpolate equally between the value at index 1\n\t\t\t\t *  and the value at index 2. \n\t\t\t\t *  @example\n\t\t\t\t * interp.index = 0; \n\t\t\t\t * interp.value; //returns the value at 0\n\t\t\t\t * interp.index = 0.5;\n\t\t\t\t * interp.value; //returns the value between indices 0 and 1. \n\t\t\t\t *  @type  {Positive}\n\t\t\t\t */\n\t\t        this.index = options.index;\n\t\t    };\n\t\t    Tone.extend(Tone.CtrlInterpolate);\n\t\t    /**\n\t\t\t *  The defaults\n\t\t\t *  @const\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t\t    Tone.CtrlInterpolate.defaults = {\n\t\t        'index': 0,\n\t\t        'values': []\n\t\t    };\n\t\t    /**\n\t\t\t *  The current interpolated value based on the index\n\t\t\t *  @readOnly\n\t\t\t *  @memberOf Tone.CtrlInterpolate#\n\t\t\t *  @type {*}\n\t\t\t *  @name value\n\t\t\t */\n\t\t    Object.defineProperty(Tone.CtrlInterpolate.prototype, 'value', {\n\t\t        get: function () {\n\t\t            var index = this.index;\n\t\t            index = Math.min(index, this.values.length - 1);\n\t\t            var lowerPosition = Math.floor(index);\n\t\t            var lower = this.values[lowerPosition];\n\t\t            var upper = this.values[Math.ceil(index)];\n\t\t            return this._interpolate(index - lowerPosition, lower, upper);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Internal interpolation routine\n\t\t\t *  @param  {NormalRange}  index  The index between the lower and upper\n\t\t\t *  @param  {*}  lower \n\t\t\t *  @param  {*}  upper \n\t\t\t *  @return  {*}  The interpolated value\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.CtrlInterpolate.prototype._interpolate = function (index, lower, upper) {\n\t\t        if (this.isArray(lower)) {\n\t\t            var retArray = [];\n\t\t            for (var i = 0; i < lower.length; i++) {\n\t\t                retArray[i] = this._interpolate(index, lower[i], upper[i]);\n\t\t            }\n\t\t            return retArray;\n\t\t        } else if (this.isObject(lower)) {\n\t\t            var retObj = {};\n\t\t            for (var attr in lower) {\n\t\t                retObj[attr] = this._interpolate(index, lower[attr], upper[attr]);\n\t\t            }\n\t\t            return retObj;\n\t\t        } else {\n\t\t            lower = this._toNumber(lower);\n\t\t            upper = this._toNumber(upper);\n\t\t            return (1 - index) * lower + index * upper;\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Convert from the given type into a number\n\t\t\t *  @param  {Number|String}  value\n\t\t\t *  @return  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.CtrlInterpolate.prototype._toNumber = function (val) {\n\t\t        if (this.isNumber(val)) {\n\t\t            return val;\n\t\t        } else {\n\t\t            //otherwise assume that it's Time...\n\t\t            return this.toSeconds(val);\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up\n\t\t\t *  @return  {Tone.CtrlInterpolate}  this\n\t\t\t */\n\t\t    Tone.CtrlInterpolate.prototype.dispose = function () {\n\t\t        this.values = null;\n\t\t    };\n\t\t    return Tone.CtrlInterpolate;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.CtrlMarkov represents a Markov Chain where each call\n\t\t\t *         to Tone.CtrlMarkov.next will move to the next state. If the next\n\t\t\t *         state choice is an array, the next state is chosen randomly with\n\t\t\t *         even probability for all of the choices. For a weighted probability\n\t\t\t *         of the next choices, pass in an object with \"state\" and \"probability\" attributes. \n\t\t\t *         The probabilities will be normalized and then chosen. If no next options\n\t\t\t *         are given for the current state, the state will stay there. \n\t\t\t *  @extends {Tone}\n\t\t\t *  @example\n\t\t\t * var chain = new Tone.CtrlMarkov({\n\t\t\t * \t\"beginning\" : [\"end\", \"middle\"],\n\t\t\t * \t\"middle\" : \"end\"\n\t\t\t * });\n\t\t\t * chain.value = \"beginning\";\n\t\t\t * chain.next(); //returns \"end\" or \"middle\" with 50% probability\n\t\t\t *\n\t\t\t *  @example\n\t\t\t * var chain = new Tone.CtrlMarkov({\n\t\t\t * \t\"beginning\" : [{\"value\" : \"end\", \"probability\" : 0.8}, \n\t\t\t * \t\t\t\t\t{\"value\" : \"middle\", \"probability\" : 0.2}],\n\t\t\t * \t\"middle\" : \"end\"\n\t\t\t * });\n\t\t\t * chain.value = \"beginning\";\n\t\t\t * chain.next(); //returns \"end\" with 80% probability or \"middle\" with 20%.\n\t\t\t *  @param {Object} values An object with the state names as the keys\n\t\t\t *                         and the next state(s) as the values. \n\t\t\t */\n\t\t    Tone.CtrlMarkov = function (values, initial) {\n\t\t        /**\n\t\t\t\t *  The Markov values with states as the keys\n\t\t\t\t *  and next state(s) as the values. \n\t\t\t\t *  @type {Object}\n\t\t\t\t */\n\t\t        this.values = this.defaultArg(values, {});\n\t\t        /**\n\t\t\t\t *  The current state of the Markov values. The next\n\t\t\t\t *  state will be evaluated and returned when Tone.CtrlMarkov.next\n\t\t\t\t *  is invoked.\n\t\t\t\t *  @type {String}\n\t\t\t\t */\n\t\t        this.value = this.defaultArg(initial, Object.keys(this.values)[0]);\n\t\t    };\n\t\t    Tone.extend(Tone.CtrlMarkov);\n\t\t    /**\n\t\t\t *  Returns the next state of the Markov values. \n\t\t\t *  @return  {String}\n\t\t\t */\n\t\t    Tone.CtrlMarkov.prototype.next = function () {\n\t\t        if (this.values.hasOwnProperty(this.value)) {\n\t\t            var next = this.values[this.value];\n\t\t            if (this.isArray(next)) {\n\t\t                var distribution = this._getProbDistribution(next);\n\t\t                var rand = Math.random();\n\t\t                var total = 0;\n\t\t                for (var i = 0; i < distribution.length; i++) {\n\t\t                    var dist = distribution[i];\n\t\t                    if (rand > total && rand < total + dist) {\n\t\t                        var chosen = next[i];\n\t\t                        if (this.isObject(chosen)) {\n\t\t                            this.value = chosen.value;\n\t\t                        } else {\n\t\t                            this.value = chosen;\n\t\t                        }\n\t\t                    }\n\t\t                    total += dist;\n\t\t                }\n\t\t            } else {\n\t\t                this.value = next;\n\t\t            }\n\t\t        }\n\t\t        return this.value;\n\t\t    };\n\t\t    /**\n\t\t\t *  Choose randomly from an array weighted options in the form \n\t\t\t *  {\"state\" : string, \"probability\" : number} or an array of values\n\t\t\t *  @param  {Array}  options \n\t\t\t *  @return  {Array}  The randomly selected choice\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.CtrlMarkov.prototype._getProbDistribution = function (options) {\n\t\t        var distribution = [];\n\t\t        var total = 0;\n\t\t        var needsNormalizing = false;\n\t\t        for (var i = 0; i < options.length; i++) {\n\t\t            var option = options[i];\n\t\t            if (this.isObject(option)) {\n\t\t                needsNormalizing = true;\n\t\t                distribution[i] = option.probability;\n\t\t            } else {\n\t\t                distribution[i] = 1 / options.length;\n\t\t            }\n\t\t            total += distribution[i];\n\t\t        }\n\t\t        if (needsNormalizing) {\n\t\t            //normalize the values\n\t\t            for (var j = 0; j < distribution.length; j++) {\n\t\t                distribution[j] = distribution[j] / total;\n\t\t            }\n\t\t        }\n\t\t        return distribution;\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up\n\t\t\t *  @return  {Tone.CtrlMarkov}  this\n\t\t\t */\n\t\t    Tone.CtrlMarkov.prototype.dispose = function () {\n\t\t        this.values = null;\n\t\t    };\n\t\t    return Tone.CtrlMarkov;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Generate patterns from an array of values.\n\t\t\t *         Has a number of arpeggiation and randomized\n\t\t\t *         selection patterns. \n\t\t\t *           <ul>\n\t\t\t *  \t        <li>\"up\" - cycles upward</li>\n\t\t\t *  \t\t\t<li>\"down\" - cycles downward</li>\n\t\t\t *  \t\t\t<li>\"upDown\" - up then and down</li>\n\t\t\t *  \t\t\t<li>\"downUp\" - cycles down then and up</li>\n\t\t\t *  \t\t\t<li>\"alternateUp\" - jump up two and down one</li>\n\t\t\t *  \t\t\t<li>\"alternateDown\" - jump down two and up one</li>\n\t\t\t *  \t\t\t<li>\"random\" - randomly select an index</li>\n\t\t\t *  \t\t\t<li>\"randomWalk\" - randomly moves one index away from the current position</li>\n\t\t\t *  \t\t\t<li>\"randomOnce\" - randomly select an index without repeating until all values have been chosen.</li>\n\t\t\t *     \t\t</ul>\n\t\t\t *  @param  {Array}  values   An array of options to choose from.\n\t\t\t *  @param  {Tone.CtrlPattern.Type=}  type  The name of the pattern.\n\t\t\t *  @extends {Tone}\n\t\t\t */\n\t\t    Tone.CtrlPattern = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'values',\n\t\t            'type'\n\t\t        ], Tone.CtrlPattern.defaults);\n\t\t        /**\n\t\t\t\t *  The array of values to arpeggiate over\n\t\t\t\t *  @type {Array}\n\t\t\t\t */\n\t\t        this.values = options.values;\n\t\t        /**\n\t\t\t\t *  The current position in the values array\n\t\t\t\t *  @type  {Number}\n\t\t\t\t */\n\t\t        this.index = 0;\n\t\t        /**\n\t\t\t\t *  The type placeholder\n\t\t\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._type = null;\n\t\t        /**\n\t\t\t\t *  Shuffled values for the RandomOnce type\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._shuffled = null;\n\t\t        /**\n\t\t\t\t *  The direction of the movement\n\t\t\t\t *  @type {String}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._direction = null;\n\t\t        this.type = options.type;\n\t\t    };\n\t\t    Tone.extend(Tone.CtrlPattern);\n\t\t    /**\n\t\t\t *  The Control Patterns\n\t\t\t *  @type  {Object}\n\t\t\t *  @static\n\t\t\t */\n\t\t    Tone.CtrlPattern.Type = {\n\t\t        Up: 'up',\n\t\t        Down: 'down',\n\t\t        UpDown: 'upDown',\n\t\t        DownUp: 'downUp',\n\t\t        AlternateUp: 'alternateUp',\n\t\t        AlternateDown: 'alternateDown',\n\t\t        Random: 'random',\n\t\t        RandomWalk: 'randomWalk',\n\t\t        RandomOnce: 'randomOnce'\n\t\t    };\n\t\t    /**\n\t\t\t *  The default values. \n\t\t\t *  @type  {Object}\n\t\t\t */\n\t\t    Tone.CtrlPattern.defaults = {\n\t\t        'type': Tone.CtrlPattern.Type.Up,\n\t\t        'values': []\n\t\t    };\n\t\t    /**\n\t\t\t *  The value at the current index of the pattern.\n\t\t\t *  @readOnly\n\t\t\t *  @memberOf Tone.CtrlPattern#\n\t\t\t *  @type {*}\n\t\t\t *  @name value\n\t\t\t */\n\t\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'value', {\n\t\t        get: function () {\n\t\t            //some safeguards\n\t\t            if (this.values.length === 0) {\n\t\t                return;\n\t\t            } else if (this.values.length === 1) {\n\t\t                return this.values[0];\n\t\t            }\n\t\t            this.index = Math.min(this.index, this.values.length - 1);\n\t\t            var val = this.values[this.index];\n\t\t            if (this.type === Tone.CtrlPattern.Type.RandomOnce) {\n\t\t                if (this.values.length !== this._shuffled.length) {\n\t\t                    this._shuffleValues();\n\t\t                }\n\t\t                val = this.values[this._shuffled[this.index]];\n\t\t            }\n\t\t            return val;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The pattern used to select the next\n\t\t\t *  item from the values array\n\t\t\t *  @memberOf Tone.CtrlPattern#\n\t\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t\t *  @name type\n\t\t\t */\n\t\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'type', {\n\t\t        get: function () {\n\t\t            return this._type;\n\t\t        },\n\t\t        set: function (type) {\n\t\t            this._type = type;\n\t\t            this._shuffled = null;\n\t\t            //the first index\n\t\t            if (this._type === Tone.CtrlPattern.Type.Up || this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.RandomOnce || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t\t                this.index = 0;\n\t\t            } else if (this._type === Tone.CtrlPattern.Type.Down || this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t\t                this.index = this.values.length - 1;\n\t\t            }\n\t\t            //the direction\n\t\t            if (this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t\t            } else if (this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t\t            }\n\t\t            //randoms\n\t\t            if (this._type === Tone.CtrlPattern.Type.RandomOnce) {\n\t\t                this._shuffleValues();\n\t\t            } else if (this._type === Tone.CtrlPattern.Random) {\n\t\t                this.index = Math.floor(Math.random() * this.values.length);\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Return the next value given the current position\n\t\t\t *  and pattern.\n\t\t\t *  @return {*} The next value\n\t\t\t */\n\t\t    Tone.CtrlPattern.prototype.next = function () {\n\t\t        var type = this.type;\n\t\t        //choose the next index\n\t\t        if (type === Tone.CtrlPattern.Type.Up) {\n\t\t            this.index++;\n\t\t            if (this.index >= this.values.length) {\n\t\t                this.index = 0;\n\t\t            }\n\t\t        } else if (type === Tone.CtrlPattern.Type.Down) {\n\t\t            this.index--;\n\t\t            if (this.index < 0) {\n\t\t                this.index = this.values.length - 1;\n\t\t            }\n\t\t        } else if (type === Tone.CtrlPattern.Type.UpDown || type === Tone.CtrlPattern.Type.DownUp) {\n\t\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t\t                this.index++;\n\t\t            } else {\n\t\t                this.index--;\n\t\t            }\n\t\t            if (this.index < 0) {\n\t\t                this.index = 1;\n\t\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t\t            } else if (this.index >= this.values.length) {\n\t\t                this.index = this.values.length - 2;\n\t\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t\t            }\n\t\t        } else if (type === Tone.CtrlPattern.Type.Random) {\n\t\t            this.index = Math.floor(Math.random() * this.values.length);\n\t\t        } else if (type === Tone.CtrlPattern.Type.RandomWalk) {\n\t\t            if (Math.random() < 0.5) {\n\t\t                this.index--;\n\t\t                this.index = Math.max(this.index, 0);\n\t\t            } else {\n\t\t                this.index++;\n\t\t                this.index = Math.min(this.index, this.values.length - 1);\n\t\t            }\n\t\t        } else if (type === Tone.CtrlPattern.Type.RandomOnce) {\n\t\t            this.index++;\n\t\t            if (this.index >= this.values.length) {\n\t\t                this.index = 0;\n\t\t                //reshuffle the values for next time\n\t\t                this._shuffleValues();\n\t\t            }\n\t\t        } else if (type === Tone.CtrlPattern.Type.AlternateUp) {\n\t\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t\t                this.index += 2;\n\t\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t\t            } else {\n\t\t                this.index -= 1;\n\t\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t\t            }\n\t\t            if (this.index >= this.values.length) {\n\t\t                this.index = 0;\n\t\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t\t            }\n\t\t        } else if (type === Tone.CtrlPattern.Type.AlternateDown) {\n\t\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t\t                this.index += 1;\n\t\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t\t            } else {\n\t\t                this.index -= 2;\n\t\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t\t            }\n\t\t            if (this.index < 0) {\n\t\t                this.index = this.values.length - 1;\n\t\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t\t            }\n\t\t        }\n\t\t        return this.value;\n\t\t    };\n\t\t    /**\n\t\t\t *  Shuffles the values and places the results into the _shuffled\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.CtrlPattern.prototype._shuffleValues = function () {\n\t\t        var copy = [];\n\t\t        this._shuffled = [];\n\t\t        for (var i = 0; i < this.values.length; i++) {\n\t\t            copy[i] = i;\n\t\t        }\n\t\t        while (copy.length > 0) {\n\t\t            var randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n\t\t            this._shuffled.push(randVal[0]);\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up\n\t\t\t *  @returns {Tone.CtrlPattern} this\n\t\t\t */\n\t\t    Tone.CtrlPattern.prototype.dispose = function () {\n\t\t        this._shuffled = null;\n\t\t        this.values = null;\n\t\t    };\n\t\t    return Tone.CtrlPattern;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Choose a random value.\n\t\t\t *  @extends {Tone}\n\t\t\t *  @example\n\t\t\t * var randomWalk = new Tone.CtrlRandom({\n\t\t\t * \t\"min\" : 0,\n\t\t\t * \t\"max\" : 10,\n\t\t\t * \t\"integer\" : true\n\t\t\t * });\n\t\t\t * randomWalk.eval();\n\t\t\t *\n\t\t\t *  @param {Number|Time=} min The minimum return value.\n\t\t\t *  @param {Number|Time=} max The maximum return value.\n\t\t\t */\n\t\t    Tone.CtrlRandom = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'min',\n\t\t            'max'\n\t\t        ], Tone.CtrlRandom.defaults);\n\t\t        /**\n\t\t\t\t *  The minimum return value\n\t\t\t\t *  @type  {Number|Time}\n\t\t\t\t */\n\t\t        this.min = options.min;\n\t\t        /**\n\t\t\t\t *  The maximum return value\n\t\t\t\t *  @type  {Number|Time}\n\t\t\t\t */\n\t\t        this.max = options.max;\n\t\t        /**\n\t\t\t\t *  If the return value should be an integer\n\t\t\t\t *  @type  {Boolean}\n\t\t\t\t */\n\t\t        this.integer = options.integer;\n\t\t    };\n\t\t    Tone.extend(Tone.CtrlRandom);\n\t\t    /**\n\t\t\t *  The defaults\n\t\t\t *  @const\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t\t    Tone.CtrlRandom.defaults = {\n\t\t        'min': 0,\n\t\t        'max': 1,\n\t\t        'integer': false\n\t\t    };\n\t\t    /**\n\t\t\t *  Return a random value between min and max. \n\t\t\t *  @readOnly\n\t\t\t *  @memberOf Tone.CtrlRandom#\n\t\t\t *  @type {*}\n\t\t\t *  @name value\n\t\t\t */\n\t\t    Object.defineProperty(Tone.CtrlRandom.prototype, 'value', {\n\t\t        get: function () {\n\t\t            var min = this.toSeconds(this.min);\n\t\t            var max = this.toSeconds(this.max);\n\t\t            var rand = Math.random();\n\t\t            var val = rand * min + (1 - rand) * max;\n\t\t            if (this.integer) {\n\t\t                val = Math.floor(val);\n\t\t            }\n\t\t            return val;\n\t\t        }\n\t\t    });\n\t\t    return Tone.CtrlRandom;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  AudioBuffer.copyToChannel polyfill\n\t\t\t *  @private\n\t\t\t */\n\t\t    if (window.AudioBuffer && !AudioBuffer.prototype.copyToChannel) {\n\t\t        AudioBuffer.prototype.copyToChannel = function (src, chanNum, start) {\n\t\t            var channel = this.getChannelData(chanNum);\n\t\t            start = start || 0;\n\t\t            for (var i = 0; i < channel.length; i++) {\n\t\t                channel[i + start] = src[i];\n\t\t            }\n\t\t        };\n\t\t        AudioBuffer.prototype.copyFromChannel = function (dest, chanNum, start) {\n\t\t            var channel = this.getChannelData(chanNum);\n\t\t            start = start || 0;\n\t\t            for (var i = 0; i < channel.length; i++) {\n\t\t                dest[i] = channel[i + start];\n\t\t            }\n\t\t        };\n\t\t    }\n\t\t    /**\n\t\t\t *  @class  Buffer loading and storage. Tone.Buffer is used internally by all \n\t\t\t *          classes that make requests for audio files such as Tone.Player,\n\t\t\t *          Tone.Sampler and Tone.Convolver.\n\t\t\t *          <br><br>\n\t\t\t *          Aside from load callbacks from individual buffers, Tone.Buffer \n\t\t\t *  \t\tprovides static methods which keep track of the loading progress \n\t\t\t *  \t\tof all of the buffers. These methods are Tone.Buffer.on(\"load\" / \"progress\" / \"error\")\n\t\t\t *\n\t\t\t *  @constructor \n\t\t\t *  @extends {Tone}\n\t\t\t *  @param {AudioBuffer|string} url The url to load, or the audio buffer to set. \n\t\t\t *  @param {Function=} onload A callback which is invoked after the buffer is loaded. \n\t\t\t *                            It's recommended to use Tone.Buffer.onload instead \n\t\t\t *                            since it will give you a callback when ALL buffers are loaded.\n\t\t\t *  @param {Function=} onerror The callback to invoke if there is an error\n\t\t\t *  @example\n\t\t\t * var buffer = new Tone.Buffer(\"path/to/sound.mp3\", function(){\n\t\t\t * \t//the buffer is now available.\n\t\t\t * \tvar buff = buffer.get();\n\t\t\t * });\n\t\t\t */\n\t\t    Tone.Buffer = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'url',\n\t\t            'onload',\n\t\t            'onerror'\n\t\t        ], Tone.Buffer.defaults);\n\t\t        /**\n\t\t\t\t *  stores the loaded AudioBuffer\n\t\t\t\t *  @type {AudioBuffer}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._buffer = null;\n\t\t        /**\n\t\t\t\t *  indicates if the buffer should be reversed or not\n\t\t\t\t *  @type {Boolean}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._reversed = options.reverse;\n\t\t        /**\n\t\t\t\t *  The XHR\n\t\t\t\t *  @type  {XMLHttpRequest}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._xhr = null;\n\t\t        if (options.url instanceof AudioBuffer || options.url instanceof Tone.Buffer) {\n\t\t            this.set(options.url);\n\t\t            // invoke the onload callback\n\t\t            if (options.onload) {\n\t\t                options.onload(this);\n\t\t            }\n\t\t        } else if (this.isString(options.url)) {\n\t\t            this.load(options.url, options.onload, options.onerror);\n\t\t        }\n\t\t    };\n\t\t    Tone.extend(Tone.Buffer);\n\t\t    /**\n\t\t\t *  the default parameters\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.Buffer.defaults = {\n\t\t        'url': undefined,\n\t\t        'reverse': false\n\t\t    };\n\t\t    /**\n\t\t\t *  Pass in an AudioBuffer or Tone.Buffer to set the value\n\t\t\t *  of this buffer.\n\t\t\t *  @param {AudioBuffer|Tone.Buffer} buffer the buffer\n\t\t\t *  @returns {Tone.Buffer} this\n\t\t\t */\n\t\t    Tone.Buffer.prototype.set = function (buffer) {\n\t\t        if (buffer instanceof Tone.Buffer) {\n\t\t            this._buffer = buffer.get();\n\t\t        } else {\n\t\t            this._buffer = buffer;\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  @return {AudioBuffer} The audio buffer stored in the object.\n\t\t\t */\n\t\t    Tone.Buffer.prototype.get = function () {\n\t\t        return this._buffer;\n\t\t    };\n\t\t    /**\n\t\t\t *  Makes an xhr reqest for the selected url then decodes\n\t\t\t *  the file as an audio buffer. Invokes\n\t\t\t *  the callback once the audio buffer loads.\n\t\t\t *  @param {String} url The url of the buffer to load.\n\t\t\t *                      filetype support depends on the\n\t\t\t *                      browser.\n\t\t\t *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer\n\t\t\t */\n\t\t    Tone.Buffer.prototype.load = function (url, onload, onerror) {\n\t\t        var promise = new Promise(function (load, error) {\n\t\t            this._xhr = Tone.Buffer.load(url, //success\n\t\t            function (buff) {\n\t\t                this._xhr = null;\n\t\t                this.set(buff);\n\t\t                load(this);\n\t\t                if (onload) {\n\t\t                    onload(this);\n\t\t                }\n\t\t            }.bind(this), //error\n\t\t            function (err) {\n\t\t                this._xhr = null;\n\t\t                error(err);\n\t\t                if (onerror) {\n\t\t                    onerror(err);\n\t\t                }\n\t\t            }.bind(this));\n\t\t        }.bind(this));\n\t\t        return promise;\n\t\t    };\n\t\t    /**\n\t\t\t *  dispose and disconnect\n\t\t\t *  @returns {Tone.Buffer} this\n\t\t\t */\n\t\t    Tone.Buffer.prototype.dispose = function () {\n\t\t        Tone.Emitter.prototype.dispose.call(this);\n\t\t        this._buffer = null;\n\t\t        if (this._xhr) {\n\t\t            Tone.Buffer._currentDownloads--;\n\t\t            this._xhr.abort();\n\t\t            this._xhr = null;\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * If the buffer is loaded or not\n\t\t\t * @memberOf Tone.Buffer#\n\t\t\t * @type {Boolean}\n\t\t\t * @name loaded\n\t\t\t * @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Buffer.prototype, 'loaded', {\n\t\t        get: function () {\n\t\t            return this.length > 0;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The duration of the buffer. \n\t\t\t * @memberOf Tone.Buffer#\n\t\t\t * @type {Number}\n\t\t\t * @name duration\n\t\t\t * @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Buffer.prototype, 'duration', {\n\t\t        get: function () {\n\t\t            if (this._buffer) {\n\t\t                return this._buffer.duration;\n\t\t            } else {\n\t\t                return 0;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The length of the buffer in samples\n\t\t\t * @memberOf Tone.Buffer#\n\t\t\t * @type {Number}\n\t\t\t * @name length\n\t\t\t * @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Buffer.prototype, 'length', {\n\t\t        get: function () {\n\t\t            if (this._buffer) {\n\t\t                return this._buffer.length;\n\t\t            } else {\n\t\t                return 0;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The number of discrete audio channels. Returns 0 if no buffer\n\t\t\t * is loaded.\n\t\t\t * @memberOf Tone.Buffer#\n\t\t\t * @type {Number}\n\t\t\t * @name numberOfChannels\n\t\t\t * @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Buffer.prototype, 'numberOfChannels', {\n\t\t        get: function () {\n\t\t            if (this._buffer) {\n\t\t                return this._buffer.numberOfChannels;\n\t\t            } else {\n\t\t                return 0;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Set the audio buffer from the array\n\t\t\t *  @param {Float32Array} array The array to fill the audio buffer\n\t\t\t *  @param {Number} [channels=1] The number of channels contained in the array. \n\t\t\t *                               If the channel is more than 1, the input array\n\t\t\t *                               is expected to be a multidimensional array\n\t\t\t *                               with dimensions equal to the number of channels.\n\t\t\t *  @return {Tone.Buffer} this\n\t\t\t */\n\t\t    Tone.Buffer.prototype.fromArray = function (array) {\n\t\t        var isMultidimensional = array[0].length > 0;\n\t\t        var channels = isMultidimensional ? array.length : 1;\n\t\t        var len = isMultidimensional ? array[0].length : array.length;\n\t\t        var buffer = this.context.createBuffer(channels, len, this.context.sampleRate);\n\t\t        if (!isMultidimensional && channels === 1) {\n\t\t            array = [array];\n\t\t        }\n\t\t        for (var c = 0; c < channels; c++) {\n\t\t            buffer.copyToChannel(array[c], c);\n\t\t        }\n\t\t        this._buffer = buffer;\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * \tSums muliple channels into 1 channel\n\t\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t\t *  @return {Array}\n\t\t\t */\n\t\t    Tone.Buffer.prototype.toMono = function (chanNum) {\n\t\t        if (this.isNumber(chanNum)) {\n\t\t            this.fromArray(this.toArray(chanNum));\n\t\t        } else {\n\t\t            var outputArray = new Float32Array(this.length);\n\t\t            var numChannels = this.numberOfChannels;\n\t\t            for (var channel = 0; channel < numChannels; channel++) {\n\t\t                var channelArray = this.toArray(channel);\n\t\t                for (var i = 0; i < channelArray.length; i++) {\n\t\t                    outputArray[i] += channelArray[i];\n\t\t                }\n\t\t            }\n\t\t            //divide by the number of channels\n\t\t            outputArray = outputArray.map(function (sample) {\n\t\t                return sample / numChannels;\n\t\t            });\n\t\t            this.fromArray(outputArray);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional \n\t\t\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t\t *  @return {Array}\n\t\t\t */\n\t\t    Tone.Buffer.prototype.toArray = function (channel) {\n\t\t        if (this.isNumber(channel)) {\n\t\t            return this.getChannelData(channel);\n\t\t        } else if (this.numberOfChannels === 1) {\n\t\t            return this.toArray(0);\n\t\t        } else {\n\t\t            var ret = [];\n\t\t            for (var c = 0; c < this.numberOfChannels; c++) {\n\t\t                ret[c] = this.getChannelData(c);\n\t\t            }\n\t\t            return ret;\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t\t\t *  @param  {Number}  channel  The channel number to return\n\t\t\t *  @return  {Float32Array}  The audio as a TypedArray\n\t\t\t */\n\t\t    Tone.Buffer.prototype.getChannelData = function (channel) {\n\t\t        return this._buffer.getChannelData(channel);\n\t\t    };\n\t\t    /**\n\t\t\t *  Cut a subsection of the array and return a buffer of the\n\t\t\t *  subsection. Does not modify the original buffer\n\t\t\t *  @param {Time} start The time to start the slice\n\t\t\t *  @param {Time=} end The end time to slice. If none is given\n\t\t\t *                     will default to the end of the buffer\n\t\t\t *  @return {Tone.Buffer} this\n\t\t\t */\n\t\t    Tone.Buffer.prototype.slice = function (start, end) {\n\t\t        end = this.defaultArg(end, this.duration);\n\t\t        var startSamples = Math.floor(this.context.sampleRate * this.toSeconds(start));\n\t\t        var endSamples = Math.floor(this.context.sampleRate * this.toSeconds(end));\n\t\t        var replacement = [];\n\t\t        for (var i = 0; i < this.numberOfChannels; i++) {\n\t\t            replacement[i] = this.toArray(i).slice(startSamples, endSamples);\n\t\t        }\n\t\t        var retBuffer = new Tone.Buffer().fromArray(replacement);\n\t\t        return retBuffer;\n\t\t    };\n\t\t    /**\n\t\t\t *  Reverse the buffer.\n\t\t\t *  @private\n\t\t\t *  @return {Tone.Buffer} this\n\t\t\t */\n\t\t    Tone.Buffer.prototype._reverse = function () {\n\t\t        if (this.loaded) {\n\t\t            for (var i = 0; i < this.numberOfChannels; i++) {\n\t\t                Array.prototype.reverse.call(this.getChannelData(i));\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * Reverse the buffer.\n\t\t\t * @memberOf Tone.Buffer#\n\t\t\t * @type {Boolean}\n\t\t\t * @name reverse\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Buffer.prototype, 'reverse', {\n\t\t        get: function () {\n\t\t            return this._reversed;\n\t\t        },\n\t\t        set: function (rev) {\n\t\t            if (this._reversed !== rev) {\n\t\t                this._reversed = rev;\n\t\t                this._reverse();\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    // STATIC METHODS\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //statically inherits Emitter methods\n\t\t    Tone.Emitter.mixin(Tone.Buffer);\n\t\t    /**\n\t\t\t *  the static queue for all of the xhr requests\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Buffer._downloadQueue = [];\n\t\t    /**\n\t\t\t *  the total number of downloads\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Buffer._currentDownloads = 0;\n\t\t    /**\n\t\t\t *  A path which is prefixed before every url.\n\t\t\t *  @type  {String}\n\t\t\t *  @static\n\t\t\t */\n\t\t    Tone.Buffer.baseUrl = '';\n\t\t    /**\n\t\t\t *  Loads a url using XMLHttpRequest.\n\t\t\t *  @param {String} url\n\t\t\t *  @param {Function} onload\n\t\t\t *  @param {Function} onerror\n\t\t\t *  @param {Function} onprogress\n\t\t\t *  @return {XMLHttpRequest}\n\t\t\t */\n\t\t    Tone.Buffer.load = function (url, onload, onerror) {\n\t\t        //default\n\t\t        onload = onload || Tone.noOp;\n\t\t        function onError(e) {\n\t\t            if (onerror) {\n\t\t                onerror(e);\n\t\t                Tone.Buffer.emit('error', e);\n\t\t            } else {\n\t\t                throw new Error(e);\n\t\t            }\n\t\t        }\n\t\t        function onProgress() {\n\t\t            //calculate the progress\n\t\t            var totalProgress = 0;\n\t\t            for (var i = 0; i < Tone.Buffer._downloadQueue.length; i++) {\n\t\t                totalProgress += Tone.Buffer._downloadQueue[i].progress;\n\t\t            }\n\t\t            Tone.Buffer.emit('progress', totalProgress / Tone.Buffer._downloadQueue.length);\n\t\t        }\n\t\t        var request = new XMLHttpRequest();\n\t\t        request.open('GET', Tone.Buffer.baseUrl + url, true);\n\t\t        request.responseType = 'arraybuffer';\n\t\t        //start out as 0\n\t\t        request.progress = 0;\n\t\t        Tone.Buffer._currentDownloads++;\n\t\t        Tone.Buffer._downloadQueue.push(request);\n\t\t        request.addEventListener('load', function () {\n\t\t            if (request.status === 200) {\n\t\t                Tone.context.decodeAudioData(request.response, function (buff) {\n\t\t                    request.progress = 1;\n\t\t                    onProgress();\n\t\t                    onload(buff);\n\t\t                    Tone.Buffer._currentDownloads--;\n\t\t                    if (Tone.Buffer._currentDownloads === 0) {\n\t\t                        // clear the downloads\n\t\t                        Tone.Buffer._downloadQueue = [];\n\t\t                        //emit the event at the end\n\t\t                        Tone.Buffer.emit('load');\n\t\t                    }\n\t\t                }, function () {\n\t\t                    onError('Tone.Buffer: could not decode audio data: ' + url);\n\t\t                });\n\t\t            } else {\n\t\t                onError('Tone.Buffer: could not locate file: ' + url);\n\t\t            }\n\t\t        });\n\t\t        request.addEventListener('error', onError);\n\t\t        request.addEventListener('progress', function (event) {\n\t\t            if (event.lengthComputable) {\n\t\t                //only go to 95%, the last 5% is when the audio is decoded\n\t\t                request.progress = event.loaded / event.total * 0.95;\n\t\t                onProgress();\n\t\t            }\n\t\t        });\n\t\t        request.send();\n\t\t        return request;\n\t\t    };\n\t\t    /**\n\t\t\t *  Stop all of the downloads in progress\n\t\t\t *  @return {Tone.Buffer}\n\t\t\t *  @static\n\t\t\t */\n\t\t    Tone.Buffer.cancelDownloads = function () {\n\t\t        Tone.Buffer._downloadQueue.forEach(function (request) {\n\t\t            request.abort();\n\t\t        });\n\t\t        Tone.Buffer._currentDownloads = 0;\n\t\t        return Tone.Buffer;\n\t\t    };\n\t\t    /**\n\t\t\t *  Checks a url's extension to see if the current browser can play that file type.\n\t\t\t *  @param {String} url The url/extension to test\n\t\t\t *  @return {Boolean} If the file extension can be played\n\t\t\t *  @static\n\t\t\t *  @example\n\t\t\t * Tone.Buffer.supportsType(\"wav\"); //returns true\n\t\t\t * Tone.Buffer.supportsType(\"path/to/file.wav\"); //returns true\n\t\t\t */\n\t\t    Tone.Buffer.supportsType = function (url) {\n\t\t        var extension = url.split('.');\n\t\t        extension = extension[extension.length - 1];\n\t\t        var response = document.createElement('audio').canPlayType('audio/' + extension);\n\t\t        return response !== '';\n\t\t    };\n\t\t    /**\n\t\t\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t\t\t *  @return {Promise}\n\t\t\t */\n\t\t    Tone.loaded = function () {\n\t\t        var onload, onerror;\n\t\t        function removeEvents() {\n\t\t            //remove the events when it's resolved\n\t\t            Tone.Buffer.off('load', onload);\n\t\t            Tone.Buffer.off('error', onerror);\n\t\t        }\n\t\t        return new Promise(function (success, fail) {\n\t\t            onload = function () {\n\t\t                success();\n\t\t            };\n\t\t            onerror = function () {\n\t\t                fail();\n\t\t            };\n\t\t            //add the event listeners\n\t\t            Tone.Buffer.on('load', onload);\n\t\t            Tone.Buffer.on('error', onerror);\n\t\t        }).then(removeEvents).catch(function (e) {\n\t\t            removeEvents();\n\t\t            throw new Error(e);\n\t\t        });\n\t\t    };\n\t\t    return Tone.Buffer;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    /**\n\t\t\t *  @class A data structure for holding multiple buffers.\n\t\t\t *  \n\t\t\t *  @param  {Object|Array}    urls      An object literal or array\n\t\t\t *                                      of urls to load.\n\t\t\t *  @param  {Function=}  callback  The callback to invoke when\n\t\t\t *                                 the buffers are loaded. \n\t\t\t *  @extends {Tone}\n\t\t\t *  @example\n\t\t\t * //load a whole bank of piano samples\n\t\t\t * var pianoSamples = new Tone.Buffers({\n\t\t\t * \t\"C4\" : \"path/to/C4.mp3\"\n\t\t\t * \t\"C#4\" : \"path/to/C#4.mp3\"\n\t\t\t * \t\"D4\" : \"path/to/D4.mp3\"\n\t\t\t * \t\"D#4\" : \"path/to/D#4.mp3\"\n\t\t\t * \t...\n\t\t\t * }, function(){\n\t\t\t * \t//play one of the samples when they all load\n\t\t\t * \tplayer.buffer = pianoSamples.get(\"C4\");\n\t\t\t * \tplayer.start();\n\t\t\t * });\n\t\t\t * \n\t\t\t */\n\t\t    Tone.Buffers = function (urls, onload, baseUrl) {\n\t\t        /**\n\t\t\t\t *  All of the buffers\n\t\t\t\t *  @type  {Object}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._buffers = {};\n\t\t        /**\n\t\t\t\t *  A path which is prefixed before every url.\n\t\t\t\t *  @type  {String}\n\t\t\t\t */\n\t\t        this.baseUrl = this.defaultArg(baseUrl, '');\n\t\t        urls = this._flattenUrls(urls);\n\t\t        this._loadingCount = 0;\n\t\t        //add each one\n\t\t        for (var key in urls) {\n\t\t            this._loadingCount++;\n\t\t            this.add(key, urls[key], this._bufferLoaded.bind(this, onload));\n\t\t        }\n\t\t    };\n\t\t    Tone.extend(Tone.Buffers);\n\t\t    /**\n\t\t\t *  True if the buffers object has a buffer by that name.\n\t\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t\t *                                 buffer.\n\t\t\t *  @return  {Boolean}\n\t\t\t */\n\t\t    Tone.Buffers.prototype.has = function (name) {\n\t\t        return this._buffers.hasOwnProperty(name);\n\t\t    };\n\t\t    /**\n\t\t\t *  Get a buffer by name. If an array was loaded, \n\t\t\t *  then use the array index.\n\t\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t\t *                                 buffer.\n\t\t\t *  @return  {Tone.Buffer}\n\t\t\t */\n\t\t    Tone.Buffers.prototype.get = function (name) {\n\t\t        if (this.has(name)) {\n\t\t            return this._buffers[name];\n\t\t        } else {\n\t\t            throw new Error('Tone.Buffers: no buffer named ' + name);\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  A buffer was loaded. decrement the counter.\n\t\t\t *  @param  {Function}  callback \n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Buffers.prototype._bufferLoaded = function (callback) {\n\t\t        this._loadingCount--;\n\t\t        if (this._loadingCount === 0 && callback) {\n\t\t            callback(this);\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t * If the buffers are loaded or not\n\t\t\t * @memberOf Tone.Buffers#\n\t\t\t * @type {Boolean}\n\t\t\t * @name loaded\n\t\t\t * @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Buffers.prototype, 'loaded', {\n\t\t        get: function () {\n\t\t            var isLoaded = true;\n\t\t            for (var buffName in this._buffers) {\n\t\t                var buff = this.get(buffName);\n\t\t                isLoaded = isLoaded && buff.loaded;\n\t\t            }\n\t\t            return isLoaded;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Add a buffer by name and url to the Buffers\n\t\t\t *  @param  {String}    name      A unique name to give\n\t\t\t *                                the buffer\n\t\t\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, \n\t\t\t *                                                 or a buffer which will be added\n\t\t\t *                                                 with the given name.\n\t\t\t *  @param  {Function=}  callback  The callback to invoke \n\t\t\t *                                 when the url is loaded.\n\t\t\t */\n\t\t    Tone.Buffers.prototype.add = function (name, url, callback) {\n\t\t        callback = this.defaultArg(callback, Tone.noOp);\n\t\t        if (url instanceof Tone.Buffer) {\n\t\t            this._buffers[name] = url;\n\t\t            callback(this);\n\t\t        } else if (url instanceof AudioBuffer) {\n\t\t            this._buffers[name] = new Tone.Buffer(url);\n\t\t            callback(this);\n\t\t        } else if (this.isString(url)) {\n\t\t            this._buffers[name] = new Tone.Buffer(this.baseUrl + url, callback);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Flatten an object into a single depth object. \n\t\t\t *  thanks to https://gist.github.com/penguinboy/762197\n\t\t\t *  @param   {Object} ob \t\n\t\t\t *  @return  {Object}    \n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Buffers.prototype._flattenUrls = function (ob) {\n\t\t        var toReturn = {};\n\t\t        for (var i in ob) {\n\t\t            if (!ob.hasOwnProperty(i))\n\t\t                continue;\n\t\t            if (this.isObject(ob[i])) {\n\t\t                var flatObject = this._flattenUrls(ob[i]);\n\t\t                for (var x in flatObject) {\n\t\t                    if (!flatObject.hasOwnProperty(x))\n\t\t                        continue;\n\t\t                    toReturn[i + '.' + x] = flatObject[x];\n\t\t                }\n\t\t            } else {\n\t\t                toReturn[i] = ob[i];\n\t\t            }\n\t\t        }\n\t\t        return toReturn;\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @return  {Tone.Buffers} this\n\t\t\t */\n\t\t    Tone.Buffers.prototype.dispose = function () {\n\t\t        for (var name in this._buffers) {\n\t\t            this._buffers[name].dispose();\n\t\t        }\n\t\t        this._buffers = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Buffers;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  buses are another way of routing audio\n\t\t\t *\n\t\t\t *  augments Tone.prototype to include send and recieve\n\t\t\t */\n\t\t    /**\n\t\t\t  *  All of the routes\n\t\t\t  *  \n\t\t\t  *  @type {Object}\n\t\t\t  *  @static\n\t\t\t  *  @private\n\t\t\t  */\n\t\t    var Buses = {};\n\t\t    /**\n\t\t\t *  Send this signal to the channel name. \n\t\t\t *  @param  {string} channelName A named channel to send the signal to.\n\t\t\t *  @param  {Decibels} amount The amount of the source to send to the bus. \n\t\t\t *  @return {GainNode} The gain node which connects this node to the desired channel. \n\t\t\t *                     Can be used to adjust the levels of the send.\n\t\t\t *  @example\n\t\t\t * source.send(\"reverb\", -12);\n\t\t\t */\n\t\t    Tone.prototype.send = function (channelName, amount) {\n\t\t        if (!Buses.hasOwnProperty(channelName)) {\n\t\t            Buses[channelName] = this.context.createGain();\n\t\t        }\n\t\t        amount = this.defaultArg(amount, 0);\n\t\t        var sendKnob = new Tone.Gain(amount, Tone.Type.Decibels);\n\t\t        this.output.chain(sendKnob, Buses[channelName]);\n\t\t        return sendKnob;\n\t\t    };\n\t\t    /**\n\t\t\t *  Recieve the input from the desired channelName to the input\n\t\t\t *\n\t\t\t *  @param  {string} channelName A named channel to send the signal to.\n\t\t\t *  @param {AudioNode} [input] If no input is selected, the\n\t\t\t *                                         input of the current node is\n\t\t\t *                                         chosen. \n\t\t\t *  @returns {Tone} this\n\t\t\t *  @example\n\t\t\t * reverbEffect.receive(\"reverb\");\n\t\t\t */\n\t\t    Tone.prototype.receive = function (channelName, input) {\n\t\t        if (!Buses.hasOwnProperty(channelName)) {\n\t\t            Buses[channelName] = this.context.createGain();\n\t\t        }\n\t\t        if (this.isUndef(input)) {\n\t\t            input = this.input;\n\t\t        }\n\t\t        Buses[channelName].connect(input);\n\t\t        return this;\n\t\t    };\n\t\t    //remove all the send/receives when a new audio context is passed in\n\t\t    Tone.Context.on('init', function (context) {\n\t\t        if (context.Buses) {\n\t\t            Buses = context.Buses;\n\t\t        } else {\n\t\t            Buses = {};\n\t\t            context.Buses = Buses;\n\t\t        }\n\t\t    });\n\t\t    return Tone;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.Draw is useful for synchronizing visuals and audio events.\n\t\t\t *         Callbacks from Tone.Transport or any of the Tone.Event classes\n\t\t\t *         always happen _before_ the scheduled time and are not synchronized\n\t\t\t *         to the animation frame so they are not good for triggering tightly\n\t\t\t *         synchronized visuals and sound. Tone.Draw makes it easy to schedule\n\t\t\t *         callbacks using the AudioContext time and uses requestAnimationFrame.\n\t\t\t *         \n\t\t\t *  @singleton\n\t\t\t *  @extends {Tone}\n\t\t\t *  @example\n\t\t\t * Tone.Transport.schedule(function(time){\n\t\t\t * \t//use the time argument to schedule a callback with Tone.Draw\n\t\t\t * \tTone.Draw.schedule(function(){\n\t\t\t * \t\t//do drawing or DOM manipulation here\n\t\t\t * \t}, time)\n\t\t\t * }, \"+0.5\")\n\t\t\t */\n\t\t    Tone.Draw = function () {\n\t\t        /**\n\t\t\t\t *  All of the events.\n\t\t\t\t *  @type  {Tone.Timeline}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._events = new Tone.Timeline();\n\t\t        /**\n\t\t\t\t *  The duration after which events are not invoked.\n\t\t\t\t *  @type  {Number}\n\t\t\t\t *  @default 0.25\n\t\t\t\t */\n\t\t        this.expiration = 0.25;\n\t\t        /**\n\t\t\t\t *  The amount of time before the scheduled time \n\t\t\t\t *  that the callback can be invoked. Default is\n\t\t\t\t *  half the time of an animation frame (0.008 seconds).\n\t\t\t\t *  @type  {Number}\n\t\t\t\t *  @default 0.008\n\t\t\t\t */\n\t\t        this.anticipation = 0.008;\n\t\t        /**\n\t\t\t\t *  The draw loop\n\t\t\t\t *  @type  {Function}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._boundDrawLoop = this._drawLoop.bind(this);\n\t\t    };\n\t\t    Tone.extend(Tone.Draw);\n\t\t    /**\n\t\t\t *  Schedule a function at the given time to be invoked\n\t\t\t *  on the nearest animation frame.\n\t\t\t *  @param  {Function}  callback  Callback is invoked at the given time.\n\t\t\t *  @param  {Time}    time      The time relative to the AudioContext time\n\t\t\t *                              to invoke the callback.\n\t\t\t *  @return  {Tone.Draw}    this\n\t\t\t */\n\t\t    Tone.Draw.prototype.schedule = function (callback, time) {\n\t\t        this._events.add({\n\t\t            callback: callback,\n\t\t            time: this.toSeconds(time)\n\t\t        });\n\t\t        //start the draw loop on the first event\n\t\t        if (this._events.length === 1) {\n\t\t            requestAnimationFrame(this._boundDrawLoop);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Cancel events scheduled after the given time\n\t\t\t *  @param  {Time=}  after  Time after which scheduled events will \n\t\t\t *                          be removed from the scheduling timeline.\n\t\t\t *  @return  {Tone.Draw}  this\n\t\t\t */\n\t\t    Tone.Draw.prototype.cancel = function (after) {\n\t\t        this._events.cancel(this.toSeconds(after));\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  The draw loop\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Draw.prototype._drawLoop = function () {\n\t\t        var now = Tone.now();\n\t\t        while (this._events.length && this._events.peek().time - this.anticipation <= now) {\n\t\t            var event = this._events.shift();\n\t\t            if (now - event.time <= this.expiration) {\n\t\t                event.callback();\n\t\t            }\n\t\t        }\n\t\t        if (this._events.length > 0) {\n\t\t            requestAnimationFrame(this._boundDrawLoop);\n\t\t        }\n\t\t    };\n\t\t    //make a singleton\n\t\t    Tone.Draw = new Tone.Draw();\n\t\t    return Tone.Draw;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Both Tone.Panner3D and Tone.Listener have a position in 3D space \n\t\t\t *          using a right-handed cartesian coordinate system. \n\t\t\t *          The units used in the coordinate system are not defined; \n\t\t\t *          these coordinates are independent/invariant of any particular \n\t\t\t *          units such as meters or feet. Tone.Panner3D objects have an forward \n\t\t\t *          vector representing the direction the sound is projecting. Additionally, \n\t\t\t *          they have a sound cone representing how directional the sound is. \n\t\t\t *          For example, the sound could be omnidirectional, in which case it would \n\t\t\t *          be heard anywhere regardless of its forward, or it can be more directional \n\t\t\t *          and heard only if it is facing the listener. Tone.Listener objects \n\t\t\t *          (representing a person's ears) have an forward and up vector \n\t\t\t *          representing in which direction the person is facing. Because both the \n\t\t\t *          source stream and the listener can be moving, they both have a velocity \n\t\t\t *          vector representing both the speed and direction of movement. Taken together, \n\t\t\t *          these two velocities can be used to generate a doppler shift effect which changes the pitch.\n\t\t\t *          <br><br>\n\t\t\t *          Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D\n\t\t\t *  \n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone}\n\t\t\t *  @singleton\n\t\t\t *  @param {Number} positionX The initial x position.\n\t\t\t *  @param {Number} positionY The initial y position.\n\t\t\t *  @param {Number} positionZ The initial z position.\n\t\t\t */\n\t\t    Tone.Listener = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'positionX',\n\t\t            'positionY',\n\t\t            'positionZ'\n\t\t        ], ListenerConstructor.defaults);\n\t\t        /**\n\t\t\t\t *  Holds the current forward orientation\n\t\t\t\t *  @type  {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._orientation = [\n\t\t            options.forwardX,\n\t\t            options.forwardY,\n\t\t            options.forwardZ,\n\t\t            options.upX,\n\t\t            options.upY,\n\t\t            options.upZ\n\t\t        ];\n\t\t        /**\n\t\t\t\t *  Holds the current position\n\t\t\t\t *  @type  {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._position = [\n\t\t            options.positionX,\n\t\t            options.positionY,\n\t\t            options.positionZ\n\t\t        ];\n\t\t        // set the default position/forward\n\t\t        this.forwardX = options.forwardX;\n\t\t        this.forwardY = options.forwardY;\n\t\t        this.forwardZ = options.forwardZ;\n\t\t        this.upX = options.upX;\n\t\t        this.upY = options.upY;\n\t\t        this.upZ = options.upZ;\n\t\t        this.positionX = options.positionX;\n\t\t        this.positionY = options.positionY;\n\t\t        this.positionZ = options.positionZ;\n\t\t    };\n\t\t    Tone.extend(Tone.Listener);\n\t\t    /**\n\t\t\t *  the default parameters\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type {Object}\n\t\t\t *  Defaults according to the specification\n\t\t\t */\n\t\t    Tone.Listener.defaults = {\n\t\t        'positionX': 0,\n\t\t        'positionY': 0,\n\t\t        'positionZ': 0,\n\t\t        'forwardX': 0,\n\t\t        'forwardY': 0,\n\t\t        'forwardZ': 1,\n\t\t        'upX': 0,\n\t\t        'upY': 1,\n\t\t        'upZ': 0\n\t\t    };\n\t\t    /**\n\t\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t\t    Tone.Listener.prototype._rampTimeConstant = 0.01;\n\t\t    /**\n\t\t\t *  Sets the position of the listener in 3d space.\t\n\t\t\t *  @param  {Number}  x\n\t\t\t *  @param  {Number}  y\n\t\t\t *  @param  {Number}  z\n\t\t\t *  @return {Tone.Listener} this\n\t\t\t */\n\t\t    Tone.Listener.prototype.setPosition = function (x, y, z) {\n\t\t        if (this.context.listener.positionX) {\n\t\t            var now = this.now();\n\t\t            this.context.listener.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t\t            this.context.listener.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t\t            this.context.listener.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t\t        } else {\n\t\t            this.context.listener.setPosition(x, y, z);\n\t\t        }\n\t\t        this._position = Array.prototype.slice.call(arguments);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Sets the orientation of the listener using two vectors, the forward\n\t\t\t *  vector (which direction the listener is facing) and the up vector \n\t\t\t *  (which the up direction of the listener). An up vector\n\t\t\t *  of 0, 0, 1 is equivalent to the listener standing up in the Z direction. \n\t\t\t *  @param  {Number}  x\n\t\t\t *  @param  {Number}  y\n\t\t\t *  @param  {Number}  z\n\t\t\t *  @param  {Number}  upX\n\t\t\t *  @param  {Number}  upY\n\t\t\t *  @param  {Number}  upZ\n\t\t\t *  @return {Tone.Listener} this\n\t\t\t */\n\t\t    Tone.Listener.prototype.setOrientation = function (x, y, z, upX, upY, upZ) {\n\t\t        if (this.context.listener.forwardX) {\n\t\t            var now = this.now();\n\t\t            this.context.listener.forwardX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t\t            this.context.listener.forwardY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t\t            this.context.listener.forwardZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t\t            this.context.listener.upX.setTargetAtTime(upX, now, this._rampTimeConstant);\n\t\t            this.context.listener.upY.setTargetAtTime(upY, now, this._rampTimeConstant);\n\t\t            this.context.listener.upZ.setTargetAtTime(upZ, now, this._rampTimeConstant);\n\t\t        } else {\n\t\t            this.context.listener.setOrientation(x, y, z, upX, upY, upZ);\n\t\t        }\n\t\t        this._orientation = Array.prototype.slice.call(arguments);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  The x position of the panner object.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Listener#\n\t\t\t *  @name positionX\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Listener.prototype, 'positionX', {\n\t\t        set: function (pos) {\n\t\t            this._position[0] = pos;\n\t\t            this.setPosition.apply(this, this._position);\n\t\t        },\n\t\t        get: function () {\n\t\t            return this._position[0];\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The y position of the panner object.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Listener#\n\t\t\t *  @name positionY\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Listener.prototype, 'positionY', {\n\t\t        set: function (pos) {\n\t\t            this._position[1] = pos;\n\t\t            this.setPosition.apply(this, this._position);\n\t\t        },\n\t\t        get: function () {\n\t\t            return this._position[1];\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The z position of the panner object.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Listener#\n\t\t\t *  @name positionZ\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Listener.prototype, 'positionZ', {\n\t\t        set: function (pos) {\n\t\t            this._position[2] = pos;\n\t\t            this.setPosition.apply(this, this._position);\n\t\t        },\n\t\t        get: function () {\n\t\t            return this._position[2];\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The x coordinate of the listeners front direction. i.e. \n\t\t\t *  which way they are facing.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Listener#\n\t\t\t *  @name forwardX\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Listener.prototype, 'forwardX', {\n\t\t        set: function (pos) {\n\t\t            this._orientation[0] = pos;\n\t\t            this.setOrientation.apply(this, this._orientation);\n\t\t        },\n\t\t        get: function () {\n\t\t            return this._orientation[0];\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The y coordinate of the listeners front direction. i.e. \n\t\t\t *  which way they are facing.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Listener#\n\t\t\t *  @name forwardY\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Listener.prototype, 'forwardY', {\n\t\t        set: function (pos) {\n\t\t            this._orientation[1] = pos;\n\t\t            this.setOrientation.apply(this, this._orientation);\n\t\t        },\n\t\t        get: function () {\n\t\t            return this._orientation[1];\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The z coordinate of the listeners front direction. i.e. \n\t\t\t *  which way they are facing.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Listener#\n\t\t\t *  @name forwardZ\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Listener.prototype, 'forwardZ', {\n\t\t        set: function (pos) {\n\t\t            this._orientation[2] = pos;\n\t\t            this.setOrientation.apply(this, this._orientation);\n\t\t        },\n\t\t        get: function () {\n\t\t            return this._orientation[2];\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The x coordinate of the listener's up direction. i.e.\n\t\t\t *  the direction the listener is standing in.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Listener#\n\t\t\t *  @name upX\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Listener.prototype, 'upX', {\n\t\t        set: function (pos) {\n\t\t            this._orientation[3] = pos;\n\t\t            this.setOrientation.apply(this, this._orientation);\n\t\t        },\n\t\t        get: function () {\n\t\t            return this._orientation[3];\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The y coordinate of the listener's up direction. i.e.\n\t\t\t *  the direction the listener is standing in.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Listener#\n\t\t\t *  @name upY\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Listener.prototype, 'upY', {\n\t\t        set: function (pos) {\n\t\t            this._orientation[4] = pos;\n\t\t            this.setOrientation.apply(this, this._orientation);\n\t\t        },\n\t\t        get: function () {\n\t\t            return this._orientation[4];\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The z coordinate of the listener's up direction. i.e.\n\t\t\t *  the direction the listener is standing in.\n\t\t\t *  @type {Number}\n\t\t\t *  @memberOf Tone.Listener#\n\t\t\t *  @name upZ\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Listener.prototype, 'upZ', {\n\t\t        set: function (pos) {\n\t\t            this._orientation[5] = pos;\n\t\t            this.setOrientation.apply(this, this._orientation);\n\t\t        },\n\t\t        get: function () {\n\t\t            return this._orientation[5];\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.Listener} this\n\t\t\t */\n\t\t    Tone.Listener.prototype.dispose = function () {\n\t\t        this._orientation = null;\n\t\t        this._position = null;\n\t\t        return this;\n\t\t    };\n\t\t    //SINGLETON SETUP\n\t\t    var ListenerConstructor = Tone.Listener;\n\t\t    Tone.Listener = new ListenerConstructor();\n\t\t    Tone.Context.on('init', function (context) {\n\t\t        if (context.Listener instanceof ListenerConstructor) {\n\t\t            //a single listener object\n\t\t            Tone.Listener = context.Listener;\n\t\t        } else {\n\t\t            //make new Listener insides\n\t\t            Tone.Listener = new ListenerConstructor();\n\t\t        }\n\t\t        context.Listener = Tone.Listener;\n\t\t    });\n\t\t    //END SINGLETON SETUP\n\t\t    return Tone.Listener;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    /**\n\t\t\t *  shim\n\t\t\t *  @private\n\t\t\t */\n\t\t    if (!window.hasOwnProperty('OfflineAudioContext') && window.hasOwnProperty('webkitOfflineAudioContext')) {\n\t\t        window.OfflineAudioContext = window.webkitOfflineAudioContext;\n\t\t    }\n\t\t    /**\n\t\t\t *  @class Wrapper around the OfflineAudioContext\n\t\t\t *  @extends {Tone.Context\n\t\t\t *  @param  {Number}  channels  The number of channels to render\n\t\t\t *  @param  {Number}  duration  The duration to render in samples\n\t\t\t *  @param {Number} sampleRate the sample rate to render at\n\t\t\t */\n\t\t    Tone.OfflineContext = function (channels, duration, sampleRate) {\n\t\t        /**\n\t\t\t\t *  The offline context\n\t\t\t\t *  @private\n\t\t\t\t *  @type  {OfflineAudioContext}\n\t\t\t\t */\n\t\t        var offlineContext = new OfflineAudioContext(channels, duration * sampleRate, sampleRate);\n\t\t        //wrap the methods/members\n\t\t        Tone.Context.call(this, offlineContext);\n\t\t        /**\n\t\t\t\t *  A private reference to the duration\n\t\t\t\t *  @private\n\t\t\t\t *  @type  {Number}\n\t\t\t\t */\n\t\t        this._duration = duration;\n\t\t        /**\n\t\t\t\t *  An artificial clock source\n\t\t\t\t *  @type  {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._currentTime = 0;\n\t\t        //modify the lookAhead and updateInterval to one block\n\t\t        this.lookAhead = this.blockTime;\n\t\t        this.updateInterval = this.blockTime;\n\t\t    };\n\t\t    Tone.extend(Tone.OfflineContext, Tone.Context);\n\t\t    /**\n\t\t\t *  Override the now method to point to the internal clock time\n\t\t\t *  @return  {Number}\n\t\t\t */\n\t\t    Tone.OfflineContext.prototype.now = function () {\n\t\t        return this._currentTime;\n\t\t    };\n\t\t    /**\n\t\t\t *  Overwrite this method since the worker is not necessary for the offline context\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.OfflineContext.prototype._createWorker = function () {\n\t\t        //dummy worker that does nothing\n\t\t        return {\n\t\t            postMessage: function () {\n\t\t            }\n\t\t        };\n\t\t    };\n\t\t    /**\n\t\t\t *  Render the output of the OfflineContext\n\t\t\t *  @return  {Promise}\n\t\t\t */\n\t\t    Tone.OfflineContext.prototype.render = function () {\n\t\t        while (this._duration - this._currentTime >= 0) {\n\t\t            //invoke all the callbacks on that time\n\t\t            this.emit('tick');\n\t\t            //increment the clock\n\t\t            this._currentTime += Tone.prototype.blockTime;\n\t\t        }\n\t\t        //promise returned is not yet implemented in all browsers\n\t\t        return new Promise(function (done) {\n\t\t            this._context.oncomplete = function (e) {\n\t\t                done(e.renderedBuffer);\n\t\t            };\n\t\t            this._context.startRendering();\n\t\t        }.bind(this));\n\t\t    };\n\t\t    return Tone.OfflineContext;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    /**\n\t\t\t *  Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext. \n\t\t\t *  The OfflineAudioContext is capable of rendering much faster than real time in many cases. \n\t\t\t *  The callback function also passes in an offline instance of Tone.Transport which can be used\n\t\t\t *  to schedule events along the Transport. \n\t\t\t *  @param  {Function}  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n\t\t\t *  @param  {Time}  duration     the amount of time to record for.\n\t\t\t *  @return  {Promise}  The promise which is invoked with the Tone.Buffer of the recorded output.\n\t\t\t *  @example\n\t\t\t * //render 2 seconds of the oscillator\n\t\t\t * Tone.Offline(function(){\n\t\t\t * \t//only nodes created in this callback will be recorded\n\t\t\t * \tvar oscillator = new Tone.Oscillator().toMaster().start(0)\n\t\t\t * \t//schedule their events\n\t\t\t * }, 2).then(function(buffer){\n\t\t\t * \t//do something with the output buffer\n\t\t\t * })\n\t\t\t * @example\n\t\t\t * //can also schedule events along the Transport\n\t\t\t * //using the passed in Offline Transport\n\t\t\t * Tone.Offline(function(Transport){\n\t\t\t * \tvar osc = new Tone.Oscillator().toMaster()\n\t\t\t * \tTransport.schedule(function(time){\n\t\t\t * \t\tosc.start(time).stop(time + 0.1)\n\t\t\t * \t}, 1)\n\t\t\t * \tTransport.start(0.2)\n\t\t\t * }, 4).then(function(buffer){\n\t\t\t * \t//do something with the output buffer\n\t\t\t * })\n\t\t\t */\n\t\t    Tone.Offline = function (callback, duration) {\n\t\t        //set the OfflineAudioContext\n\t\t        var sampleRate = Tone.context.sampleRate;\n\t\t        var originalContext = Tone.context;\n\t\t        var context = new Tone.OfflineContext(2, duration, sampleRate);\n\t\t        Tone.context = context;\n\t\t        //invoke the callback/scheduling\n\t\t        callback(Tone.Transport);\n\t\t        //process the audio\n\t\t        var rendered = context.render();\n\t\t        //return the original AudioContext\n\t\t        Tone.context = originalContext;\n\t\t        //return the audio\n\t\t        return rendered.then(function (buffer) {\n\t\t            //wrap it in a Tone.Buffer\n\t\t            return new Tone.Buffer(buffer);\n\t\t        });\n\t\t    };\n\t\t    return Tone.Offline;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t * \t@class  Tone.Effect is the base class for effects. Connect the effect between\n\t\t\t * \t        the effectSend and effectReturn GainNodes, then control the amount of\n\t\t\t * \t        effect which goes to the output using the wet control.\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone}\n\t\t\t *  @param {NormalRange|Object} [wet] The starting wet value. \n\t\t\t */\n\t\t    Tone.Effect = function () {\n\t\t        this.createInsOuts(1, 1);\n\t\t        //get all of the defaults\n\t\t        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);\n\t\t        /**\n\t\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t\t *  @type {Tone.CrossFade}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t\t        /**\n\t\t\t\t *  The wet control is how much of the effected\n\t\t\t\t *  will pass through to the output. 1 = 100% effected\n\t\t\t\t *  signal, 0 = 100% dry signal. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.wet = this._dryWet.fade;\n\t\t        /**\n\t\t\t\t *  connect the effectSend to the input of hte effect\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.effectSend = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  connect the output of the effect to the effectReturn\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.effectReturn = new Tone.Gain();\n\t\t        //connections\n\t\t        this.input.connect(this._dryWet.a);\n\t\t        this.input.connect(this.effectSend);\n\t\t        this.effectReturn.connect(this._dryWet.b);\n\t\t        this._dryWet.connect(this.output);\n\t\t        this._readOnly(['wet']);\n\t\t    };\n\t\t    Tone.extend(Tone.Effect);\n\t\t    /**\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.Effect.defaults = { 'wet': 1 };\n\t\t    /**\n\t\t\t *  chains the effect in between the effectSend and effectReturn\n\t\t\t *  @param  {Tone} effect\n\t\t\t *  @private\n\t\t\t *  @returns {Tone.Effect} this\n\t\t\t */\n\t\t    Tone.Effect.prototype.connectEffect = function (effect) {\n\t\t        this.effectSend.chain(effect, this.effectReturn);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.Effect} this\n\t\t\t */\n\t\t    Tone.Effect.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._dryWet.dispose();\n\t\t        this._dryWet = null;\n\t\t        this.effectSend.dispose();\n\t\t        this.effectSend = null;\n\t\t        this.effectReturn.dispose();\n\t\t        this.effectReturn = null;\n\t\t        this._writable(['wet']);\n\t\t        this.wet = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Effect;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n\t\t\t *         Setting the LFO rate and depth allows for control over the filter modulation rate \n\t\t\t *         and depth.\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Effect}\n\t\t\t *  @param {Time|Object} [frequency] The rate of the LFO.\n\t\t\t *  @param {Frequency=} baseFrequency The lower value of the LFOs oscillation\n\t\t \t *  @param {Frequency=} octaves The number of octaves above the baseFrequency\n\t\t\t *  @example\n\t\t\t * //create an autofilter and start it's LFO\n\t\t\t * var autoFilter = new Tone.AutoFilter(\"4n\").toMaster().start();\n\t\t\t * //route an oscillator through the filter and start it\n\t\t\t * var oscillator = new Tone.Oscillator().connect(autoFilter).start();\n\t\t\t */\n\t\t    Tone.AutoFilter = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'frequency',\n\t\t            'baseFrequency',\n\t\t            'octaves'\n\t\t        ], Tone.AutoFilter.defaults);\n\t\t        Tone.Effect.call(this, options);\n\t\t        /**\n\t\t\t\t *  the lfo which drives the filter cutoff\n\t\t\t\t *  @type {Tone.LFO}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lfo = new Tone.LFO({\n\t\t            'frequency': options.frequency,\n\t\t            'amplitude': options.depth\n\t\t        });\n\t\t        /**\n\t\t\t\t * The range of the filter modulating between the min and max frequency. \n\t\t\t\t * 0 = no modulation. 1 = full modulation.\n\t\t\t\t * @type {NormalRange}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t\t        this.depth = this._lfo.amplitude;\n\t\t        /**\n\t\t\t\t * How fast the filter modulates between min and max. \n\t\t\t\t * @type {Frequency}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t\t        this.frequency = this._lfo.frequency;\n\t\t        /**\n\t\t\t\t *  The filter node\n\t\t\t\t *  @type {Tone.Filter}\n\t\t\t\t */\n\t\t        this.filter = new Tone.Filter(options.filter);\n\t\t        /**\n\t\t\t\t *  The octaves placeholder\n\t\t\t\t *  @type {Positive}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._octaves = 0;\n\t\t        //connections\n\t\t        this.connectEffect(this.filter);\n\t\t        this._lfo.connect(this.filter.frequency);\n\t\t        this.type = options.type;\n\t\t        this._readOnly([\n\t\t            'frequency',\n\t\t            'depth'\n\t\t        ]);\n\t\t        this.octaves = options.octaves;\n\t\t        this.baseFrequency = options.baseFrequency;\n\t\t    };\n\t\t    //extend Effect\n\t\t    Tone.extend(Tone.AutoFilter, Tone.Effect);\n\t\t    /**\n\t\t\t *  defaults\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.AutoFilter.defaults = {\n\t\t        'frequency': 1,\n\t\t        'type': 'sine',\n\t\t        'depth': 1,\n\t\t        'baseFrequency': 200,\n\t\t        'octaves': 2.6,\n\t\t        'filter': {\n\t\t            'type': 'lowpass',\n\t\t            'rolloff': -12,\n\t\t            'Q': 1\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t * Start the effect.\n\t\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t\t * @returns {Tone.AutoFilter} this\n\t\t\t */\n\t\t    Tone.AutoFilter.prototype.start = function (time) {\n\t\t        this._lfo.start(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * Stop the effect.\n\t\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t\t * @returns {Tone.AutoFilter} this\n\t\t\t */\n\t\t    Tone.AutoFilter.prototype.stop = function (time) {\n\t\t        this._lfo.stop(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * Sync the filter to the transport.\n\t\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t\t *                               Transport has started. \n\t\t\t * @returns {Tone.AutoFilter} this\n\t\t\t */\n\t\t    Tone.AutoFilter.prototype.sync = function (delay) {\n\t\t        this._lfo.sync(delay);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * Unsync the filter from the transport.\n\t\t\t * @returns {Tone.AutoFilter} this\n\t\t\t */\n\t\t    Tone.AutoFilter.prototype.unsync = function () {\n\t\t        this._lfo.unsync();\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * Type of oscillator attached to the AutoFilter. \n\t\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t\t * @memberOf Tone.AutoFilter#\n\t\t\t * @type {string}\n\t\t\t * @name type\n\t\t\t */\n\t\t    Object.defineProperty(Tone.AutoFilter.prototype, 'type', {\n\t\t        get: function () {\n\t\t            return this._lfo.type;\n\t\t        },\n\t\t        set: function (type) {\n\t\t            this._lfo.type = type;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The minimum value of the filter's cutoff frequency.\n\t\t\t * @memberOf Tone.AutoFilter#\n\t\t\t * @type {Frequency}\n\t\t\t * @name min\n\t\t\t */\n\t\t    Object.defineProperty(Tone.AutoFilter.prototype, 'baseFrequency', {\n\t\t        get: function () {\n\t\t            return this._lfo.min;\n\t\t        },\n\t\t        set: function (freq) {\n\t\t            this._lfo.min = this.toFrequency(freq);\n\t\t            //and set the max\n\t\t            this.octaves = this._octaves;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The maximum value of the filter's cutoff frequency. \n\t\t\t * @memberOf Tone.AutoFilter#\n\t\t\t * @type {Positive}\n\t\t\t * @name octaves\n\t\t\t */\n\t\t    Object.defineProperty(Tone.AutoFilter.prototype, 'octaves', {\n\t\t        get: function () {\n\t\t            return this._octaves;\n\t\t        },\n\t\t        set: function (oct) {\n\t\t            this._octaves = oct;\n\t\t            this._lfo.max = this.baseFrequency * Math.pow(2, oct);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.AutoFilter} this\n\t\t\t */\n\t\t    Tone.AutoFilter.prototype.dispose = function () {\n\t\t        Tone.Effect.prototype.dispose.call(this);\n\t\t        this._lfo.dispose();\n\t\t        this._lfo = null;\n\t\t        this.filter.dispose();\n\t\t        this.filter = null;\n\t\t        this._writable([\n\t\t            'frequency',\n\t\t            'depth'\n\t\t        ]);\n\t\t        this.frequency = null;\n\t\t        this.depth = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.AutoFilter;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. \n\t\t\t *         More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Effect}\n\t\t\t *  @param {Frequency|Object} [frequency] Rate of left-right oscillation. \n\t\t\t *  @example\n\t\t\t * //create an autopanner and start it's LFO\n\t\t\t * var autoPanner = new Tone.AutoPanner(\"4n\").toMaster().start();\n\t\t\t * //route an oscillator through the panner and start it\n\t\t\t * var oscillator = new Tone.Oscillator().connect(autoPanner).start();\n\t\t\t */\n\t\t    Tone.AutoPanner = function () {\n\t\t        var options = this.optionsObject(arguments, ['frequency'], Tone.AutoPanner.defaults);\n\t\t        Tone.Effect.call(this, options);\n\t\t        /**\n\t\t\t\t *  the lfo which drives the panning\n\t\t\t\t *  @type {Tone.LFO}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lfo = new Tone.LFO({\n\t\t            'frequency': options.frequency,\n\t\t            'amplitude': options.depth,\n\t\t            'min': -1,\n\t\t            'max': 1\n\t\t        });\n\t\t        /**\n\t\t\t\t * The amount of panning between left and right. \n\t\t\t\t * 0 = always center. 1 = full range between left and right. \n\t\t\t\t * @type {NormalRange}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t\t        this.depth = this._lfo.amplitude;\n\t\t        /**\n\t\t\t\t *  the panner node which does the panning\n\t\t\t\t *  @type {Tone.Panner}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._panner = new Tone.Panner();\n\t\t        /**\n\t\t\t\t * How fast the panner modulates between left and right. \n\t\t\t\t * @type {Frequency}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t\t        this.frequency = this._lfo.frequency;\n\t\t        //connections\n\t\t        this.connectEffect(this._panner);\n\t\t        this._lfo.connect(this._panner.pan);\n\t\t        this.type = options.type;\n\t\t        this._readOnly([\n\t\t            'depth',\n\t\t            'frequency'\n\t\t        ]);\n\t\t    };\n\t\t    //extend Effect\n\t\t    Tone.extend(Tone.AutoPanner, Tone.Effect);\n\t\t    /**\n\t\t\t *  defaults\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.AutoPanner.defaults = {\n\t\t        'frequency': 1,\n\t\t        'type': 'sine',\n\t\t        'depth': 1\n\t\t    };\n\t\t    /**\n\t\t\t * Start the effect.\n\t\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t\t * @returns {Tone.AutoPanner} this\n\t\t\t */\n\t\t    Tone.AutoPanner.prototype.start = function (time) {\n\t\t        this._lfo.start(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * Stop the effect.\n\t\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t\t * @returns {Tone.AutoPanner} this\n\t\t\t */\n\t\t    Tone.AutoPanner.prototype.stop = function (time) {\n\t\t        this._lfo.stop(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * Sync the panner to the transport.\n\t\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t\t *                               Transport has started. \n\t\t\t * @returns {Tone.AutoPanner} this\n\t\t\t */\n\t\t    Tone.AutoPanner.prototype.sync = function (delay) {\n\t\t        this._lfo.sync(delay);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * Unsync the panner from the transport\n\t\t\t * @returns {Tone.AutoPanner} this\n\t\t\t */\n\t\t    Tone.AutoPanner.prototype.unsync = function () {\n\t\t        this._lfo.unsync();\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * Type of oscillator attached to the AutoFilter. \n\t\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t\t * @memberOf Tone.AutoFilter#\n\t\t\t * @type {string}\n\t\t\t * @name type\n\t\t\t */\n\t\t    Object.defineProperty(Tone.AutoPanner.prototype, 'type', {\n\t\t        get: function () {\n\t\t            return this._lfo.type;\n\t\t        },\n\t\t        set: function (type) {\n\t\t            this._lfo.type = type;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.AutoPanner} this\n\t\t\t */\n\t\t    Tone.AutoPanner.prototype.dispose = function () {\n\t\t        Tone.Effect.prototype.dispose.call(this);\n\t\t        this._lfo.dispose();\n\t\t        this._lfo = null;\n\t\t        this._panner.dispose();\n\t\t        this._panner = null;\n\t\t        this._writable([\n\t\t            'depth',\n\t\t            'frequency'\n\t\t        ]);\n\t\t        this.frequency = null;\n\t\t        this.depth = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.AutoPanner;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).\n\t\t\t *          The frequency of the filter is adjusted proportionally to the \n\t\t\t *          incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Effect}\n\t\t\t *  @param {Frequency|Object} [baseFrequency] The frequency the filter is set \n\t\t\t *                                            to at the low point of the wah\n\t\t\t *  @param {Positive} [octaves] The number of octaves above the baseFrequency\n\t\t\t *                                the filter will sweep to when fully open\n\t\t\t *  @param {Decibels} [sensitivity] The decibel threshold sensitivity for \n\t\t\t *                                   the incoming signal. Normal range of -40 to 0. \n\t\t\t *  @example\n\t\t\t * var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();\n\t\t\t * //initialize the synth and connect to autowah\n\t\t\t * var synth = new Synth.connect(autoWah);\n\t\t\t * //Q value influences the effect of the wah - default is 2\n\t\t\t * autoWah.Q.value = 6;\n\t\t\t * //more audible on higher notes\n\t\t\t * synth.triggerAttackRelease(\"C4\", \"8n\")\n\t\t\t */\n\t\t    Tone.AutoWah = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'baseFrequency',\n\t\t            'octaves',\n\t\t            'sensitivity'\n\t\t        ], Tone.AutoWah.defaults);\n\t\t        Tone.Effect.call(this, options);\n\t\t        /**\n\t\t\t\t *  The envelope follower. Set the attack/release\n\t\t\t\t *  timing to adjust how the envelope is followed. \n\t\t\t\t *  @type {Tone.Follower}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.follower = new Tone.Follower(options.follower);\n\t\t        /**\n\t\t\t\t *  scales the follower value to the frequency domain\n\t\t\t\t *  @type {Tone}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._sweepRange = new Tone.ScaleExp(0, 1, 0.5);\n\t\t        /**\n\t\t\t\t *  @type {number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._baseFrequency = options.baseFrequency;\n\t\t        /**\n\t\t\t\t *  @type {number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._octaves = options.octaves;\n\t\t        /**\n\t\t\t\t *  the input gain to adjust the sensitivity\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._inputBoost = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  @type {BiquadFilterNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._bandpass = new Tone.Filter({\n\t\t            'rolloff': -48,\n\t\t            'frequency': 0,\n\t\t            'Q': options.Q\n\t\t        });\n\t\t        /**\n\t\t\t\t *  @type {Tone.Filter}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._peaking = new Tone.Filter(0, 'peaking');\n\t\t        this._peaking.gain.value = options.gain;\n\t\t        /**\n\t\t\t\t * The gain of the filter.\n\t\t\t\t * @type {Number}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t\t        this.gain = this._peaking.gain;\n\t\t        /**\n\t\t\t\t * The quality of the filter.\n\t\t\t\t * @type {Positive}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t\t        this.Q = this._bandpass.Q;\n\t\t        //the control signal path\n\t\t        this.effectSend.chain(this._inputBoost, this.follower, this._sweepRange);\n\t\t        this._sweepRange.connect(this._bandpass.frequency);\n\t\t        this._sweepRange.connect(this._peaking.frequency);\n\t\t        //the filtered path\n\t\t        this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t\t        //set the initial value\n\t\t        this._setSweepRange();\n\t\t        this.sensitivity = options.sensitivity;\n\t\t        this._readOnly([\n\t\t            'gain',\n\t\t            'Q'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.AutoWah, Tone.Effect);\n\t\t    /**\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.AutoWah.defaults = {\n\t\t        'baseFrequency': 100,\n\t\t        'octaves': 6,\n\t\t        'sensitivity': 0,\n\t\t        'Q': 2,\n\t\t        'gain': 2,\n\t\t        'follower': {\n\t\t            'attack': 0.3,\n\t\t            'release': 0.5\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t * The number of octaves that the filter will sweep above the \n\t\t\t * baseFrequency. \n\t\t\t * @memberOf Tone.AutoWah#\n\t\t\t * @type {Number}\n\t\t\t * @name octaves\n\t\t\t */\n\t\t    Object.defineProperty(Tone.AutoWah.prototype, 'octaves', {\n\t\t        get: function () {\n\t\t            return this._octaves;\n\t\t        },\n\t\t        set: function (octaves) {\n\t\t            this._octaves = octaves;\n\t\t            this._setSweepRange();\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The base frequency from which the sweep will start from.\n\t\t\t * @memberOf Tone.AutoWah#\n\t\t\t * @type {Frequency}\n\t\t\t * @name baseFrequency\n\t\t\t */\n\t\t    Object.defineProperty(Tone.AutoWah.prototype, 'baseFrequency', {\n\t\t        get: function () {\n\t\t            return this._baseFrequency;\n\t\t        },\n\t\t        set: function (baseFreq) {\n\t\t            this._baseFrequency = baseFreq;\n\t\t            this._setSweepRange();\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The sensitivity to control how responsive to the input signal the filter is. \n\t\t\t * @memberOf Tone.AutoWah#\n\t\t\t * @type {Decibels}\n\t\t\t * @name sensitivity\n\t\t\t */\n\t\t    Object.defineProperty(Tone.AutoWah.prototype, 'sensitivity', {\n\t\t        get: function () {\n\t\t            return this.gainToDb(1 / this._inputBoost.gain.value);\n\t\t        },\n\t\t        set: function (sensitivy) {\n\t\t            this._inputBoost.gain.value = 1 / this.dbToGain(sensitivy);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  sets the sweep range of the scaler\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.AutoWah.prototype._setSweepRange = function () {\n\t\t        this._sweepRange.min = this._baseFrequency;\n\t\t        this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.AutoWah} this\n\t\t\t */\n\t\t    Tone.AutoWah.prototype.dispose = function () {\n\t\t        Tone.Effect.prototype.dispose.call(this);\n\t\t        this.follower.dispose();\n\t\t        this.follower = null;\n\t\t        this._sweepRange.dispose();\n\t\t        this._sweepRange = null;\n\t\t        this._bandpass.dispose();\n\t\t        this._bandpass = null;\n\t\t        this._peaking.dispose();\n\t\t        this._peaking = null;\n\t\t        this._inputBoost.dispose();\n\t\t        this._inputBoost = null;\n\t\t        this._writable([\n\t\t            'gain',\n\t\t            'Q'\n\t\t        ]);\n\t\t        this.gain = null;\n\t\t        this.Q = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.AutoWah;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.Bitcrusher downsamples the incoming signal to a different bitdepth. \n\t\t\t *         Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing\n\t\t\t *         on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Effect}\n\t\t\t *  @param {Number} bits The number of bits to downsample the signal. Nominal range\n\t\t\t *                       of 1 to 8. \n\t\t\t *  @example\n\t\t\t * //initialize crusher and route a synth through it\n\t\t\t * var crusher = new Tone.BitCrusher(4).toMaster();\n\t\t\t * var synth = new Tone.MonoSynth().connect(crusher);\n\t\t\t */\n\t\t    Tone.BitCrusher = function () {\n\t\t        var options = this.optionsObject(arguments, ['bits'], Tone.BitCrusher.defaults);\n\t\t        Tone.Effect.call(this, options);\n\t\t        var invStepSize = 1 / Math.pow(2, options.bits - 1);\n\t\t        /**\n\t\t\t\t *  Subtract the input signal and the modulus of the input signal\n\t\t\t\t *  @type {Tone.Subtract}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._subtract = new Tone.Subtract();\n\t\t        /**\n\t\t\t\t *  The mod function\n\t\t\t\t *  @type  {Tone.Modulo}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._modulo = new Tone.Modulo(invStepSize);\n\t\t        /**\n\t\t\t\t *  keeps track of the bits\n\t\t\t\t *  @type {number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._bits = options.bits;\n\t\t        //connect it up\n\t\t        this.effectSend.fan(this._subtract, this._modulo);\n\t\t        this._modulo.connect(this._subtract, 0, 1);\n\t\t        this._subtract.connect(this.effectReturn);\n\t\t    };\n\t\t    Tone.extend(Tone.BitCrusher, Tone.Effect);\n\t\t    /**\n\t\t\t *  the default values\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.BitCrusher.defaults = { 'bits': 4 };\n\t\t    /**\n\t\t\t * The bit depth of the effect. Nominal range of 1-8. \n\t\t\t * @memberOf Tone.BitCrusher#\n\t\t\t * @type {number}\n\t\t\t * @name bits\n\t\t\t */\n\t\t    Object.defineProperty(Tone.BitCrusher.prototype, 'bits', {\n\t\t        get: function () {\n\t\t            return this._bits;\n\t\t        },\n\t\t        set: function (bits) {\n\t\t            this._bits = bits;\n\t\t            var invStepSize = 1 / Math.pow(2, bits - 1);\n\t\t            this._modulo.value = invStepSize;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.BitCrusher} this\n\t\t\t */\n\t\t    Tone.BitCrusher.prototype.dispose = function () {\n\t\t        Tone.Effect.prototype.dispose.call(this);\n\t\t        this._subtract.dispose();\n\t\t        this._subtract = null;\n\t\t        this._modulo.dispose();\n\t\t        this._modulo = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.BitCrusher;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good \n\t\t\t *         for making different types of distortion sounds.\n\t\t\t *         Note that odd orders sound very different from even ones, \n\t\t\t *         and order = 1 is no change. \n\t\t\t *         Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n\t\t\t *\n\t\t\t *  @extends {Tone.Effect}\n\t\t\t *  @constructor\n\t\t\t *  @param {Positive|Object} [order] The order of the chebyshev polynomial. Normal range between 1-100. \n\t\t\t *  @example\n\t\t\t * //create a new cheby\n\t\t\t * var cheby = new Tone.Chebyshev(50);\n\t\t\t * //create a monosynth connected to our cheby\n\t\t\t * synth = new Tone.MonoSynth().connect(cheby);\n\t\t\t */\n\t\t    Tone.Chebyshev = function () {\n\t\t        var options = this.optionsObject(arguments, ['order'], Tone.Chebyshev.defaults);\n\t\t        Tone.Effect.call(this, options);\n\t\t        /**\n\t\t\t\t *  @type {WaveShaperNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._shaper = new Tone.WaveShaper(4096);\n\t\t        /**\n\t\t\t\t * holds onto the order of the filter\n\t\t\t\t * @type {number}\n\t\t\t\t * @private\n\t\t\t\t */\n\t\t        this._order = options.order;\n\t\t        this.connectEffect(this._shaper);\n\t\t        this.order = options.order;\n\t\t        this.oversample = options.oversample;\n\t\t    };\n\t\t    Tone.extend(Tone.Chebyshev, Tone.Effect);\n\t\t    /**\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.Chebyshev.defaults = {\n\t\t        'order': 1,\n\t\t        'oversample': 'none'\n\t\t    };\n\t\t    /**\n\t\t\t *  get the coefficient for that degree\n\t\t\t *  @param {number} x the x value\n\t\t\t *  @param   {number} degree \n\t\t\t *  @param {Object} memo memoize the computed value. \n\t\t\t *                       this speeds up computation greatly. \n\t\t\t *  @return  {number}       the coefficient \n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Chebyshev.prototype._getCoefficient = function (x, degree, memo) {\n\t\t        if (memo.hasOwnProperty(degree)) {\n\t\t            return memo[degree];\n\t\t        } else if (degree === 0) {\n\t\t            memo[degree] = 0;\n\t\t        } else if (degree === 1) {\n\t\t            memo[degree] = x;\n\t\t        } else {\n\t\t            memo[degree] = 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo);\n\t\t        }\n\t\t        return memo[degree];\n\t\t    };\n\t\t    /**\n\t\t\t * The order of the Chebyshev polynomial which creates\n\t\t\t * the equation which is applied to the incoming \n\t\t\t * signal through a Tone.WaveShaper. The equations\n\t\t\t * are in the form:<br>\n\t\t\t * order 2: 2x^2 + 1<br>\n\t\t\t * order 3: 4x^3 + 3x <br>\n\t\t\t * @memberOf Tone.Chebyshev#\n\t\t\t * @type {Positive}\n\t\t\t * @name order\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Chebyshev.prototype, 'order', {\n\t\t        get: function () {\n\t\t            return this._order;\n\t\t        },\n\t\t        set: function (order) {\n\t\t            this._order = order;\n\t\t            var curve = new Array(4096);\n\t\t            var len = curve.length;\n\t\t            for (var i = 0; i < len; ++i) {\n\t\t                var x = i * 2 / len - 1;\n\t\t                if (x === 0) {\n\t\t                    //should output 0 when input is 0\n\t\t                    curve[i] = 0;\n\t\t                } else {\n\t\t                    curve[i] = this._getCoefficient(x, order, {});\n\t\t                }\n\t\t            }\n\t\t            this._shaper.curve = curve;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t\t * @memberOf Tone.Chebyshev#\n\t\t\t * @type {string}\n\t\t\t * @name oversample\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Chebyshev.prototype, 'oversample', {\n\t\t        get: function () {\n\t\t            return this._shaper.oversample;\n\t\t        },\n\t\t        set: function (oversampling) {\n\t\t            this._shaper.oversample = oversampling;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.Chebyshev} this\n\t\t\t */\n\t\t    Tone.Chebyshev.prototype.dispose = function () {\n\t\t        Tone.Effect.prototype.dispose.call(this);\n\t\t        this._shaper.dispose();\n\t\t        this._shaper = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Chebyshev;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R. \n\t\t\t *\n\t\t\t *\t@constructor\n\t\t\t *\t@extends {Tone.Effect}\n\t\t\t */\n\t\t    Tone.StereoEffect = function () {\n\t\t        this.createInsOuts(1, 1);\n\t\t        //get the defaults\n\t\t        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);\n\t\t        /**\n\t\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t\t *  @type {Tone.CrossFade}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t\t        /**\n\t\t\t\t *  The wet control, i.e. how much of the effected\n\t\t\t\t *  will pass through to the output. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.wet = this._dryWet.fade;\n\t\t        /**\n\t\t\t\t *  then split it\n\t\t\t\t *  @type {Tone.Split}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._split = new Tone.Split();\n\t\t        /**\n\t\t\t\t *  the effects send LEFT\n\t\t\t\t *  @type {GainNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.effectSendL = this._split.left;\n\t\t        /**\n\t\t\t\t *  the effects send RIGHT\n\t\t\t\t *  @type {GainNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.effectSendR = this._split.right;\n\t\t        /**\n\t\t\t\t *  the stereo effect merger\n\t\t\t\t *  @type {Tone.Merge}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._merge = new Tone.Merge();\n\t\t        /**\n\t\t\t\t *  the effect return LEFT\n\t\t\t\t *  @type {GainNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.effectReturnL = this._merge.left;\n\t\t        /**\n\t\t\t\t *  the effect return RIGHT\n\t\t\t\t *  @type {GainNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.effectReturnR = this._merge.right;\n\t\t        //connections\n\t\t        this.input.connect(this._split);\n\t\t        //dry wet connections\n\t\t        this.input.connect(this._dryWet, 0, 0);\n\t\t        this._merge.connect(this._dryWet, 0, 1);\n\t\t        this._dryWet.connect(this.output);\n\t\t        this._readOnly(['wet']);\n\t\t    };\n\t\t    Tone.extend(Tone.StereoEffect, Tone.Effect);\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.StereoEffect} this\n\t\t\t */\n\t\t    Tone.StereoEffect.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._dryWet.dispose();\n\t\t        this._dryWet = null;\n\t\t        this._split.dispose();\n\t\t        this._split = null;\n\t\t        this._merge.dispose();\n\t\t        this._merge = null;\n\t\t        this.effectSendL = null;\n\t\t        this.effectSendR = null;\n\t\t        this.effectReturnL = null;\n\t\t        this.effectReturnR = null;\n\t\t        this._writable(['wet']);\n\t\t        this.wet = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.StereoEffect;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t * \t@class  Tone.FeedbackEffect provides a loop between an \n\t\t\t * \t        audio source and its own output. This is a base-class\n\t\t\t * \t        for feedback effects. \n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Effect}\n\t\t\t *  @param {NormalRange|Object} [feedback] The initial feedback value.\n\t\t\t */\n\t\t    Tone.FeedbackEffect = function () {\n\t\t        var options = this.optionsObject(arguments, ['feedback']);\n\t\t        options = this.defaultArg(options, Tone.FeedbackEffect.defaults);\n\t\t        Tone.Effect.call(this, options);\n\t\t        /**\n\t\t\t\t *  the gain which controls the feedback\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._feedbackGain = new Tone.Gain(options.feedback, Tone.Type.NormalRange);\n\t\t        /**\n\t\t\t\t *  The amount of signal which is fed back into the effect input. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.feedback = this._feedbackGain.gain;\n\t\t        //the feedback loop\n\t\t        this.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t\t        this._readOnly(['feedback']);\n\t\t    };\n\t\t    Tone.extend(Tone.FeedbackEffect, Tone.Effect);\n\t\t    /**\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.FeedbackEffect.defaults = { 'feedback': 0.125 };\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.FeedbackEffect} this\n\t\t\t */\n\t\t    Tone.FeedbackEffect.prototype.dispose = function () {\n\t\t        Tone.Effect.prototype.dispose.call(this);\n\t\t        this._writable(['feedback']);\n\t\t        this._feedbackGain.dispose();\n\t\t        this._feedbackGain = null;\n\t\t        this.feedback = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.FeedbackEffect;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Just like a stereo feedback effect, but the feedback is routed from left to right\n\t\t\t *         and right to left instead of on the same channel.\n\t\t\t *\n\t\t\t *\t@constructor\n\t\t\t *\t@extends {Tone.FeedbackEffect}\n\t\t\t */\n\t\t    Tone.StereoXFeedbackEffect = function () {\n\t\t        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);\n\t\t        Tone.StereoEffect.call(this, options);\n\t\t        /**\n\t\t\t\t *  The amount of feedback from the output\n\t\t\t\t *  back into the input of the effect (routed\n\t\t\t\t *  across left and right channels).\n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t\t        /**\n\t\t\t\t *  the left side feeback\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._feedbackLR = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  the right side feeback\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._feedbackRL = new Tone.Gain();\n\t\t        //connect it up\n\t\t        this.effectReturnL.chain(this._feedbackLR, this.effectSendR);\n\t\t        this.effectReturnR.chain(this._feedbackRL, this.effectSendL);\n\t\t        this.feedback.fan(this._feedbackLR.gain, this._feedbackRL.gain);\n\t\t        this._readOnly(['feedback']);\n\t\t    };\n\t\t    Tone.extend(Tone.StereoXFeedbackEffect, Tone.FeedbackEffect);\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.StereoXFeedbackEffect} this\n\t\t\t */\n\t\t    Tone.StereoXFeedbackEffect.prototype.dispose = function () {\n\t\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t\t        this._writable(['feedback']);\n\t\t        this.feedback.dispose();\n\t\t        this.feedback = null;\n\t\t        this._feedbackLR.dispose();\n\t\t        this._feedbackLR = null;\n\t\t        this._feedbackRL.dispose();\n\t\t        this._feedbackRL = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.StereoXFeedbackEffect;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.Chorus is a stereo chorus effect with feedback composed of \n\t\t\t *         a left and right delay with a Tone.LFO applied to the delayTime of each channel. \n\t\t\t *         Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n\t\t\t *         Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n\t\t\t *\n\t\t\t *\t@constructor\n\t\t\t *\t@extends {Tone.StereoXFeedbackEffect}\n\t\t\t *\t@param {Frequency|Object} [frequency] The frequency of the LFO.\n\t\t\t *\t@param {Milliseconds} [delayTime] The delay of the chorus effect in ms. \n\t\t\t *\t@param {NormalRange} [depth] The depth of the chorus.\n\t\t\t *\t@example\n\t\t\t * var chorus = new Tone.Chorus(4, 2.5, 0.5);\n\t\t\t * var synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);\n\t\t\t * synth.triggerAttackRelease([\"C3\",\"E3\",\"G3\"], \"8n\");\n\t\t\t */\n\t\t    Tone.Chorus = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'frequency',\n\t\t            'delayTime',\n\t\t            'depth'\n\t\t        ], Tone.Chorus.defaults);\n\t\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t\t        /**\n\t\t\t\t *  the depth of the chorus\n\t\t\t\t *  @type {number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._depth = options.depth;\n\t\t        /**\n\t\t\t\t *  the delayTime\n\t\t\t\t *  @type {number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._delayTime = options.delayTime / 1000;\n\t\t        /**\n\t\t\t\t *  the lfo which controls the delayTime\n\t\t\t\t *  @type {Tone.LFO}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lfoL = new Tone.LFO({\n\t\t            'frequency': options.frequency,\n\t\t            'min': 0,\n\t\t            'max': 1\n\t\t        });\n\t\t        /**\n\t\t\t\t *  another LFO for the right side with a 180 degree phase diff\n\t\t\t\t *  @type {Tone.LFO}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lfoR = new Tone.LFO({\n\t\t            'frequency': options.frequency,\n\t\t            'min': 0,\n\t\t            'max': 1,\n\t\t            'phase': 180\n\t\t        });\n\t\t        /**\n\t\t\t\t *  delay for left\n\t\t\t\t *  @type {Tone.Delay}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._delayNodeL = new Tone.Delay();\n\t\t        /**\n\t\t\t\t *  delay for right\n\t\t\t\t *  @type {Tone.Delay}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._delayNodeR = new Tone.Delay();\n\t\t        /**\n\t\t\t\t * The frequency of the LFO which modulates the delayTime. \n\t\t\t\t * @type {Frequency}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t\t        this.frequency = this._lfoL.frequency;\n\t\t        //connections\n\t\t        this.effectSendL.chain(this._delayNodeL, this.effectReturnL);\n\t\t        this.effectSendR.chain(this._delayNodeR, this.effectReturnR);\n\t\t        //and pass through to make the detune apparent\n\t\t        this.effectSendL.connect(this.effectReturnL);\n\t\t        this.effectSendR.connect(this.effectReturnR);\n\t\t        //lfo setup\n\t\t        this._lfoL.connect(this._delayNodeL.delayTime);\n\t\t        this._lfoR.connect(this._delayNodeR.delayTime);\n\t\t        //start the lfo\n\t\t        this._lfoL.start();\n\t\t        this._lfoR.start();\n\t\t        //have one LFO frequency control the other\n\t\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t\t        //set the initial values\n\t\t        this.depth = this._depth;\n\t\t        this.frequency.value = options.frequency;\n\t\t        this.type = options.type;\n\t\t        this._readOnly(['frequency']);\n\t\t        this.spread = options.spread;\n\t\t    };\n\t\t    Tone.extend(Tone.Chorus, Tone.StereoXFeedbackEffect);\n\t\t    /**\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.Chorus.defaults = {\n\t\t        'frequency': 1.5,\n\t\t        'delayTime': 3.5,\n\t\t        'depth': 0.7,\n\t\t        'feedback': 0.1,\n\t\t        'type': 'sine',\n\t\t        'spread': 180\n\t\t    };\n\t\t    /**\n\t\t\t * The depth of the effect. A depth of 1 makes the delayTime\n\t\t\t * modulate between 0 and 2*delayTime (centered around the delayTime). \n\t\t\t * @memberOf Tone.Chorus#\n\t\t\t * @type {NormalRange}\n\t\t\t * @name depth\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Chorus.prototype, 'depth', {\n\t\t        get: function () {\n\t\t            return this._depth;\n\t\t        },\n\t\t        set: function (depth) {\n\t\t            this._depth = depth;\n\t\t            var deviation = this._delayTime * depth;\n\t\t            this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n\t\t            this._lfoL.max = this._delayTime + deviation;\n\t\t            this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n\t\t            this._lfoR.max = this._delayTime + deviation;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The delayTime in milliseconds of the chorus. A larger delayTime\n\t\t\t * will give a more pronounced effect. Nominal range a delayTime\n\t\t\t * is between 2 and 20ms. \n\t\t\t * @memberOf Tone.Chorus#\n\t\t\t * @type {Milliseconds}\n\t\t\t * @name delayTime\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Chorus.prototype, 'delayTime', {\n\t\t        get: function () {\n\t\t            return this._delayTime * 1000;\n\t\t        },\n\t\t        set: function (delayTime) {\n\t\t            this._delayTime = delayTime / 1000;\n\t\t            this.depth = this._depth;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The oscillator type of the LFO. \n\t\t\t * @memberOf Tone.Chorus#\n\t\t\t * @type {string}\n\t\t\t * @name type\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Chorus.prototype, 'type', {\n\t\t        get: function () {\n\t\t            return this._lfoL.type;\n\t\t        },\n\t\t        set: function (type) {\n\t\t            this._lfoL.type = type;\n\t\t            this._lfoR.type = type;\n\t\t        }\n\t\t    });\n\t\t    /** \n\t\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t\t * @memberOf Tone.Chorus#\n\t\t\t * @type {Degrees}\n\t\t\t * @name spread\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Chorus.prototype, 'spread', {\n\t\t        get: function () {\n\t\t            return this._lfoR.phase - this._lfoL.phase;    //180\n\t\t        },\n\t\t        set: function (spread) {\n\t\t            this._lfoL.phase = 90 - spread / 2;\n\t\t            this._lfoR.phase = spread / 2 + 90;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.Chorus} this\n\t\t\t */\n\t\t    Tone.Chorus.prototype.dispose = function () {\n\t\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t\t        this._lfoL.dispose();\n\t\t        this._lfoL = null;\n\t\t        this._lfoR.dispose();\n\t\t        this._lfoR = null;\n\t\t        this._delayNodeL.dispose();\n\t\t        this._delayNodeL = null;\n\t\t        this._delayNodeR.dispose();\n\t\t        this._delayNodeR = null;\n\t\t        this._writable('frequency');\n\t\t        this.frequency = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Chorus;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.Convolver is a wrapper around the Native Web Audio \n\t\t\t *          [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n\t\t\t *          Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n\t\t\t *          [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n\t\t\t *  \n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Effect}\n\t\t\t *  @param {string|Tone.Buffer|Object} [url] The URL of the impulse response or the Tone.Buffer\n\t\t\t *                                           contianing the impulse response. \n\t\t\t *  @param {Function} onload The callback to invoke when the url is loaded.\n\t\t\t *  @example\n\t\t\t * //initializing the convolver with an impulse response\n\t\t\t * var convolver = new Tone.Convolver(\"./path/to/ir.wav\").toMaster();\n\t\t\t */\n\t\t    Tone.Convolver = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'url',\n\t\t            'onload'\n\t\t        ], Tone.Convolver.defaults);\n\t\t        Tone.Effect.call(this, options);\n\t\t        /**\n\t\t\t\t *  convolver node\n\t\t\t\t *  @type {ConvolverNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._convolver = this.context.createConvolver();\n\t\t        /**\n\t\t\t\t *  the convolution buffer\n\t\t\t\t *  @type {Tone.Buffer}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._buffer = new Tone.Buffer();\n\t\t        if (this.isString(options.url)) {\n\t\t            this._buffer.load(options.url, function (buffer) {\n\t\t                this.buffer = buffer;\n\t\t                options.onload();\n\t\t            }.bind(this));\n\t\t        } else if (options.url) {\n\t\t            this.buffer = options.url;\n\t\t            options.onload();\n\t\t        }\n\t\t        this.connectEffect(this._convolver);\n\t\t    };\n\t\t    Tone.extend(Tone.Convolver, Tone.Effect);\n\t\t    /**\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t\t    Tone.Convolver.defaults = { 'onload': Tone.noOp };\n\t\t    /**\n\t\t\t *  The convolver's buffer\n\t\t\t *  @memberOf Tone.Convolver#\n\t\t\t *  @type {AudioBuffer}\n\t\t\t *  @name buffer\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Convolver.prototype, 'buffer', {\n\t\t        get: function () {\n\t\t            return this._buffer.get();\n\t\t        },\n\t\t        set: function (buffer) {\n\t\t            this._buffer.set(buffer);\n\t\t            this._convolver.buffer = this._buffer.get();\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Load an impulse response url as an audio buffer.\n\t\t\t *  Decodes the audio asynchronously and invokes\n\t\t\t *  the callback once the audio buffer loads.\n\t\t\t *  @param {string} url The url of the buffer to load.\n\t\t\t *                      filetype support depends on the\n\t\t\t *                      browser.\n\t\t\t *  @param  {function=} callback\n\t\t\t *  @returns {Promise}\n\t\t\t */\n\t\t    Tone.Convolver.prototype.load = function (url, callback) {\n\t\t        return this._buffer.load(url, function (buff) {\n\t\t            this.buffer = buff;\n\t\t            if (callback) {\n\t\t                callback();\n\t\t            }\n\t\t        }.bind(this));\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.Convolver} this\n\t\t\t */\n\t\t    Tone.Convolver.prototype.dispose = function () {\n\t\t        Tone.Effect.prototype.dispose.call(this);\n\t\t        this._convolver.disconnect();\n\t\t        this._convolver = null;\n\t\t        this._buffer.dispose();\n\t\t        this._buffer = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Convolver;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.Distortion is a simple distortion effect using Tone.WaveShaper.\n\t\t\t *         Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).\n\t\t\t *\n\t\t\t *  @extends {Tone.Effect}\n\t\t\t *  @constructor\n\t\t\t *  @param {Number|Object} [distortion] The amount of distortion (nominal range of 0-1)\n\t\t\t *  @example\n\t\t\t * var dist = new Tone.Distortion(0.8).toMaster();\n\t\t\t * var fm = new Tone.SimpleFM().connect(dist);\n\t\t\t * //this sounds good on bass notes\n\t\t\t * fm.triggerAttackRelease(\"A1\", \"8n\");\n\t\t\t */\n\t\t    Tone.Distortion = function () {\n\t\t        var options = this.optionsObject(arguments, ['distortion'], Tone.Distortion.defaults);\n\t\t        Tone.Effect.call(this, options);\n\t\t        /**\n\t\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._shaper = new Tone.WaveShaper(4096);\n\t\t        /**\n\t\t\t\t * holds the distortion amount\n\t\t\t\t * @type {number}\n\t\t\t\t * @private\n\t\t\t\t */\n\t\t        this._distortion = options.distortion;\n\t\t        this.connectEffect(this._shaper);\n\t\t        this.distortion = options.distortion;\n\t\t        this.oversample = options.oversample;\n\t\t    };\n\t\t    Tone.extend(Tone.Distortion, Tone.Effect);\n\t\t    /**\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.Distortion.defaults = {\n\t\t        'distortion': 0.4,\n\t\t        'oversample': 'none'\n\t\t    };\n\t\t    /**\n\t\t\t * The amount of distortion.\n\t\t\t * @memberOf Tone.Distortion#\n\t\t\t * @type {NormalRange}\n\t\t\t * @name distortion\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Distortion.prototype, 'distortion', {\n\t\t        get: function () {\n\t\t            return this._distortion;\n\t\t        },\n\t\t        set: function (amount) {\n\t\t            this._distortion = amount;\n\t\t            var k = amount * 100;\n\t\t            var deg = Math.PI / 180;\n\t\t            this._shaper.setMap(function (x) {\n\t\t                if (Math.abs(x) < 0.001) {\n\t\t                    //should output 0 when input is 0\n\t\t                    return 0;\n\t\t                } else {\n\t\t                    return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n\t\t                }\n\t\t            });\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t\t * @memberOf Tone.Distortion#\n\t\t\t * @type {string}\n\t\t\t * @name oversample\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Distortion.prototype, 'oversample', {\n\t\t        get: function () {\n\t\t            return this._shaper.oversample;\n\t\t        },\n\t\t        set: function (oversampling) {\n\t\t            this._shaper.oversample = oversampling;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.Distortion} this\n\t\t\t */\n\t\t    Tone.Distortion.prototype.dispose = function () {\n\t\t        Tone.Effect.prototype.dispose.call(this);\n\t\t        this._shaper.dispose();\n\t\t        this._shaper = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Distortion;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.FeedbackDelay is a DelayNode in which part of output\n\t\t\t *          signal is fed back into the delay. \n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.FeedbackEffect}\n\t\t\t *  @param {Time|Object} [delayTime] The delay applied to the incoming signal. \n\t\t\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t\t\t *                            is fed back through the delay.\n\t\t\t *  @example\n\t\t\t * var feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toMaster();\n\t\t\t * var tom = new Tone.DrumSynth({\n\t\t\t * \t\"octaves\" : 4,\n\t\t\t * \t\"pitchDecay\" : 0.1\n\t\t\t * }).connect(feedbackDelay);\n\t\t\t * tom.triggerAttackRelease(\"A2\",\"32n\");\n\t\t\t */\n\t\t    Tone.FeedbackDelay = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'delayTime',\n\t\t            'feedback'\n\t\t        ], Tone.FeedbackDelay.defaults);\n\t\t        Tone.FeedbackEffect.call(this, options);\n\t\t        /**\n\t\t\t\t *  the delay node\n\t\t\t\t *  @type {Tone.Delay}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._delayNode = new Tone.Delay(options.delayTime);\n\t\t        /**\n\t\t\t\t *  The delayTime of the DelayNode. \n\t\t\t\t *  @type {Time}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.delayTime = this._delayNode.delayTime;\n\t\t        // connect it up\n\t\t        this.connectEffect(this._delayNode);\n\t\t        this._readOnly(['delayTime']);\n\t\t    };\n\t\t    Tone.extend(Tone.FeedbackDelay, Tone.FeedbackEffect);\n\t\t    /**\n\t\t\t *  The default values. \n\t\t\t *  @const\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.FeedbackDelay.defaults = { 'delayTime': 0.25 };\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.FeedbackDelay} this\n\t\t\t */\n\t\t    Tone.FeedbackDelay.prototype.dispose = function () {\n\t\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t\t        this._delayNode.dispose();\n\t\t        this._delayNode = null;\n\t\t        this._writable(['delayTime']);\n\t\t        this.delayTime = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.FeedbackDelay;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  an array of comb filter delay values from Freeverb implementation\n\t\t\t *  @static\n\t\t\t *  @private\n\t\t\t *  @type {Array}\n\t\t\t */\n\t\t    var combFilterTunings = [\n\t\t        1557 / 44100,\n\t\t        1617 / 44100,\n\t\t        1491 / 44100,\n\t\t        1422 / 44100,\n\t\t        1277 / 44100,\n\t\t        1356 / 44100,\n\t\t        1188 / 44100,\n\t\t        1116 / 44100\n\t\t    ];\n\t\t    /**\n\t\t\t *  an array of allpass filter frequency values from Freeverb implementation\n\t\t\t *  @private\n\t\t\t *  @static\n\t\t\t *  @type {Array}\n\t\t\t */\n\t\t    var allpassFilterFrequencies = [\n\t\t        225,\n\t\t        556,\n\t\t        441,\n\t\t        341\n\t\t    ];\n\t\t    /**\n\t\t\t *  @class Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n\t\t\t *         Read more on reverb on [SoundOnSound](http://www.soundonsound.com/sos/may00/articles/reverb.htm).\n\t\t\t *\n\t\t\t *  @extends {Tone.Effect}\n\t\t\t *  @constructor\n\t\t\t *  @param {NormalRange|Object} [roomSize] Correlated to the decay time. \n\t\t\t *  @param {Frequency} [dampening] The cutoff frequency of a lowpass filter as part \n\t\t\t *                                 of the reverb. \n\t\t\t *  @example\n\t\t\t * var freeverb = new Tone.Freeverb().toMaster();\n\t\t\t * freeverb.dampening.value = 1000;\n\t\t\t * //routing synth through the reverb\n\t\t\t * var synth = new Tone.AMSynth().connect(freeverb);\n\t\t\t */\n\t\t    Tone.Freeverb = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'roomSize',\n\t\t            'dampening'\n\t\t        ], Tone.Freeverb.defaults);\n\t\t        Tone.StereoEffect.call(this, options);\n\t\t        /**\n\t\t\t\t *  The roomSize value between. A larger roomSize\n\t\t\t\t *  will result in a longer decay. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t\t        /**\n\t\t\t\t *  The amount of dampening of the reverberant signal. \n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.dampening = new Tone.Signal(options.dampening, Tone.Type.Frequency);\n\t\t        /**\n\t\t\t\t *  the comb filters\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._combFilters = [];\n\t\t        /**\n\t\t\t\t *  the allpass filters on the left\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._allpassFiltersL = [];\n\t\t        /**\n\t\t\t\t *  the allpass filters on the right\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._allpassFiltersR = [];\n\t\t        //make the allpass filters on the right\n\t\t        for (var l = 0; l < allpassFilterFrequencies.length; l++) {\n\t\t            var allpassL = this.context.createBiquadFilter();\n\t\t            allpassL.type = 'allpass';\n\t\t            allpassL.frequency.value = allpassFilterFrequencies[l];\n\t\t            this._allpassFiltersL.push(allpassL);\n\t\t        }\n\t\t        //make the allpass filters on the left\n\t\t        for (var r = 0; r < allpassFilterFrequencies.length; r++) {\n\t\t            var allpassR = this.context.createBiquadFilter();\n\t\t            allpassR.type = 'allpass';\n\t\t            allpassR.frequency.value = allpassFilterFrequencies[r];\n\t\t            this._allpassFiltersR.push(allpassR);\n\t\t        }\n\t\t        //make the comb filters\n\t\t        for (var c = 0; c < combFilterTunings.length; c++) {\n\t\t            var lfpf = new Tone.LowpassCombFilter(combFilterTunings[c]);\n\t\t            if (c < combFilterTunings.length / 2) {\n\t\t                this.effectSendL.chain(lfpf, this._allpassFiltersL[0]);\n\t\t            } else {\n\t\t                this.effectSendR.chain(lfpf, this._allpassFiltersR[0]);\n\t\t            }\n\t\t            this.roomSize.connect(lfpf.resonance);\n\t\t            this.dampening.connect(lfpf.dampening);\n\t\t            this._combFilters.push(lfpf);\n\t\t        }\n\t\t        //chain the allpass filters togetehr\n\t\t        this.connectSeries.apply(this, this._allpassFiltersL);\n\t\t        this.connectSeries.apply(this, this._allpassFiltersR);\n\t\t        this._allpassFiltersL[this._allpassFiltersL.length - 1].connect(this.effectReturnL);\n\t\t        this._allpassFiltersR[this._allpassFiltersR.length - 1].connect(this.effectReturnR);\n\t\t        this._readOnly([\n\t\t            'roomSize',\n\t\t            'dampening'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.Freeverb, Tone.StereoEffect);\n\t\t    /**\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.Freeverb.defaults = {\n\t\t        'roomSize': 0.7,\n\t\t        'dampening': 3000\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.Freeverb} this\n\t\t\t */\n\t\t    Tone.Freeverb.prototype.dispose = function () {\n\t\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t\t        for (var al = 0; al < this._allpassFiltersL.length; al++) {\n\t\t            this._allpassFiltersL[al].disconnect();\n\t\t            this._allpassFiltersL[al] = null;\n\t\t        }\n\t\t        this._allpassFiltersL = null;\n\t\t        for (var ar = 0; ar < this._allpassFiltersR.length; ar++) {\n\t\t            this._allpassFiltersR[ar].disconnect();\n\t\t            this._allpassFiltersR[ar] = null;\n\t\t        }\n\t\t        this._allpassFiltersR = null;\n\t\t        for (var cf = 0; cf < this._combFilters.length; cf++) {\n\t\t            this._combFilters[cf].dispose();\n\t\t            this._combFilters[cf] = null;\n\t\t        }\n\t\t        this._combFilters = null;\n\t\t        this._writable([\n\t\t            'roomSize',\n\t\t            'dampening'\n\t\t        ]);\n\t\t        this.roomSize.dispose();\n\t\t        this.roomSize = null;\n\t\t        this.dampening.dispose();\n\t\t        this.dampening = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Freeverb;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  an array of the comb filter delay time values\n\t\t\t *  @private\n\t\t\t *  @static\n\t\t\t *  @type {Array}\n\t\t\t */\n\t\t    var combFilterDelayTimes = [\n\t\t        1687 / 25000,\n\t\t        1601 / 25000,\n\t\t        2053 / 25000,\n\t\t        2251 / 25000\n\t\t    ];\n\t\t    /**\n\t\t\t *  the resonances of each of the comb filters\n\t\t\t *  @private\n\t\t\t *  @static\n\t\t\t *  @type {Array}\n\t\t\t */\n\t\t    var combFilterResonances = [\n\t\t        0.773,\n\t\t        0.802,\n\t\t        0.753,\n\t\t        0.733\n\t\t    ];\n\t\t    /**\n\t\t\t *  the allpass filter frequencies\n\t\t\t *  @private\n\t\t\t *  @static\n\t\t\t *  @type {Array}\n\t\t\t */\n\t\t    var allpassFilterFreqs = [\n\t\t        347,\n\t\t        113,\n\t\t        37\n\t\t    ];\n\t\t    /**\n\t\t\t *  @class Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n\t\t\t *         tuned by John Chowning in 1970.\n\t\t\t *         It is made up of three allpass filters and four Tone.FeedbackCombFilter. \n\t\t\t *         \n\t\t\t *\n\t\t\t *  @extends {Tone.Effect}\n\t\t\t *  @constructor\n\t\t\t *  @param {NormalRange|Object} [roomSize] Coorelates to the decay time.\n\t\t\t *  @example\n\t\t\t * var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);\n\t\t\t * var delay = new Tone.FeedbackDelay(0.5); \n\t\t\t * //connecting the synth to reverb through delay\n\t\t\t * var synth = new Tone.DuoSynth().chain(delay, reverb);\n\t\t\t * synth.triggerAttackRelease(\"A4\",\"8n\");\n\t\t\t */\n\t\t    Tone.JCReverb = function () {\n\t\t        var options = this.optionsObject(arguments, ['roomSize'], Tone.JCReverb.defaults);\n\t\t        Tone.StereoEffect.call(this, options);\n\t\t        /**\n\t\t\t\t *  room size control values between [0,1]\n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t\t        /**\n\t\t\t\t *  scale the room size\n\t\t\t\t *  @type {Tone.Scale}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._scaleRoomSize = new Tone.Scale(-0.733, 0.197);\n\t\t        /**\n\t\t\t\t *  a series of allpass filters\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._allpassFilters = [];\n\t\t        /**\n\t\t\t\t *  parallel feedback comb filters\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._feedbackCombFilters = [];\n\t\t        //make the allpass filters\n\t\t        for (var af = 0; af < allpassFilterFreqs.length; af++) {\n\t\t            var allpass = this.context.createBiquadFilter();\n\t\t            allpass.type = 'allpass';\n\t\t            allpass.frequency.value = allpassFilterFreqs[af];\n\t\t            this._allpassFilters.push(allpass);\n\t\t        }\n\t\t        //and the comb filters\n\t\t        for (var cf = 0; cf < combFilterDelayTimes.length; cf++) {\n\t\t            var fbcf = new Tone.FeedbackCombFilter(combFilterDelayTimes[cf], 0.1);\n\t\t            this._scaleRoomSize.connect(fbcf.resonance);\n\t\t            fbcf.resonance.value = combFilterResonances[cf];\n\t\t            this._allpassFilters[this._allpassFilters.length - 1].connect(fbcf);\n\t\t            if (cf < combFilterDelayTimes.length / 2) {\n\t\t                fbcf.connect(this.effectReturnL);\n\t\t            } else {\n\t\t                fbcf.connect(this.effectReturnR);\n\t\t            }\n\t\t            this._feedbackCombFilters.push(fbcf);\n\t\t        }\n\t\t        //chain the allpass filters together\n\t\t        this.roomSize.connect(this._scaleRoomSize);\n\t\t        this.connectSeries.apply(this, this._allpassFilters);\n\t\t        this.effectSendL.connect(this._allpassFilters[0]);\n\t\t        this.effectSendR.connect(this._allpassFilters[0]);\n\t\t        this._readOnly(['roomSize']);\n\t\t    };\n\t\t    Tone.extend(Tone.JCReverb, Tone.StereoEffect);\n\t\t    /**\n\t\t\t *  the default values\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.JCReverb.defaults = { 'roomSize': 0.5 };\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.JCReverb} this\n\t\t\t */\n\t\t    Tone.JCReverb.prototype.dispose = function () {\n\t\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t\t        for (var apf = 0; apf < this._allpassFilters.length; apf++) {\n\t\t            this._allpassFilters[apf].disconnect();\n\t\t            this._allpassFilters[apf] = null;\n\t\t        }\n\t\t        this._allpassFilters = null;\n\t\t        for (var fbcf = 0; fbcf < this._feedbackCombFilters.length; fbcf++) {\n\t\t            this._feedbackCombFilters[fbcf].dispose();\n\t\t            this._feedbackCombFilters[fbcf] = null;\n\t\t        }\n\t\t        this._feedbackCombFilters = null;\n\t\t        this._writable(['roomSize']);\n\t\t        this.roomSize.dispose();\n\t\t        this.roomSize = null;\n\t\t        this._scaleRoomSize.dispose();\n\t\t        this._scaleRoomSize = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.JCReverb;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t\t *         (which comes out of both the left and the right channel) \n\t\t\t *         and the 'side' (which only comes out of the the side channels) \n\t\t\t *         and effects them separately before being recombined.\n\t\t\t *         Applies a Mid/Side seperation and recombination.\n\t\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t\t *         <br><br>\n\t\t\t *         This is a base-class for Mid/Side Effects. \n\t\t\t *\n\t\t\t *  @extends {Tone.Effect}\n\t\t\t *  @constructor\n\t\t\t */\n\t\t    Tone.MidSideEffect = function () {\n\t\t        Tone.Effect.apply(this, arguments);\n\t\t        /**\n\t\t\t\t *  The mid/side split\n\t\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._midSideSplit = new Tone.MidSideSplit();\n\t\t        /**\n\t\t\t\t *  The mid/side merge\n\t\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._midSideMerge = new Tone.MidSideMerge();\n\t\t        /**\n\t\t\t\t *  The mid send. Connect to mid processing\n\t\t\t\t *  @type {Tone.Expr}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.midSend = this._midSideSplit.mid;\n\t\t        /**\n\t\t\t\t *  The side send. Connect to side processing\n\t\t\t\t *  @type {Tone.Expr}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.sideSend = this._midSideSplit.side;\n\t\t        /**\n\t\t\t\t *  The mid return connection\n\t\t\t\t *  @type {GainNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.midReturn = this._midSideMerge.mid;\n\t\t        /**\n\t\t\t\t *  The side return connection\n\t\t\t\t *  @type {GainNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.sideReturn = this._midSideMerge.side;\n\t\t        //the connections\n\t\t        this.effectSend.connect(this._midSideSplit);\n\t\t        this._midSideMerge.connect(this.effectReturn);\n\t\t    };\n\t\t    Tone.extend(Tone.MidSideEffect, Tone.Effect);\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.MidSideEffect} this\n\t\t\t */\n\t\t    Tone.MidSideEffect.prototype.dispose = function () {\n\t\t        Tone.Effect.prototype.dispose.call(this);\n\t\t        this._midSideSplit.dispose();\n\t\t        this._midSideSplit = null;\n\t\t        this._midSideMerge.dispose();\n\t\t        this._midSideMerge = null;\n\t\t        this.midSend = null;\n\t\t        this.sideSend = null;\n\t\t        this.midReturn = null;\n\t\t        this.sideReturn = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.MidSideEffect;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.Phaser is a phaser effect. Phasers work by changing the phase\n\t\t\t *         of different frequency components of an incoming signal. Read more on \n\t\t\t *         [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)). \n\t\t\t *         Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n\t\t\t *\n\t\t\t *\t@extends {Tone.StereoEffect}\n\t\t\t *\t@constructor\n\t\t\t *\t@param {Frequency|Object} [frequency] The speed of the phasing. \n\t\t\t *\t@param {number} [octaves] The octaves of the effect. \n\t\t\t *\t@param {Frequency} [baseFrequency] The base frequency of the filters. \n\t\t\t *\t@example\n\t\t\t * var phaser = new Tone.Phaser({\n\t\t\t * \t\"frequency\" : 15, \n\t\t\t * \t\"octaves\" : 5, \n\t\t\t * \t\"baseFrequency\" : 1000\n\t\t\t * }).toMaster();\n\t\t\t * var synth = new Tone.FMSynth().connect(phaser);\n\t\t\t * synth.triggerAttackRelease(\"E3\", \"2n\");\n\t\t\t */\n\t\t    Tone.Phaser = function () {\n\t\t        //set the defaults\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'frequency',\n\t\t            'octaves',\n\t\t            'baseFrequency'\n\t\t        ], Tone.Phaser.defaults);\n\t\t        Tone.StereoEffect.call(this, options);\n\t\t        /**\n\t\t\t\t *  the lfo which controls the frequency on the left side\n\t\t\t\t *  @type {Tone.LFO}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lfoL = new Tone.LFO(options.frequency, 0, 1);\n\t\t        /**\n\t\t\t\t *  the lfo which controls the frequency on the right side\n\t\t\t\t *  @type {Tone.LFO}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lfoR = new Tone.LFO(options.frequency, 0, 1);\n\t\t        this._lfoR.phase = 180;\n\t\t        /**\n\t\t\t\t *  the base modulation frequency\n\t\t\t\t *  @type {number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._baseFrequency = options.baseFrequency;\n\t\t        /**\n\t\t\t\t *  the octaves of the phasing\n\t\t\t\t *  @type {number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._octaves = options.octaves;\n\t\t        /**\n\t\t\t\t *  The quality factor of the filters\n\t\t\t\t *  @type {Positive}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.Q = new Tone.Signal(options.Q, Tone.Type.Positive);\n\t\t        /**\n\t\t\t\t *  the array of filters for the left side\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._filtersL = this._makeFilters(options.stages, this._lfoL, this.Q);\n\t\t        /**\n\t\t\t\t *  the array of filters for the left side\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._filtersR = this._makeFilters(options.stages, this._lfoR, this.Q);\n\t\t        /**\n\t\t\t\t * the frequency of the effect\n\t\t\t\t * @type {Tone.Signal}\n\t\t\t\t */\n\t\t        this.frequency = this._lfoL.frequency;\n\t\t        this.frequency.value = options.frequency;\n\t\t        //connect them up\n\t\t        this.effectSendL.connect(this._filtersL[0]);\n\t\t        this.effectSendR.connect(this._filtersR[0]);\n\t\t        this._filtersL[options.stages - 1].connect(this.effectReturnL);\n\t\t        this._filtersR[options.stages - 1].connect(this.effectReturnR);\n\t\t        //control the frequency with one LFO\n\t\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t\t        //set the options\n\t\t        this.baseFrequency = options.baseFrequency;\n\t\t        this.octaves = options.octaves;\n\t\t        //start the lfo\n\t\t        this._lfoL.start();\n\t\t        this._lfoR.start();\n\t\t        this._readOnly([\n\t\t            'frequency',\n\t\t            'Q'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.Phaser, Tone.StereoEffect);\n\t\t    /**\n\t\t\t *  defaults\n\t\t\t *  @static\n\t\t\t *  @type {object}\n\t\t\t */\n\t\t    Tone.Phaser.defaults = {\n\t\t        'frequency': 0.5,\n\t\t        'octaves': 3,\n\t\t        'stages': 10,\n\t\t        'Q': 10,\n\t\t        'baseFrequency': 350\n\t\t    };\n\t\t    /**\n\t\t\t *  @param {number} stages\n\t\t\t *  @returns {Array} the number of filters all connected together\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Phaser.prototype._makeFilters = function (stages, connectToFreq, Q) {\n\t\t        var filters = new Array(stages);\n\t\t        //make all the filters\n\t\t        for (var i = 0; i < stages; i++) {\n\t\t            var filter = this.context.createBiquadFilter();\n\t\t            filter.type = 'allpass';\n\t\t            Q.connect(filter.Q);\n\t\t            connectToFreq.connect(filter.frequency);\n\t\t            filters[i] = filter;\n\t\t        }\n\t\t        this.connectSeries.apply(this, filters);\n\t\t        return filters;\n\t\t    };\n\t\t    /**\n\t\t\t * The number of octaves the phase goes above\n\t\t\t * the baseFrequency\n\t\t\t * @memberOf Tone.Phaser#\n\t\t\t * @type {Positive}\n\t\t\t * @name octaves\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Phaser.prototype, 'octaves', {\n\t\t        get: function () {\n\t\t            return this._octaves;\n\t\t        },\n\t\t        set: function (octaves) {\n\t\t            this._octaves = octaves;\n\t\t            var max = this._baseFrequency * Math.pow(2, octaves);\n\t\t            this._lfoL.max = max;\n\t\t            this._lfoR.max = max;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The the base frequency of the filters. \n\t\t\t * @memberOf Tone.Phaser#\n\t\t\t * @type {number}\n\t\t\t * @name baseFrequency\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Phaser.prototype, 'baseFrequency', {\n\t\t        get: function () {\n\t\t            return this._baseFrequency;\n\t\t        },\n\t\t        set: function (freq) {\n\t\t            this._baseFrequency = freq;\n\t\t            this._lfoL.min = freq;\n\t\t            this._lfoR.min = freq;\n\t\t            this.octaves = this._octaves;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.Phaser} this\n\t\t\t */\n\t\t    Tone.Phaser.prototype.dispose = function () {\n\t\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'frequency',\n\t\t            'Q'\n\t\t        ]);\n\t\t        this.Q.dispose();\n\t\t        this.Q = null;\n\t\t        this._lfoL.dispose();\n\t\t        this._lfoL = null;\n\t\t        this._lfoR.dispose();\n\t\t        this._lfoR = null;\n\t\t        for (var i = 0; i < this._filtersL.length; i++) {\n\t\t            this._filtersL[i].disconnect();\n\t\t            this._filtersL[i] = null;\n\t\t        }\n\t\t        this._filtersL = null;\n\t\t        for (var j = 0; j < this._filtersR.length; j++) {\n\t\t            this._filtersR[j].disconnect();\n\t\t            this._filtersR[j] = null;\n\t\t        }\n\t\t        this._filtersR = null;\n\t\t        this.frequency = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Phaser;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.PingPongDelay is a feedback delay effect where the echo is heard\n\t\t\t *          first in one channel and next in the opposite channel. In a stereo\n\t\t\t *          system these are the right and left channels.\n\t\t\t *          PingPongDelay in more simplified terms is two Tone.FeedbackDelays \n\t\t\t *          with independent delay values. Each delay is routed to one channel\n\t\t\t *          (left or right), and the channel triggered second will always \n\t\t\t *          trigger at the same interval after the first.\n\t\t\t *\n\t\t\t * \t@constructor\n\t\t\t * \t@extends {Tone.StereoXFeedbackEffect}\n\t\t\t *  @param {Time|Object} [delayTime] The delayTime between consecutive echos.\n\t\t\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t\t\t *                                 is fed back through the delay.\n\t\t\t *  @example\n\t\t\t * var pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toMaster();\n\t\t\t * var drum = new Tone.DrumSynth().connect(pingPong);\n\t\t\t * drum.triggerAttackRelease(\"C4\", \"32n\");\n\t\t\t */\n\t\t    Tone.PingPongDelay = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'delayTime',\n\t\t            'feedback'\n\t\t        ], Tone.PingPongDelay.defaults);\n\t\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t\t        /**\n\t\t\t\t *  the delay node on the left side\n\t\t\t\t *  @type {Tone.Delay}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._leftDelay = new Tone.Delay(0, options.maxDelayTime);\n\t\t        /**\n\t\t\t\t *  the delay node on the right side\n\t\t\t\t *  @type {Tone.Delay}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._rightDelay = new Tone.Delay(0, options.maxDelayTime);\n\t\t        /**\n\t\t\t\t *  the predelay on the right side\n\t\t\t\t *  @type {Tone.Delay}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._rightPreDelay = new Tone.Delay(0, options.maxDelayTime);\n\t\t        /**\n\t\t\t\t *  the delay time signal\n\t\t\t\t *  @type {Time}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.delayTime = new Tone.Signal(options.delayTime, Tone.Type.Time);\n\t\t        //connect it up\n\t\t        this.effectSendL.chain(this._leftDelay, this.effectReturnL);\n\t\t        this.effectSendR.chain(this._rightPreDelay, this._rightDelay, this.effectReturnR);\n\t\t        this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n\t\t        //rearranged the feedback to be after the rightPreDelay\n\t\t        this._feedbackLR.disconnect();\n\t\t        this._feedbackLR.connect(this._rightDelay);\n\t\t        this._readOnly(['delayTime']);\n\t\t    };\n\t\t    Tone.extend(Tone.PingPongDelay, Tone.StereoXFeedbackEffect);\n\t\t    /**\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.PingPongDelay.defaults = {\n\t\t        'delayTime': 0.25,\n\t\t        'maxDelayTime': 1\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.PingPongDelay} this\n\t\t\t */\n\t\t    Tone.PingPongDelay.prototype.dispose = function () {\n\t\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t\t        this._leftDelay.dispose();\n\t\t        this._leftDelay = null;\n\t\t        this._rightDelay.dispose();\n\t\t        this._rightDelay = null;\n\t\t        this._rightPreDelay.dispose();\n\t\t        this._rightPreDelay = null;\n\t\t        this._writable(['delayTime']);\n\t\t        this.delayTime.dispose();\n\t\t        this.delayTime = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.PingPongDelay;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.PitchShift does near-realtime pitch shifting to the incoming signal. \n\t\t\t *         The effect is achieved by speeding up or slowing down the delayTime\n\t\t\t *         of a DelayNode using a sawtooth wave. \n\t\t\t *         Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n\t\t\t *         Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n\t\t\t *         \n\t\t\t *  @extends {Tone.FeedbackEffect}\n\t\t\t *  @param {Interval=} pitch The interval to transpose the incoming signal by. \n\t\t\t */\n\t\t    Tone.PitchShift = function () {\n\t\t        var options = this.optionsObject(arguments, ['pitch'], Tone.PitchShift.defaults);\n\t\t        Tone.FeedbackEffect.call(this, options);\n\t\t        /**\n\t\t\t\t *  The pitch signal\n\t\t\t\t *  @type  {Tone.Signal}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._frequency = new Tone.Signal(0);\n\t\t        /**\n\t\t\t\t *  Uses two DelayNodes to cover up the jump in\n\t\t\t\t *  the sawtooth wave. \n\t\t\t\t *  @type  {DelayNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._delayA = new Tone.Delay(0, 1);\n\t\t        /**\n\t\t\t\t *  The first LFO.\n\t\t\t\t *  @type  {Tone.LFO}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lfoA = new Tone.LFO({\n\t\t            'min': 0,\n\t\t            'max': 0.1,\n\t\t            'type': 'sawtooth'\n\t\t        }).connect(this._delayA.delayTime);\n\t\t        /**\n\t\t\t\t *  The second DelayNode\n\t\t\t\t *  @type  {DelayNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._delayB = new Tone.Delay(0, 1);\n\t\t        /**\n\t\t\t\t *  The first LFO.\n\t\t\t\t *  @type  {Tone.LFO}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lfoB = new Tone.LFO({\n\t\t            'min': 0,\n\t\t            'max': 0.1,\n\t\t            'type': 'sawtooth',\n\t\t            'phase': 180\n\t\t        }).connect(this._delayB.delayTime);\n\t\t        /**\n\t\t\t\t *  Crossfade quickly between the two delay lines\n\t\t\t\t *  to cover up the jump in the sawtooth wave\n\t\t\t\t *  @type  {Tone.CrossFade}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._crossFade = new Tone.CrossFade();\n\t\t        /**\n\t\t\t\t *  LFO which alternates between the two\n\t\t\t\t *  delay lines to cover up the disparity in the\n\t\t\t\t *  sawtooth wave. \n\t\t\t\t *  @type  {Tone.LFO}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._crossFadeLFO = new Tone.LFO({\n\t\t            'min': 0,\n\t\t            'max': 1,\n\t\t            'type': 'triangle',\n\t\t            'phase': 90\n\t\t        }).connect(this._crossFade.fade);\n\t\t        /**\n\t\t\t\t *  The delay node\n\t\t\t\t *  @type {Tone.Delay}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._feedbackDelay = new Tone.Delay(options.delayTime);\n\t\t        /**\n\t\t\t\t *  The amount of delay on the input signal\n\t\t\t\t *  @type {Time}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.delayTime = this._feedbackDelay.delayTime;\n\t\t        this._readOnly('delayTime');\n\t\t        /**\n\t\t\t\t *  Hold the current pitch\n\t\t\t\t *  @type {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._pitch = options.pitch;\n\t\t        /**\n\t\t\t\t *  Hold the current windowSize\n\t\t\t\t *  @type {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._windowSize = options.windowSize;\n\t\t        //connect the two delay lines up\n\t\t        this._delayA.connect(this._crossFade.a);\n\t\t        this._delayB.connect(this._crossFade.b);\n\t\t        //connect the frequency\n\t\t        this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n\t\t        //route the input\n\t\t        this.effectSend.fan(this._delayA, this._delayB);\n\t\t        this._crossFade.chain(this._feedbackDelay, this.effectReturn);\n\t\t        //start the LFOs at the same time\n\t\t        var now = this.now();\n\t\t        this._lfoA.start(now);\n\t\t        this._lfoB.start(now);\n\t\t        this._crossFadeLFO.start(now);\n\t\t        //set the initial value\n\t\t        this.windowSize = this._windowSize;\n\t\t    };\n\t\t    Tone.extend(Tone.PitchShift, Tone.FeedbackEffect);\n\t\t    /**\n\t\t\t *  default values\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t *  @const\n\t\t\t */\n\t\t    Tone.PitchShift.defaults = {\n\t\t        'pitch': 0,\n\t\t        'windowSize': 0.1,\n\t\t        'delayTime': 0,\n\t\t        'feedback': 0\n\t\t    };\n\t\t    /**\n\t\t\t * Repitch the incoming signal by some interval (measured\n\t\t\t * in semi-tones). \n\t\t\t * @memberOf Tone.PitchShift#\n\t\t\t * @type {Interval}\n\t\t\t * @name pitch\n\t\t\t * @example\n\t\t\t * pitchShift.pitch = -12; //down one octave\n\t\t\t * pitchShift.pitch = 7; //up a fifth\n\t\t\t */\n\t\t    Object.defineProperty(Tone.PitchShift.prototype, 'pitch', {\n\t\t        get: function () {\n\t\t            return this._pitch;\n\t\t        },\n\t\t        set: function (interval) {\n\t\t            this._pitch = interval;\n\t\t            var factor = 0;\n\t\t            if (interval < 0) {\n\t\t                this._lfoA.min = 0;\n\t\t                this._lfoA.max = this._windowSize;\n\t\t                this._lfoB.min = 0;\n\t\t                this._lfoB.max = this._windowSize;\n\t\t                factor = this.intervalToFrequencyRatio(interval - 1) + 1;\n\t\t            } else {\n\t\t                this._lfoA.min = this._windowSize;\n\t\t                this._lfoA.max = 0;\n\t\t                this._lfoB.min = this._windowSize;\n\t\t                this._lfoB.max = 0;\n\t\t                factor = this.intervalToFrequencyRatio(interval) - 1;\n\t\t            }\n\t\t            this._frequency.value = factor * (1.2 / this._windowSize);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The window size corresponds roughly to the sample length in a looping sampler. \n\t\t\t * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n\t\t\t * signal, but larger values will result in smoother pitch shifting for larger intervals. \n\t\t\t * A nominal range of 0.03 to 0.1 is recommended. \n\t\t\t * @memberOf Tone.PitchShift#\n\t\t\t * @type {Time}\n\t\t\t * @name windowSize\n\t\t\t * @example\n\t\t\t * pitchShift.windowSize = 0.1;\n\t\t\t */\n\t\t    Object.defineProperty(Tone.PitchShift.prototype, 'windowSize', {\n\t\t        get: function () {\n\t\t            return this._windowSize;\n\t\t        },\n\t\t        set: function (size) {\n\t\t            this._windowSize = this.toSeconds(size);\n\t\t            this.pitch = this._pitch;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @return  {Tone.PitchShift}  this\n\t\t\t */\n\t\t    Tone.PitchShift.prototype.dispose = function () {\n\t\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t\t        this._frequency.dispose();\n\t\t        this._frequency = null;\n\t\t        this._delayA.disconnect();\n\t\t        this._delayA = null;\n\t\t        this._delayB.disconnect();\n\t\t        this._delayB = null;\n\t\t        this._lfoA.dispose();\n\t\t        this._lfoA = null;\n\t\t        this._lfoB.dispose();\n\t\t        this._lfoB = null;\n\t\t        this._crossFade.dispose();\n\t\t        this._crossFade = null;\n\t\t        this._crossFadeLFO.dispose();\n\t\t        this._crossFadeLFO = null;\n\t\t        this._writable('delayTime');\n\t\t        this._feedbackDelay.dispose();\n\t\t        this._feedbackDelay = null;\n\t\t        this.delayTime = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.PitchShift;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Base class for stereo feedback effects where the effectReturn\n\t\t\t *         is fed back into the same channel. \n\t\t\t *\n\t\t\t *\t@constructor\n\t\t\t *\t@extends {Tone.FeedbackEffect}\n\t\t\t */\n\t\t    Tone.StereoFeedbackEffect = function () {\n\t\t        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);\n\t\t        Tone.StereoEffect.call(this, options);\n\t\t        /**\n\t\t\t\t *  controls the amount of feedback\n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t\t        /**\n\t\t\t\t *  the left side feeback\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._feedbackL = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  the right side feeback\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._feedbackR = new Tone.Gain();\n\t\t        //connect it up\n\t\t        this.effectReturnL.chain(this._feedbackL, this.effectSendL);\n\t\t        this.effectReturnR.chain(this._feedbackR, this.effectSendR);\n\t\t        this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n\t\t        this._readOnly(['feedback']);\n\t\t    };\n\t\t    Tone.extend(Tone.StereoFeedbackEffect, Tone.FeedbackEffect);\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.StereoFeedbackEffect} this\n\t\t\t */\n\t\t    Tone.StereoFeedbackEffect.prototype.dispose = function () {\n\t\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t\t        this._writable(['feedback']);\n\t\t        this.feedback.dispose();\n\t\t        this.feedback = null;\n\t\t        this._feedbackL.dispose();\n\t\t        this._feedbackL = null;\n\t\t        this._feedbackR.dispose();\n\t\t        this._feedbackR = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.StereoFeedbackEffect;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Applies a width factor to the mid/side seperation. \n\t\t\t *         0 is all mid and 1 is all side.\n\t\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t\t *         <br><br>\n\t\t\t *         <code>\n\t\t\t *         Mid *= 2*(1-width)<br>\n\t\t\t *         Side *= 2*width\n\t\t\t *         </code>\n\t\t\t *\n\t\t\t *  @extends {Tone.MidSideEffect}\n\t\t\t *  @constructor\n\t\t\t *  @param {NormalRange|Object} [width] The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t\t\t */\n\t\t    Tone.StereoWidener = function () {\n\t\t        var options = this.optionsObject(arguments, ['width'], Tone.StereoWidener.defaults);\n\t\t        Tone.MidSideEffect.call(this, options);\n\t\t        /**\n\t\t\t\t *  The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t\t        /**\n\t\t\t\t *  Mid multiplier\n\t\t\t\t *  @type {Tone.Expr}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._midMult = new Tone.Expr('$0 * ($1 * (1 - $2))');\n\t\t        /**\n\t\t\t\t *  Side multiplier\n\t\t\t\t *  @type {Tone.Expr}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._sideMult = new Tone.Expr('$0 * ($1 * $2)');\n\t\t        /**\n\t\t\t\t *  constant output of 2\n\t\t\t\t *  @type {Tone}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._two = new Tone.Signal(2);\n\t\t        //the mid chain\n\t\t        this._two.connect(this._midMult, 0, 1);\n\t\t        this.width.connect(this._midMult, 0, 2);\n\t\t        //the side chain\n\t\t        this._two.connect(this._sideMult, 0, 1);\n\t\t        this.width.connect(this._sideMult, 0, 2);\n\t\t        //connect it to the effect send/return\n\t\t        this.midSend.chain(this._midMult, this.midReturn);\n\t\t        this.sideSend.chain(this._sideMult, this.sideReturn);\n\t\t        this._readOnly(['width']);\n\t\t    };\n\t\t    Tone.extend(Tone.StereoWidener, Tone.MidSideEffect);\n\t\t    /**\n\t\t\t *  the default values\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.StereoWidener.defaults = { 'width': 0.5 };\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.StereoWidener} this\n\t\t\t */\n\t\t    Tone.StereoWidener.prototype.dispose = function () {\n\t\t        Tone.MidSideEffect.prototype.dispose.call(this);\n\t\t        this._writable(['width']);\n\t\t        this.width.dispose();\n\t\t        this.width = null;\n\t\t        this._midMult.dispose();\n\t\t        this._midMult = null;\n\t\t        this._sideMult.dispose();\n\t\t        this._sideMult = null;\n\t\t        this._two.dispose();\n\t\t        this._two = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.StereoWidener;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.\n\t\t\t *         The type, frequency, and depth of the LFO is controllable.\n\t\t\t *\n\t\t\t *  @extends {Tone.StereoEffect}\n\t\t\t *  @constructor\n\t\t\t *  @param {Frequency} [frequency] The rate of the effect.\n\t\t\t *  @param {NormalRange} [depth] The depth of the effect.\n\t\t\t *  @example\n\t\t\t * //create a tremolo and start it's LFO\n\t\t\t * var tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();\n\t\t\t * //route an oscillator through the tremolo and start it\n\t\t\t * var oscillator = new Tone.Oscillator().connect(tremolo).start();\n\t\t\t */\n\t\t    Tone.Tremolo = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'frequency',\n\t\t            'depth'\n\t\t        ], Tone.Tremolo.defaults);\n\t\t        Tone.StereoEffect.call(this, options);\n\t\t        /**\n\t\t\t\t *  The tremelo LFO in the left channel\n\t\t\t\t *  @type  {Tone.LFO}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lfoL = new Tone.LFO({\n\t\t            'phase': options.spread,\n\t\t            'min': 1,\n\t\t            'max': 0\n\t\t        });\n\t\t        /**\n\t\t\t\t *  The tremelo LFO in the left channel\n\t\t\t\t *  @type  {Tone.LFO}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lfoR = new Tone.LFO({\n\t\t            'phase': options.spread,\n\t\t            'min': 1,\n\t\t            'max': 0\n\t\t        });\n\t\t        /**\n\t\t\t\t *  Where the gain is multiplied\n\t\t\t\t *  @type  {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._amplitudeL = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  Where the gain is multiplied\n\t\t\t\t *  @type  {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._amplitudeR = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  The frequency of the tremolo.\n\t\t\t\t *  @type  {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t\t        /**\n\t\t\t\t *  The depth of the effect. A depth of 0, has no effect\n\t\t\t\t *  on the amplitude, and a depth of 1 makes the amplitude\n\t\t\t\t *  modulate fully between 0 and 1.\n\t\t\t\t *  @type  {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.depth = new Tone.Signal(options.depth, Tone.Type.NormalRange);\n\t\t        this._readOnly([\n\t\t            'frequency',\n\t\t            'depth'\n\t\t        ]);\n\t\t        this.effectSendL.chain(this._amplitudeL, this.effectReturnL);\n\t\t        this.effectSendR.chain(this._amplitudeR, this.effectReturnR);\n\t\t        this._lfoL.connect(this._amplitudeL.gain);\n\t\t        this._lfoR.connect(this._amplitudeR.gain);\n\t\t        this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n\t\t        this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n\t\t        this.type = options.type;\n\t\t        this.spread = options.spread;\n\t\t    };\n\t\t    Tone.extend(Tone.Tremolo, Tone.StereoEffect);\n\t\t    /**\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.Tremolo.defaults = {\n\t\t        'frequency': 10,\n\t\t        'type': 'sine',\n\t\t        'depth': 0.5,\n\t\t        'spread': 180\n\t\t    };\n\t\t    /**\n\t\t\t * Start the tremolo.\n\t\t\t * @param {Time} [time=now] When the tremolo begins.\n\t\t\t * @returns {Tone.Tremolo} this\n\t\t\t */\n\t\t    Tone.Tremolo.prototype.start = function (time) {\n\t\t        this._lfoL.start(time);\n\t\t        this._lfoR.start(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * Stop the tremolo.\n\t\t\t * @param {Time} [time=now] When the tremolo stops.\n\t\t\t * @returns {Tone.Tremolo} this\n\t\t\t */\n\t\t    Tone.Tremolo.prototype.stop = function (time) {\n\t\t        this._lfoL.stop(time);\n\t\t        this._lfoR.stop(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * Sync the effect to the transport.\n\t\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t\t *                              Transport has started.\n\t\t\t * @returns {Tone.AutoFilter} this\n\t\t\t */\n\t\t    Tone.Tremolo.prototype.sync = function (delay) {\n\t\t        this._lfoL.sync(delay);\n\t\t        this._lfoR.sync(delay);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * Unsync the filter from the transport\n\t\t\t * @returns {Tone.Tremolo} this\n\t\t\t */\n\t\t    Tone.Tremolo.prototype.unsync = function () {\n\t\t        this._lfoL.unsync();\n\t\t        this._lfoR.unsync();\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * The Tremolo's oscillator type.\n\t\t\t * @memberOf Tone.Tremolo#\n\t\t\t * @type {string}\n\t\t\t * @name type\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Tremolo.prototype, 'type', {\n\t\t        get: function () {\n\t\t            return this._lfoL.type;\n\t\t        },\n\t\t        set: function (type) {\n\t\t            this._lfoL.type = type;\n\t\t            this._lfoR.type = type;\n\t\t        }\n\t\t    });\n\t\t    /** \n\t\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t\t * @memberOf Tone.Tremolo#\n\t\t\t * @type {Degrees}\n\t\t\t * @name spread\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Tremolo.prototype, 'spread', {\n\t\t        get: function () {\n\t\t            return this._lfoR.phase - this._lfoL.phase;    //180\n\t\t        },\n\t\t        set: function (spread) {\n\t\t            this._lfoL.phase = 90 - spread / 2;\n\t\t            this._lfoR.phase = spread / 2 + 90;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.Tremolo} this\n\t\t\t */\n\t\t    Tone.Tremolo.prototype.dispose = function () {\n\t\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'frequency',\n\t\t            'depth'\n\t\t        ]);\n\t\t        this._lfoL.dispose();\n\t\t        this._lfoL = null;\n\t\t        this._lfoR.dispose();\n\t\t        this._lfoR = null;\n\t\t        this._amplitudeL.dispose();\n\t\t        this._amplitudeL = null;\n\t\t        this._amplitudeR.dispose();\n\t\t        this._amplitudeR = null;\n\t\t        this.frequency = null;\n\t\t        this.depth = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Tremolo;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n\t\t\t *         modulates the delayTime of the delay, causing the pitch to rise\n\t\t\t *         and fall. \n\t\t\t *  @extends {Tone.Effect}\n\t\t\t *  @param {Frequency} frequency The frequency of the vibrato.\n\t\t\t *  @param {NormalRange} depth The amount the pitch is modulated.\n\t\t\t */\n\t\t    Tone.Vibrato = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'frequency',\n\t\t            'depth'\n\t\t        ], Tone.Vibrato.defaults);\n\t\t        Tone.Effect.call(this, options);\n\t\t        /**\n\t\t\t\t *  The delay node used for the vibrato effect\n\t\t\t\t *  @type {Tone.Delay}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._delayNode = new Tone.Delay(0, options.maxDelay);\n\t\t        /**\n\t\t\t\t *  The LFO used to control the vibrato\n\t\t\t\t *  @type {Tone.LFO}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lfo = new Tone.LFO({\n\t\t            'type': options.type,\n\t\t            'min': 0,\n\t\t            'max': options.maxDelay,\n\t\t            'frequency': options.frequency,\n\t\t            'phase': -90    //offse the phase so the resting position is in the center\n\t\t        }).start().connect(this._delayNode.delayTime);\n\t\t        /**\n\t\t\t\t *  The frequency of the vibrato\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.frequency = this._lfo.frequency;\n\t\t        /**\n\t\t\t\t *  The depth of the vibrato. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.depth = this._lfo.amplitude;\n\t\t        this.depth.value = options.depth;\n\t\t        this._readOnly([\n\t\t            'frequency',\n\t\t            'depth'\n\t\t        ]);\n\t\t        this.effectSend.chain(this._delayNode, this.effectReturn);\n\t\t    };\n\t\t    Tone.extend(Tone.Vibrato, Tone.Effect);\n\t\t    /**\n\t\t\t *  The defaults\n\t\t\t *  @type  {Object}\n\t\t\t *  @const\n\t\t\t */\n\t\t    Tone.Vibrato.defaults = {\n\t\t        'maxDelay': 0.005,\n\t\t        'frequency': 5,\n\t\t        'depth': 0.1,\n\t\t        'type': 'sine'\n\t\t    };\n\t\t    /**\n\t\t\t * Type of oscillator attached to the Vibrato.\n\t\t\t * @memberOf Tone.Vibrato#\n\t\t\t * @type {string}\n\t\t\t * @name type\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Vibrato.prototype, 'type', {\n\t\t        get: function () {\n\t\t            return this._lfo.type;\n\t\t        },\n\t\t        set: function (type) {\n\t\t            this._lfo.type = type;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.Vibrato} this\n\t\t\t */\n\t\t    Tone.Vibrato.prototype.dispose = function () {\n\t\t        Tone.Effect.prototype.dispose.call(this);\n\t\t        this._delayNode.dispose();\n\t\t        this._delayNode = null;\n\t\t        this._lfo.dispose();\n\t\t        this._lfo = null;\n\t\t        this._writable([\n\t\t            'frequency',\n\t\t            'depth'\n\t\t        ]);\n\t\t        this.frequency = null;\n\t\t        this.depth = null;\n\t\t    };\n\t\t    return Tone.Vibrato;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable\n\t\t\t *          callback for a single or repeatable events along the timeline. \n\t\t\t *\n\t\t\t *  @extends {Tone}\n\t\t\t *  @param {function} callback The callback to invoke at the time. \n\t\t\t *  @param {*} value The value or values which should be passed to\n\t\t\t *                      the callback function on invocation.  \n\t\t\t *  @example\n\t\t\t * var chord = new Tone.Event(function(time, chord){\n\t\t\t * \t//the chord as well as the exact time of the event\n\t\t\t * \t//are passed in as arguments to the callback function\n\t\t\t * }, [\"D4\", \"E4\", \"F4\"]);\n\t\t\t * //start the chord at the beginning of the transport timeline\n\t\t\t * chord.start();\n\t\t\t * //loop it every measure for 8 measures\n\t\t\t * chord.loop = 8;\n\t\t\t * chord.loopEnd = \"1m\";\n\t\t\t */\n\t\t    Tone.Event = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'callback',\n\t\t            'value'\n\t\t        ], Tone.Event.defaults);\n\t\t        /**\n\t\t\t\t *  Loop value\n\t\t\t\t *  @type  {Boolean|Positive}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._loop = options.loop;\n\t\t        /**\n\t\t\t\t *  The callback to invoke. \n\t\t\t\t *  @type  {Function}\n\t\t\t\t */\n\t\t        this.callback = options.callback;\n\t\t        /**\n\t\t\t\t *  The value which is passed to the\n\t\t\t\t *  callback function.\n\t\t\t\t *  @type  {*}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this.value = options.value;\n\t\t        /**\n\t\t\t\t *  When the note is scheduled to start.\n\t\t\t\t *  @type  {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._loopStart = this.toTicks(options.loopStart);\n\t\t        /**\n\t\t\t\t *  When the note is scheduled to start.\n\t\t\t\t *  @type  {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._loopEnd = this.toTicks(options.loopEnd);\n\t\t        /**\n\t\t\t\t *  Tracks the scheduled events\n\t\t\t\t *  @type {Tone.TimelineState}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t\t        /**\n\t\t\t\t *  The playback speed of the note. A speed of 1\n\t\t\t\t *  is no change. \n\t\t\t\t *  @private\n\t\t\t\t *  @type {Positive}\n\t\t\t\t */\n\t\t        this._playbackRate = 1;\n\t\t        /**\n\t\t\t\t *  A delay time from when the event is scheduled to start\n\t\t\t\t *  @type {Ticks}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._startOffset = 0;\n\t\t        /**\n\t\t\t\t *  The probability that the callback will be invoked\n\t\t\t\t *  at the scheduled time. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @example\n\t\t\t\t * //the callback will be invoked 50% of the time\n\t\t\t\t * event.probability = 0.5;\n\t\t\t\t */\n\t\t        this.probability = options.probability;\n\t\t        /**\n\t\t\t\t *  If set to true, will apply small (+/-0.02 seconds) random variation\n\t\t\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t\t\t *  by that amount.\n\t\t\t\t *  @example\n\t\t\t\t * event.humanize = true;\n\t\t\t\t *  @type {Boolean|Time}\n\t\t\t\t */\n\t\t        this.humanize = options.humanize;\n\t\t        /**\n\t\t\t\t *  If mute is true, the callback won't be\n\t\t\t\t *  invoked.\n\t\t\t\t *  @type {Boolean}\n\t\t\t\t */\n\t\t        this.mute = options.mute;\n\t\t        //set the initial values\n\t\t        this.playbackRate = options.playbackRate;\n\t\t    };\n\t\t    Tone.extend(Tone.Event);\n\t\t    /**\n\t\t\t *  The default values\n\t\t\t *  @type  {Object}\n\t\t\t *  @const\n\t\t\t */\n\t\t    Tone.Event.defaults = {\n\t\t        'callback': Tone.noOp,\n\t\t        'loop': false,\n\t\t        'loopEnd': '1m',\n\t\t        'loopStart': 0,\n\t\t        'playbackRate': 1,\n\t\t        'value': null,\n\t\t        'probability': 1,\n\t\t        'mute': false,\n\t\t        'humanize': false\n\t\t    };\n\t\t    /**\n\t\t\t *  Reschedule all of the events along the timeline\n\t\t\t *  with the updated values.\n\t\t\t *  @param {Time} after Only reschedules events after the given time.\n\t\t\t *  @return  {Tone.Event}  this\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Event.prototype._rescheduleEvents = function (after) {\n\t\t        //if no argument is given, schedules all of the events\n\t\t        after = this.defaultArg(after, -1);\n\t\t        this._state.forEachFrom(after, function (event) {\n\t\t            var duration;\n\t\t            if (event.state === Tone.State.Started) {\n\t\t                if (!this.isUndef(event.id)) {\n\t\t                    Tone.Transport.clear(event.id);\n\t\t                }\n\t\t                var startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t\t                if (this._loop) {\n\t\t                    duration = Infinity;\n\t\t                    if (this.isNumber(this._loop)) {\n\t\t                        duration = this._loop * this._getLoopDuration();\n\t\t                    }\n\t\t                    var nextEvent = this._state.getAfter(startTick);\n\t\t                    if (nextEvent !== null) {\n\t\t                        duration = Math.min(duration, nextEvent.time - startTick);\n\t\t                    }\n\t\t                    if (duration !== Infinity) {\n\t\t                        //schedule a stop since it's finite duration\n\t\t                        this._state.setStateAtTime(Tone.State.Stopped, startTick + duration + 1);\n\t\t                        duration = Tone.Time(duration, 'i');\n\t\t                    }\n\t\t                    var interval = Tone.Time(this._getLoopDuration(), 'i');\n\t\t                    event.id = Tone.Transport.scheduleRepeat(this._tick.bind(this), interval, Tone.TransportTime(startTick, 'i'), duration);\n\t\t                } else {\n\t\t                    event.id = Tone.Transport.schedule(this._tick.bind(this), startTick + 'i');\n\t\t                }\n\t\t            }\n\t\t        }.bind(this));\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t\t\t *  @type {String}\n\t\t\t *  @readOnly\n\t\t\t *  @memberOf Tone.Event#\n\t\t\t *  @name state\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Event.prototype, 'state', {\n\t\t        get: function () {\n\t\t            return this._state.getValueAtTime(Tone.Transport.ticks);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The start from the scheduled start time\n\t\t\t *  @type {Ticks}\n\t\t\t *  @memberOf Tone.Event#\n\t\t\t *  @name startOffset\n\t\t\t *  @private\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Event.prototype, 'startOffset', {\n\t\t        get: function () {\n\t\t            return this._startOffset;\n\t\t        },\n\t\t        set: function (offset) {\n\t\t            this._startOffset = offset;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Start the note at the given time. \n\t\t\t *  @param  {TimelinePosition}  time  When the note should start.\n\t\t\t *  @return  {Tone.Event}  this\n\t\t\t */\n\t\t    Tone.Event.prototype.start = function (time) {\n\t\t        time = this.toTicks(time);\n\t\t        if (this._state.getValueAtTime(time) === Tone.State.Stopped) {\n\t\t            this._state.add({\n\t\t                'state': Tone.State.Started,\n\t\t                'time': time,\n\t\t                'id': undefined\n\t\t            });\n\t\t            this._rescheduleEvents(time);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Stop the Event at the given time.\n\t\t\t *  @param  {TimelinePosition}  time  When the note should stop.\n\t\t\t *  @return  {Tone.Event}  this\n\t\t\t */\n\t\t    Tone.Event.prototype.stop = function (time) {\n\t\t        this.cancel(time);\n\t\t        time = this.toTicks(time);\n\t\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t\t            this._state.setStateAtTime(Tone.State.Stopped, time);\n\t\t            var previousEvent = this._state.getBefore(time);\n\t\t            var reschedulTime = time;\n\t\t            if (previousEvent !== null) {\n\t\t                reschedulTime = previousEvent.time;\n\t\t            }\n\t\t            this._rescheduleEvents(reschedulTime);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t\t *  @return  {Tone.Event}  this\n\t\t\t */\n\t\t    Tone.Event.prototype.cancel = function (time) {\n\t\t        time = this.defaultArg(time, -Infinity);\n\t\t        time = this.toTicks(time);\n\t\t        this._state.forEachFrom(time, function (event) {\n\t\t            Tone.Transport.clear(event.id);\n\t\t        });\n\t\t        this._state.cancel(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  The callback function invoker. Also \n\t\t\t *  checks if the Event is done playing\n\t\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Event.prototype._tick = function (time) {\n\t\t        if (!this.mute && this._state.getValueAtTime(Tone.Transport.ticks) === Tone.State.Started) {\n\t\t            if (this.probability < 1 && Math.random() > this.probability) {\n\t\t                return;\n\t\t            }\n\t\t            if (this.humanize) {\n\t\t                var variation = 0.02;\n\t\t                if (!this.isBoolean(this.humanize)) {\n\t\t                    variation = this.toSeconds(this.humanize);\n\t\t                }\n\t\t                time += (Math.random() * 2 - 1) * variation;\n\t\t            }\n\t\t            this.callback(time, this.value);\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Get the duration of the loop.\n\t\t\t *  @return  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Event.prototype._getLoopDuration = function () {\n\t\t        return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t\t    };\n\t\t    /**\n\t\t\t *  If the note should loop or not\n\t\t\t *  between Tone.Event.loopStart and \n\t\t\t *  Tone.Event.loopEnd. An integer\n\t\t\t *  value corresponds to the number of\n\t\t\t *  loops the Event does after it starts.\n\t\t\t *  @memberOf Tone.Event#\n\t\t\t *  @type {Boolean|Positive}\n\t\t\t *  @name loop\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Event.prototype, 'loop', {\n\t\t        get: function () {\n\t\t            return this._loop;\n\t\t        },\n\t\t        set: function (loop) {\n\t\t            this._loop = loop;\n\t\t            this._rescheduleEvents();\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * \tThe playback rate of the note. Defaults to 1.\n\t\t\t *  @memberOf Tone.Event#\n\t\t\t *  @type {Positive}\n\t\t\t *  @name playbackRate\n\t\t\t *  @example\n\t\t\t * note.loop = true;\n\t\t\t * //repeat the note twice as fast\n\t\t\t * note.playbackRate = 2;\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Event.prototype, 'playbackRate', {\n\t\t        get: function () {\n\t\t            return this._playbackRate;\n\t\t        },\n\t\t        set: function (rate) {\n\t\t            this._playbackRate = rate;\n\t\t            this._rescheduleEvents();\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The loopEnd point is the time the event will loop\n\t\t\t *  if Tone.Event.loop is true.\n\t\t\t *  @memberOf Tone.Event#\n\t\t\t *  @type {TransportTime}\n\t\t\t *  @name loopEnd\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Event.prototype, 'loopEnd', {\n\t\t        get: function () {\n\t\t            return Tone.TransportTime(this._loopEnd, 'i').toNotation();\n\t\t        },\n\t\t        set: function (loopEnd) {\n\t\t            this._loopEnd = this.toTicks(loopEnd);\n\t\t            if (this._loop) {\n\t\t                this._rescheduleEvents();\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The time when the loop should start. \n\t\t\t *  @memberOf Tone.Event#\n\t\t\t *  @type {TransportTime}\n\t\t\t *  @name loopStart\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Event.prototype, 'loopStart', {\n\t\t        get: function () {\n\t\t            return Tone.TransportTime(this._loopStart, 'i').toNotation();\n\t\t        },\n\t\t        set: function (loopStart) {\n\t\t            this._loopStart = this.toTicks(loopStart);\n\t\t            if (this._loop) {\n\t\t                this._rescheduleEvents();\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The current progress of the loop interval.\n\t\t\t *  Returns 0 if the event is not started yet or\n\t\t\t *  it is not set to loop.\n\t\t\t *  @memberOf Tone.Event#\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @name progress\n\t\t\t *  @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Event.prototype, 'progress', {\n\t\t        get: function () {\n\t\t            if (this._loop) {\n\t\t                var ticks = Tone.Transport.ticks;\n\t\t                var lastEvent = this._state.get(ticks);\n\t\t                if (lastEvent !== null && lastEvent.state === Tone.State.Started) {\n\t\t                    var loopDuration = this._getLoopDuration();\n\t\t                    var progress = (ticks - lastEvent.time) % loopDuration;\n\t\t                    return progress / loopDuration;\n\t\t                } else {\n\t\t                    return 0;\n\t\t                }\n\t\t            } else {\n\t\t                return 0;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up\n\t\t\t *  @return  {Tone.Event}  this\n\t\t\t */\n\t\t    Tone.Event.prototype.dispose = function () {\n\t\t        this.cancel();\n\t\t        this._state.dispose();\n\t\t        this._state = null;\n\t\t        this.callback = null;\n\t\t        this.value = null;\n\t\t    };\n\t\t    return Tone.Event;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    /**\n\t\t\t *  @class Tone.Loop creates a looped callback at the \n\t\t\t *         specified interval. The callback can be \n\t\t\t *         started, stopped and scheduled along\n\t\t\t *         the Transport's timeline. \n\t\t\t *  @example\n\t\t\t * var loop = new Tone.Loop(function(time){\n\t\t\t * \t//triggered every eighth note. \n\t\t\t * \tconsole.log(time);\n\t\t\t * }, \"8n\").start(0);\n\t\t\t * Tone.Transport.start();\n\t\t\t *  @extends {Tone}\n\t\t\t *  @param {Function} callback The callback to invoke with the event.\n\t\t\t *  @param {Time} interval The time between successive callback calls. \n\t\t\t */\n\t\t    Tone.Loop = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'callback',\n\t\t            'interval'\n\t\t        ], Tone.Loop.defaults);\n\t\t        /**\n\t\t\t\t *  The event which produces the callbacks\n\t\t\t\t */\n\t\t        this._event = new Tone.Event({\n\t\t            'callback': this._tick.bind(this),\n\t\t            'loop': true,\n\t\t            'loopEnd': options.interval,\n\t\t            'playbackRate': options.playbackRate,\n\t\t            'probability': options.probability\n\t\t        });\n\t\t        /**\n\t\t\t\t *  The callback to invoke with the next event in the pattern\n\t\t\t\t *  @type {Function}\n\t\t\t\t */\n\t\t        this.callback = options.callback;\n\t\t        //set the iterations\n\t\t        this.iterations = options.iterations;\n\t\t    };\n\t\t    Tone.extend(Tone.Loop);\n\t\t    /**\n\t\t\t *  The defaults\n\t\t\t *  @const\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t\t    Tone.Loop.defaults = {\n\t\t        'interval': '4n',\n\t\t        'callback': Tone.noOp,\n\t\t        'playbackRate': 1,\n\t\t        'iterations': Infinity,\n\t\t        'probability': true,\n\t\t        'mute': false\n\t\t    };\n\t\t    /**\n\t\t\t *  Start the loop at the specified time along the Transport's\n\t\t\t *  timeline.\n\t\t\t *  @param  {TimelinePosition=}  time  When to start the Loop.\n\t\t\t *  @return  {Tone.Loop}  this\n\t\t\t */\n\t\t    Tone.Loop.prototype.start = function (time) {\n\t\t        this._event.start(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Stop the loop at the given time.\n\t\t\t *  @param  {TimelinePosition=}  time  When to stop the Arpeggio\n\t\t\t *  @return  {Tone.Loop}  this\n\t\t\t */\n\t\t    Tone.Loop.prototype.stop = function (time) {\n\t\t        this._event.stop(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t\t *  @return  {Tone.Loop}  this\n\t\t\t */\n\t\t    Tone.Loop.prototype.cancel = function (time) {\n\t\t        this._event.cancel(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Internal function called when the notes should be called\n\t\t\t *  @param  {Number}  time  The time the event occurs\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Loop.prototype._tick = function (time) {\n\t\t        this.callback(time);\n\t\t    };\n\t\t    /**\n\t\t\t *  The state of the Loop, either started or stopped.\n\t\t\t *  @memberOf Tone.Loop#\n\t\t\t *  @type {String}\n\t\t\t *  @name state\n\t\t\t *  @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Loop.prototype, 'state', {\n\t\t        get: function () {\n\t\t            return this._event.state;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The progress of the loop as a value between 0-1. 0, when\n\t\t\t *  the loop is stopped or done iterating. \n\t\t\t *  @memberOf Tone.Loop#\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @name progress\n\t\t\t *  @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Loop.prototype, 'progress', {\n\t\t        get: function () {\n\t\t            return this._event.progress;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The time between successive callbacks. \n\t\t\t *  @example\n\t\t\t * loop.interval = \"8n\"; //loop every 8n\n\t\t\t *  @memberOf Tone.Loop#\n\t\t\t *  @type {Time}\n\t\t\t *  @name interval\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Loop.prototype, 'interval', {\n\t\t        get: function () {\n\t\t            return this._event.loopEnd;\n\t\t        },\n\t\t        set: function (interval) {\n\t\t            this._event.loopEnd = interval;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The playback rate of the loop. The normal playback rate is 1 (no change). \n\t\t\t *  A `playbackRate` of 2 would be twice as fast. \n\t\t\t *  @memberOf Tone.Loop#\n\t\t\t *  @type {Time}\n\t\t\t *  @name playbackRate\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Loop.prototype, 'playbackRate', {\n\t\t        get: function () {\n\t\t            return this._event.playbackRate;\n\t\t        },\n\t\t        set: function (rate) {\n\t\t            this._event.playbackRate = rate;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Random variation +/-0.01s to the scheduled time. \n\t\t\t *  Or give it a time value which it will randomize by.\n\t\t\t *  @type {Boolean|Time}\n\t\t\t *  @memberOf Tone.Loop#\n\t\t\t *  @name humanize\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Loop.prototype, 'humanize', {\n\t\t        get: function () {\n\t\t            return this._event.humanize;\n\t\t        },\n\t\t        set: function (variation) {\n\t\t            this._event.humanize = variation;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The probably of the callback being invoked.\n\t\t\t *  @memberOf Tone.Loop#\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @name probability\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Loop.prototype, 'probability', {\n\t\t        get: function () {\n\t\t            return this._event.probability;\n\t\t        },\n\t\t        set: function (prob) {\n\t\t            this._event.probability = prob;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Muting the Loop means that no callbacks are invoked.\n\t\t\t *  @memberOf Tone.Loop#\n\t\t\t *  @type {Boolean}\n\t\t\t *  @name mute\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Loop.prototype, 'mute', {\n\t\t        get: function () {\n\t\t            return this._event.mute;\n\t\t        },\n\t\t        set: function (mute) {\n\t\t            this._event.mute = mute;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The number of iterations of the loop. The default\n\t\t\t *  value is Infinity (loop forever).\n\t\t\t *  @memberOf Tone.Loop#\n\t\t\t *  @type {Positive}\n\t\t\t *  @name iterations\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Loop.prototype, 'iterations', {\n\t\t        get: function () {\n\t\t            if (this._event.loop === true) {\n\t\t                return Infinity;\n\t\t            } else {\n\t\t                return this._event.loop;\n\t\t            }\n\t\t            return this._pattern.index;\n\t\t        },\n\t\t        set: function (iters) {\n\t\t            if (iters === Infinity) {\n\t\t                this._event.loop = true;\n\t\t            } else {\n\t\t                this._event.loop = iters;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up\n\t\t\t *  @return  {Tone.Loop}  this\n\t\t\t */\n\t\t    Tone.Loop.prototype.dispose = function () {\n\t\t        this._event.dispose();\n\t\t        this._event = null;\n\t\t        this.callback = null;\n\t\t    };\n\t\t    return Tone.Loop;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.Part is a collection Tone.Events which can be\n\t\t\t *         started/stoped and looped as a single unit.\n\t\t\t *\n\t\t\t *  @extends {Tone.Event}\n\t\t\t *  @param {Function} callback The callback to invoke on each event\n\t\t\t *  @param {Array} events the array of events\n\t\t\t *  @example\n\t\t\t * var part = new Tone.Part(function(time, note){\n\t\t\t * \t//the notes given as the second element in the array\n\t\t\t * \t//will be passed in as the second argument\n\t\t\t * \tsynth.triggerAttackRelease(note, \"8n\", time);\n\t\t\t * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n\t\t\t *  @example\n\t\t\t * //use an array of objects as long as the object has a \"time\" attribute\n\t\t\t * var part = new Tone.Part(function(time, value){\n\t\t\t * \t//the value is an object which contains both the note and the velocity\n\t\t\t * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n\t\t\t * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9}, \n\t\t\t * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n\t\t\t * ]).start(0);\n\t\t\t */\n\t\t    Tone.Part = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'callback',\n\t\t            'events'\n\t\t        ], Tone.Part.defaults);\n\t\t        /**\n\t\t\t\t *  If the part is looping or not\n\t\t\t\t *  @type  {Boolean|Positive}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._loop = options.loop;\n\t\t        /**\n\t\t\t\t *  When the note is scheduled to start.\n\t\t\t\t *  @type  {Ticks}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._loopStart = this.toTicks(options.loopStart);\n\t\t        /**\n\t\t\t\t *  When the note is scheduled to start.\n\t\t\t\t *  @type  {Ticks}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._loopEnd = this.toTicks(options.loopEnd);\n\t\t        /**\n\t\t\t\t *  The playback rate of the part\n\t\t\t\t *  @type  {Positive}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._playbackRate = options.playbackRate;\n\t\t        /**\n\t\t\t\t *  private holder of probability value\n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._probability = options.probability;\n\t\t        /**\n\t\t\t\t *  the amount of variation from the\n\t\t\t\t *  given time. \n\t\t\t\t *  @type {Boolean|Time}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._humanize = options.humanize;\n\t\t        /**\n\t\t\t\t *  The start offset\n\t\t\t\t *  @type {Ticks}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._startOffset = 0;\n\t\t        /**\n\t\t\t\t *  Keeps track of the current state\n\t\t\t\t *  @type {Tone.TimelineState}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t\t        /**\n\t\t\t\t *  An array of Objects. \n\t\t\t\t *  @type  {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._events = [];\n\t\t        /**\n\t\t\t\t *  The callback to invoke at all the scheduled events.\n\t\t\t\t *  @type {Function}\n\t\t\t\t */\n\t\t        this.callback = options.callback;\n\t\t        /**\n\t\t\t\t *  If mute is true, the callback won't be\n\t\t\t\t *  invoked.\n\t\t\t\t *  @type {Boolean}\n\t\t\t\t */\n\t\t        this.mute = options.mute;\n\t\t        //add the events\n\t\t        var events = this.defaultArg(options.events, []);\n\t\t        if (!this.isUndef(options.events)) {\n\t\t            for (var i = 0; i < events.length; i++) {\n\t\t                if (Array.isArray(events[i])) {\n\t\t                    this.add(events[i][0], events[i][1]);\n\t\t                } else {\n\t\t                    this.add(events[i]);\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t    };\n\t\t    Tone.extend(Tone.Part, Tone.Event);\n\t\t    /**\n\t\t\t *  The default values\n\t\t\t *  @type  {Object}\n\t\t\t *  @const\n\t\t\t */\n\t\t    Tone.Part.defaults = {\n\t\t        'callback': Tone.noOp,\n\t\t        'loop': false,\n\t\t        'loopEnd': '1m',\n\t\t        'loopStart': 0,\n\t\t        'playbackRate': 1,\n\t\t        'probability': 1,\n\t\t        'humanize': false,\n\t\t        'mute': false\n\t\t    };\n\t\t    /**\n\t\t\t *  Start the part at the given time. \n\t\t\t *  @param  {TransportTime}  time    When to start the part.\n\t\t\t *  @param  {Time=}  offset  The offset from the start of the part\n\t\t\t *                           to begin playing at.\n\t\t\t *  @return  {Tone.Part}  this\n\t\t\t */\n\t\t    Tone.Part.prototype.start = function (time, offset) {\n\t\t        var ticks = this.toTicks(time);\n\t\t        if (this._state.getValueAtTime(ticks) !== Tone.State.Started) {\n\t\t            if (this._loop) {\n\t\t                offset = this.defaultArg(offset, this._loopStart);\n\t\t            } else {\n\t\t                offset = this.defaultArg(offset, 0);\n\t\t            }\n\t\t            offset = this.toTicks(offset);\n\t\t            this._state.add({\n\t\t                'state': Tone.State.Started,\n\t\t                'time': ticks,\n\t\t                'offset': offset\n\t\t            });\n\t\t            this._forEach(function (event) {\n\t\t                this._startNote(event, ticks, offset);\n\t\t            });\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Start the event in the given event at the correct time given\n\t\t\t *  the ticks and offset and looping.\n\t\t\t *  @param  {Tone.Event}  event \n\t\t\t *  @param  {Ticks}  ticks\n\t\t\t *  @param  {Ticks}  offset\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Part.prototype._startNote = function (event, ticks, offset) {\n\t\t        ticks -= offset;\n\t\t        if (this._loop) {\n\t\t            if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t\t                if (event.startOffset < offset) {\n\t\t                    //start it on the next loop\n\t\t                    ticks += this._getLoopDuration();\n\t\t                }\n\t\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t\t            } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t\t                event.loop = false;\n\t\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t\t            }\n\t\t        } else {\n\t\t            if (event.startOffset >= offset) {\n\t\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t\t            }\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  The start from the scheduled start time\n\t\t\t *  @type {Ticks}\n\t\t\t *  @memberOf Tone.Part#\n\t\t\t *  @name startOffset\n\t\t\t *  @private\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Part.prototype, 'startOffset', {\n\t\t        get: function () {\n\t\t            return this._startOffset;\n\t\t        },\n\t\t        set: function (offset) {\n\t\t            this._startOffset = offset;\n\t\t            this._forEach(function (event) {\n\t\t                event.startOffset += this._startOffset;\n\t\t            });\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Stop the part at the given time.\n\t\t\t *  @param  {TimelinePosition}  time  When to stop the part.\n\t\t\t *  @return  {Tone.Part}  this\n\t\t\t */\n\t\t    Tone.Part.prototype.stop = function (time) {\n\t\t        var ticks = this.toTicks(time);\n\t\t        this._state.cancel(ticks);\n\t\t        this._state.setStateAtTime(Tone.State.Stopped, ticks);\n\t\t        this._forEach(function (event) {\n\t\t            event.stop(time);\n\t\t        });\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Get/Set an Event's value at the given time. \n\t\t\t *  If a value is passed in and no event exists at\n\t\t\t *  the given time, one will be created with that value. \n\t\t\t *  If two events are at the same time, the first one will\n\t\t\t *  be returned.\n\t\t\t *  @example\n\t\t\t * part.at(\"1m\"); //returns the part at the first measure\n\t\t\t *\n\t\t\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2. \n\t\t\t * //if an event didn't exist at that time, it will be created.\n\t\t\t *  @param {TransportTime} time The time of the event to get or set.\n\t\t\t *  @param {*=} value If a value is passed in, the value of the\n\t\t\t *                    event at the given time will be set to it.\n\t\t\t *  @return {Tone.Event} the event at the time\n\t\t\t */\n\t\t    Tone.Part.prototype.at = function (time, value) {\n\t\t        time = Tone.TransportTime(time);\n\t\t        var tickTime = Tone.Time(1, 'i').toSeconds();\n\t\t        for (var i = 0; i < this._events.length; i++) {\n\t\t            var event = this._events[i];\n\t\t            if (Math.abs(time.toTicks() - event.startOffset) < tickTime) {\n\t\t                if (!this.isUndef(value)) {\n\t\t                    event.value = value;\n\t\t                }\n\t\t                return event;\n\t\t            }\n\t\t        }\n\t\t        //if there was no event at that time, create one\n\t\t        if (!this.isUndef(value)) {\n\t\t            this.add(time, value);\n\t\t            //return the new event\n\t\t            return this._events[this._events.length - 1];\n\t\t        } else {\n\t\t            return null;\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Add a an event to the part. \n\t\t\t *  @param {Time} time The time the note should start.\n\t\t\t *                            If an object is passed in, it should\n\t\t\t *                            have a 'time' attribute and the rest\n\t\t\t *                            of the object will be used as the 'value'.\n\t\t\t *  @param  {Tone.Event|*}  value \n\t\t\t *  @returns {Tone.Part} this\n\t\t\t *  @example\n\t\t\t * part.add(\"1m\", \"C#+11\");\n\t\t\t */\n\t\t    Tone.Part.prototype.add = function (time, value) {\n\t\t        //extract the parameters\n\t\t        if (time.hasOwnProperty('time')) {\n\t\t            value = time;\n\t\t            time = value.time;\n\t\t        }\n\t\t        time = this.toTicks(time);\n\t\t        var event;\n\t\t        if (value instanceof Tone.Event) {\n\t\t            event = value;\n\t\t            event.callback = this._tick.bind(this);\n\t\t        } else {\n\t\t            event = new Tone.Event({\n\t\t                'callback': this._tick.bind(this),\n\t\t                'value': value\n\t\t            });\n\t\t        }\n\t\t        //the start offset\n\t\t        event.startOffset = time;\n\t\t        //initialize the values\n\t\t        event.set({\n\t\t            'loopEnd': this.loopEnd,\n\t\t            'loopStart': this.loopStart,\n\t\t            'loop': this.loop,\n\t\t            'humanize': this.humanize,\n\t\t            'playbackRate': this.playbackRate,\n\t\t            'probability': this.probability\n\t\t        });\n\t\t        this._events.push(event);\n\t\t        //start the note if it should be played right now\n\t\t        this._restartEvent(event);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Restart the given event\n\t\t\t *  @param  {Tone.Event}  event \n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Part.prototype._restartEvent = function (event) {\n\t\t        this._state.forEach(function (stateEvent) {\n\t\t            if (stateEvent.state === Tone.State.Started) {\n\t\t                this._startNote(event, stateEvent.time, stateEvent.offset);\n\t\t            } else {\n\t\t                //stop the note\n\t\t                event.stop(Tone.TransportTime(stateEvent.time, 'i'));\n\t\t            }\n\t\t        }.bind(this));\n\t\t    };\n\t\t    /**\n\t\t\t *  Remove an event from the part. Will recursively iterate\n\t\t\t *  into nested parts to find the event.\n\t\t\t *  @param {Time} time The time of the event\n\t\t\t *  @param {*} value Optionally select only a specific event value\n\t\t\t *  @return  {Tone.Part}  this\n\t\t\t */\n\t\t    Tone.Part.prototype.remove = function (time, value) {\n\t\t        //extract the parameters\n\t\t        if (time.hasOwnProperty('time')) {\n\t\t            value = time;\n\t\t            time = value.time;\n\t\t        }\n\t\t        time = this.toTicks(time);\n\t\t        for (var i = this._events.length - 1; i >= 0; i--) {\n\t\t            var event = this._events[i];\n\t\t            if (event instanceof Tone.Part) {\n\t\t                event.remove(time, value);\n\t\t            } else {\n\t\t                if (event.startOffset === time) {\n\t\t                    if (this.isUndef(value) || !this.isUndef(value) && event.value === value) {\n\t\t                        this._events.splice(i, 1);\n\t\t                        event.dispose();\n\t\t                    }\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Remove all of the notes from the group. \n\t\t\t *  @return  {Tone.Part}  this\n\t\t\t */\n\t\t    Tone.Part.prototype.removeAll = function () {\n\t\t        this._forEach(function (event) {\n\t\t            event.dispose();\n\t\t        });\n\t\t        this._events = [];\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t\t\t *  @param {TimelinePosition} after The time after which to cancel the scheduled events.\n\t\t\t *  @return  {Tone.Part}  this\n\t\t\t */\n\t\t    Tone.Part.prototype.cancel = function (after) {\n\t\t        after = this.toTicks(after);\n\t\t        this._forEach(function (event) {\n\t\t            event.cancel(after);\n\t\t        });\n\t\t        this._state.cancel(after);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Iterate over all of the events\n\t\t\t *  @param {Function} callback\n\t\t\t *  @param {Object} ctx The context\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Part.prototype._forEach = function (callback, ctx) {\n\t\t        ctx = this.defaultArg(ctx, this);\n\t\t        for (var i = this._events.length - 1; i >= 0; i--) {\n\t\t            var e = this._events[i];\n\t\t            if (e instanceof Tone.Part) {\n\t\t                e._forEach(callback, ctx);\n\t\t            } else {\n\t\t                callback.call(ctx, e);\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Set the attribute of all of the events\n\t\t\t *  @param  {String}  attr  the attribute to set\n\t\t\t *  @param  {*}  value      The value to set it to\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Part.prototype._setAll = function (attr, value) {\n\t\t        this._forEach(function (event) {\n\t\t            event[attr] = value;\n\t\t        });\n\t\t    };\n\t\t    /**\n\t\t\t *  Internal tick method\n\t\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Part.prototype._tick = function (time, value) {\n\t\t        if (!this.mute) {\n\t\t            this.callback(time, value);\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Determine if the event should be currently looping\n\t\t\t *  given the loop boundries of this Part.\n\t\t\t *  @param  {Tone.Event}  event  The event to test\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Part.prototype._testLoopBoundries = function (event) {\n\t\t        if (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd) {\n\t\t            event.cancel(0);\n\t\t        } else {\n\t\t            //reschedule it if it's stopped\n\t\t            if (event.state === Tone.State.Stopped) {\n\t\t                this._restartEvent(event);\n\t\t            }\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  The probability of the notes being triggered.\n\t\t\t *  @memberOf Tone.Part#\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @name probability\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Part.prototype, 'probability', {\n\t\t        get: function () {\n\t\t            return this._probability;\n\t\t        },\n\t\t        set: function (prob) {\n\t\t            this._probability = prob;\n\t\t            this._setAll('probability', prob);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  If set to true, will apply small random variation\n\t\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t\t *  by that amount.\n\t\t\t *  @example\n\t\t\t * event.humanize = true;\n\t\t\t *  @type {Boolean|Time}\n\t\t\t *  @name humanize\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Part.prototype, 'humanize', {\n\t\t        get: function () {\n\t\t            return this._humanize;\n\t\t        },\n\t\t        set: function (variation) {\n\t\t            this._humanize = variation;\n\t\t            this._setAll('humanize', variation);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  If the part should loop or not\n\t\t\t *  between Tone.Part.loopStart and \n\t\t\t *  Tone.Part.loopEnd. An integer\n\t\t\t *  value corresponds to the number of\n\t\t\t *  loops the Part does after it starts.\n\t\t\t *  @memberOf Tone.Part#\n\t\t\t *  @type {Boolean|Positive}\n\t\t\t *  @name loop\n\t\t\t *  @example\n\t\t\t * //loop the part 8 times\n\t\t\t * part.loop = 8;\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Part.prototype, 'loop', {\n\t\t        get: function () {\n\t\t            return this._loop;\n\t\t        },\n\t\t        set: function (loop) {\n\t\t            this._loop = loop;\n\t\t            this._forEach(function (event) {\n\t\t                event._loopStart = this._loopStart;\n\t\t                event._loopEnd = this._loopEnd;\n\t\t                event.loop = loop;\n\t\t                this._testLoopBoundries(event);\n\t\t            });\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The loopEnd point determines when it will \n\t\t\t *  loop if Tone.Part.loop is true.\n\t\t\t *  @memberOf Tone.Part#\n\t\t\t *  @type {TransportTime}\n\t\t\t *  @name loopEnd\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Part.prototype, 'loopEnd', {\n\t\t        get: function () {\n\t\t            return Tone.TransportTime(this._loopEnd, 'i').toNotation();\n\t\t        },\n\t\t        set: function (loopEnd) {\n\t\t            this._loopEnd = this.toTicks(loopEnd);\n\t\t            if (this._loop) {\n\t\t                this._forEach(function (event) {\n\t\t                    event.loopEnd = loopEnd;\n\t\t                    this._testLoopBoundries(event);\n\t\t                });\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The loopStart point determines when it will \n\t\t\t *  loop if Tone.Part.loop is true.\n\t\t\t *  @memberOf Tone.Part#\n\t\t\t *  @type {TransportTime}\n\t\t\t *  @name loopStart\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Part.prototype, 'loopStart', {\n\t\t        get: function () {\n\t\t            return Tone.TransportTime(this._loopStart, 'i').toNotation();\n\t\t        },\n\t\t        set: function (loopStart) {\n\t\t            this._loopStart = this.toTicks(loopStart);\n\t\t            if (this._loop) {\n\t\t                this._forEach(function (event) {\n\t\t                    event.loopStart = this.loopStart;\n\t\t                    this._testLoopBoundries(event);\n\t\t                });\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * \tThe playback rate of the part\n\t\t\t *  @memberOf Tone.Part#\n\t\t\t *  @type {Positive}\n\t\t\t *  @name playbackRate\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Part.prototype, 'playbackRate', {\n\t\t        get: function () {\n\t\t            return this._playbackRate;\n\t\t        },\n\t\t        set: function (rate) {\n\t\t            this._playbackRate = rate;\n\t\t            this._setAll('playbackRate', rate);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * \tThe number of scheduled notes in the part. \n\t\t\t *  @memberOf Tone.Part#\n\t\t\t *  @type {Positive}\n\t\t\t *  @name length\n\t\t\t *  @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Part.prototype, 'length', {\n\t\t        get: function () {\n\t\t            return this._events.length;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up\n\t\t\t *  @return  {Tone.Part}  this\n\t\t\t */\n\t\t    Tone.Part.prototype.dispose = function () {\n\t\t        this.removeAll();\n\t\t        this._state.dispose();\n\t\t        this._state = null;\n\t\t        this.callback = null;\n\t\t        this._events = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Part;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    /**\n\t\t\t *  @class Tone.Pattern arpeggiates between the given notes\n\t\t\t *         in a number of patterns. See Tone.CtrlPattern for\n\t\t\t *         a full list of patterns.\n\t\t\t *  @example\n\t\t\t * var pattern = new Tone.Pattern(function(time, note){\n\t\t\t *   //the order of the notes passed in depends on the pattern\n\t\t\t * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n\t\t\t *  @extends {Tone.Loop}\n\t\t\t *  @param {Function} callback The callback to invoke with the\n\t\t\t *                             event.\n\t\t\t *  @param {Array} values The values to arpeggiate over.\n\t\t\t */\n\t\t    Tone.Pattern = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'callback',\n\t\t            'values',\n\t\t            'pattern'\n\t\t        ], Tone.Pattern.defaults);\n\t\t        Tone.Loop.call(this, options);\n\t\t        /**\n\t\t\t\t *  The pattern manager\n\t\t\t\t *  @type {Tone.CtrlPattern}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._pattern = new Tone.CtrlPattern({\n\t\t            'values': options.values,\n\t\t            'type': options.pattern,\n\t\t            'index': options.index\n\t\t        });\n\t\t    };\n\t\t    Tone.extend(Tone.Pattern, Tone.Loop);\n\t\t    /**\n\t\t\t *  The defaults\n\t\t\t *  @const\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t\t    Tone.Pattern.defaults = {\n\t\t        'pattern': Tone.CtrlPattern.Type.Up,\n\t\t        'values': []\n\t\t    };\n\t\t    /**\n\t\t\t *  Internal function called when the notes should be called\n\t\t\t *  @param  {Number}  time  The time the event occurs\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Pattern.prototype._tick = function (time) {\n\t\t        this.callback(time, this._pattern.value);\n\t\t        this._pattern.next();\n\t\t    };\n\t\t    /**\n\t\t\t *  The current index in the values array.\n\t\t\t *  @memberOf Tone.Pattern#\n\t\t\t *  @type {Positive}\n\t\t\t *  @name index\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Pattern.prototype, 'index', {\n\t\t        get: function () {\n\t\t            return this._pattern.index;\n\t\t        },\n\t\t        set: function (i) {\n\t\t            this._pattern.index = i;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The array of events.\n\t\t\t *  @memberOf Tone.Pattern#\n\t\t\t *  @type {Array}\n\t\t\t *  @name values\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Pattern.prototype, 'values', {\n\t\t        get: function () {\n\t\t            return this._pattern.values;\n\t\t        },\n\t\t        set: function (vals) {\n\t\t            this._pattern.values = vals;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The current value of the pattern.\n\t\t\t *  @memberOf Tone.Pattern#\n\t\t\t *  @type {*}\n\t\t\t *  @name value\n\t\t\t *  @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Pattern.prototype, 'value', {\n\t\t        get: function () {\n\t\t            return this._pattern.value;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The pattern type. See Tone.CtrlPattern for the full list of patterns.\n\t\t\t *  @memberOf Tone.Pattern#\n\t\t\t *  @type {String}\n\t\t\t *  @name pattern\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Pattern.prototype, 'pattern', {\n\t\t        get: function () {\n\t\t            return this._pattern.type;\n\t\t        },\n\t\t        set: function (pattern) {\n\t\t            this._pattern.type = pattern;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up\n\t\t\t *  @return  {Tone.Pattern}  this\n\t\t\t */\n\t\t    Tone.Pattern.prototype.dispose = function () {\n\t\t        Tone.Loop.prototype.dispose.call(this);\n\t\t        this._pattern.dispose();\n\t\t        this._pattern = null;\n\t\t    };\n\t\t    return Tone.Pattern;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class A sequence is an alternate notation of a part. Instead\n\t\t\t *         of passing in an array of [time, event] pairs, pass\n\t\t\t *         in an array of events which will be spaced at the\n\t\t\t *         given subdivision. Sub-arrays will subdivide that beat\n\t\t\t *         by the number of items are in the array. \n\t\t\t *         Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n\t\t\t *  @param  {Function}  callback  The callback to invoke with every note\n\t\t\t *  @param  {Array}    events  The sequence\n\t\t\t *  @param  {Time} subdivision  The subdivision between which events are placed. \n\t\t\t *  @extends {Tone.Part}\n\t\t\t *  @example\n\t\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t\t * \tconsole.log(note);\n\t\t\t * //straight quater notes\n\t\t\t * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n\t\t\t *  @example\n\t\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t\t * \tconsole.log(note);\n\t\t\t * //subdivisions are given as subarrays\n\t\t\t * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n\t\t\t */\n\t\t    Tone.Sequence = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'callback',\n\t\t            'events',\n\t\t            'subdivision'\n\t\t        ], Tone.Sequence.defaults);\n\t\t        //remove the events\n\t\t        var events = options.events;\n\t\t        delete options.events;\n\t\t        Tone.Part.call(this, options);\n\t\t        /**\n\t\t\t\t *  The subdivison of each note\n\t\t\t\t *  @type  {Ticks}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._subdivision = this.toTicks(options.subdivision);\n\t\t        //if no time was passed in, the loop end is the end of the cycle\n\t\t        if (this.isUndef(options.loopEnd) && !this.isUndef(events)) {\n\t\t            this._loopEnd = events.length * this._subdivision;\n\t\t        }\n\t\t        //defaults to looping\n\t\t        this._loop = true;\n\t\t        //add all of the events\n\t\t        if (!this.isUndef(events)) {\n\t\t            for (var i = 0; i < events.length; i++) {\n\t\t                this.add(i, events[i]);\n\t\t            }\n\t\t        }\n\t\t    };\n\t\t    Tone.extend(Tone.Sequence, Tone.Part);\n\t\t    /**\n\t\t\t *  The default values.\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t\t    Tone.Sequence.defaults = { 'subdivision': '4n' };\n\t\t    /**\n\t\t\t *  The subdivision of the sequence. This can only be \n\t\t\t *  set in the constructor. The subdivision is the \n\t\t\t *  interval between successive steps. \n\t\t\t *  @type {Time}\n\t\t\t *  @memberOf Tone.Sequence#\n\t\t\t *  @name subdivision\n\t\t\t *  @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Sequence.prototype, 'subdivision', {\n\t\t        get: function () {\n\t\t            return Tone.Time(this._subdivision, 'i').toNotation();\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Get/Set an index of the sequence. If the index contains a subarray, \n\t\t\t *  a Tone.Sequence representing that sub-array will be returned. \n\t\t\t *  @example\n\t\t\t * var sequence = new Tone.Sequence(playNote, [\"E4\", \"C4\", \"F#4\", [\"A4\", \"Bb3\"]])\n\t\t\t * sequence.at(0)// => returns \"E4\"\n\t\t\t * //set a value\n\t\t\t * sequence.at(0, \"G3\");\n\t\t\t * //get a nested sequence\n\t\t\t * sequence.at(3).at(1)// => returns \"Bb3\"\n\t\t\t * @param {Positive} index The index to get or set\n\t\t\t * @param {*} value Optionally pass in the value to set at the given index.\n\t\t\t */\n\t\t    Tone.Sequence.prototype.at = function (index, value) {\n\t\t        //if the value is an array, \n\t\t        if (this.isArray(value)) {\n\t\t            //remove the current event at that index\n\t\t            this.remove(index);\n\t\t        }\n\t\t        //call the parent's method\n\t\t        return Tone.Part.prototype.at.call(this, this._indexTime(index), value);\n\t\t    };\n\t\t    /**\n\t\t\t *  Add an event at an index, if there's already something\n\t\t\t *  at that index, overwrite it. If `value` is an array, \n\t\t\t *  it will be parsed as a subsequence.\n\t\t\t *  @param {Number} index The index to add the event to\n\t\t\t *  @param {*} value The value to add at that index\n\t\t\t *  @returns {Tone.Sequence} this\n\t\t\t */\n\t\t    Tone.Sequence.prototype.add = function (index, value) {\n\t\t        if (value === null) {\n\t\t            return this;\n\t\t        }\n\t\t        if (this.isArray(value)) {\n\t\t            //make a subsequence and add that to the sequence\n\t\t            var subSubdivision = Math.round(this._subdivision / value.length);\n\t\t            value = new Tone.Sequence(this._tick.bind(this), value, Tone.Time(subSubdivision, 'i'));\n\t\t        }\n\t\t        Tone.Part.prototype.add.call(this, this._indexTime(index), value);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Remove a value from the sequence by index\n\t\t\t *  @param {Number} index The index of the event to remove\n\t\t\t *  @returns {Tone.Sequence} this\n\t\t\t */\n\t\t    Tone.Sequence.prototype.remove = function (index, value) {\n\t\t        Tone.Part.prototype.remove.call(this, this._indexTime(index), value);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Get the time of the index given the Sequence's subdivision\n\t\t\t *  @param  {Number}  index \n\t\t\t *  @return  {Time}  The time of that index\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Sequence.prototype._indexTime = function (index) {\n\t\t        if (index instanceof Tone.TransportTime) {\n\t\t            return index;\n\t\t        } else {\n\t\t            return Tone.TransportTime(index * this._subdivision + this.startOffset, 'i');\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @return {Tone.Sequence} this\n\t\t\t */\n\t\t    Tone.Sequence.prototype.dispose = function () {\n\t\t        Tone.Part.prototype.dispose.call(this);\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Sequence;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.PulseOscillator is a pulse oscillator with control over pulse width,\n\t\t\t *         also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is \n\t\t\t *         a square and only odd-numbered harmonics are present. At all other widths \n\t\t\t *         even-numbered harmonics are present. Read more \n\t\t\t *         [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Oscillator}\n\t\t\t *  @param {Frequency} [frequency] The frequency of the oscillator\n\t\t\t *  @param {NormalRange} [width] The width of the pulse\n\t\t\t *  @example\n\t\t\t * var pulse = new Tone.PulseOscillator(\"E5\", 0.4).toMaster().start();\n\t\t\t */\n\t\t    Tone.PulseOscillator = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'frequency',\n\t\t            'width'\n\t\t        ], Tone.Oscillator.defaults);\n\t\t        Tone.Source.call(this, options);\n\t\t        /**\n\t\t\t\t *  The width of the pulse. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t\t        /**\n\t\t\t\t *  gate the width amount\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._widthGate = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  the sawtooth oscillator\n\t\t\t\t *  @type {Tone.Oscillator}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._sawtooth = new Tone.Oscillator({\n\t\t            frequency: options.frequency,\n\t\t            detune: options.detune,\n\t\t            type: 'sawtooth',\n\t\t            phase: options.phase\n\t\t        });\n\t\t        /**\n\t\t\t\t *  The frequency control.\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.frequency = this._sawtooth.frequency;\n\t\t        /**\n\t\t\t\t *  The detune in cents. \n\t\t\t\t *  @type {Cents}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.detune = this._sawtooth.detune;\n\t\t        /**\n\t\t\t\t *  Threshold the signal to turn it into a square\n\t\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._thresh = new Tone.WaveShaper(function (val) {\n\t\t            if (val < 0) {\n\t\t                return -1;\n\t\t            } else {\n\t\t                return 1;\n\t\t            }\n\t\t        });\n\t\t        //connections\n\t\t        this._sawtooth.chain(this._thresh, this.output);\n\t\t        this.width.chain(this._widthGate, this._thresh);\n\t\t        this._readOnly([\n\t\t            'width',\n\t\t            'frequency',\n\t\t            'detune'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.PulseOscillator, Tone.Oscillator);\n\t\t    /**\n\t\t\t *  The default parameters.\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.PulseOscillator.defaults = {\n\t\t        'frequency': 440,\n\t\t        'detune': 0,\n\t\t        'phase': 0,\n\t\t        'width': 0.2\n\t\t    };\n\t\t    /**\n\t\t\t *  start the oscillator\n\t\t\t *  @param  {Time} time \n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.PulseOscillator.prototype._start = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        this._sawtooth.start(time);\n\t\t        this._widthGate.gain.setValueAtTime(1, time);\n\t\t    };\n\t\t    /**\n\t\t\t *  stop the oscillator\n\t\t\t *  @param  {Time} time \n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.PulseOscillator.prototype._stop = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        this._sawtooth.stop(time);\n\t\t        //the width is still connected to the output. \n\t\t        //that needs to be stopped also\n\t\t        this._widthGate.gain.setValueAtTime(0, time);\n\t\t    };\n\t\t    /**\n\t\t\t * The phase of the oscillator in degrees.\n\t\t\t * @memberOf Tone.PulseOscillator#\n\t\t\t * @type {Degrees}\n\t\t\t * @name phase\n\t\t\t */\n\t\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'phase', {\n\t\t        get: function () {\n\t\t            return this._sawtooth.phase;\n\t\t        },\n\t\t        set: function (phase) {\n\t\t            this._sawtooth.phase = phase;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The type of the oscillator. Always returns \"pulse\".\n\t\t\t * @readOnly\n\t\t\t * @memberOf Tone.PulseOscillator#\n\t\t\t * @type {string}\n\t\t\t * @name type\n\t\t\t */\n\t\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'type', {\n\t\t        get: function () {\n\t\t            return 'pulse';\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t\t * @memberOf Tone.PulseOscillator#\n\t\t\t * @type {Array}\n\t\t\t * @name partials\n\t\t\t * @private\n\t\t\t */\n\t\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'partials', {\n\t\t        get: function () {\n\t\t            return [];\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up method.\n\t\t\t *  @return {Tone.PulseOscillator} this\n\t\t\t */\n\t\t    Tone.PulseOscillator.prototype.dispose = function () {\n\t\t        Tone.Source.prototype.dispose.call(this);\n\t\t        this._sawtooth.dispose();\n\t\t        this._sawtooth = null;\n\t\t        this._writable([\n\t\t            'width',\n\t\t            'frequency',\n\t\t            'detune'\n\t\t        ]);\n\t\t        this.width.dispose();\n\t\t        this.width = null;\n\t\t        this._widthGate.dispose();\n\t\t        this._widthGate = null;\n\t\t        this._thresh.dispose();\n\t\t        this._thresh = null;\n\t\t        this.frequency = null;\n\t\t        this.detune = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.PulseOscillator;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.PWMOscillator modulates the width of a Tone.PulseOscillator \n\t\t\t *         at the modulationFrequency. This has the effect of continuously\n\t\t\t *         changing the timbre of the oscillator by altering the harmonics \n\t\t\t *         generated.\n\t\t\t *\n\t\t\t *  @extends {Tone.Oscillator}\n\t\t\t *  @constructor\n\t\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t\t *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse. \n\t\t\t *  @example\n\t\t\t *  var pwm = new Tone.PWMOscillator(\"Ab3\", 0.3).toMaster().start();\n\t\t\t */\n\t\t    Tone.PWMOscillator = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'frequency',\n\t\t            'modulationFrequency'\n\t\t        ], Tone.PWMOscillator.defaults);\n\t\t        Tone.Source.call(this, options);\n\t\t        /**\n\t\t\t\t *  the pulse oscillator\n\t\t\t\t *  @type {Tone.PulseOscillator}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._pulse = new Tone.PulseOscillator(options.modulationFrequency);\n\t\t        //change the pulse oscillator type\n\t\t        this._pulse._sawtooth.type = 'sine';\n\t\t        /**\n\t\t\t\t *  the modulator\n\t\t\t\t *  @type {Tone.Oscillator}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._modulator = new Tone.Oscillator({\n\t\t            'frequency': options.frequency,\n\t\t            'detune': options.detune,\n\t\t            'phase': options.phase\n\t\t        });\n\t\t        /**\n\t\t\t\t *  Scale the oscillator so it doesn't go silent \n\t\t\t\t *  at the extreme values.\n\t\t\t\t *  @type {Tone.Multiply}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._scale = new Tone.Multiply(2);\n\t\t        /**\n\t\t\t\t *  The frequency control.\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.frequency = this._modulator.frequency;\n\t\t        /**\n\t\t\t\t *  The detune of the oscillator.\n\t\t\t\t *  @type {Cents}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.detune = this._modulator.detune;\n\t\t        /**\n\t\t\t\t *  The modulation rate of the oscillator. \n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.modulationFrequency = this._pulse.frequency;\n\t\t        //connections\n\t\t        this._modulator.chain(this._scale, this._pulse.width);\n\t\t        this._pulse.connect(this.output);\n\t\t        this._readOnly([\n\t\t            'modulationFrequency',\n\t\t            'frequency',\n\t\t            'detune'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.PWMOscillator, Tone.Oscillator);\n\t\t    /**\n\t\t\t *  default values\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t *  @const\n\t\t\t */\n\t\t    Tone.PWMOscillator.defaults = {\n\t\t        'frequency': 440,\n\t\t        'detune': 0,\n\t\t        'phase': 0,\n\t\t        'modulationFrequency': 0.4\n\t\t    };\n\t\t    /**\n\t\t\t *  start the oscillator\n\t\t\t *  @param  {Time} [time=now]\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.PWMOscillator.prototype._start = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        this._modulator.start(time);\n\t\t        this._pulse.start(time);\n\t\t    };\n\t\t    /**\n\t\t\t *  stop the oscillator\n\t\t\t *  @param  {Time} time (optional) timing parameter\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.PWMOscillator.prototype._stop = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        this._modulator.stop(time);\n\t\t        this._pulse.stop(time);\n\t\t    };\n\t\t    /**\n\t\t\t * The type of the oscillator. Always returns \"pwm\".\n\t\t\t * @readOnly\n\t\t\t * @memberOf Tone.PWMOscillator#\n\t\t\t * @type {string}\n\t\t\t * @name type\n\t\t\t */\n\t\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'type', {\n\t\t        get: function () {\n\t\t            return 'pwm';\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t\t * @memberOf Tone.PWMOscillator#\n\t\t\t * @type {Array}\n\t\t\t * @name partials\n\t\t\t * @private\n\t\t\t */\n\t\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'partials', {\n\t\t        get: function () {\n\t\t            return [];\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The phase of the oscillator in degrees.\n\t\t\t * @memberOf Tone.PWMOscillator#\n\t\t\t * @type {number}\n\t\t\t * @name phase\n\t\t\t */\n\t\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'phase', {\n\t\t        get: function () {\n\t\t            return this._modulator.phase;\n\t\t        },\n\t\t        set: function (phase) {\n\t\t            this._modulator.phase = phase;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @return {Tone.PWMOscillator} this\n\t\t\t */\n\t\t    Tone.PWMOscillator.prototype.dispose = function () {\n\t\t        Tone.Source.prototype.dispose.call(this);\n\t\t        this._pulse.dispose();\n\t\t        this._pulse = null;\n\t\t        this._scale.dispose();\n\t\t        this._scale = null;\n\t\t        this._modulator.dispose();\n\t\t        this._modulator = null;\n\t\t        this._writable([\n\t\t            'modulationFrequency',\n\t\t            'frequency',\n\t\t            'detune'\n\t\t        ]);\n\t\t        this.frequency = null;\n\t\t        this.detune = null;\n\t\t        this.modulationFrequency = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.PWMOscillator;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.FMOscillator \n\t\t\t *\n\t\t\t *  @extends {Tone.Oscillator}\n\t\t\t *  @constructor\n\t\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t\t *  @example\n\t\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t\t * var fmOsc = new Tone.FMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t\t */\n\t\t    Tone.FMOscillator = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'frequency',\n\t\t            'type',\n\t\t            'modulationType'\n\t\t        ], Tone.FMOscillator.defaults);\n\t\t        Tone.Source.call(this, options);\n\t\t        /**\n\t\t\t\t *  The carrier oscillator\n\t\t\t\t *  @type {Tone.Oscillator}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t\t        /**\n\t\t\t\t *  The oscillator's frequency\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t\t        /**\n\t\t\t\t *  The detune control signal.\n\t\t\t\t *  @type {Cents}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.detune = this._carrier.detune;\n\t\t        this.detune.value = options.detune;\n\t\t        /**\n\t\t\t\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t\t\t *  modulating signal (ma) -- as in ma/mf. \n\t\t\t\t *\t@type {Positive}\n\t\t\t\t *\t@signal\n\t\t\t\t */\n\t\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t\t        this.modulationIndex.units = Tone.Type.Positive;\n\t\t        /**\n\t\t\t\t *  The modulating oscillator\n\t\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t\t        /**\n\t\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t\t\t *  @type {Positive}\n\t\t\t\t *  @signal\n\t\t\t\t *  @example\n\t\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t\t */\n\t\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t\t        this.harmonicity.units = Tone.Type.Positive;\n\t\t        /**\n\t\t\t\t *  the node where the modulation happens\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._modulationNode = new Tone.Gain(0);\n\t\t        //connections\n\t\t        this.frequency.connect(this._carrier.frequency);\n\t\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\t        this._modulator.connect(this._modulationNode.gain);\n\t\t        this._modulationNode.connect(this._carrier.frequency);\n\t\t        this._carrier.connect(this.output);\n\t\t        this.detune.connect(this._modulator.detune);\n\t\t        this.phase = options.phase;\n\t\t        this._readOnly([\n\t\t            'modulationIndex',\n\t\t            'frequency',\n\t\t            'detune',\n\t\t            'harmonicity'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.FMOscillator, Tone.Oscillator);\n\t\t    /**\n\t\t\t *  default values\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t *  @const\n\t\t\t */\n\t\t    Tone.FMOscillator.defaults = {\n\t\t        'frequency': 440,\n\t\t        'detune': 0,\n\t\t        'phase': 0,\n\t\t        'modulationIndex': 2,\n\t\t        'modulationType': 'square',\n\t\t        'harmonicity': 1\n\t\t    };\n\t\t    /**\n\t\t\t *  start the oscillator\n\t\t\t *  @param  {Time} [time=now]\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.FMOscillator.prototype._start = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        this._modulator.start(time);\n\t\t        this._carrier.start(time);\n\t\t    };\n\t\t    /**\n\t\t\t *  stop the oscillator\n\t\t\t *  @param  {Time} time (optional) timing parameter\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.FMOscillator.prototype._stop = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        this._modulator.stop(time);\n\t\t        this._carrier.stop(time);\n\t\t    };\n\t\t    /**\n\t\t\t * The type of the carrier oscillator\n\t\t\t * @memberOf Tone.FMOscillator#\n\t\t\t * @type {string}\n\t\t\t * @name type\n\t\t\t */\n\t\t    Object.defineProperty(Tone.FMOscillator.prototype, 'type', {\n\t\t        get: function () {\n\t\t            return this._carrier.type;\n\t\t        },\n\t\t        set: function (type) {\n\t\t            this._carrier.type = type;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The type of the modulator oscillator\n\t\t\t * @memberOf Tone.FMOscillator#\n\t\t\t * @type {String}\n\t\t\t * @name modulationType\n\t\t\t */\n\t\t    Object.defineProperty(Tone.FMOscillator.prototype, 'modulationType', {\n\t\t        get: function () {\n\t\t            return this._modulator.type;\n\t\t        },\n\t\t        set: function (type) {\n\t\t            this._modulator.type = type;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The phase of the oscillator in degrees.\n\t\t\t * @memberOf Tone.FMOscillator#\n\t\t\t * @type {number}\n\t\t\t * @name phase\n\t\t\t */\n\t\t    Object.defineProperty(Tone.FMOscillator.prototype, 'phase', {\n\t\t        get: function () {\n\t\t            return this._carrier.phase;\n\t\t        },\n\t\t        set: function (phase) {\n\t\t            this._carrier.phase = phase;\n\t\t            this._modulator.phase = phase;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The partials of the carrier waveform. A partial represents \n\t\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t\t * fundamental frequency, the second is the octave and so on\n\t\t\t * following the harmonic series. \n\t\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t\t * The value is an empty array when the type is not \"custom\". \n\t\t\t * @memberOf Tone.FMOscillator#\n\t\t\t * @type {Array}\n\t\t\t * @name partials\n\t\t\t * @example\n\t\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t\t */\n\t\t    Object.defineProperty(Tone.FMOscillator.prototype, 'partials', {\n\t\t        get: function () {\n\t\t            return this._carrier.partials;\n\t\t        },\n\t\t        set: function (partials) {\n\t\t            this._carrier.partials = partials;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @return {Tone.FMOscillator} this\n\t\t\t */\n\t\t    Tone.FMOscillator.prototype.dispose = function () {\n\t\t        Tone.Source.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'modulationIndex',\n\t\t            'frequency',\n\t\t            'detune',\n\t\t            'harmonicity'\n\t\t        ]);\n\t\t        this.frequency.dispose();\n\t\t        this.frequency = null;\n\t\t        this.detune = null;\n\t\t        this.harmonicity.dispose();\n\t\t        this.harmonicity = null;\n\t\t        this._carrier.dispose();\n\t\t        this._carrier = null;\n\t\t        this._modulator.dispose();\n\t\t        this._modulator = null;\n\t\t        this._modulationNode.dispose();\n\t\t        this._modulationNode = null;\n\t\t        this.modulationIndex.dispose();\n\t\t        this.modulationIndex = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.FMOscillator;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.AMOscillator \n\t\t\t *\n\t\t\t *  @extends {Tone.Oscillator}\n\t\t\t *  @constructor\n\t\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t\t *  @example\n\t\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t\t * var fmOsc = new Tone.AMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t\t */\n\t\t    Tone.AMOscillator = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'frequency',\n\t\t            'type',\n\t\t            'modulationType'\n\t\t        ], Tone.AMOscillator.defaults);\n\t\t        Tone.Source.call(this, options);\n\t\t        /**\n\t\t\t\t *  The carrier oscillator\n\t\t\t\t *  @type {Tone.Oscillator}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t\t        /**\n\t\t\t\t *  The oscillator's frequency\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.frequency = this._carrier.frequency;\n\t\t        /**\n\t\t\t\t *  The detune control signal.\n\t\t\t\t *  @type {Cents}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.detune = this._carrier.detune;\n\t\t        this.detune.value = options.detune;\n\t\t        /**\n\t\t\t\t *  The modulating oscillator\n\t\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t\t        /**\n\t\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._modulationScale = new Tone.AudioToGain();\n\t\t        /**\n\t\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t\t\t *  @type {Positive}\n\t\t\t\t *  @signal\n\t\t\t\t *  @example\n\t\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t\t */\n\t\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t\t        this.harmonicity.units = Tone.Type.Positive;\n\t\t        /**\n\t\t\t\t *  the node where the modulation happens\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._modulationNode = new Tone.Gain(0);\n\t\t        //connections\n\t\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\t        this.detune.connect(this._modulator.detune);\n\t\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\t        this._carrier.chain(this._modulationNode, this.output);\n\t\t        this.phase = options.phase;\n\t\t        this._readOnly([\n\t\t            'frequency',\n\t\t            'detune',\n\t\t            'harmonicity'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.AMOscillator, Tone.Oscillator);\n\t\t    /**\n\t\t\t *  default values\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t *  @const\n\t\t\t */\n\t\t    Tone.AMOscillator.defaults = {\n\t\t        'frequency': 440,\n\t\t        'detune': 0,\n\t\t        'phase': 0,\n\t\t        'modulationType': 'square',\n\t\t        'harmonicity': 1\n\t\t    };\n\t\t    /**\n\t\t\t *  start the oscillator\n\t\t\t *  @param  {Time} [time=now]\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.AMOscillator.prototype._start = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        this._modulator.start(time);\n\t\t        this._carrier.start(time);\n\t\t    };\n\t\t    /**\n\t\t\t *  stop the oscillator\n\t\t\t *  @param  {Time} time (optional) timing parameter\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.AMOscillator.prototype._stop = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        this._modulator.stop(time);\n\t\t        this._carrier.stop(time);\n\t\t    };\n\t\t    /**\n\t\t\t * The type of the carrier oscillator\n\t\t\t * @memberOf Tone.AMOscillator#\n\t\t\t * @type {string}\n\t\t\t * @name type\n\t\t\t */\n\t\t    Object.defineProperty(Tone.AMOscillator.prototype, 'type', {\n\t\t        get: function () {\n\t\t            return this._carrier.type;\n\t\t        },\n\t\t        set: function (type) {\n\t\t            this._carrier.type = type;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The type of the modulator oscillator\n\t\t\t * @memberOf Tone.AMOscillator#\n\t\t\t * @type {string}\n\t\t\t * @name modulationType\n\t\t\t */\n\t\t    Object.defineProperty(Tone.AMOscillator.prototype, 'modulationType', {\n\t\t        get: function () {\n\t\t            return this._modulator.type;\n\t\t        },\n\t\t        set: function (type) {\n\t\t            this._modulator.type = type;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The phase of the oscillator in degrees.\n\t\t\t * @memberOf Tone.AMOscillator#\n\t\t\t * @type {number}\n\t\t\t * @name phase\n\t\t\t */\n\t\t    Object.defineProperty(Tone.AMOscillator.prototype, 'phase', {\n\t\t        get: function () {\n\t\t            return this._carrier.phase;\n\t\t        },\n\t\t        set: function (phase) {\n\t\t            this._carrier.phase = phase;\n\t\t            this._modulator.phase = phase;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The partials of the carrier waveform. A partial represents \n\t\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t\t * fundamental frequency, the second is the octave and so on\n\t\t\t * following the harmonic series. \n\t\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t\t * The value is an empty array when the type is not \"custom\". \n\t\t\t * @memberOf Tone.AMOscillator#\n\t\t\t * @type {Array}\n\t\t\t * @name partials\n\t\t\t * @example\n\t\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t\t */\n\t\t    Object.defineProperty(Tone.AMOscillator.prototype, 'partials', {\n\t\t        get: function () {\n\t\t            return this._carrier.partials;\n\t\t        },\n\t\t        set: function (partials) {\n\t\t            this._carrier.partials = partials;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @return {Tone.AMOscillator} this\n\t\t\t */\n\t\t    Tone.AMOscillator.prototype.dispose = function () {\n\t\t        Tone.Source.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'frequency',\n\t\t            'detune',\n\t\t            'harmonicity'\n\t\t        ]);\n\t\t        this.frequency = null;\n\t\t        this.detune = null;\n\t\t        this.harmonicity.dispose();\n\t\t        this.harmonicity = null;\n\t\t        this._carrier.dispose();\n\t\t        this._carrier = null;\n\t\t        this._modulator.dispose();\n\t\t        this._modulator = null;\n\t\t        this._modulationNode.dispose();\n\t\t        this._modulationNode = null;\n\t\t        this._modulationScale.dispose();\n\t\t        this._modulationScale = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.AMOscillator;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.FatOscillator \n\t\t\t *\n\t\t\t *  @extends {Tone.Oscillator}\n\t\t\t *  @constructor\n\t\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t\t *  @example\n\t\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t\t * var fmOsc = new Tone.FatOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t\t */\n\t\t    Tone.FatOscillator = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'frequency',\n\t\t            'type',\n\t\t            'spread'\n\t\t        ], Tone.FatOscillator.defaults);\n\t\t        Tone.Source.call(this, options);\n\t\t        /**\n\t\t\t\t *  The oscillator's frequency\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t\t        /**\n\t\t\t\t *  The detune control signal.\n\t\t\t\t *  @type {Cents}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t\t        /**\n\t\t\t\t *  The array of oscillators\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._oscillators = [];\n\t\t        /**\n\t\t\t\t *  The total spread of the oscillators\n\t\t\t\t *  @type  {Cents}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._spread = options.spread;\n\t\t        /**\n\t\t\t\t *  The type of the oscillator\n\t\t\t\t *  @type {String}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._type = options.type;\n\t\t        /**\n\t\t\t\t *  The phase of the oscillators\n\t\t\t\t *  @type {Degrees}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._phase = options.phase;\n\t\t        /**\n\t\t\t\t *  The partials array\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._partials = this.defaultArg(options.partials, []);\n\t\t        //set the count initially\n\t\t        this.count = options.count;\n\t\t        this._readOnly([\n\t\t            'frequency',\n\t\t            'detune'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.FatOscillator, Tone.Oscillator);\n\t\t    /**\n\t\t\t *  default values\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t *  @const\n\t\t\t */\n\t\t    Tone.FatOscillator.defaults = {\n\t\t        'frequency': 440,\n\t\t        'detune': 0,\n\t\t        'phase': 0,\n\t\t        'spread': 20,\n\t\t        'count': 3,\n\t\t        'type': 'sawtooth'\n\t\t    };\n\t\t    /**\n\t\t\t *  start the oscillator\n\t\t\t *  @param  {Time} [time=now]\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.FatOscillator.prototype._start = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        this._forEach(function (osc) {\n\t\t            osc.start(time);\n\t\t        });\n\t\t    };\n\t\t    /**\n\t\t\t *  stop the oscillator\n\t\t\t *  @param  {Time} time (optional) timing parameter\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.FatOscillator.prototype._stop = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        this._forEach(function (osc) {\n\t\t            osc.stop(time);\n\t\t        });\n\t\t    };\n\t\t    /**\n\t\t\t *  Iterate over all of the oscillators\n\t\t\t *  @param  {Function}  iterator  The iterator function\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.FatOscillator.prototype._forEach = function (iterator) {\n\t\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t\t            iterator.call(this, this._oscillators[i], i);\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t * The type of the carrier oscillator\n\t\t\t * @memberOf Tone.FatOscillator#\n\t\t\t * @type {string}\n\t\t\t * @name type\n\t\t\t */\n\t\t    Object.defineProperty(Tone.FatOscillator.prototype, 'type', {\n\t\t        get: function () {\n\t\t            return this._type;\n\t\t        },\n\t\t        set: function (type) {\n\t\t            this._type = type;\n\t\t            this._forEach(function (osc) {\n\t\t                osc.type = type;\n\t\t            });\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t\t * for a total detune spread of 40 cents.\n\t\t\t * @memberOf Tone.FatOscillator#\n\t\t\t * @type {Cents}\n\t\t\t * @name spread\n\t\t\t */\n\t\t    Object.defineProperty(Tone.FatOscillator.prototype, 'spread', {\n\t\t        get: function () {\n\t\t            return this._spread;\n\t\t        },\n\t\t        set: function (spread) {\n\t\t            this._spread = spread;\n\t\t            if (this._oscillators.length > 1) {\n\t\t                var start = -spread / 2;\n\t\t                var step = spread / (this._oscillators.length - 1);\n\t\t                this._forEach(function (osc, i) {\n\t\t                    osc.detune.value = start + step * i;\n\t\t                });\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The number of detuned oscillators\n\t\t\t * @memberOf Tone.FatOscillator#\n\t\t\t * @type {Number}\n\t\t\t * @name count\n\t\t\t */\n\t\t    Object.defineProperty(Tone.FatOscillator.prototype, 'count', {\n\t\t        get: function () {\n\t\t            return this._oscillators.length;\n\t\t        },\n\t\t        set: function (count) {\n\t\t            count = Math.max(count, 1);\n\t\t            if (this._oscillators.length !== count) {\n\t\t                // var partials = this.partials;\n\t\t                // var type = this.type;\n\t\t                //dispose the previous oscillators\n\t\t                this._forEach(function (osc) {\n\t\t                    osc.dispose();\n\t\t                });\n\t\t                this._oscillators = [];\n\t\t                for (var i = 0; i < count; i++) {\n\t\t                    var osc = new Tone.Oscillator();\n\t\t                    if (this.type === Tone.Oscillator.Type.Custom) {\n\t\t                        osc.partials = this._partials;\n\t\t                    } else {\n\t\t                        osc.type = this._type;\n\t\t                    }\n\t\t                    osc.phase = this._phase;\n\t\t                    osc.volume.value = -6 - count;\n\t\t                    this.frequency.connect(osc.frequency);\n\t\t                    this.detune.connect(osc.detune);\n\t\t                    osc.connect(this.output);\n\t\t                    this._oscillators[i] = osc;\n\t\t                }\n\t\t                //set the spread\n\t\t                this.spread = this._spread;\n\t\t                if (this.state === Tone.State.Started) {\n\t\t                    this._forEach(function (osc) {\n\t\t                        osc.start();\n\t\t                    });\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The phase of the oscillator in degrees.\n\t\t\t * @memberOf Tone.FatOscillator#\n\t\t\t * @type {Number}\n\t\t\t * @name phase\n\t\t\t */\n\t\t    Object.defineProperty(Tone.FatOscillator.prototype, 'phase', {\n\t\t        get: function () {\n\t\t            return this._phase;\n\t\t        },\n\t\t        set: function (phase) {\n\t\t            this._phase = phase;\n\t\t            this._forEach(function (osc) {\n\t\t                osc.phase = phase;\n\t\t            });\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The partials of the carrier waveform. A partial represents \n\t\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t\t * fundamental frequency, the second is the octave and so on\n\t\t\t * following the harmonic series. \n\t\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t\t * The value is an empty array when the type is not \"custom\". \n\t\t\t * @memberOf Tone.FatOscillator#\n\t\t\t * @type {Array}\n\t\t\t * @name partials\n\t\t\t * @example\n\t\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t\t */\n\t\t    Object.defineProperty(Tone.FatOscillator.prototype, 'partials', {\n\t\t        get: function () {\n\t\t            return this._partials;\n\t\t        },\n\t\t        set: function (partials) {\n\t\t            this._partials = partials;\n\t\t            this._type = Tone.Oscillator.Type.Custom;\n\t\t            this._forEach(function (osc) {\n\t\t                osc.partials = partials;\n\t\t            });\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @return {Tone.FatOscillator} this\n\t\t\t */\n\t\t    Tone.FatOscillator.prototype.dispose = function () {\n\t\t        Tone.Source.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'frequency',\n\t\t            'detune'\n\t\t        ]);\n\t\t        this.frequency.dispose();\n\t\t        this.frequency = null;\n\t\t        this.detune.dispose();\n\t\t        this.detune = null;\n\t\t        this._forEach(function (osc) {\n\t\t            osc.dispose();\n\t\t        });\n\t\t        this._oscillators = null;\n\t\t        this._partials = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.FatOscillator;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n\t\t\t *         Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n\t\t\t *         into one class. The oscillator class can be changed by setting the `type`. \n\t\t\t *         `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n\t\t\t *         any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n\t\t\t *         will use the FMOscillator, AMOscillator or FatOscillator respectively. \n\t\t\t *         For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n\t\t\t *         to a FatOscillator of type \"sawtooth\". \n\t\t\t *\n\t\t\t *  @extends {Tone.Oscillator}\n\t\t\t *  @constructor\n\t\t\t *  @param {Frequency} frequency The initial frequency of the oscillator.\n\t\t\t *  @param {String} type The type of the oscillator.\n\t\t\t *  @example\n\t\t\t *  var omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\");\n\t\t\t */\n\t\t    Tone.OmniOscillator = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'frequency',\n\t\t            'type'\n\t\t        ], Tone.OmniOscillator.defaults);\n\t\t        Tone.Source.call(this, options);\n\t\t        /**\n\t\t\t\t *  The frequency control.\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t\t        /**\n\t\t\t\t *  The detune control\n\t\t\t\t *  @type {Cents}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t\t        /**\n\t\t\t\t *  the type of the oscillator source\n\t\t\t\t *  @type {String}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._sourceType = undefined;\n\t\t        /**\n\t\t\t\t *  the oscillator\n\t\t\t\t *  @type {Tone.Oscillator}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._oscillator = null;\n\t\t        //set the oscillator\n\t\t        this.type = options.type;\n\t\t        this._readOnly([\n\t\t            'frequency',\n\t\t            'detune'\n\t\t        ]);\n\t\t        //set the options\n\t\t        this.set(options);\n\t\t    };\n\t\t    Tone.extend(Tone.OmniOscillator, Tone.Oscillator);\n\t\t    /**\n\t\t\t *  default values\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t *  @const\n\t\t\t */\n\t\t    Tone.OmniOscillator.defaults = {\n\t\t        'frequency': 440,\n\t\t        'detune': 0,\n\t\t        'type': 'sine',\n\t\t        'phase': 0\n\t\t    };\n\t\t    /**\n\t\t\t *  @enum {String}\n\t\t\t *  @private\n\t\t\t */\n\t\t    var OmniOscType = {\n\t\t        Pulse: 'PulseOscillator',\n\t\t        PWM: 'PWMOscillator',\n\t\t        Osc: 'Oscillator',\n\t\t        FM: 'FMOscillator',\n\t\t        AM: 'AMOscillator',\n\t\t        Fat: 'FatOscillator'\n\t\t    };\n\t\t    /**\n\t\t\t *  start the oscillator\n\t\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.OmniOscillator.prototype._start = function (time) {\n\t\t        this._oscillator.start(time);\n\t\t    };\n\t\t    /**\n\t\t\t *  start the oscillator\n\t\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.OmniOscillator.prototype._stop = function (time) {\n\t\t        this._oscillator.stop(time);\n\t\t    };\n\t\t    /**\n\t\t\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t\t\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t\t\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t\t\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error \n\t\t\t * when it's not.\n\t\t\t * \n\t\t\t * @memberOf Tone.OmniOscillator#\n\t\t\t * @type {String}\n\t\t\t * @name type\n\t\t\t * @example\n\t\t\t * omniOsc.type = \"pwm\";\n\t\t\t * //modulationFrequency is parameter which is available\n\t\t\t * //only when the type is \"pwm\". \n\t\t\t * omniOsc.modulationFrequency.value = 0.5;\n\t\t\t * @example\n\t\t\t * //an square wave frequency modulated by a sawtooth\n\t\t\t * omniOsc.type = \"fmsquare\";\n\t\t\t * omniOsc.modulationType = \"sawtooth\";\n\t\t\t */\n\t\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'type', {\n\t\t        get: function () {\n\t\t            var prefix = '';\n\t\t            if (this._sourceType === OmniOscType.FM) {\n\t\t                prefix = 'fm';\n\t\t            } else if (this._sourceType === OmniOscType.AM) {\n\t\t                prefix = 'am';\n\t\t            } else if (this._sourceType === OmniOscType.Fat) {\n\t\t                prefix = 'fat';\n\t\t            }\n\t\t            return prefix + this._oscillator.type;\n\t\t        },\n\t\t        set: function (type) {\n\t\t            if (type.substr(0, 2) === 'fm') {\n\t\t                this._createNewOscillator(OmniOscType.FM);\n\t\t                this._oscillator.type = type.substr(2);\n\t\t            } else if (type.substr(0, 2) === 'am') {\n\t\t                this._createNewOscillator(OmniOscType.AM);\n\t\t                this._oscillator.type = type.substr(2);\n\t\t            } else if (type.substr(0, 3) === 'fat') {\n\t\t                this._createNewOscillator(OmniOscType.Fat);\n\t\t                this._oscillator.type = type.substr(3);\n\t\t            } else if (type === 'pwm') {\n\t\t                this._createNewOscillator(OmniOscType.PWM);\n\t\t            } else if (type === 'pulse') {\n\t\t                this._createNewOscillator(OmniOscType.Pulse);\n\t\t            } else {\n\t\t                this._createNewOscillator(OmniOscType.Osc);\n\t\t                this._oscillator.type = type;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The partials of the waveform. A partial represents \n\t\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t\t * fundamental frequency, the second is the octave and so on\n\t\t\t * following the harmonic series. \n\t\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t\t * The value is an empty array when the type is not \"custom\". \n\t\t\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t\t\t * @memberOf Tone.OmniOscillator#\n\t\t\t * @type {Array}\n\t\t\t * @name partials\n\t\t\t * @example\n\t\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t\t */\n\t\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'partials', {\n\t\t        get: function () {\n\t\t            return this._oscillator.partials;\n\t\t        },\n\t\t        set: function (partials) {\n\t\t            this._oscillator.partials = partials;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Set a member/attribute of the oscillator. \n\t\t\t *  @param {Object|String} params\n\t\t\t *  @param {number=} value\n\t\t\t *  @param {Time=} rampTime\n\t\t\t *  @returns {Tone.OmniOscillator} this\n\t\t\t */\n\t\t    Tone.OmniOscillator.prototype.set = function (params, value) {\n\t\t        //make sure the type is set first\n\t\t        if (params === 'type') {\n\t\t            this.type = value;\n\t\t        } else if (this.isObject(params) && params.hasOwnProperty('type')) {\n\t\t            this.type = params.type;\n\t\t        }\n\t\t        //then set the rest\n\t\t        Tone.prototype.set.apply(this, arguments);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  connect the oscillator to the frequency and detune signals\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.OmniOscillator.prototype._createNewOscillator = function (oscType) {\n\t\t        if (oscType !== this._sourceType) {\n\t\t            this._sourceType = oscType;\n\t\t            var OscillatorConstructor = Tone[oscType];\n\t\t            //short delay to avoid clicks on the change\n\t\t            var now = this.now() + this.blockTime;\n\t\t            if (this._oscillator !== null) {\n\t\t                var oldOsc = this._oscillator;\n\t\t                oldOsc.stop(now);\n\t\t                //dispose the old one\n\t\t                setTimeout(function () {\n\t\t                    oldOsc.dispose();\n\t\t                    oldOsc = null;\n\t\t                }, this.blockTime * 1000);\n\t\t            }\n\t\t            this._oscillator = new OscillatorConstructor();\n\t\t            this.frequency.connect(this._oscillator.frequency);\n\t\t            this.detune.connect(this._oscillator.detune);\n\t\t            this._oscillator.connect(this.output);\n\t\t            if (this.state === Tone.State.Started) {\n\t\t                this._oscillator.start(now);\n\t\t            }\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t * The phase of the oscillator in degrees. \n\t\t\t * @memberOf Tone.OmniOscillator#\n\t\t\t * @type {Degrees}\n\t\t\t * @name phase\n\t\t\t */\n\t\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'phase', {\n\t\t        get: function () {\n\t\t            return this._oscillator.phase;\n\t\t        },\n\t\t        set: function (phase) {\n\t\t            this._oscillator.phase = phase;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The width of the oscillator (only if the oscillator is set to \"pulse\")\n\t\t\t * @memberOf Tone.OmniOscillator#\n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t * @name width\n\t\t\t * @example\n\t\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pulse\");\n\t\t\t * //can access the width attribute only if type === \"pulse\"\n\t\t\t * omniOsc.width.value = 0.2; \n\t\t\t */\n\t\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'width', {\n\t\t        get: function () {\n\t\t            if (this._sourceType === OmniOscType.Pulse) {\n\t\t                return this._oscillator.width;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The number of detuned oscillators\n\t\t\t * @memberOf Tone.OmniOscillator#\n\t\t\t * @type {Number}\n\t\t\t * @name count\n\t\t\t */\n\t\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'count', {\n\t\t        get: function () {\n\t\t            if (this._sourceType === OmniOscType.Fat) {\n\t\t                return this._oscillator.count;\n\t\t            }\n\t\t        },\n\t\t        set: function (count) {\n\t\t            if (this._sourceType === OmniOscType.Fat) {\n\t\t                this._oscillator.count = count;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t\t\t * for more info.\n\t\t\t * @memberOf Tone.OmniOscillator#\n\t\t\t * @type {Cents}\n\t\t\t * @name spread\n\t\t\t */\n\t\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'spread', {\n\t\t        get: function () {\n\t\t            if (this._sourceType === OmniOscType.Fat) {\n\t\t                return this._oscillator.spread;\n\t\t            }\n\t\t        },\n\t\t        set: function (spread) {\n\t\t            if (this._sourceType === OmniOscType.Fat) {\n\t\t                this._oscillator.spread = spread;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The type of the modulator oscillator. Only if the oscillator\n\t\t\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t\t\t * for more info. \n\t\t\t * @memberOf Tone.OmniOscillator#\n\t\t\t * @type {String}\n\t\t\t * @name modulationType\n\t\t\t */\n\t\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationType', {\n\t\t        get: function () {\n\t\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t\t                return this._oscillator.modulationType;\n\t\t            }\n\t\t        },\n\t\t        set: function (mType) {\n\t\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t\t                this._oscillator.modulationType = mType;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t\t * modulating signal (ma) -- as in ma/mf. \n\t\t\t * See Tone.FMOscillator for more info. \n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t * @name modulationIndex\n\t\t\t */\n\t\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationIndex', {\n\t\t        get: function () {\n\t\t            if (this._sourceType === OmniOscType.FM) {\n\t\t                return this._oscillator.modulationIndex;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t\t\t *  for more info. \n\t\t\t *  @memberOf Tone.OmniOscillator#\n\t\t\t *  @signal\n\t\t\t *  @type {Positive}\n\t\t\t *  @name harmonicity\n\t\t\t */\n\t\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'harmonicity', {\n\t\t        get: function () {\n\t\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t\t                return this._oscillator.harmonicity;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The modulationFrequency Signal of the oscillator \n\t\t\t * (only if the oscillator type is set to pwm). See \n\t\t\t * Tone.PWMOscillator for more info. \n\t\t\t * @memberOf Tone.OmniOscillator#\n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t * @name modulationFrequency\n\t\t\t * @example\n\t\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pwm\");\n\t\t\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t\t\t * omniOsc.modulationFrequency.value = 0.2; \n\t\t\t */\n\t\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationFrequency', {\n\t\t        get: function () {\n\t\t            if (this._sourceType === OmniOscType.PWM) {\n\t\t                return this._oscillator.modulationFrequency;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @return {Tone.OmniOscillator} this\n\t\t\t */\n\t\t    Tone.OmniOscillator.prototype.dispose = function () {\n\t\t        Tone.Source.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'frequency',\n\t\t            'detune'\n\t\t        ]);\n\t\t        this.detune.dispose();\n\t\t        this.detune = null;\n\t\t        this.frequency.dispose();\n\t\t        this.frequency = null;\n\t\t        this._oscillator.dispose();\n\t\t        this._oscillator = null;\n\t\t        this._sourceType = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.OmniOscillator;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Base-class for all instruments\n\t\t\t *  \n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone}\n\t\t\t */\n\t\t    Tone.Instrument = function (options) {\n\t\t        //get the defaults\n\t\t        options = this.defaultArg(options, Tone.Instrument.defaults);\n\t\t        /**\n\t\t\t\t *  The output and volume triming node\n\t\t\t\t *  @type  {Tone.Volume}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t\t        /**\n\t\t\t\t * The volume of the output in decibels.\n\t\t\t\t * @type {Decibels}\n\t\t\t\t * @signal\n\t\t\t\t * @example\n\t\t\t\t * source.volume.value = -6;\n\t\t\t\t */\n\t\t        this.volume = this._volume.volume;\n\t\t        this._readOnly('volume');\n\t\t    };\n\t\t    Tone.extend(Tone.Instrument);\n\t\t    /**\n\t\t\t *  the default attributes\n\t\t\t *  @type {object}\n\t\t\t */\n\t\t    Tone.Instrument.defaults = {\n\t\t        /** the volume of the output in decibels */\n\t\t        'volume': 0\n\t\t    };\n\t\t    /**\n\t\t\t *  @abstract\n\t\t\t *  @param {string|number} note the note to trigger\n\t\t\t *  @param {Time} [time=now] the time to trigger the ntoe\n\t\t\t *  @param {number} [velocity=1] the velocity to trigger the note\n\t\t\t */\n\t\t    Tone.Instrument.prototype.triggerAttack = Tone.noOp;\n\t\t    /**\n\t\t\t *  @abstract\n\t\t\t *  @param {Time} [time=now] when to trigger the release\n\t\t\t */\n\t\t    Tone.Instrument.prototype.triggerRelease = Tone.noOp;\n\t\t    /**\n\t\t\t *  Trigger the attack and then the release after the duration. \n\t\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t\t *  @param  {Time} duration How long the note should be held for before\n\t\t\t *                          triggering the release. This value must be greater than 0. \n\t\t\t *  @param {Time} [time=now]  When the note should be triggered.\n\t\t\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t\t\t *  @returns {Tone.Instrument} this\n\t\t\t *  @example\n\t\t\t * //trigger \"C4\" for the duration of an 8th note\n\t\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t\t */\n\t\t    Tone.Instrument.prototype.triggerAttackRelease = function (note, duration, time, velocity) {\n\t\t        if (this.isUndef(time)) {\n\t\t            time = this.now() + this.blockTime;\n\t\t        } else {\n\t\t            time = this.toSeconds(time);\n\t\t        }\n\t\t        duration = this.toSeconds(duration);\n\t\t        this.triggerAttack(note, time, velocity);\n\t\t        this.triggerRelease(time + duration);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.Instrument} this\n\t\t\t */\n\t\t    Tone.Instrument.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._volume.dispose();\n\t\t        this._volume = null;\n\t\t        this._writable(['volume']);\n\t\t        this.volume = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Instrument;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  This is an abstract base class for other monophonic instruments to \n\t\t\t *          extend. IMPORTANT: It does not make any sound on its own and\n\t\t\t *          shouldn't be directly instantiated.\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @abstract\n\t\t\t *  @extends {Tone.Instrument}\n\t\t\t */\n\t\t    Tone.Monophonic = function (options) {\n\t\t        //get the defaults\n\t\t        options = this.defaultArg(options, Tone.Monophonic.defaults);\n\t\t        Tone.Instrument.call(this, options);\n\t\t        /**\n\t\t\t\t *  The glide time between notes. \n\t\t\t\t *  @type {Time}\n\t\t\t\t */\n\t\t        this.portamento = options.portamento;\n\t\t    };\n\t\t    Tone.extend(Tone.Monophonic, Tone.Instrument);\n\t\t    /**\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.Monophonic.defaults = { 'portamento': 0 };\n\t\t    /**\n\t\t\t *  Trigger the attack of the note optionally with a given velocity. \n\t\t\t *  \n\t\t\t *  \n\t\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t\t *  @param  {Time} [time=now]     When the note should start.\n\t\t\t *  @param  {number} [velocity=1] velocity The velocity scaler \n\t\t\t *                                determines how \"loud\" the note \n\t\t\t *                                will be triggered.\n\t\t\t *  @returns {Tone.Monophonic} this\n\t\t\t *  @example\n\t\t\t * synth.triggerAttack(\"C4\");\n\t\t\t *  @example\n\t\t\t * //trigger the note a half second from now at half velocity\n\t\t\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t\t\t */\n\t\t    Tone.Monophonic.prototype.triggerAttack = function (note, time, velocity) {\n\t\t        if (this.isUndef(time)) {\n\t\t            time = this.now() + this.blockTime;\n\t\t        } else {\n\t\t            time = this.toSeconds(time);\n\t\t        }\n\t\t        this._triggerEnvelopeAttack(time, velocity);\n\t\t        this.setNote(note, time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Trigger the release portion of the envelope\n\t\t\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t\t\t *  @returns {Tone.Monophonic} this\n\t\t\t *  @example\n\t\t\t * synth.triggerRelease();\n\t\t\t */\n\t\t    Tone.Monophonic.prototype.triggerRelease = function (time) {\n\t\t        if (this.isUndef(time)) {\n\t\t            time = this.now() + this.blockTime;\n\t\t        } else {\n\t\t            time = this.toSeconds(time);\n\t\t        }\n\t\t        this._triggerEnvelopeRelease(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  override this method with the actual method\n\t\t\t *  @abstract\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Monophonic.prototype._triggerEnvelopeAttack = function () {\n\t\t    };\n\t\t    /**\n\t\t\t *  override this method with the actual method\n\t\t\t *  @abstract\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Monophonic.prototype._triggerEnvelopeRelease = function () {\n\t\t    };\n\t\t    /**\n\t\t\t *  Set the note at the given time. If no time is given, the note\n\t\t\t *  will set immediately. \n\t\t\t *  @param {Frequency} note The note to change to.\n\t\t\t *  @param  {Time} [time=now] The time when the note should be set. \n\t\t\t *  @returns {Tone.Monophonic} this\n\t\t\t * @example\n\t\t\t * //change to F#6 in one quarter note from now.\n\t\t\t * synth.setNote(\"F#6\", \"+4n\");\n\t\t\t * @example\n\t\t\t * //change to Bb4 right now\n\t\t\t * synth.setNote(\"Bb4\");\n\t\t\t */\n\t\t    Tone.Monophonic.prototype.setNote = function (note, time) {\n\t\t        time = this.toSeconds(time);\n\t\t        if (this.portamento > 0) {\n\t\t            var currentNote = this.frequency.value;\n\t\t            this.frequency.setValueAtTime(currentNote, time);\n\t\t            var portTime = this.toSeconds(this.portamento);\n\t\t            this.frequency.exponentialRampToValueAtTime(note, time + portTime);\n\t\t        } else {\n\t\t            this.frequency.setValueAtTime(note, time);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Monophonic;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.Synth is composed simply of a Tone.OmniOscillator\n\t\t\t *          routed through a Tone.AmplitudeEnvelope. \n\t\t\t *          <img src=\"https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231\">\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Monophonic}\n\t\t\t *  @param {Object} [options] the options available for the synth \n\t\t\t *                          see defaults below\n\t\t\t *  @example\n\t\t\t * var synth = new Tone.Synth().toMaster();\n\t\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t\t */\n\t\t    Tone.Synth = function (options) {\n\t\t        //get the defaults\n\t\t        options = this.defaultArg(options, Tone.Synth.defaults);\n\t\t        Tone.Monophonic.call(this, options);\n\t\t        /**\n\t\t\t\t *  The oscillator.\n\t\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t\t */\n\t\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t\t        /**\n\t\t\t\t *  The frequency control.\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.frequency = this.oscillator.frequency;\n\t\t        /**\n\t\t\t\t *  The detune control.\n\t\t\t\t *  @type {Cents}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.detune = this.oscillator.detune;\n\t\t        /**\n\t\t\t\t *  The amplitude envelope.\n\t\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t\t */\n\t\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t\t        //connect the oscillators to the output\n\t\t        this.oscillator.chain(this.envelope, this.output);\n\t\t        //start the oscillators\n\t\t        this.oscillator.start();\n\t\t        this._readOnly([\n\t\t            'oscillator',\n\t\t            'frequency',\n\t\t            'detune',\n\t\t            'envelope'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.Synth, Tone.Monophonic);\n\t\t    /**\n\t\t\t *  @const\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.Synth.defaults = {\n\t\t        'oscillator': { 'type': 'triangle' },\n\t\t        'envelope': {\n\t\t            'attack': 0.005,\n\t\t            'decay': 0.1,\n\t\t            'sustain': 0.3,\n\t\t            'release': 1\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  start the attack portion of the envelope\n\t\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t\t *  @returns {Tone.Synth} this\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Synth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t\t        //the envelopes\n\t\t        this.envelope.triggerAttack(time, velocity);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  start the release portion of the envelope\n\t\t\t *  @param {Time} [time=now] the time the release should start\n\t\t\t *  @returns {Tone.Synth} this\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Synth.prototype._triggerEnvelopeRelease = function (time) {\n\t\t        this.envelope.triggerRelease(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.Synth} this\n\t\t\t */\n\t\t    Tone.Synth.prototype.dispose = function () {\n\t\t        Tone.Monophonic.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'oscillator',\n\t\t            'frequency',\n\t\t            'detune',\n\t\t            'envelope'\n\t\t        ]);\n\t\t        this.oscillator.dispose();\n\t\t        this.oscillator = null;\n\t\t        this.envelope.dispose();\n\t\t        this.envelope = null;\n\t\t        this.frequency = null;\n\t\t        this.detune = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Synth;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  AMSynth uses the output of one Tone.Synth to modulate the\n\t\t\t *          amplitude of another Tone.Synth. The harmonicity (the ratio between\n\t\t\t *          the two signals) affects the timbre of the output signal greatly.\n\t\t\t *          Read more about Amplitude Modulation Synthesis on \n\t\t\t *          [SoundOnSound](http://www.soundonsound.com/sos/mar00/articles/synthsecrets.htm).\n\t\t\t *          <img src=\"https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457\">\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Monophonic}\n\t\t\t *  @param {Object} [options] the options available for the synth \n\t\t\t *                            see defaults below\n\t\t\t *  @example\n\t\t\t * var synth = new Tone.AMSynth().toMaster();\n\t\t\t * synth.triggerAttackRelease(\"C4\", \"4n\");\n\t\t\t */\n\t\t    Tone.AMSynth = function (options) {\n\t\t        options = this.defaultArg(options, Tone.AMSynth.defaults);\n\t\t        Tone.Monophonic.call(this, options);\n\t\t        /**\n\t\t\t\t *  The carrier voice. \n\t\t\t\t *  @type {Tone.Synth}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._carrier = new Tone.Synth();\n\t\t        this._carrier.volume.value = -10;\n\t\t        /**\n\t\t\t\t *  The carrier's oscillator\n\t\t\t\t *  @type {Tone.Oscillator}\n\t\t\t\t */\n\t\t        this.oscillator = this._carrier.oscillator;\n\t\t        /**\n\t\t\t\t *  The carrier's envelope\n\t\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t\t */\n\t\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t\t        /**\n\t\t\t\t *  The modulator voice. \n\t\t\t\t *  @type {Tone.Synth}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._modulator = new Tone.Synth();\n\t\t        this._modulator.volume.value = -10;\n\t\t        /**\n\t\t\t\t *  The modulator's oscillator which is applied\n\t\t\t\t *  to the amplitude of the oscillator\n\t\t\t\t *  @type {Tone.Oscillator}\n\t\t\t\t */\n\t\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t\t        /**\n\t\t\t\t *  The modulator's envelope\n\t\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t\t */\n\t\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t\t        /**\n\t\t\t\t *  The frequency.\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t\t        /**\n\t\t\t\t *  The detune in cents\n\t\t\t\t *  @type {Cents}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t\t        /**\n\t\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t\t *  @type {Positive}\n\t\t\t\t *  @signal\n\t\t\t\t *  @example\n\t\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t\t */\n\t\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t\t        this.harmonicity.units = Tone.Type.Positive;\n\t\t        /**\n\t\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._modulationScale = new Tone.AudioToGain();\n\t\t        /**\n\t\t\t\t *  the node where the modulation happens\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._modulationNode = new Tone.Gain();\n\t\t        //control the two voices frequency\n\t\t        this.frequency.connect(this._carrier.frequency);\n\t\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\t        this._carrier.chain(this._modulationNode, this.output);\n\t\t        this._readOnly([\n\t\t            'frequency',\n\t\t            'harmonicity',\n\t\t            'oscillator',\n\t\t            'envelope',\n\t\t            'modulation',\n\t\t            'modulationEnvelope',\n\t\t            'detune'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.AMSynth, Tone.Monophonic);\n\t\t    /**\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.AMSynth.defaults = {\n\t\t        'harmonicity': 3,\n\t\t        'detune': 0,\n\t\t        'oscillator': { 'type': 'sine' },\n\t\t        'envelope': {\n\t\t            'attack': 0.01,\n\t\t            'decay': 0.01,\n\t\t            'sustain': 1,\n\t\t            'release': 0.5\n\t\t        },\n\t\t        'modulation': { 'type': 'square' },\n\t\t        'modulationEnvelope': {\n\t\t            'attack': 0.5,\n\t\t            'decay': 0,\n\t\t            'sustain': 1,\n\t\t            'release': 0.5\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  trigger the attack portion of the note\n\t\t\t *  \n\t\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t\t *  @param {NormalRange} [velocity=1] the velocity of the note\n\t\t\t *  @private\n\t\t\t *  @returns {Tone.AMSynth} this\n\t\t\t */\n\t\t    Tone.AMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t\t        //the port glide\n\t\t        time = this.toSeconds(time);\n\t\t        //the envelopes\n\t\t        this.envelope.triggerAttack(time, velocity);\n\t\t        this.modulationEnvelope.triggerAttack(time, velocity);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  trigger the release portion of the note\n\t\t\t *  \n\t\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t\t *  @private\n\t\t\t *  @returns {Tone.AMSynth} this\n\t\t\t */\n\t\t    Tone.AMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t\t        this.envelope.triggerRelease(time);\n\t\t        this.modulationEnvelope.triggerRelease(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.AMSynth} this\n\t\t\t */\n\t\t    Tone.AMSynth.prototype.dispose = function () {\n\t\t        Tone.Monophonic.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'frequency',\n\t\t            'harmonicity',\n\t\t            'oscillator',\n\t\t            'envelope',\n\t\t            'modulation',\n\t\t            'modulationEnvelope',\n\t\t            'detune'\n\t\t        ]);\n\t\t        this._carrier.dispose();\n\t\t        this._carrier = null;\n\t\t        this._modulator.dispose();\n\t\t        this._modulator = null;\n\t\t        this.frequency.dispose();\n\t\t        this.frequency = null;\n\t\t        this.detune.dispose();\n\t\t        this.detune = null;\n\t\t        this.harmonicity.dispose();\n\t\t        this.harmonicity = null;\n\t\t        this._modulationScale.dispose();\n\t\t        this._modulationScale = null;\n\t\t        this._modulationNode.dispose();\n\t\t        this._modulationNode = null;\n\t\t        this.oscillator = null;\n\t\t        this.envelope = null;\n\t\t        this.modulationEnvelope = null;\n\t\t        this.modulation = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.AMSynth;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.\n\t\t\t *          The amplitude of the Tone.Oscillator and the cutoff frequency of the \n\t\t\t *          Tone.Filter are controlled by Tone.Envelopes. \n\t\t\t *          <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n\t\t\t *          \n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Monophonic}\n\t\t\t *  @param {Object} [options] the options available for the synth \n\t\t\t *                          see defaults below\n\t\t\t *  @example\n\t\t\t * var synth = new Tone.MonoSynth({\n\t\t\t * \t\"oscillator\" : {\n\t\t\t * \t\t\"type\" : \"square\"\n\t\t\t *  },\n\t\t\t *  \"envelope\" : {\n\t\t\t *  \t\"attack\" : 0.1\n\t\t\t *  }\n\t\t\t * }).toMaster();\n\t\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t\t */\n\t\t    Tone.MonoSynth = function (options) {\n\t\t        //get the defaults\n\t\t        options = this.defaultArg(options, Tone.MonoSynth.defaults);\n\t\t        Tone.Monophonic.call(this, options);\n\t\t        /**\n\t\t\t\t *  The oscillator.\n\t\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t\t */\n\t\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t\t        /**\n\t\t\t\t *  The frequency control.\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.frequency = this.oscillator.frequency;\n\t\t        /**\n\t\t\t\t *  The detune control.\n\t\t\t\t *  @type {Cents}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.detune = this.oscillator.detune;\n\t\t        /**\n\t\t\t\t *  The filter.\n\t\t\t\t *  @type {Tone.Filter}\n\t\t\t\t */\n\t\t        this.filter = new Tone.Filter(options.filter);\n\t\t        /**\n\t\t\t\t *  The filter envelope.\n\t\t\t\t *  @type {Tone.FrequencyEnvelope}\n\t\t\t\t */\n\t\t        this.filterEnvelope = new Tone.FrequencyEnvelope(options.filterEnvelope);\n\t\t        /**\n\t\t\t\t *  The amplitude envelope.\n\t\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t\t */\n\t\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t\t        //connect the oscillators to the output\n\t\t        this.oscillator.chain(this.filter, this.envelope, this.output);\n\t\t        //start the oscillators\n\t\t        this.oscillator.start();\n\t\t        //connect the filter envelope\n\t\t        this.filterEnvelope.connect(this.filter.frequency);\n\t\t        this._readOnly([\n\t\t            'oscillator',\n\t\t            'frequency',\n\t\t            'detune',\n\t\t            'filter',\n\t\t            'filterEnvelope',\n\t\t            'envelope'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.MonoSynth, Tone.Monophonic);\n\t\t    /**\n\t\t\t *  @const\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.MonoSynth.defaults = {\n\t\t        'frequency': 'C4',\n\t\t        'detune': 0,\n\t\t        'oscillator': { 'type': 'square' },\n\t\t        'filter': {\n\t\t            'Q': 6,\n\t\t            'type': 'lowpass',\n\t\t            'rolloff': -24\n\t\t        },\n\t\t        'envelope': {\n\t\t            'attack': 0.005,\n\t\t            'decay': 0.1,\n\t\t            'sustain': 0.9,\n\t\t            'release': 1\n\t\t        },\n\t\t        'filterEnvelope': {\n\t\t            'attack': 0.06,\n\t\t            'decay': 0.2,\n\t\t            'sustain': 0.5,\n\t\t            'release': 2,\n\t\t            'baseFrequency': 200,\n\t\t            'octaves': 7,\n\t\t            'exponent': 2\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  start the attack portion of the envelope\n\t\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t\t *  @returns {Tone.MonoSynth} this\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.MonoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t\t        //the envelopes\n\t\t        this.envelope.triggerAttack(time, velocity);\n\t\t        this.filterEnvelope.triggerAttack(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  start the release portion of the envelope\n\t\t\t *  @param {Time} [time=now] the time the release should start\n\t\t\t *  @returns {Tone.MonoSynth} this\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.MonoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t\t        this.envelope.triggerRelease(time);\n\t\t        this.filterEnvelope.triggerRelease(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.MonoSynth} this\n\t\t\t */\n\t\t    Tone.MonoSynth.prototype.dispose = function () {\n\t\t        Tone.Monophonic.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'oscillator',\n\t\t            'frequency',\n\t\t            'detune',\n\t\t            'filter',\n\t\t            'filterEnvelope',\n\t\t            'envelope'\n\t\t        ]);\n\t\t        this.oscillator.dispose();\n\t\t        this.oscillator = null;\n\t\t        this.envelope.dispose();\n\t\t        this.envelope = null;\n\t\t        this.filterEnvelope.dispose();\n\t\t        this.filterEnvelope = null;\n\t\t        this.filter.dispose();\n\t\t        this.filter = null;\n\t\t        this.frequency = null;\n\t\t        this.detune = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.MonoSynth;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.DuoSynth is a monophonic synth composed of two \n\t\t\t *          MonoSynths run in parallel with control over the \n\t\t\t *          frequency ratio between the two voices and vibrato effect.\n\t\t\t *          <img src=\"https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448\">\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Monophonic}\n\t\t\t *  @param {Object} [options] the options available for the synth \n\t\t\t *                          see defaults below\n\t\t\t *  @example\n\t\t\t * var duoSynth = new Tone.DuoSynth().toMaster();\n\t\t\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t\t\t */\n\t\t    Tone.DuoSynth = function (options) {\n\t\t        options = this.defaultArg(options, Tone.DuoSynth.defaults);\n\t\t        Tone.Monophonic.call(this, options);\n\t\t        /**\n\t\t\t\t *  the first voice\n\t\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t\t */\n\t\t        this.voice0 = new Tone.MonoSynth(options.voice0);\n\t\t        this.voice0.volume.value = -10;\n\t\t        /**\n\t\t\t\t *  the second voice\n\t\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t\t */\n\t\t        this.voice1 = new Tone.MonoSynth(options.voice1);\n\t\t        this.voice1.volume.value = -10;\n\t\t        /**\n\t\t\t\t *  The vibrato LFO. \n\t\t\t\t *  @type {Tone.LFO}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._vibrato = new Tone.LFO(options.vibratoRate, -50, 50);\n\t\t        this._vibrato.start();\n\t\t        /**\n\t\t\t\t * the vibrato frequency\n\t\t\t\t * @type {Frequency}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t\t        this.vibratoRate = this._vibrato.frequency;\n\t\t        /**\n\t\t\t\t *  the vibrato gain\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._vibratoGain = new Tone.Gain(options.vibratoAmount, Tone.Type.Positive);\n\t\t        /**\n\t\t\t\t * The amount of vibrato\n\t\t\t\t * @type {Positive}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t\t        this.vibratoAmount = this._vibratoGain.gain;\n\t\t        /**\n\t\t\t\t *  the frequency control\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t\t        /**\n\t\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t\t *  @type {Positive}\n\t\t\t\t *  @signal\n\t\t\t\t *  @example\n\t\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t\t * duoSynth.harmonicity.value = 0.5;\n\t\t\t\t */\n\t\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t\t        this.harmonicity.units = Tone.Type.Positive;\n\t\t        //control the two voices frequency\n\t\t        this.frequency.connect(this.voice0.frequency);\n\t\t        this.frequency.chain(this.harmonicity, this.voice1.frequency);\n\t\t        this._vibrato.connect(this._vibratoGain);\n\t\t        this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\t\t        this.voice0.connect(this.output);\n\t\t        this.voice1.connect(this.output);\n\t\t        this._readOnly([\n\t\t            'voice0',\n\t\t            'voice1',\n\t\t            'frequency',\n\t\t            'vibratoAmount',\n\t\t            'vibratoRate'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.DuoSynth, Tone.Monophonic);\n\t\t    /**\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.DuoSynth.defaults = {\n\t\t        'vibratoAmount': 0.5,\n\t\t        'vibratoRate': 5,\n\t\t        'harmonicity': 1.5,\n\t\t        'voice0': {\n\t\t            'volume': -10,\n\t\t            'portamento': 0,\n\t\t            'oscillator': { 'type': 'sine' },\n\t\t            'filterEnvelope': {\n\t\t                'attack': 0.01,\n\t\t                'decay': 0,\n\t\t                'sustain': 1,\n\t\t                'release': 0.5\n\t\t            },\n\t\t            'envelope': {\n\t\t                'attack': 0.01,\n\t\t                'decay': 0,\n\t\t                'sustain': 1,\n\t\t                'release': 0.5\n\t\t            }\n\t\t        },\n\t\t        'voice1': {\n\t\t            'volume': -10,\n\t\t            'portamento': 0,\n\t\t            'oscillator': { 'type': 'sine' },\n\t\t            'filterEnvelope': {\n\t\t                'attack': 0.01,\n\t\t                'decay': 0,\n\t\t                'sustain': 1,\n\t\t                'release': 0.5\n\t\t            },\n\t\t            'envelope': {\n\t\t                'attack': 0.01,\n\t\t                'decay': 0,\n\t\t                'sustain': 1,\n\t\t                'release': 0.5\n\t\t            }\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  start the attack portion of the envelopes\n\t\t\t *  \n\t\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t\t *  @returns {Tone.DuoSynth} this\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.DuoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t\t        time = this.toSeconds(time);\n\t\t        this.voice0.envelope.triggerAttack(time, velocity);\n\t\t        this.voice1.envelope.triggerAttack(time, velocity);\n\t\t        this.voice0.filterEnvelope.triggerAttack(time);\n\t\t        this.voice1.filterEnvelope.triggerAttack(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  start the release portion of the envelopes\n\t\t\t *  \n\t\t\t *  @param {Time} [time=now] the time the release should start\n\t\t\t *  @returns {Tone.DuoSynth} this\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.DuoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t\t        this.voice0.triggerRelease(time);\n\t\t        this.voice1.triggerRelease(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.DuoSynth} this\n\t\t\t */\n\t\t    Tone.DuoSynth.prototype.dispose = function () {\n\t\t        Tone.Monophonic.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'voice0',\n\t\t            'voice1',\n\t\t            'frequency',\n\t\t            'vibratoAmount',\n\t\t            'vibratoRate'\n\t\t        ]);\n\t\t        this.voice0.dispose();\n\t\t        this.voice0 = null;\n\t\t        this.voice1.dispose();\n\t\t        this.voice1 = null;\n\t\t        this.frequency.dispose();\n\t\t        this.frequency = null;\n\t\t        this._vibratoGain.dispose();\n\t\t        this._vibratoGain = null;\n\t\t        this._vibrato = null;\n\t\t        this.harmonicity.dispose();\n\t\t        this.harmonicity = null;\n\t\t        this.vibratoAmount.dispose();\n\t\t        this.vibratoAmount = null;\n\t\t        this.vibratoRate = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.DuoSynth;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n\t\t\t *          the frequency of a second Tone.Synth. A lot of spectral content \n\t\t\t *          can be explored using the modulationIndex parameter. Read more about\n\t\t\t *          frequency modulation synthesis on [SoundOnSound](http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm).\n\t\t\t *          <img src=\"https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462\">\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Monophonic}\n\t\t\t *  @param {Object} [options] the options available for the synth \n\t\t\t *                          see defaults below\n\t\t\t *  @example\n\t\t\t * var fmSynth = new Tone.FMSynth().toMaster();\n\t\t\t * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t\t\t */\n\t\t    Tone.FMSynth = function (options) {\n\t\t        options = this.defaultArg(options, Tone.FMSynth.defaults);\n\t\t        Tone.Monophonic.call(this, options);\n\t\t        /**\n\t\t\t\t *  The carrier voice.\n\t\t\t\t *  @type {Tone.Synth}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._carrier = new Tone.Synth(options.carrier);\n\t\t        this._carrier.volume.value = -10;\n\t\t        /**\n\t\t\t\t *  The carrier's oscillator\n\t\t\t\t *  @type {Tone.Oscillator}\n\t\t\t\t */\n\t\t        this.oscillator = this._carrier.oscillator;\n\t\t        /**\n\t\t\t\t *  The carrier's envelope\n\t\t\t\t *  @type {Tone.Oscillator}\n\t\t\t\t */\n\t\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t\t        /**\n\t\t\t\t *  The modulator voice.\n\t\t\t\t *  @type {Tone.Synth}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._modulator = new Tone.Synth(options.modulator);\n\t\t        this._modulator.volume.value = -10;\n\t\t        /**\n\t\t\t\t *  The modulator's oscillator which is applied\n\t\t\t\t *  to the amplitude of the oscillator\n\t\t\t\t *  @type {Tone.Oscillator}\n\t\t\t\t */\n\t\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t\t        /**\n\t\t\t\t *  The modulator's envelope\n\t\t\t\t *  @type {Tone.Oscillator}\n\t\t\t\t */\n\t\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t\t        /**\n\t\t\t\t *  The frequency control.\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t\t        /**\n\t\t\t\t *  The detune in cents\n\t\t\t\t *  @type {Cents}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t\t        /**\n\t\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t\t *  @type {Positive}\n\t\t\t\t *  @signal\n\t\t\t\t *  @example\n\t\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t\t */\n\t\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t\t        this.harmonicity.units = Tone.Type.Positive;\n\t\t        /**\n\t\t\t\t *  The modulation index which essentially the depth or amount of the modulation. It is the \n\t\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t\t\t *  modulating signal (ma) -- as in ma/mf. \n\t\t\t\t *\t@type {Positive}\n\t\t\t\t *\t@signal\n\t\t\t\t */\n\t\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t\t        this.modulationIndex.units = Tone.Type.Positive;\n\t\t        /**\n\t\t\t\t *  the node where the modulation happens\n\t\t\t\t *  @type {GainNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._modulationNode = new Tone.Gain(0);\n\t\t        //control the two voices frequency\n\t\t        this.frequency.connect(this._carrier.frequency);\n\t\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t\t        this._modulator.connect(this._modulationNode.gain);\n\t\t        this._modulationNode.connect(this._carrier.frequency);\n\t\t        this._carrier.connect(this.output);\n\t\t        this._readOnly([\n\t\t            'frequency',\n\t\t            'harmonicity',\n\t\t            'modulationIndex',\n\t\t            'oscillator',\n\t\t            'envelope',\n\t\t            'modulation',\n\t\t            'modulationEnvelope',\n\t\t            'detune'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.FMSynth, Tone.Monophonic);\n\t\t    /**\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.FMSynth.defaults = {\n\t\t        'harmonicity': 3,\n\t\t        'modulationIndex': 10,\n\t\t        'detune': 0,\n\t\t        'oscillator': { 'type': 'sine' },\n\t\t        'envelope': {\n\t\t            'attack': 0.01,\n\t\t            'decay': 0.01,\n\t\t            'sustain': 1,\n\t\t            'release': 0.5\n\t\t        },\n\t\t        'modulation': { 'type': 'square' },\n\t\t        'modulationEnvelope': {\n\t\t            'attack': 0.5,\n\t\t            'decay': 0,\n\t\t            'sustain': 1,\n\t\t            'release': 0.5\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t * \ttrigger the attack portion of the note\n\t\t\t *  \n\t\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t\t *  @param {number} [velocity=1] the velocity of the note\n\t\t\t *  @returns {Tone.FMSynth} this\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.FMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t\t        time = this.toSeconds(time);\n\t\t        //the envelopes\n\t\t        this.envelope.triggerAttack(time, velocity);\n\t\t        this.modulationEnvelope.triggerAttack(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  trigger the release portion of the note\n\t\t\t *  \n\t\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t\t *  @returns {Tone.FMSynth} this\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.FMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        this.envelope.triggerRelease(time);\n\t\t        this.modulationEnvelope.triggerRelease(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.FMSynth} this\n\t\t\t */\n\t\t    Tone.FMSynth.prototype.dispose = function () {\n\t\t        Tone.Monophonic.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'frequency',\n\t\t            'harmonicity',\n\t\t            'modulationIndex',\n\t\t            'oscillator',\n\t\t            'envelope',\n\t\t            'modulation',\n\t\t            'modulationEnvelope',\n\t\t            'detune'\n\t\t        ]);\n\t\t        this._carrier.dispose();\n\t\t        this._carrier = null;\n\t\t        this._modulator.dispose();\n\t\t        this._modulator = null;\n\t\t        this.frequency.dispose();\n\t\t        this.frequency = null;\n\t\t        this.detune.dispose();\n\t\t        this.detune = null;\n\t\t        this.modulationIndex.dispose();\n\t\t        this.modulationIndex = null;\n\t\t        this.harmonicity.dispose();\n\t\t        this.harmonicity = null;\n\t\t        this._modulationNode.dispose();\n\t\t        this._modulationNode = null;\n\t\t        this.oscillator = null;\n\t\t        this.envelope = null;\n\t\t        this.modulationEnvelope = null;\n\t\t        this.modulation = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.FMSynth;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.MembraneSynth makes kick and tom sounds using a single oscillator\n\t\t\t *          with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n\t\t\t *          is routed through a Tone.AmplitudeEnvelope to the output. The drum\n\t\t\t *          quality of the sound comes from the frequency envelope applied\n\t\t\t *          during during Tone.MembraneSynth.triggerAttack(note). The frequency\n\t\t\t *          envelope starts at <code>note * .octaves</code> and ramps to \n\t\t\t *          <code>note</code> over the duration of <code>.pitchDecay</code>. \n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Instrument}\n\t\t\t *  @param {Object} [options] the options available for the synth \n\t\t\t *                          see defaults below\n\t\t\t *  @example\n\t\t\t * var synth = new Tone.MembraneSynth().toMaster();\n\t\t\t * synth.triggerAttackRelease(\"C2\", \"8n\");\n\t\t\t */\n\t\t    Tone.MembraneSynth = function (options) {\n\t\t        options = this.defaultArg(options, Tone.MembraneSynth.defaults);\n\t\t        Tone.Instrument.call(this, options);\n\t\t        /**\n\t\t\t\t *  The oscillator.\n\t\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t\t */\n\t\t        this.oscillator = new Tone.OmniOscillator(options.oscillator).start();\n\t\t        /**\n\t\t\t\t *  The amplitude envelope.\n\t\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t\t */\n\t\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t\t        /**\n\t\t\t\t *  The number of octaves the pitch envelope ramps.\n\t\t\t\t *  @type {Positive}\n\t\t\t\t */\n\t\t        this.octaves = options.octaves;\n\t\t        /**\n\t\t\t\t *  The amount of time the frequency envelope takes. \n\t\t\t\t *  @type {Time}\n\t\t\t\t */\n\t\t        this.pitchDecay = options.pitchDecay;\n\t\t        this.oscillator.chain(this.envelope, this.output);\n\t\t        this._readOnly([\n\t\t            'oscillator',\n\t\t            'envelope'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.MembraneSynth, Tone.Instrument);\n\t\t    /**\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.MembraneSynth.defaults = {\n\t\t        'pitchDecay': 0.05,\n\t\t        'octaves': 10,\n\t\t        'oscillator': { 'type': 'sine' },\n\t\t        'envelope': {\n\t\t            'attack': 0.001,\n\t\t            'decay': 0.4,\n\t\t            'sustain': 0.01,\n\t\t            'release': 1.4,\n\t\t            'attackCurve': 'exponential'\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Trigger the note at the given time with the given velocity. \n\t\t\t *  \n\t\t\t *  @param  {Frequency} note     the note\n\t\t\t *  @param  {Time} [time=now]     the time, if not given is now\n\t\t\t *  @param  {number} [velocity=1] velocity defaults to 1\n\t\t\t *  @returns {Tone.MembraneSynth} this\n\t\t\t *  @example\n\t\t\t *  kick.triggerAttack(60);\n\t\t\t */\n\t\t    Tone.MembraneSynth.prototype.triggerAttack = function (note, time, velocity) {\n\t\t        time = this.toSeconds(time);\n\t\t        note = this.toFrequency(note);\n\t\t        var maxNote = note * this.octaves;\n\t\t        this.oscillator.frequency.setValueAtTime(maxNote, time);\n\t\t        this.oscillator.frequency.exponentialRampToValueAtTime(note, time + this.toSeconds(this.pitchDecay));\n\t\t        this.envelope.triggerAttack(time, velocity);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Trigger the release portion of the note.\n\t\t\t *  \n\t\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t\t *  @returns {Tone.MembraneSynth} this\n\t\t\t */\n\t\t    Tone.MembraneSynth.prototype.triggerRelease = function (time) {\n\t\t        this.envelope.triggerRelease(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.MembraneSynth} this\n\t\t\t */\n\t\t    Tone.MembraneSynth.prototype.dispose = function () {\n\t\t        Tone.Instrument.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'oscillator',\n\t\t            'envelope'\n\t\t        ]);\n\t\t        this.oscillator.dispose();\n\t\t        this.oscillator = null;\n\t\t        this.envelope.dispose();\n\t\t        this.envelope = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.MembraneSynth;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    /**\n\t\t\t *  Inharmonic ratio of frequencies based on the Roland TR-808\n\t\t\t *  Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n\t\t\t *  @private\n\t\t\t *  @static\n\t\t\t *  @type {Array}\n\t\t\t */\n\t\t    var inharmRatios = [\n\t\t        1,\n\t\t        1.483,\n\t\t        1.932,\n\t\t        2.546,\n\t\t        2.63,\n\t\t        3.897\n\t\t    ];\n\t\t    /**\n\t\t\t *  @class  A highly inharmonic and spectrally complex source with a highpass filter\n\t\t\t *          and amplitude envelope which is good for making metalophone sounds. Based\n\t\t\t *          on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n\t\t\t *          Inspiration from [Sound on Sound](http://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Instrument}\n\t\t\t *  @param {Object} [options] The options availble for the synth\n\t\t\t *                             see defaults below\n\t\t\t */\n\t\t    Tone.MetalSynth = function (options) {\n\t\t        options = this.defaultArg(options, Tone.MetalSynth.defaults);\n\t\t        Tone.Instrument.call(this, options);\n\t\t        /**\n\t\t\t\t *  The frequency of the cymbal\n\t\t\t\t *  @type  {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t\t        /**\n\t\t\t\t *  The array of FMOscillators\n\t\t\t\t *  @type  {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._oscillators = [];\n\t\t        /**\n\t\t\t\t *  The frequency multipliers\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._freqMultipliers = [];\n\t\t        /**\n\t\t\t\t *  The amplitude for the body\n\t\t\t\t *  @type {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._amplitue = new Tone.Gain(0).connect(this.output);\n\t\t        /**\n\t\t\t\t *  highpass the output\n\t\t\t\t *  @type {Tone.Filter}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._highpass = new Tone.Filter({\n\t\t            'type': 'highpass',\n\t\t            'Q': -3.0102999566398125\n\t\t        }).connect(this._amplitue);\n\t\t        /**\n\t\t\t\t *  The number of octaves the highpass\n\t\t\t\t *  filter frequency ramps\n\t\t\t\t *  @type {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._octaves = options.octaves;\n\t\t        /**\n\t\t\t\t *  Scale the body envelope\n\t\t\t\t *  for the bandpass\n\t\t\t\t *  @type {Tone.Scale}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._filterFreqScaler = new Tone.Scale(options.resonance, 7000);\n\t\t        /**\n\t\t\t\t *  The envelope which is connected both to the \n\t\t\t\t *  amplitude and highpass filter's cutoff frequency\n\t\t\t\t *  @type  {Tone.Envelope}\n\t\t\t\t */\n\t\t        this.envelope = new Tone.Envelope({\n\t\t            'attack': options.envelope.attack,\n\t\t            'attackCurve': 'linear',\n\t\t            'decay': options.envelope.decay,\n\t\t            'sustain': 0,\n\t\t            'release': options.envelope.release\n\t\t        }).chain(this._filterFreqScaler, this._highpass.frequency);\n\t\t        this.envelope.connect(this._amplitue.gain);\n\t\t        for (var i = 0; i < inharmRatios.length; i++) {\n\t\t            var osc = new Tone.FMOscillator({\n\t\t                'type': 'square',\n\t\t                'modulationType': 'square',\n\t\t                'harmonicity': options.harmonicity,\n\t\t                'modulationIndex': options.modulationIndex\n\t\t            });\n\t\t            osc.connect(this._highpass).start(0);\n\t\t            this._oscillators[i] = osc;\n\t\t            var mult = new Tone.Multiply(inharmRatios[i]);\n\t\t            this._freqMultipliers[i] = mult;\n\t\t            this.frequency.chain(mult, osc.frequency);\n\t\t        }\n\t\t        //set the octaves\n\t\t        this.octaves = options.octaves;\n\t\t    };\n\t\t    Tone.extend(Tone.MetalSynth, Tone.Instrument);\n\t\t    /**\n\t\t\t *  default values\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.MetalSynth.defaults = {\n\t\t        'frequency': 200,\n\t\t        'envelope': {\n\t\t            'attack': 0.001,\n\t\t            'decay': 1.4,\n\t\t            'release': 0.2\n\t\t        },\n\t\t        'harmonicity': 5.1,\n\t\t        'modulationIndex': 32,\n\t\t        'resonance': 4000,\n\t\t        'octaves': 1.5\n\t\t    };\n\t\t    /**\n\t\t\t *  Trigger the attack.\n\t\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t\t *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.\n\t\t\t *  @return  {Tone.MetalSynth}  this\n\t\t\t */\n\t\t    Tone.MetalSynth.prototype.triggerAttack = function (time, vel) {\n\t\t        time = this.toSeconds(time);\n\t\t        vel = this.defaultArg(vel, 1);\n\t\t        this.envelope.triggerAttack(time, vel);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Trigger the release of the envelope.\n\t\t\t *  @param  {Time}  time      When the release should be triggered.\n\t\t\t *  @return  {Tone.MetalSynth}  this\n\t\t\t */\n\t\t    Tone.MetalSynth.prototype.triggerRelease = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        this.envelope.triggerRelease(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Trigger the attack and release of the envelope after the given \n\t\t\t *  duration. \n\t\t\t *  @param  {Time}  duration  The duration before triggering the release\n\t\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t\t *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.\n\t\t\t *  @return  {Tone.MetalSynth}  this\n\t\t\t */\n\t\t    Tone.MetalSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t\t        time = this.toSeconds(time);\n\t\t        duration = this.toSeconds(duration);\n\t\t        this.triggerAttack(time, velocity);\n\t\t        this.triggerRelease(time + duration);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  The modulationIndex of the oscillators which make up the source.\n\t\t\t *  see Tone.FMOscillator.modulationIndex\n\t\t\t *  @memberOf Tone.MetalSynth#\n\t\t\t *  @type {Positive}\n\t\t\t *  @name  modulationIndex\n\t\t\t */\n\t\t    Object.defineProperty(Tone.MetalSynth.prototype, 'modulationIndex', {\n\t\t        get: function () {\n\t\t            return this._oscillators[0].modulationIndex.value;\n\t\t        },\n\t\t        set: function (val) {\n\t\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t\t                this._oscillators[i].modulationIndex.value = val;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The harmonicity of the oscillators which make up the source.\n\t\t\t *  see Tone.FMOscillator.harmonicity\n\t\t\t *  @memberOf Tone.MetalSynth#\n\t\t\t *  @type {Positive}\n\t\t\t *  @name  harmonicity\n\t\t\t */\n\t\t    Object.defineProperty(Tone.MetalSynth.prototype, 'harmonicity', {\n\t\t        get: function () {\n\t\t            return this._oscillators[0].harmonicity.value;\n\t\t        },\n\t\t        set: function (val) {\n\t\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t\t                this._oscillators[i].harmonicity.value = val;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The frequency of the highpass filter attached to the envelope\n\t\t\t *  @memberOf Tone.MetalSynth#\n\t\t\t *  @type {Frequency}\n\t\t\t *  @name  resonance\n\t\t\t */\n\t\t    Object.defineProperty(Tone.MetalSynth.prototype, 'resonance', {\n\t\t        get: function () {\n\t\t            return this._filterFreqScaler.min;\n\t\t        },\n\t\t        set: function (val) {\n\t\t            this._filterFreqScaler.min = val;\n\t\t            this.octaves = this._octaves;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The number of octaves above the \"resonance\" frequency\n\t\t\t *  that the filter ramps during the attack/decay envelope\n\t\t\t *  @memberOf Tone.MetalSynth#\n\t\t\t *  @type {Number}\n\t\t\t *  @name  octaves\n\t\t\t */\n\t\t    Object.defineProperty(Tone.MetalSynth.prototype, 'octaves', {\n\t\t        get: function () {\n\t\t            return this._octaves;\n\t\t        },\n\t\t        set: function (octs) {\n\t\t            this._octaves = octs;\n\t\t            this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, octs);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up\n\t\t\t *  @returns {Tone.MetalSynth} this\n\t\t\t */\n\t\t    Tone.MetalSynth.prototype.dispose = function () {\n\t\t        Tone.Instrument.prototype.dispose.call(this);\n\t\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t\t            this._oscillators[i].dispose();\n\t\t            this._freqMultipliers[i].dispose();\n\t\t        }\n\t\t        this._oscillators = null;\n\t\t        this._freqMultipliers = null;\n\t\t        this.frequency.dispose();\n\t\t        this.frequency = null;\n\t\t        this._filterFreqScaler.dispose();\n\t\t        this._filterFreqScaler = null;\n\t\t        this._amplitue.dispose();\n\t\t        this._amplitue = null;\n\t\t        this.envelope.dispose();\n\t\t        this.envelope = null;\n\t\t        this._highpass.dispose();\n\t\t        this._highpass = null;\n\t\t    };\n\t\t    return Tone.MetalSynth;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    /**\n\t\t\t *  BufferSource polyfill\n\t\t\t */\n\t\t    if (window.AudioBufferSourceNode && !AudioBufferSourceNode.prototype.start) {\n\t\t        AudioBufferSourceNode.prototype.start = AudioBufferSourceNode.prototype.noteGrainOn;\n\t\t        AudioBufferSourceNode.prototype.stop = AudioBufferSourceNode.prototype.noteOff;\n\t\t    }\n\t\t    /**\n\t\t\t *  @class Wrapper around the native BufferSourceNode.\n\t\t\t *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n\t\t\t *  @param  {Function}  onended  The callback to invoke when the \n\t\t\t *                               buffer is done playing.\n\t\t\t */\n\t\t    Tone.BufferSource = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'buffer',\n\t\t            'onended'\n\t\t        ], Tone.BufferSource.defaults);\n\t\t        /**\n\t\t\t\t *  The callback to invoke after the \n\t\t\t\t *  buffer source is done playing. \n\t\t\t\t *  @type  {Function}\n\t\t\t\t */\n\t\t        this.onended = options.onended;\n\t\t        /**\n\t\t\t\t *  The time that the buffer was started.\n\t\t\t\t *  @type  {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._startTime = -1;\n\t\t        /**\n\t\t\t\t *  The time that the buffer is scheduled to stop.\n\t\t\t\t *  @type  {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._stopTime = -1;\n\t\t        /**\n\t\t\t\t *  The gain node which envelopes the BufferSource\n\t\t\t\t *  @type  {Tone.Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._gainNode = this.output = new Tone.Gain();\n\t\t        /**\n\t\t\t\t *  The buffer source\n\t\t\t\t *  @type  {AudioBufferSourceNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._source = this.context.createBufferSource();\n\t\t        this._source.connect(this._gainNode);\n\t\t        /**\n\t\t\t\t *  The playbackRate of the buffer\n\t\t\t\t *  @type {Positive}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.playbackRate = new Tone.Param(this._source.playbackRate, Tone.Type.Positive);\n\t\t        /**\n\t\t\t\t *  The fadeIn time of the amplitude envelope.\n\t\t\t\t *  @type {Time}\n\t\t\t\t */\n\t\t        this.fadeIn = options.fadeIn;\n\t\t        /**\n\t\t\t\t *  The fadeOut time of the amplitude envelope.\n\t\t\t\t *  @type {Time}\n\t\t\t\t */\n\t\t        this.fadeOut = options.fadeOut;\n\t\t        /**\n\t\t\t\t *  The value that the buffer ramps to\n\t\t\t\t *  @type {Gain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._gain = 1;\n\t\t        /**\n\t\t\t\t * The onended timeout\n\t\t\t\t * @type {Number}\n\t\t\t\t * @private\n\t\t\t\t */\n\t\t        this._onendedTimeout = -1;\n\t\t        //set the buffer initially\n\t\t        if (!this.isUndef(options.buffer)) {\n\t\t            this.buffer = options.buffer;\n\t\t        }\n\t\t        this.loop = options.loop;\n\t\t    };\n\t\t    Tone.extend(Tone.BufferSource);\n\t\t    /**\n\t\t\t *  The defaults\n\t\t\t *  @const\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t\t    Tone.BufferSource.defaults = {\n\t\t        'onended': Tone.noOp,\n\t\t        'fadeIn': 0,\n\t\t        'fadeOut': 0\n\t\t    };\n\t\t    /**\n\t\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t\t *  @type {Tone.State}\n\t\t\t *  @readOnly\n\t\t\t *  @memberOf Tone.BufferSource#\n\t\t\t *  @name state\n\t\t\t */\n\t\t    Object.defineProperty(Tone.BufferSource.prototype, 'state', {\n\t\t        get: function () {\n\t\t            var now = this.now();\n\t\t            if (this._startTime !== -1 && now >= this._startTime && now < this._stopTime) {\n\t\t                return Tone.State.Started;\n\t\t            } else {\n\t\t                return Tone.State.Stopped;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Start the buffer\n\t\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t\t *                                 to start at. \n\t\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t\t *                                is given, it will default to the full length \n\t\t\t *                                of the sample (minus any offset)\n\t\t\t *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.\n\t\t\t *  @param  {Time=}  fadeInTime  The optional fadeIn ramp time.\n\t\t\t *  @return  {Tone.BufferSource}  this\n\t\t\t */\n\t\t    Tone.BufferSource.prototype.start = function (time, offset, duration, gain, fadeInTime) {\n\t\t        if (this._startTime !== -1) {\n\t\t            throw new Error('Tone.BufferSource: can only be started once.');\n\t\t        }\n\t\t        if (this.buffer) {\n\t\t            time = this.toSeconds(time);\n\t\t            //if it's a loop the default offset is the loopstart point\n\t\t            if (this.loop) {\n\t\t                offset = this.defaultArg(offset, this.loopStart);\n\t\t            } else {\n\t\t                //otherwise the default offset is 0\n\t\t                offset = this.defaultArg(offset, 0);\n\t\t            }\n\t\t            offset = this.toSeconds(offset);\n\t\t            //the values in seconds\n\t\t            time = this.toSeconds(time);\n\t\t            this._source.start(time, offset);\n\t\t            gain = this.defaultArg(gain, 1);\n\t\t            this._gain = gain;\n\t\t            //the fadeIn time\n\t\t            if (this.isUndef(fadeInTime)) {\n\t\t                fadeInTime = this.toSeconds(this.fadeIn);\n\t\t            } else {\n\t\t                fadeInTime = this.toSeconds(fadeInTime);\n\t\t            }\n\t\t            if (fadeInTime > 0) {\n\t\t                this._gainNode.gain.setValueAtTime(0, time);\n\t\t                this._gainNode.gain.linearRampToValueAtTime(this._gain, time + fadeInTime);\n\t\t            } else {\n\t\t                this._gainNode.gain.setValueAtTime(gain, time);\n\t\t            }\n\t\t            this._startTime = time + fadeInTime;\n\t\t            if (!this.isUndef(duration)) {\n\t\t                duration = this.defaultArg(duration, this.buffer.duration - offset);\n\t\t                duration = this.toSeconds(duration);\n\t\t                this.stop(time + duration + fadeInTime, fadeInTime);\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Stop the buffer. Optionally add a ramp time to fade the \n\t\t\t *  buffer out. \n\t\t\t *  @param  {Time=}  time         The time the buffer should stop.\n\t\t\t *  @param  {Time=}  fadeOutTime  How long the gain should fade out for\n\t\t\t *  @return  {Tone.BufferSource}  this\n\t\t\t */\n\t\t    Tone.BufferSource.prototype.stop = function (time, fadeOutTime) {\n\t\t        if (this.buffer) {\n\t\t            time = this.toSeconds(time);\n\t\t            //the fadeOut time\n\t\t            if (this.isUndef(fadeOutTime)) {\n\t\t                fadeOutTime = this.toSeconds(this.fadeOut);\n\t\t            } else {\n\t\t                fadeOutTime = this.toSeconds(fadeOutTime);\n\t\t            }\n\t\t            this._stopTime = time + fadeOutTime;\n\t\t            //cancel the end curve\n\t\t            this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t\t            //set a new one\n\t\t            if (fadeOutTime > 0) {\n\t\t                this._gainNode.gain.setValueAtTime(this._gain, time);\n\t\t                this._gainNode.gain.linearRampToValueAtTime(0, time + fadeOutTime);\n\t\t                time += fadeOutTime;\n\t\t            } else {\n\t\t                this._gainNode.gain.setValueAtTime(0, time);\n\t\t            }\n\t\t            // fix for safari bug and old FF\n\t\t            if (!this.isNumber(this._source.playbackState) || this._source.playbackState === 2) {\n\t\t                this._source.stop(time);\n\t\t            }\n\t\t            clearTimeout(this._onendedTimeout);\n\t\t            this._onendedTimeout = setTimeout(this._onended.bind(this), (this._stopTime - this.now()) * 1000);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Internal callback when the buffer is ended. \n\t\t\t *  Invokes `onended` and disposes the node.\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.BufferSource.prototype._onended = function () {\n\t\t        this.onended(this);\n\t\t        this.dispose();\n\t\t    };\n\t\t    /**\n\t\t\t * If loop is true, the loop will start at this position. \n\t\t\t * @memberOf Tone.BufferSource#\n\t\t\t * @type {Time}\n\t\t\t * @name loopStart\n\t\t\t */\n\t\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopStart', {\n\t\t        get: function () {\n\t\t            return this._source.loopStart;\n\t\t        },\n\t\t        set: function (loopStart) {\n\t\t            this._source.loopStart = this.toSeconds(loopStart);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * If loop is true, the loop will end at this position.\n\t\t\t * @memberOf Tone.BufferSource#\n\t\t\t * @type {Time}\n\t\t\t * @name loopEnd\n\t\t\t */\n\t\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopEnd', {\n\t\t        get: function () {\n\t\t            return this._source.loopEnd;\n\t\t        },\n\t\t        set: function (loopEnd) {\n\t\t            this._source.loopEnd = this.toSeconds(loopEnd);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The audio buffer belonging to the player. \n\t\t\t * @memberOf Tone.BufferSource#\n\t\t\t * @type {AudioBuffer}\n\t\t\t * @name buffer\n\t\t\t */\n\t\t    Object.defineProperty(Tone.BufferSource.prototype, 'buffer', {\n\t\t        get: function () {\n\t\t            if (this._source) {\n\t\t                return this._source.buffer;\n\t\t            } else {\n\t\t                return null;\n\t\t            }\n\t\t        },\n\t\t        set: function (buffer) {\n\t\t            if (buffer instanceof Tone.Buffer) {\n\t\t                this._source.buffer = buffer.get();\n\t\t            } else {\n\t\t                this._source.buffer = buffer;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * If the buffer should loop once it's over. \n\t\t\t * @memberOf Tone.BufferSource#\n\t\t\t * @type {boolean}\n\t\t\t * @name loop\n\t\t\t */\n\t\t    Object.defineProperty(Tone.BufferSource.prototype, 'loop', {\n\t\t        get: function () {\n\t\t            return this._source.loop;\n\t\t        },\n\t\t        set: function (loop) {\n\t\t            this._source.loop = loop;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @return  {Tone.BufferSource}  this\n\t\t\t */\n\t\t    Tone.BufferSource.prototype.dispose = function () {\n\t\t        this.onended = null;\n\t\t        if (this._source) {\n\t\t            this._source.disconnect();\n\t\t            this._source = null;\n\t\t        }\n\t\t        if (this._gainNode) {\n\t\t            this._gainNode.dispose();\n\t\t            this._gainNode = null;\n\t\t        }\n\t\t        this._startTime = -1;\n\t\t        this.playbackRate = null;\n\t\t        this.output = null;\n\t\t        clearTimeout(this._onendedTimeout);\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.BufferSource;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.\n\t\t\t *          Tone.Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n\t\t\t *          colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Source}\n\t\t\t *  @param {string} type the noise type (white|pink|brown)\n\t\t\t *  @example\n\t\t\t * //initialize the noise and start\n\t\t\t * var noise = new Tone.Noise(\"pink\").start();\n\t\t\t * \n\t\t\t * //make an autofilter to shape the noise\n\t\t\t * var autoFilter = new Tone.AutoFilter({\n\t\t\t * \t\"frequency\" : \"8m\", \n\t\t\t * \t\"min\" : 800, \n\t\t\t * \t\"max\" : 15000\n\t\t\t * }).connect(Tone.Master);\n\t\t\t * \n\t\t\t * //connect the noise\n\t\t\t * noise.connect(autoFilter);\n\t\t\t * //start the autofilter LFO\n\t\t\t * autoFilter.start()\n\t\t\t */\n\t\t    Tone.Noise = function () {\n\t\t        var options = this.optionsObject(arguments, ['type'], Tone.Noise.defaults);\n\t\t        Tone.Source.call(this, options);\n\t\t        /**\n\t\t\t\t *  @private\n\t\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t\t */\n\t\t        this._source = null;\n\t\t        /**\n\t\t\t\t *  the buffer\n\t\t\t\t *  @private\n\t\t\t\t *  @type {AudioBuffer}\n\t\t\t\t */\n\t\t        this._type = options.type;\n\t\t        /**\n\t\t\t\t *  The playback rate of the noise. Affects\n\t\t\t\t *  the \"frequency\" of the noise.\n\t\t\t\t *  @type {Positive}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this._playbackRate = options.playbackRate;\n\t\t    };\n\t\t    Tone.extend(Tone.Noise, Tone.Source);\n\t\t    /**\n\t\t\t *  the default parameters\n\t\t\t *\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.Noise.defaults = {\n\t\t        'type': 'white',\n\t\t        'playbackRate': 1\n\t\t    };\n\t\t    /**\n\t\t\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\". \n\t\t\t * @memberOf Tone.Noise#\n\t\t\t * @type {string}\n\t\t\t * @name type\n\t\t\t * @example\n\t\t\t * noise.type = \"white\";\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Noise.prototype, 'type', {\n\t\t        get: function () {\n\t\t            return this._type;\n\t\t        },\n\t\t        set: function (type) {\n\t\t            if (this._type !== type) {\n\t\t                if (type in _noiseBuffers) {\n\t\t                    this._type = type;\n\t\t                    //if it's playing, stop and restart it\n\t\t                    if (this.state === Tone.State.Started) {\n\t\t                        var now = this.now() + this.blockTime;\n\t\t                        this._stop(now);\n\t\t                        this._start(now);\n\t\t                    }\n\t\t                } else {\n\t\t                    throw new TypeError('Tone.Noise: invalid type: ' + type);\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  The playback rate of the noise. Affects\n\t\t\t *  the \"frequency\" of the noise.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Noise.prototype, 'playbackRate', {\n\t\t        get: function () {\n\t\t            return this._playbackRate;\n\t\t        },\n\t\t        set: function (rate) {\n\t\t            this._playbackRate = rate;\n\t\t            if (this._source) {\n\t\t                this._source.playbackRate.value = rate;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  internal start method\n\t\t\t *\n\t\t\t *  @param {Time} time\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Noise.prototype._start = function (time) {\n\t\t        var buffer = _noiseBuffers[this._type];\n\t\t        this._source = new Tone.BufferSource(buffer).connect(this.output);\n\t\t        this._source.loop = true;\n\t\t        this._source.playbackRate.value = this._playbackRate;\n\t\t        this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t\t    };\n\t\t    /**\n\t\t\t *  internal stop method\n\t\t\t *\n\t\t\t *  @param {Time} time\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Noise.prototype._stop = function (time) {\n\t\t        if (this._source) {\n\t\t            this._source.stop(this.toSeconds(time));\n\t\t            this._source = null;\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.Noise} this\n\t\t\t */\n\t\t    Tone.Noise.prototype.dispose = function () {\n\t\t        Tone.Source.prototype.dispose.call(this);\n\t\t        if (this._source !== null) {\n\t\t            this._source.disconnect();\n\t\t            this._source = null;\n\t\t        }\n\t\t        this._buffer = null;\n\t\t        return this;\n\t\t    };\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    // THE BUFFERS\n\t\t    ///////////////////////////////////////////////////////////////////////////\n\t\t    //Noise buffer stats\n\t\t    var bufferLength = 44100 * 5;\n\t\t    var channels = 2;\n\t\t    /**\n\t\t\t *\tthe noise arrays. only generated once on init\n\t\t\t *  @static\n\t\t\t *  @private\n\t\t\t *  @type {Array}\n\t\t\t *  borrowed heavily from https://github.com/zacharydenton/noise.js \n\t\t\t *  (c) 2013 Zach Denton (MIT)\n\t\t\t */\n\t\t    var _noiseArrays = {\n\t\t        'pink': function () {\n\t\t            var buffer = [];\n\t\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t\t                var channel = new Float32Array(bufferLength);\n\t\t                buffer[channelNum] = channel;\n\t\t                var b0, b1, b2, b3, b4, b5, b6;\n\t\t                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0;\n\t\t                for (var i = 0; i < bufferLength; i++) {\n\t\t                    var white = Math.random() * 2 - 1;\n\t\t                    b0 = 0.99886 * b0 + white * 0.0555179;\n\t\t                    b1 = 0.99332 * b1 + white * 0.0750759;\n\t\t                    b2 = 0.969 * b2 + white * 0.153852;\n\t\t                    b3 = 0.8665 * b3 + white * 0.3104856;\n\t\t                    b4 = 0.55 * b4 + white * 0.5329522;\n\t\t                    b5 = -0.7616 * b5 - white * 0.016898;\n\t\t                    channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t                    channel[i] *= 0.11;\n\t\t                    // (roughly) compensate for gain\n\t\t                    b6 = white * 0.115926;\n\t\t                }\n\t\t            }\n\t\t            return buffer;\n\t\t        }(),\n\t\t        'brown': function () {\n\t\t            var buffer = [];\n\t\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t\t                var channel = new Float32Array(bufferLength);\n\t\t                buffer[channelNum] = channel;\n\t\t                var lastOut = 0;\n\t\t                for (var i = 0; i < bufferLength; i++) {\n\t\t                    var white = Math.random() * 2 - 1;\n\t\t                    channel[i] = (lastOut + 0.02 * white) / 1.02;\n\t\t                    lastOut = channel[i];\n\t\t                    channel[i] *= 3.5;    // (roughly) compensate for gain\n\t\t                }\n\t\t            }\n\t\t            return buffer;\n\t\t        }(),\n\t\t        'white': function () {\n\t\t            var buffer = [];\n\t\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t\t                var channel = new Float32Array(bufferLength);\n\t\t                buffer[channelNum] = channel;\n\t\t                for (var i = 0; i < bufferLength; i++) {\n\t\t                    channel[i] = Math.random() * 2 - 1;\n\t\t                }\n\t\t            }\n\t\t            return buffer;\n\t\t        }()\n\t\t    };\n\t\t    /**\n\t\t\t *\tstatic noise buffers\n\t\t\t *  @static\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t */\n\t\t    var _noiseBuffers = {};\n\t\t    //create the Tone.Buffers\n\t\t    function createBuffers() {\n\t\t        for (var type in _noiseArrays) {\n\t\t            _noiseBuffers[type] = new Tone.Buffer().fromArray(_noiseArrays[type]);\n\t\t        }\n\t\t    }\n\t\t    createBuffers();\n\t\t    Tone.Context.on('init', createBuffers);\n\t\t    return Tone.Noise;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter), \n\t\t\t *          and two envelopes (Tone.Envelop). One envelope controls the amplitude\n\t\t\t *          of the noise and the other is controls the cutoff frequency of the filter. \n\t\t\t *          <img src=\"https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242\">\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Instrument}\n\t\t\t *  @param {Object} [options] the options available for the synth \n\t\t\t *                          see defaults below\n\t\t\t * @example\n\t\t\t * var noiseSynth = new Tone.NoiseSynth().toMaster();\n\t\t\t * noiseSynth.triggerAttackRelease(\"8n\");\n\t\t\t */\n\t\t    Tone.NoiseSynth = function (options) {\n\t\t        //get the defaults\n\t\t        options = this.defaultArg(options, Tone.NoiseSynth.defaults);\n\t\t        Tone.Instrument.call(this, options);\n\t\t        /**\n\t\t\t\t *  The noise source.\n\t\t\t\t *  @type {Tone.Noise}\n\t\t\t\t *  @example\n\t\t\t\t * noiseSynth.set(\"noise.type\", \"brown\");\n\t\t\t\t */\n\t\t        this.noise = new Tone.Noise();\n\t\t        /**\n\t\t\t\t *  The amplitude envelope. \n\t\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t\t */\n\t\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t\t        //connect the noise to the output\n\t\t        this.noise.chain(this.envelope, this.output);\n\t\t        //start the noise\n\t\t        this.noise.start();\n\t\t        this._readOnly([\n\t\t            'noise',\n\t\t            'envelope'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.NoiseSynth, Tone.Instrument);\n\t\t    /**\n\t\t\t *  @const\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.NoiseSynth.defaults = {\n\t\t        'noise': { 'type': 'white' },\n\t\t        'envelope': {\n\t\t            'attack': 0.005,\n\t\t            'decay': 0.1,\n\t\t            'sustain': 0\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Start the attack portion of the envelopes. Unlike other \n\t\t\t *  instruments, Tone.NoiseSynth doesn't have a note. \n\t\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t\t *  @returns {Tone.NoiseSynth} this\n\t\t\t *  @example\n\t\t\t * noiseSynth.triggerAttack();\n\t\t\t */\n\t\t    Tone.NoiseSynth.prototype.triggerAttack = function (time, velocity) {\n\t\t        //the envelopes\n\t\t        this.envelope.triggerAttack(time, velocity);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Start the release portion of the envelopes.\n\t\t\t *  @param {Time} [time=now] the time the release should start\n\t\t\t *  @returns {Tone.NoiseSynth} this\n\t\t\t */\n\t\t    Tone.NoiseSynth.prototype.triggerRelease = function (time) {\n\t\t        this.envelope.triggerRelease(time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Trigger the attack and then the release. \n\t\t\t *  @param  {Time} duration the duration of the note\n\t\t\t *  @param  {Time} [time=now]     the time of the attack\n\t\t\t *  @param  {number} [velocity=1] the velocity\n\t\t\t *  @returns {Tone.NoiseSynth} this\n\t\t\t */\n\t\t    Tone.NoiseSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t\t        time = this.toSeconds(time);\n\t\t        duration = this.toSeconds(duration);\n\t\t        this.triggerAttack(time, velocity);\n\t\t        this.triggerRelease(time + duration);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.NoiseSynth} this\n\t\t\t */\n\t\t    Tone.NoiseSynth.prototype.dispose = function () {\n\t\t        Tone.Instrument.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'noise',\n\t\t            'envelope'\n\t\t        ]);\n\t\t        this.noise.dispose();\n\t\t        this.noise = null;\n\t\t        this.envelope.dispose();\n\t\t        this.envelope = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.NoiseSynth;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Karplus-String string synthesis. Often out of tune. \n\t\t\t *         Will change when the AudioWorkerNode is available across\n\t\t\t *         browsers. \n\t\t\t *  \n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Instrument}\n\t\t\t *  @param {Object} [options] see the defaults\n\t\t\t *  @example\n\t\t\t * var plucky = new Tone.PluckSynth().toMaster();\n\t\t\t * plucky.triggerAttack(\"C4\");\n\t\t\t */\n\t\t    Tone.PluckSynth = function (options) {\n\t\t        options = this.defaultArg(options, Tone.PluckSynth.defaults);\n\t\t        Tone.Instrument.call(this, options);\n\t\t        /**\n\t\t\t\t *  @type {Tone.Noise}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._noise = new Tone.Noise('pink');\n\t\t        /**\n\t\t\t\t *  The amount of noise at the attack. \n\t\t\t\t *  Nominal range of [0.1, 20]\n\t\t\t\t *  @type {number}\n\t\t\t\t */\n\t\t        this.attackNoise = options.attackNoise;\n\t\t        /**\n\t\t\t\t *  the LFCF\n\t\t\t\t *  @type {Tone.LowpassCombFilter}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._lfcf = new Tone.LowpassCombFilter({\n\t\t            'resonance': options.resonance,\n\t\t            'dampening': options.dampening\n\t\t        });\n\t\t        /**\n\t\t\t\t *  The resonance control. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.resonance = this._lfcf.resonance;\n\t\t        /**\n\t\t\t\t *  The dampening control. i.e. the lowpass filter frequency of the comb filter\n\t\t\t\t *  @type {Frequency}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.dampening = this._lfcf.dampening;\n\t\t        //connections\n\t\t        this._noise.connect(this._lfcf);\n\t\t        this._lfcf.connect(this.output);\n\t\t        this._readOnly([\n\t\t            'resonance',\n\t\t            'dampening'\n\t\t        ]);\n\t\t    };\n\t\t    Tone.extend(Tone.PluckSynth, Tone.Instrument);\n\t\t    /**\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.PluckSynth.defaults = {\n\t\t        'attackNoise': 1,\n\t\t        'dampening': 4000,\n\t\t        'resonance': 0.9\n\t\t    };\n\t\t    /**\n\t\t\t *  Trigger the note. \n\t\t\t *  @param {Frequency} note The note to trigger.\n\t\t\t *  @param {Time} [time=now] When the note should be triggered.\n\t\t\t *  @returns {Tone.PluckSynth} this\n\t\t\t */\n\t\t    Tone.PluckSynth.prototype.triggerAttack = function (note, time) {\n\t\t        note = this.toFrequency(note);\n\t\t        time = this.toSeconds(time);\n\t\t        var delayAmount = 1 / note;\n\t\t        this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\t\t        this._noise.start(time);\n\t\t        this._noise.stop(time + delayAmount * this.attackNoise);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up. \n\t\t\t *  @returns {Tone.PluckSynth} this\n\t\t\t */\n\t\t    Tone.PluckSynth.prototype.dispose = function () {\n\t\t        Tone.Instrument.prototype.dispose.call(this);\n\t\t        this._noise.dispose();\n\t\t        this._lfcf.dispose();\n\t\t        this._noise = null;\n\t\t        this._lfcf = null;\n\t\t        this._writable([\n\t\t            'resonance',\n\t\t            'dampening'\n\t\t        ]);\n\t\t        this.dampening = null;\n\t\t        this.resonance = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.PluckSynth;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.PolySynth handles voice creation and allocation for any\n\t\t\t *          instruments passed in as the second paramter. PolySynth is \n\t\t\t *          not a synthesizer by itself, it merely manages voices of \n\t\t\t *          one of the other types of synths, allowing any of the \n\t\t\t *          monophonic synthesizers to be polyphonic. \n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Instrument}\n\t\t\t *  @param {number|Object} [polyphony=4] The number of voices to create\n\t\t\t *  @param {function} [voice=Tone.Synth] The constructor of the voices\n\t\t\t *                                            uses Tone.Synth by default. \n\t\t\t *  @example\n\t\t\t * //a polysynth composed of 6 Voices of Synth\n\t\t\t * var synth = new Tone.PolySynth(6, Tone.Synth).toMaster();\n\t\t\t * //set the attributes using the set interface\n\t\t\t * synth.set(\"detune\", -1200);\n\t\t\t * //play a chord\n\t\t\t * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], \"4n\");\n\t\t\t */\n\t\t    Tone.PolySynth = function () {\n\t\t        Tone.Instrument.call(this);\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'polyphony',\n\t\t            'voice'\n\t\t        ], Tone.PolySynth.defaults);\n\t\t        options = this.defaultArg(options, Tone.Instrument.defaults);\n\t\t        //max polyphony\n\t\t        options.polyphony = Math.min(Tone.PolySynth.MAX_POLYPHONY, options.polyphony);\n\t\t        /**\n\t\t\t\t *  the array of voices\n\t\t\t\t *  @type {Array}\n\t\t\t\t */\n\t\t        this.voices = new Array(options.polyphony);\n\t\t        /**\n\t\t\t\t *  The queue of voices with data about last trigger\n\t\t\t\t *  and the triggered note\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Array}\n\t\t\t\t */\n\t\t        this._triggers = new Array(options.polyphony);\n\t\t        /**\n\t\t\t\t *  The detune in cents\n\t\t\t\t *  @type {Cents}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t\t        this._readOnly('detune');\n\t\t        //create the voices\n\t\t        for (var i = 0; i < options.polyphony; i++) {\n\t\t            var v = new options.voice(arguments[2], arguments[3]);\n\t\t            this.voices[i] = v;\n\t\t            v.connect(this.output);\n\t\t            if (v.hasOwnProperty('detune')) {\n\t\t                this.detune.connect(v.detune);\n\t\t            }\n\t\t            this._triggers[i] = {\n\t\t                release: -1,\n\t\t                note: null,\n\t\t                voice: v\n\t\t            };\n\t\t        }\n\t\t        //set the volume initially\n\t\t        this.volume.value = options.volume;\n\t\t    };\n\t\t    Tone.extend(Tone.PolySynth, Tone.Instrument);\n\t\t    /**\n\t\t\t *  the defaults\n\t\t\t *  @const\n\t\t\t *  @static\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.PolySynth.defaults = {\n\t\t        'polyphony': 4,\n\t\t        'volume': 0,\n\t\t        'detune': 0,\n\t\t        'voice': Tone.Synth\n\t\t    };\n\t\t    /**\n\t\t\t *  Trigger the attack portion of the note\n\t\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t\t *                                  Frequency or an array of frequencies.\n\t\t\t *  @param  {Time} [time=now]  The start time of the note.\n\t\t\t *  @param {number} [velocity=1] The velocity of the note.\n\t\t\t *  @returns {Tone.PolySynth} this\n\t\t\t *  @example\n\t\t\t * //trigger a chord immediately with a velocity of 0.2\n\t\t\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"], undefined, 0.2);\n\t\t\t */\n\t\t    Tone.PolySynth.prototype.triggerAttack = function (notes, time, velocity) {\n\t\t        if (!Array.isArray(notes)) {\n\t\t            notes = [notes];\n\t\t        }\n\t\t        time = this.toSeconds(time);\n\t\t        for (var i = 0; i < notes.length; i++) {\n\t\t            var val = notes[i];\n\t\t            //trigger the oldest voice\n\t\t            var oldest = this._triggers[0];\n\t\t            var oldestIndex = 0;\n\t\t            for (var j = 1; j < this._triggers.length; j++) {\n\t\t                if (this._triggers[j].release < oldest.release) {\n\t\t                    oldest = this._triggers[j];\n\t\t                    oldestIndex = j;\n\t\t                }\n\t\t            }\n\t\t            oldest.release = Infinity;\n\t\t            oldest.note = JSON.stringify(val);\n\t\t            oldest.voice.triggerAttack(val, time, velocity);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Trigger the attack and release after the specified duration\n\t\t\t *  \n\t\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t\t *                                  Frequency or an array of frequencies.\n\t\t\t *  @param  {Time} duration the duration of the note\n\t\t\t *  @param  {Time} [time=now]     if no time is given, defaults to now\n\t\t\t *  @param  {number} [velocity=1] the velocity of the attack (0-1)\n\t\t\t *  @returns {Tone.PolySynth} this\n\t\t\t *  @example\n\t\t\t * //trigger a chord for a duration of a half note \n\t\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], \"2n\");\n\t\t\t *  @example\n\t\t\t * //can pass in an array of durations as well\n\t\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], [\"2n\", \"4n\", \"4n\"]);\n\t\t\t */\n\t\t    Tone.PolySynth.prototype.triggerAttackRelease = function (notes, duration, time, velocity) {\n\t\t        time = this.toSeconds(time);\n\t\t        this.triggerAttack(notes, time, velocity);\n\t\t        if (this.isArray(duration) && this.isArray(notes)) {\n\t\t            for (var i = 0; i < notes.length; i++) {\n\t\t                var d = duration[Math.min(i, duration.length - 1)];\n\t\t                this.triggerRelease(notes[i], time + this.toSeconds(d));\n\t\t            }\n\t\t        } else {\n\t\t            this.triggerRelease(notes, time + this.toSeconds(duration));\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Trigger the release of the note. Unlike monophonic instruments, \n\t\t\t *  a note (or array of notes) needs to be passed in as the first argument.\n\t\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t\t *                                  Frequency or an array of frequencies.\n\t\t\t *  @param  {Time} [time=now]  When the release will be triggered. \n\t\t\t *  @returns {Tone.PolySynth} this\n\t\t\t *  @example\n\t\t\t * poly.triggerRelease([\"Ab3\", \"C4\", \"F5\"], \"+2n\");\n\t\t\t */\n\t\t    Tone.PolySynth.prototype.triggerRelease = function (notes, time) {\n\t\t        if (!Array.isArray(notes)) {\n\t\t            notes = [notes];\n\t\t        }\n\t\t        time = this.toSeconds(time);\n\t\t        for (var i = 0; i < notes.length; i++) {\n\t\t            //get the voice\n\t\t            var stringified = JSON.stringify(notes[i]);\n\t\t            for (var v = 0; v < this._triggers.length; v++) {\n\t\t                var desc = this._triggers[v];\n\t\t                if (desc.note === stringified && desc.release > time) {\n\t\t                    desc.voice.triggerRelease(time);\n\t\t                    desc.release = time;\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Set a member/attribute of the voices. \n\t\t\t *  @param {Object|string} params\n\t\t\t *  @param {number=} value\n\t\t\t *  @param {Time=} rampTime\n\t\t\t *  @returns {Tone.PolySynth} this\n\t\t\t *  @example\n\t\t\t * poly.set({\n\t\t\t * \t\"filter\" : {\n\t\t\t * \t\t\"type\" : \"highpass\"\n\t\t\t * \t},\n\t\t\t * \t\"envelope\" : {\n\t\t\t * \t\t\"attack\" : 0.25\n\t\t\t * \t}\n\t\t\t * });\n\t\t\t */\n\t\t    Tone.PolySynth.prototype.set = function (params, value, rampTime) {\n\t\t        for (var i = 0; i < this.voices.length; i++) {\n\t\t            this.voices[i].set(params, value, rampTime);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Get the synth's attributes. Given no arguments get\n\t\t\t *  will return all available object properties and their corresponding\n\t\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t\t *  to access deeper properties.\n\t\t\t *  @param {Array=} params the parameters to get, otherwise will return \n\t\t\t *  \t\t\t\t\t   all available.\n\t\t\t */\n\t\t    Tone.PolySynth.prototype.get = function (params) {\n\t\t        return this.voices[0].get(params);\n\t\t    };\n\t\t    /**\n\t\t\t *  Trigger the release portion of all the currently active voices.\n\t\t\t *  @param {Time} [time=now] When the notes should be released.\n\t\t\t *  @return {Tone.PolySynth} this\n\t\t\t */\n\t\t    Tone.PolySynth.prototype.releaseAll = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        for (var i = 0; i < this._triggers.length; i++) {\n\t\t            var desc = this._triggers[i];\n\t\t            if (desc.release > time) {\n\t\t                desc.release = time;\n\t\t                desc.voice.triggerRelease(time);\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.PolySynth} this\n\t\t\t */\n\t\t    Tone.PolySynth.prototype.dispose = function () {\n\t\t        Tone.Instrument.prototype.dispose.call(this);\n\t\t        for (var i = 0; i < this.voices.length; i++) {\n\t\t            this.voices[i].dispose();\n\t\t            this.voices[i] = null;\n\t\t        }\n\t\t        this._writable('detune');\n\t\t        this.detune.dispose();\n\t\t        this.detune = null;\n\t\t        this.voices = null;\n\t\t        this._triggers = null;\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  The maximum number of notes that can be allocated \n\t\t\t *  to a polysynth. \n\t\t\t *  @type  {Number}\n\t\t\t *  @static\n\t\t\t */\n\t\t    Tone.PolySynth.MAX_POLYPHONY = 20;\n\t\t    return Tone.PolySynth;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.Player is an audio file player with start, loop, and stop functions.\n\t\t\t *  \n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Source} \n\t\t\t *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from\n\t\t\t *                                  which to load the AudioBuffer\n\t\t\t *  @param {function=} onload The function to invoke when the buffer is loaded. \n\t\t\t *                            Recommended to use Tone.Buffer.on('load') instead.\n\t\t\t *  @example\n\t\t\t * var player = new Tone.Player(\"./path/to/sample.mp3\").toMaster();\n\t\t\t * //play as soon as the buffer is loaded\n\t\t\t * player.autostart = true;\n\t\t\t */\n\t\t    Tone.Player = function (url) {\n\t\t        var options;\n\t\t        if (url instanceof Tone.Buffer) {\n\t\t            url = url.get();\n\t\t            options = Tone.Player.defaults;\n\t\t        } else {\n\t\t            options = this.optionsObject(arguments, [\n\t\t                'url',\n\t\t                'onload'\n\t\t            ], Tone.Player.defaults);\n\t\t        }\n\t\t        Tone.Source.call(this, options);\n\t\t        /**\n\t\t\t\t *  @private\n\t\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t\t */\n\t\t        this._source = null;\n\t\t        /**\n\t\t\t\t *  If the file should play as soon\n\t\t\t\t *  as the buffer is loaded. \n\t\t\t\t *  @type {boolean}\n\t\t\t\t *  @example\n\t\t\t\t * //will play as soon as it's loaded\n\t\t\t\t * var player = new Tone.Player({\n\t\t\t\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t\t\t\t * \t\"autostart\" : true,\n\t\t\t\t * }).toMaster();\n\t\t\t\t */\n\t\t        this.autostart = options.autostart;\n\t\t        /**\n\t\t\t\t *  the buffer\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Tone.Buffer}\n\t\t\t\t */\n\t\t        this._buffer = new Tone.Buffer({\n\t\t            'url': options.url,\n\t\t            'onload': this._onload.bind(this, options.onload),\n\t\t            'reverse': options.reverse\n\t\t        });\n\t\t        if (url instanceof AudioBuffer) {\n\t\t            this._buffer.set(url);\n\t\t        }\n\t\t        /**\n\t\t\t\t *  if the buffer should loop once it's over\n\t\t\t\t *  @type {boolean}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._loop = options.loop;\n\t\t        /**\n\t\t\t\t *  if 'loop' is true, the loop will start at this position\n\t\t\t\t *  @type {Time}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._loopStart = options.loopStart;\n\t\t        /**\n\t\t\t\t *  if 'loop' is true, the loop will end at this position\n\t\t\t\t *  @type {Time}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._loopEnd = options.loopEnd;\n\t\t        /**\n\t\t\t\t *  the playback rate\n\t\t\t\t *  @private\n\t\t\t\t *  @type {number}\n\t\t\t\t */\n\t\t        this._playbackRate = options.playbackRate;\n\t\t        /**\n\t\t\t\t *  Enabling retrigger will allow a player to be restarted\n\t\t\t\t *  before the the previous 'start' is done playing. Otherwise, \n\t\t\t\t *  successive calls to Tone.Player.start will only start\n\t\t\t\t *  the sample if it had played all the way through. \n\t\t\t\t *  @type {boolean}\n\t\t\t\t */\n\t\t        this.retrigger = options.retrigger;\n\t\t    };\n\t\t    Tone.extend(Tone.Player, Tone.Source);\n\t\t    /**\n\t\t\t *  the default parameters\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.Player.defaults = {\n\t\t        'onload': Tone.noOp,\n\t\t        'playbackRate': 1,\n\t\t        'loop': false,\n\t\t        'autostart': false,\n\t\t        'loopStart': 0,\n\t\t        'loopEnd': 0,\n\t\t        'retrigger': false,\n\t\t        'reverse': false\n\t\t    };\n\t\t    /**\n\t\t\t *  Load the audio file as an audio buffer.\n\t\t\t *  Decodes the audio asynchronously and invokes\n\t\t\t *  the callback once the audio buffer loads. \n\t\t\t *  Note: this does not need to be called if a url\n\t\t\t *  was passed in to the constructor. Only use this\n\t\t\t *  if you want to manually load a new url. \n\t\t\t * @param {string} url The url of the buffer to load.\n\t\t\t *                     Filetype support depends on the\n\t\t\t *                     browser.\n\t\t\t *  @param  {function=} callback The function to invoke once\n\t\t\t *                               the sample is loaded.\n\t\t\t *  @returns {Promise}\n\t\t\t */\n\t\t    Tone.Player.prototype.load = function (url, callback) {\n\t\t        return this._buffer.load(url, this._onload.bind(this, callback));\n\t\t    };\n\t\t    /**\n\t\t\t * Internal callback when the buffer is loaded.\n\t\t\t * @private\n\t\t\t */\n\t\t    Tone.Player.prototype._onload = function (callback) {\n\t\t        callback = this.defaultArg(callback, Tone.noOp);\n\t\t        callback(this);\n\t\t        if (this.autostart) {\n\t\t            this.start();\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t\t *  and/or duration which will play the buffer from a position\n\t\t\t *  within the buffer for the given duration. \n\t\t\t *  \n\t\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t\t *                                 to start at. \n\t\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t\t *                                is given, it will default to the full length \n\t\t\t *                                of the sample (minus any offset)\n\t\t\t *  @returns {Tone.Player} this\n\t\t\t *  @memberOf Tone.Player#\n\t\t\t *  @method start\n\t\t\t *  @name start\n\t\t\t */\n\t\t    /**\n\t\t\t *  Internal start method\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Player.prototype._start = function (startTime, offset, duration) {\n\t\t        if (this._buffer.loaded) {\n\t\t            //if it's a loop the default offset is the loopstart point\n\t\t            if (this._loop) {\n\t\t                offset = this.defaultArg(offset, this._loopStart);\n\t\t            } else {\n\t\t                //otherwise the default offset is 0\n\t\t                offset = this.defaultArg(offset, 0);\n\t\t            }\n\t\t            offset = this.toSeconds(offset);\n\t\t            //make sure it has a positive duration\n\t\t            duration = this.defaultArg(duration, Math.max(this._buffer.duration - offset, 0));\n\t\t            duration = this.toSeconds(duration);\n\t\t            //the values in seconds\n\t\t            startTime = this.toSeconds(startTime);\n\t\t            //make the source\n\t\t            this._source = this.context.createBufferSource();\n\t\t            this._source.buffer = this._buffer.get();\n\t\t            //set the looping properties\n\t\t            if (this._loop) {\n\t\t                this._source.loop = this._loop;\n\t\t                this._source.loopStart = this.toSeconds(this._loopStart);\n\t\t                this._source.loopEnd = this.toSeconds(this._loopEnd);\n\t\t            } else if (!this._synced) {\n\t\t                //if it's not looping, set the state change at the end of the sample\n\t\t                this._state.setStateAtTime(Tone.State.Stopped, startTime + duration);\n\t\t            }\n\t\t            //and other properties\n\t\t            this._source.playbackRate.value = this._playbackRate;\n\t\t            this._source.connect(this.output);\n\t\t            //start it\n\t\t            if (this._loop) {\n\t\t                //modify the offset if it's greater than the loop time\n\t\t                var loopEnd = this._source.loopEnd || this._buffer.duration;\n\t\t                var loopStart = this._source.loopStart;\n\t\t                var loopDuration = loopEnd - loopStart;\n\t\t                if (offset > loopEnd) {\n\t\t                    //move the offset back\n\t\t                    while (offset > loopEnd) {\n\t\t                        offset -= loopDuration;\n\t\t                    }\n\t\t                }\n\t\t                this._source.start(startTime, offset);\n\t\t            } else {\n\t\t                this._source.start(startTime, offset, duration);\n\t\t            }\n\t\t        } else {\n\t\t            throw Error('Tone.Player: tried to start Player before the buffer was loaded');\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Stop playback.\n\t\t\t *  @private\n\t\t\t *  @param  {Time} [time=now]\n\t\t\t *  @returns {Tone.Player} this\n\t\t\t */\n\t\t    Tone.Player.prototype._stop = function (time) {\n\t\t        if (this._source) {\n\t\t            this._source.stop(this.toSeconds(time));\n\t\t            this._source = null;\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Seek to a specific time in the player's buffer. If the \n\t\t\t *  source is no longer playing at that time, it will stop.\n\t\t\t *  If you seek to a time that \n\t\t\t *  @param {Time} offset The time to seek to.\n\t\t\t *  @param {Time=} time The time for the seek event to occur.\n\t\t\t *  @return {Tone.Player} this\n\t\t\t *  @example\n\t\t\t * source.start(0.2);\n\t\t\t * source.stop(0.4);\n\t\t\t */\n\t\t    Tone.Player.prototype.seek = function (offset, time) {\n\t\t        time = this.toSeconds(time);\n\t\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t\t            offset = this.toSeconds(offset);\n\t\t            // if it's currently playing, stop it\n\t\t            this._stop(time);\n\t\t            //restart it at the given time\n\t\t            this._start(time, offset);\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Set the loop start and end. Will only loop if loop is \n\t\t\t *  set to true. \n\t\t\t *  @param {Time} loopStart The loop end time\n\t\t\t *  @param {Time} loopEnd The loop end time\n\t\t\t *  @returns {Tone.Player} this\n\t\t\t *  @example\n\t\t\t * //loop 0.1 seconds of the file. \n\t\t\t * player.setLoopPoints(0.2, 0.3);\n\t\t\t * player.loop = true;\n\t\t\t */\n\t\t    Tone.Player.prototype.setLoopPoints = function (loopStart, loopEnd) {\n\t\t        this.loopStart = loopStart;\n\t\t        this.loopEnd = loopEnd;\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * If loop is true, the loop will start at this position. \n\t\t\t * @memberOf Tone.Player#\n\t\t\t * @type {Time}\n\t\t\t * @name loopStart\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Player.prototype, 'loopStart', {\n\t\t        get: function () {\n\t\t            return this._loopStart;\n\t\t        },\n\t\t        set: function (loopStart) {\n\t\t            this._loopStart = loopStart;\n\t\t            if (this._source) {\n\t\t                this._source.loopStart = this.toSeconds(loopStart);\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * If loop is true, the loop will end at this position.\n\t\t\t * @memberOf Tone.Player#\n\t\t\t * @type {Time}\n\t\t\t * @name loopEnd\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Player.prototype, 'loopEnd', {\n\t\t        get: function () {\n\t\t            return this._loopEnd;\n\t\t        },\n\t\t        set: function (loopEnd) {\n\t\t            this._loopEnd = loopEnd;\n\t\t            if (this._source) {\n\t\t                this._source.loopEnd = this.toSeconds(loopEnd);\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The audio buffer belonging to the player. \n\t\t\t * @memberOf Tone.Player#\n\t\t\t * @type {Tone.Buffer}\n\t\t\t * @name buffer\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Player.prototype, 'buffer', {\n\t\t        get: function () {\n\t\t            return this._buffer;\n\t\t        },\n\t\t        set: function (buffer) {\n\t\t            this._buffer.set(buffer);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * If the buffer should loop once it's over. \n\t\t\t * @memberOf Tone.Player#\n\t\t\t * @type {boolean}\n\t\t\t * @name loop\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Player.prototype, 'loop', {\n\t\t        get: function () {\n\t\t            return this._loop;\n\t\t        },\n\t\t        set: function (loop) {\n\t\t            this._loop = loop;\n\t\t            if (this._source) {\n\t\t                this._source.loop = loop;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The playback speed. 1 is normal speed. This is not a signal because\n\t\t\t * Safari and iOS currently don't support playbackRate as a signal.\n\t\t\t * @memberOf Tone.Player#\n\t\t\t * @type {number}\n\t\t\t * @name playbackRate\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Player.prototype, 'playbackRate', {\n\t\t        get: function () {\n\t\t            return this._playbackRate;\n\t\t        },\n\t\t        set: function (rate) {\n\t\t            this._playbackRate = rate;\n\t\t            if (this._source) {\n\t\t                this._source.playbackRate.value = rate;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The direction the buffer should play in\n\t\t\t * @memberOf Tone.Player#\n\t\t\t * @type {boolean}\n\t\t\t * @name reverse\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Player.prototype, 'reverse', {\n\t\t        get: function () {\n\t\t            return this._buffer.reverse;\n\t\t        },\n\t\t        set: function (rev) {\n\t\t            this._buffer.reverse = rev;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Dispose and disconnect.\n\t\t\t *  @return {Tone.Player} this\n\t\t\t */\n\t\t    Tone.Player.prototype.dispose = function () {\n\t\t        Tone.Source.prototype.dispose.call(this);\n\t\t        if (this._source !== null) {\n\t\t            this._source.disconnect();\n\t\t            this._source = null;\n\t\t        }\n\t\t        this._buffer.dispose();\n\t\t        this._buffer = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Player;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Sampler wraps Tone.Player in an AmplitudeEnvelope.\n\t\t\t *\n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone.Instrument}\n\t\t\t *  @param {String} url the url of the audio file\n\t\t\t *  @param {Function=} onload The callback to invoke when the sample is loaded.\n\t\t\t *  @example\n\t\t\t * var sampler = new Sampler(\"./audio/casio/A1.mp3\", function(){\n\t\t\t * \t//repitch the sample down a half step\n\t\t\t * \tsampler.triggerAttack(-1);\n\t\t\t * }).toMaster();\n\t\t\t */\n\t\t    Tone.Sampler = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'url',\n\t\t            'onload'\n\t\t        ], Tone.Sampler.defaults);\n\t\t        Tone.Instrument.call(this, options);\n\t\t        /**\n\t\t\t\t *  The sample player.\n\t\t\t\t *  @type {Tone.Player}\n\t\t\t\t */\n\t\t        this.player = new Tone.Player(options.url, options.onload);\n\t\t        this.player.retrigger = true;\n\t\t        /**\n\t\t\t\t *  The amplitude envelope. \n\t\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t\t */\n\t\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t\t        this.player.chain(this.envelope, this.output);\n\t\t        this._readOnly([\n\t\t            'player',\n\t\t            'envelope'\n\t\t        ]);\n\t\t        this.loop = options.loop;\n\t\t        this.reverse = options.reverse;\n\t\t    };\n\t\t    Tone.extend(Tone.Sampler, Tone.Instrument);\n\t\t    /**\n\t\t\t *  the default parameters\n\t\t\t *  @static\n\t\t\t */\n\t\t    Tone.Sampler.defaults = {\n\t\t        'onload': Tone.noOp,\n\t\t        'loop': false,\n\t\t        'reverse': false,\n\t\t        'envelope': {\n\t\t            'attack': 0.001,\n\t\t            'decay': 0,\n\t\t            'sustain': 1,\n\t\t            'release': 0.1\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Trigger the start of the sample. \n\t\t\t *  @param {Interval} [pitch=0] The amount the sample should\n\t\t\t *                              be repitched. \n\t\t\t *  @param {Time} [time=now] The time when the sample should start\n\t\t\t *  @param {NormalRange} [velocity=1] The velocity of the note\n\t\t\t *  @returns {Tone.Sampler} this\n\t\t\t *  @example\n\t\t\t * sampler.triggerAttack(0, \"+0.1\", 0.5);\n\t\t\t */\n\t\t    Tone.Sampler.prototype.triggerAttack = function (pitch, time, velocity) {\n\t\t        time = this.toSeconds(time);\n\t\t        pitch = this.defaultArg(pitch, 0);\n\t\t        this.player.playbackRate = this.intervalToFrequencyRatio(pitch);\n\t\t        this.player.start(time);\n\t\t        this.envelope.triggerAttack(time, velocity);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Start the release portion of the sample. Will stop the sample once the \n\t\t\t *  envelope has fully released. \n\t\t\t *  \n\t\t\t *  @param {Time} [time=now] The time when the note should release\n\t\t\t *  @returns {Tone.Sampler} this\n\t\t\t *  @example\n\t\t\t * sampler.triggerRelease();\n\t\t\t */\n\t\t    Tone.Sampler.prototype.triggerRelease = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        this.envelope.triggerRelease(time);\n\t\t        this.player.stop(this.toSeconds(this.envelope.release) + time);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Trigger the attack and then the release after the duration. \n\t\t\t *  @param  {Interval} interval     The interval in half-steps that the\n\t\t\t *                                  sample should be pitch shifted.\n\t\t\t *  @param  {Time} duration How long the note should be held for before\n\t\t\t *                          triggering the release.\n\t\t\t *  @param {Time} [time=now]  When the note should be triggered.\n\t\t\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t\t\t *  @returns {Tone.Sampler} this\n\t\t\t *  @example\n\t\t\t * //trigger the unpitched note for the duration of an 8th note\n\t\t\t * synth.triggerAttackRelease(0, \"8n\");\n\t\t\t *  @memberOf Tone.Sampler#\n\t\t\t *  @name triggerAttackRelease\n\t\t\t *  @method triggerAttackRelease\n\t\t\t */\n\t\t    /**\n\t\t\t * If the output sample should loop or not.\n\t\t\t * @memberOf Tone.Sampler#\n\t\t\t * @type {number|string}\n\t\t\t * @name loop\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Sampler.prototype, 'loop', {\n\t\t        get: function () {\n\t\t            return this.player.loop;\n\t\t        },\n\t\t        set: function (loop) {\n\t\t            this.player.loop = loop;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The direction the buffer should play in\n\t\t\t * @memberOf Tone.Sampler#\n\t\t\t * @type {boolean}\n\t\t\t * @name reverse\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Sampler.prototype, 'reverse', {\n\t\t        get: function () {\n\t\t            return this.player.reverse;\n\t\t        },\n\t\t        set: function (rev) {\n\t\t            this.player.reverse = rev;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The buffer to play.\n\t\t\t * @memberOf Tone.Sampler#\n\t\t\t * @type {Tone.Buffer}\n\t\t\t * @name buffer\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Sampler.prototype, 'buffer', {\n\t\t        get: function () {\n\t\t            return this.player.buffer;\n\t\t        },\n\t\t        set: function (buff) {\n\t\t            this.player.buffer = buff;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @returns {Tone.Sampler} this\n\t\t\t */\n\t\t    Tone.Sampler.prototype.dispose = function () {\n\t\t        Tone.Instrument.prototype.dispose.call(this);\n\t\t        this._writable([\n\t\t            'player',\n\t\t            'envelope'\n\t\t        ]);\n\t\t        this.player.dispose();\n\t\t        this.player = null;\n\t\t        this.envelope.dispose();\n\t\t        this.envelope = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Sampler;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. \n\t\t\t *         See also Tone.AudioToGain. \n\t\t\t *\n\t\t\t *  @extends {Tone.SignalBase}\n\t\t\t *  @constructor\n\t\t\t *  @example\n\t\t\t * var g2a = new Tone.GainToAudio();\n\t\t\t */\n\t\t    Tone.GainToAudio = function () {\n\t\t        /**\n\t\t\t\t *  @type {WaveShaperNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t\t            return Math.abs(x) * 2 - 1;\n\t\t        });\n\t\t    };\n\t\t    Tone.extend(Tone.GainToAudio, Tone.SignalBase);\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.GainToAudio} this\n\t\t\t */\n\t\t    Tone.GainToAudio.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._norm.dispose();\n\t\t        this._norm = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.GainToAudio;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class Normalize takes an input min and max and maps it linearly to NormalRange [0,1]\n\t\t\t *\n\t\t\t *  @extends {Tone.SignalBase}\n\t\t\t *  @constructor\n\t\t\t *  @param {number} inputMin the min input value\n\t\t\t *  @param {number} inputMax the max input value\n\t\t\t *  @example\n\t\t\t * var norm = new Tone.Normalize(2, 4);\n\t\t\t * var sig = new Tone.Signal(3).connect(norm);\n\t\t\t * //output of norm is 0.5. \n\t\t\t */\n\t\t    Tone.Normalize = function (inputMin, inputMax) {\n\t\t        /**\n\t\t\t\t *  the min input value\n\t\t\t\t *  @type {number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._inputMin = this.defaultArg(inputMin, 0);\n\t\t        /**\n\t\t\t\t *  the max input value\n\t\t\t\t *  @type {number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._inputMax = this.defaultArg(inputMax, 1);\n\t\t        /**\n\t\t\t\t *  subtract the min from the input\n\t\t\t\t *  @type {Tone.Add}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._sub = this.input = new Tone.Add(0);\n\t\t        /**\n\t\t\t\t *  divide by the difference between the input and output\n\t\t\t\t *  @type {Tone.Multiply}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._div = this.output = new Tone.Multiply(1);\n\t\t        this._sub.connect(this._div);\n\t\t        this._setRange();\n\t\t    };\n\t\t    Tone.extend(Tone.Normalize, Tone.SignalBase);\n\t\t    /**\n\t\t\t * The minimum value the input signal will reach.\n\t\t\t * @memberOf Tone.Normalize#\n\t\t\t * @type {number}\n\t\t\t * @name min\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Normalize.prototype, 'min', {\n\t\t        get: function () {\n\t\t            return this._inputMin;\n\t\t        },\n\t\t        set: function (min) {\n\t\t            this._inputMin = min;\n\t\t            this._setRange();\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The maximum value the input signal will reach.\n\t\t\t * @memberOf Tone.Normalize#\n\t\t\t * @type {number}\n\t\t\t * @name max\n\t\t\t */\n\t\t    Object.defineProperty(Tone.Normalize.prototype, 'max', {\n\t\t        get: function () {\n\t\t            return this._inputMax;\n\t\t        },\n\t\t        set: function (max) {\n\t\t            this._inputMax = max;\n\t\t            this._setRange();\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  set the values\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.Normalize.prototype._setRange = function () {\n\t\t        this._sub.value = -this._inputMin;\n\t\t        this._div.value = 1 / (this._inputMax - this._inputMin);\n\t\t    };\n\t\t    /**\n\t\t\t *  clean up\n\t\t\t *  @returns {Tone.Normalize} this\n\t\t\t */\n\t\t    Tone.Normalize.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._sub.dispose();\n\t\t        this._sub = null;\n\t\t        this._div.dispose();\n\t\t        this._div = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.Normalize;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    /**\n\t\t\t *  @class Tone.MultiPlayer is well suited for one-shots, multi-sampled instruments\n\t\t\t *         or any time you need to play a bunch of audio buffers. \n\t\t\t *  @param  {Object|Array|Tone.Buffers}  buffers  The buffers which are available\n\t\t\t *                                                to the MultiPlayer\n\t\t\t *  @param {Function} onload The callback to invoke when all of the buffers are loaded.\n\t\t\t *  @extends {Tone}\n\t\t\t *  @example\n\t\t\t * var multiPlayer = new MultiPlayer({\n\t\t\t * \t\"kick\" : \"path/to/kick.mp3\",\n\t\t\t * \t\"snare\" : \"path/to/snare.mp3\",\n\t\t\t * }, function(){\n\t\t\t * \tmultiPlayer.start(\"kick\");\n\t\t\t * });\n\t\t\t *  @example\n\t\t\t * //can also store the values in an array\n\t\t\t * var multiPlayer = new MultiPlayer([\"path/to/kick.mp3\", \"path/to/snare.mp3\"], \n\t\t\t * function(){\n\t\t\t * \t//if an array is passed in, the samples are referenced to by index\n\t\t\t * \tmultiPlayer.start(1);\n\t\t\t * });\n\t\t\t */\n\t\t    Tone.MultiPlayer = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'urls',\n\t\t            'onload'\n\t\t        ], Tone.MultiPlayer.defaults);\n\t\t        if (options.urls instanceof Tone.Buffers) {\n\t\t            /**\n\t\t\t\t\t *  All the buffers belonging to the player.\n\t\t\t\t\t *  @type  {Tone.Buffers}\n\t\t\t\t\t */\n\t\t            this.buffers = options.urls;\n\t\t        } else {\n\t\t            this.buffers = new Tone.Buffers(options.urls, options.onload);\n\t\t        }\n\t\t        /**\n\t\t\t\t *  Keeps track of the currently playing sources.\n\t\t\t\t *  @type  {Object}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._activeSources = {};\n\t\t        /**\n\t\t\t\t *  The fade in envelope which is applied\n\t\t\t\t *  to the beginning of the BufferSource\n\t\t\t\t *  @type  {Time}\n\t\t\t\t */\n\t\t        this.fadeIn = options.fadeIn;\n\t\t        /**\n\t\t\t\t *  The fade out envelope which is applied\n\t\t\t\t *  to the end of the BufferSource\n\t\t\t\t *  @type  {Time}\n\t\t\t\t */\n\t\t        this.fadeOut = options.fadeOut;\n\t\t        /**\n\t\t\t\t *  The output volume node\n\t\t\t\t *  @type  {Tone.Volume}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t\t        /**\n\t\t\t\t * The volume of the output in decibels.\n\t\t\t\t * @type {Decibels}\n\t\t\t\t * @signal\n\t\t\t\t * @example\n\t\t\t\t * source.volume.value = -6;\n\t\t\t\t */\n\t\t        this.volume = this._volume.volume;\n\t\t        this._readOnly('volume');\n\t\t        //make the output explicitly stereo\n\t\t        this._volume.output.output.channelCount = 2;\n\t\t        this._volume.output.output.channelCountMode = 'explicit';\n\t\t        //mute initially\n\t\t        this.mute = options.mute;\n\t\t    };\n\t\t    Tone.extend(Tone.MultiPlayer, Tone.Source);\n\t\t    /**\n\t\t\t *  The defaults\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t\t    Tone.MultiPlayer.defaults = {\n\t\t        'onload': Tone.noOp,\n\t\t        'fadeIn': 0,\n\t\t        'fadeOut': 0\n\t\t    };\n\t\t    /**\n\t\t\t * Make the source from the buffername\n\t\t\t * @param  {String} bufferName\n\t\t\t * @return {Tone.BufferSource}\n\t\t\t * @private\n\t\t\t */\n\t\t    Tone.MultiPlayer.prototype._makeSource = function (bufferName) {\n\t\t        var buffer;\n\t\t        if (this.isString(bufferName) || this.isNumber(bufferName)) {\n\t\t            buffer = this.buffers.get(bufferName).get();\n\t\t        } else if (bufferName instanceof Tone.Buffer) {\n\t\t            buffer = bufferName.get();\n\t\t        } else if (bufferName instanceof AudioBuffer) {\n\t\t            buffer = bufferName;\n\t\t        }\n\t\t        var source = new Tone.BufferSource(buffer).connect(this.output);\n\t\t        if (!this._activeSources.hasOwnProperty(bufferName)) {\n\t\t            this._activeSources[bufferName] = [];\n\t\t        }\n\t\t        this._activeSources[bufferName].push(source);\n\t\t        return source;\n\t\t    };\n\t\t    /**\n\t\t\t *  Start a buffer by name. The `start` method allows a number of options\n\t\t\t *  to be passed in such as offset, interval, and gain. This is good for multi-sampled \n\t\t\t *  instruments and sound sprites where samples are repitched played back at different velocities.\n\t\t\t *  @param  {String}  bufferName    The name of the buffer to start.\n\t\t\t *  @param  {Time}  time      When to start the buffer.\n\t\t\t *  @param  {Time}  [offset=0]    The offset into the buffer to play from.\n\t\t\t *  @param  {Time=}  duration   How long to play the buffer for.\n\t\t\t *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.\n\t\t\t *  @param  {Gain}  [gain=1]      The gain to play the sample at.\n\t\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t\t */\n\t\t    Tone.MultiPlayer.prototype.start = function (bufferName, time, offset, duration, pitch, gain) {\n\t\t        time = this.toSeconds(time);\n\t\t        var source = this._makeSource(bufferName);\n\t\t        source.start(time, offset, duration, this.defaultArg(gain, 1), this.fadeIn);\n\t\t        if (duration) {\n\t\t            source.stop(time + this.toSeconds(duration), this.fadeOut);\n\t\t        }\n\t\t        pitch = this.defaultArg(pitch, 0);\n\t\t        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Start a looping buffer by name. Similar to `start`, but the buffer\n\t\t\t *  is looped instead of played straight through. Can still be stopped with `stop`. \n\t\t\t *  @param  {String}  bufferName    The name of the buffer to start.\n\t\t\t *  @param  {Time}  time      When to start the buffer.\n\t\t\t *  @param  {Time}  [offset=0]    The offset into the buffer to play from.\n\t\t\t *  @param  {Time=}  loopStart   The start of the loop.\n\t\t\t *  @param  {Time=}  loopEnd\tThe end of the loop.\n\t\t\t *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.\n\t\t\t *  @param  {Gain}  [gain=1]      The gain to play the sample at.\n\t\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t\t */\n\t\t    Tone.MultiPlayer.prototype.startLoop = function (bufferName, time, offset, loopStart, loopEnd, pitch, gain) {\n\t\t        time = this.toSeconds(time);\n\t\t        var source = this._makeSource(bufferName);\n\t\t        source.loop = true;\n\t\t        source.loopStart = this.toSeconds(this.defaultArg(loopStart, 0));\n\t\t        source.loopEnd = this.toSeconds(this.defaultArg(loopEnd, 0));\n\t\t        source.start(time, offset, undefined, this.defaultArg(gain, 1), this.fadeIn);\n\t\t        pitch = this.defaultArg(pitch, 0);\n\t\t        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Stop the first played instance of the buffer name.\n\t\t\t *  @param  {String}  bufferName  The buffer to stop.\n\t\t\t *  @param  {Time=}  time    When to stop the buffer\n\t\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t\t */\n\t\t    Tone.MultiPlayer.prototype.stop = function (bufferName, time) {\n\t\t        if (this._activeSources[bufferName] && this._activeSources[bufferName].length) {\n\t\t            time = this.toSeconds(time);\n\t\t            this._activeSources[bufferName].shift().stop(time, this.fadeOut);\n\t\t        } else {\n\t\t            throw new Error('Tone.MultiPlayer: cannot stop a buffer that hasn\\'t been started or is already stopped');\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Stop all currently playing buffers at the given time.\n\t\t\t *  @param  {Time=}  time  When to stop the buffers.\n\t\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t\t */\n\t\t    Tone.MultiPlayer.prototype.stopAll = function (time) {\n\t\t        time = this.toSeconds(time);\n\t\t        for (var bufferName in this._activeSources) {\n\t\t            var sources = this._activeSources[bufferName];\n\t\t            for (var i = 0; i < sources.length; i++) {\n\t\t                sources[i].stop(time);\n\t\t            }\n\t\t        }\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Add another buffer to the available buffers.\n\t\t\t *  @param {String} name The name to that the buffer is refered\n\t\t\t *                       to in start/stop methods. \n\t\t\t *  @param {String|Tone.Buffer} url The url of the buffer to load\n\t\t\t *                                  or the buffer.\n\t\t\t *  @param {Function} callback The function to invoke after the buffer is loaded.\n\t\t\t */\n\t\t    Tone.MultiPlayer.prototype.add = function (name, url, callback) {\n\t\t        this.buffers.add(name, url, callback);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Returns the playback state of the source. \"started\"\n\t\t\t *  if there are any buffers playing. \"stopped\" otherwise.\n\t\t\t *  @type {Tone.State}\n\t\t\t *  @readOnly\n\t\t\t *  @memberOf Tone.MultiPlayer#\n\t\t\t *  @name state\n\t\t\t */\n\t\t    Object.defineProperty(Tone.MultiPlayer.prototype, 'state', {\n\t\t        get: function () {\n\t\t            return this._activeSources.length > 0 ? Tone.State.Started : Tone.State.Stopped;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * Mute the output. \n\t\t\t * @memberOf Tone.MultiPlayer#\n\t\t\t * @type {boolean}\n\t\t\t * @name mute\n\t\t\t * @example\n\t\t\t * //mute the output\n\t\t\t * source.mute = true;\n\t\t\t */\n\t\t    Object.defineProperty(Tone.MultiPlayer.prototype, 'mute', {\n\t\t        get: function () {\n\t\t            return this._volume.mute;\n\t\t        },\n\t\t        set: function (mute) {\n\t\t            this._volume.mute = mute;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t *  Clean up.\n\t\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t\t */\n\t\t    Tone.MultiPlayer.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this._volume.dispose();\n\t\t        this._volume = null;\n\t\t        this._writable('volume');\n\t\t        this.volume = null;\n\t\t        for (var bufferName in this._activeSources) {\n\t\t            this._activeSources[bufferName].forEach(function (source) {\n\t\t                source.dispose();\n\t\t            });\n\t\t        }\n\t\t        this.buffers.dispose();\n\t\t        this.buffers = null;\n\t\t        this._activeSources = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.MultiPlayer;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    /**\n\t\t\t * @class Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n\t\t\t *        Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the \n\t\t\t *        amount of time each small chunk of audio is played for and the overlap is the \n\t\t\t *        amount of crossfading transition time between successive grains.\n\t\t\t * @extends {Tone}\n\t\t\t * @param {String|Tone.Buffer} url\tThe url to load, or the Tone.Buffer to play.\n\t\t\t * @param {Function=} callback The callback to invoke after the url is loaded.\n\t\t\t */\n\t\t    Tone.GrainPlayer = function () {\n\t\t        var options = this.optionsObject(arguments, [\n\t\t            'url',\n\t\t            'onload'\n\t\t        ], Tone.GrainPlayer.defaults);\n\t\t        Tone.Source.call(this);\n\t\t        /**\n\t\t\t\t *  The audio buffer belonging to the player.\n\t\t\t\t *  @type  {Tone.Buffer}\n\t\t\t\t */\n\t\t        this.buffer = new Tone.Buffer(options.url, options.onload);\n\t\t        /**\n\t\t\t\t *  Plays the buffer with a small envelope\n\t\t\t\t *  @type  {Tone.MultiPlayer}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._player = new Tone.MultiPlayer().connect(this.output);\n\t\t        /**\n\t\t\t\t *  Create a repeating tick to schedule\n\t\t\t\t *  the grains.\n\t\t\t\t *  @type  {Tone.Clock}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._clock = new Tone.Clock(this._tick.bind(this), 1);\n\t\t        /**\n\t\t\t\t *  @type  {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._loopStart = 0;\n\t\t        /**\n\t\t\t\t *  @type  {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._loopEnd = 0;\n\t\t        /**\n\t\t\t\t *  @type  {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._playbackRate = options.playbackRate;\n\t\t        /**\n\t\t\t\t *  @type  {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._grainSize = options.grainSize;\n\t\t        /**\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Number}\n\t\t\t\t */\n\t\t        this._overlap = options.overlap;\n\t\t        /**\n\t\t\t\t *  Adjust the pitch independently of the playbackRate.\n\t\t\t\t *  @type  {Cents}\n\t\t\t\t */\n\t\t        this.detune = options.detune;\n\t\t        /**\n\t\t\t\t *  The amount of time randomly added\n\t\t\t\t *  or subtracted from the grain's offset\n\t\t\t\t *  @type  {Time}\n\t\t\t\t */\n\t\t        this.drift = options.drift;\n\t\t        //setup\n\t\t        this.overlap = options.overlap;\n\t\t        this.loop = options.loop;\n\t\t        this.playbackRate = options.playbackRate;\n\t\t        this.grainSize = options.grainSize;\n\t\t        this.loopStart = options.loopStart;\n\t\t        this.loopEnd = options.loopEnd;\n\t\t        this.reverse = options.reverse;\n\t\t    };\n\t\t    Tone.extend(Tone.GrainPlayer, Tone.Source);\n\t\t    /**\n\t\t\t *  the default parameters\n\t\t\t *  @static\n\t\t\t *  @const\n\t\t\t *  @type {Object}\n\t\t\t */\n\t\t    Tone.GrainPlayer.defaults = {\n\t\t        'onload': Tone.noOp,\n\t\t        'overlap': 0.1,\n\t\t        'grainSize': 0.2,\n\t\t        'drift': 0,\n\t\t        'playbackRate': 1,\n\t\t        'detune': 0,\n\t\t        'loop': false,\n\t\t        'loopStart': 0,\n\t\t        'loopEnd': 0,\n\t\t        'reverse': false\n\t\t    };\n\t\t    /**\n\t\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t\t *  and/or duration which will play the buffer from a position\n\t\t\t *  within the buffer for the given duration. \n\t\t\t *  \n\t\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t\t *                                 to start at. \n\t\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t\t *                                is given, it will default to the full length \n\t\t\t *                                of the sample (minus any offset)\n\t\t\t *  @returns {Tone.GrainPlayer} this\n\t\t\t *  @memberOf Tone.GrainPlayer#\n\t\t\t *  @method start\n\t\t\t *  @name start\n\t\t\t */\n\t\t    /**\n\t\t\t *  Internal start method\n\t\t\t *  @param {Time} time\n\t\t\t *  @param {Time} offset\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.GrainPlayer.prototype._start = function (time, offset, duration) {\n\t\t        offset = this.defaultArg(offset, 0);\n\t\t        offset = this.toSeconds(offset);\n\t\t        time = this.toSeconds(time);\n\t\t        this._offset = offset;\n\t\t        this._clock.start(time);\n\t\t        //unmute the player\n\t\t        this._player.volume.setValueAtTime(0, time);\n\t\t        if (duration) {\n\t\t            this._stop(time + this.toSeconds(duration));\n\t\t        }\n\t\t    };\n\t\t    /**\n\t\t\t *  Internal start method\n\t\t\t *  @param {Time} time\n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.GrainPlayer.prototype._stop = function (time) {\n\t\t        this._clock.stop(time);\n\t\t        //mute the player\n\t\t        this._player.volume.cancelScheduledValues(time);\n\t\t        this._player.volume.setValueAtTime(-Infinity, time);\n\t\t    };\n\t\t    /**\n\t\t\t *  Invoked on each clock tick. scheduled a new\n\t\t\t *  grain at this time.\n\t\t\t *  @param  {Time}  time \n\t\t\t *  @private\n\t\t\t */\n\t\t    Tone.GrainPlayer.prototype._tick = function (time) {\n\t\t        var bufferDuration = this.buffer.duration;\n\t\t        if (this.loop && this._loopEnd > 0) {\n\t\t            bufferDuration = this._loopEnd;\n\t\t        }\n\t\t        var drift = (Math.random() * 2 - 1) * this.drift;\n\t\t        var offset = this._offset - this._overlap + drift;\n\t\t        var detune = this.detune / 100;\n\t\t        //keep the offset within the limits of the buffer\n\t\t        offset = Math.max(offset, 0);\n\t\t        offset = Math.min(offset, bufferDuration);\n\t\t        var originalFadeIn = this._player.fadeIn;\n\t\t        if (this.loop && this._offset > bufferDuration) {\n\t\t            //play the end\n\t\t            var endSegmentDuration = this._offset - bufferDuration;\n\t\t            this._player.start(this.buffer, time, offset, endSegmentDuration + this._overlap, detune);\n\t\t            //and play the beginning \n\t\t            offset = this._offset % bufferDuration;\n\t\t            this._offset = this._loopStart;\n\t\t            this._player.fadeIn = 0;\n\t\t            this._player.start(this.buffer, time + endSegmentDuration, this._offset, offset + this._overlap, detune);\n\t\t        } else if (this._offset > bufferDuration) {\n\t\t            //set the state to stopped. \n\t\t            this.stop(time);\n\t\t        } else {\n\t\t            if (offset === 0) {\n\t\t                this._player.fadeIn = 0;\n\t\t            }\n\t\t            this._player.start(this.buffer, time, offset, this.grainSize + this._overlap, detune);\n\t\t        }\n\t\t        this._player.fadeIn = originalFadeIn;\n\t\t        //increment the offset\n\t\t        var duration = this._clock._nextTick - time;\n\t\t        this._offset += duration * this._playbackRate;\n\t\t    };\n\t\t    /**\n\t\t\t *  Jump to a specific time and play it.\n\t\t\t *  @param  {Time}  offset  The offset to jump to.\n\t\t\t *  @param {Time=} time When to make the jump.\n\t\t\t *  @return  {[type]}  [description]\n\t\t\t */\n\t\t    Tone.GrainPlayer.prototype.scrub = function (offset, time) {\n\t\t        this._offset = this.toSeconds(offset);\n\t\t        this._tick(this.toSeconds(time));\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t * The playback rate of the sample\n\t\t\t * @memberOf Tone.GrainPlayer#\n\t\t\t * @type {Positive}\n\t\t\t * @name playbackRate\n\t\t\t */\n\t\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'playbackRate', {\n\t\t        get: function () {\n\t\t            return this._playbackRate;\n\t\t        },\n\t\t        set: function (rate) {\n\t\t            this._playbackRate = rate;\n\t\t            this.grainSize = this._grainSize;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The loop start time. \n\t\t\t * @memberOf Tone.GrainPlayer#\n\t\t\t * @type {Time}\n\t\t\t * @name loopStart\n\t\t\t */\n\t\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopStart', {\n\t\t        get: function () {\n\t\t            return this._loopStart;\n\t\t        },\n\t\t        set: function (time) {\n\t\t            this._loopStart = this.toSeconds(time);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The loop end time. \n\t\t\t * @memberOf Tone.GrainPlayer#\n\t\t\t * @type {Time}\n\t\t\t * @name loopEnd\n\t\t\t */\n\t\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopEnd', {\n\t\t        get: function () {\n\t\t            return this._loopEnd;\n\t\t        },\n\t\t        set: function (time) {\n\t\t            this._loopEnd = this.toSeconds(time);\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The direction the buffer should play in\n\t\t\t * @memberOf Tone.GrainPlayer#\n\t\t\t * @type {boolean}\n\t\t\t * @name reverse\n\t\t\t */\n\t\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'reverse', {\n\t\t        get: function () {\n\t\t            return this.buffer.reverse;\n\t\t        },\n\t\t        set: function (rev) {\n\t\t            this.buffer.reverse = rev;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * The size of each chunk of audio that the \n\t\t\t * buffer is chopped into and played back at.\n\t\t\t * @memberOf Tone.GrainPlayer#\n\t\t\t * @type {Time}\n\t\t\t * @name grainSize\n\t\t\t */\n\t\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'grainSize', {\n\t\t        get: function () {\n\t\t            return this._grainSize;\n\t\t        },\n\t\t        set: function (size) {\n\t\t            this._grainSize = this.toSeconds(size);\n\t\t            this._clock.frequency.value = this._playbackRate / this._grainSize;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * This is the duration of the cross-fade between \n\t\t\t * sucessive grains.\n\t\t\t * @memberOf Tone.GrainPlayer#\n\t\t\t * @type {Time}\n\t\t\t * @name overlap\n\t\t\t */\n\t\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'overlap', {\n\t\t        get: function () {\n\t\t            return this._overlap;\n\t\t        },\n\t\t        set: function (time) {\n\t\t            time = this.toSeconds(time);\n\t\t            this._overlap = time;\n\t\t            if (this._overlap < 0) {\n\t\t                this._player.fadeIn = 0.01;\n\t\t                this._player.fadeOut = 0.01;\n\t\t            } else {\n\t\t                this._player.fadeIn = time;\n\t\t                this._player.fadeOut = time;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * Clean up\n\t\t\t * @return {Tone.GrainPlayer} this\n\t\t\t */\n\t\t    Tone.GrainPlayer.prototype.dispose = function () {\n\t\t        Tone.Source.prototype.dispose.call(this);\n\t\t        this.buffer.dispose();\n\t\t        this.buffer = null;\n\t\t        this._player.dispose();\n\t\t        this._player = null;\n\t\t        this._clock.dispose();\n\t\t        this._clock = null;\n\t\t        return this;\n\t\t    };\n\t\t    return Tone.GrainPlayer;\n\t\t});\n\t\tModule(function (Tone) {\n\t\t    \n\t\t    /**\n\t\t\t *  @class  Tone.UserMedia uses MediaDevices.getUserMedia to open up\n\t\t\t *          and external microphone or audio input. Check \n\t\t\t *          [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n\t\t\t *          to see which browsers are supported. Access to an external input\n\t\t\t *          is limited to secure (HTTPS) connections.\n\t\t\t *         \n\t\t\t *  @constructor\n\t\t\t *  @extends {Tone}\n\t\t\t *  @param {Decibels=} volume The level of the input\n\t\t\t *  @example\n\t\t\t * //list the inputs and open the third one\n\t\t\t * var motu = new Tone.UserMedia();\n\t\t\t * \n\t\t\t * //opening the input asks the user to activate their mic\n\t\t\t * motu.open().then(function(){\n\t\t\t * \t//opening is activates the microphone\n\t\t\t * \t//starting lets audio through\n\t\t\t * \tmotu.start(10);\n\t\t\t * });\n\t\t\t */\n\t\t    Tone.UserMedia = function () {\n\t\t        var options = this.optionsObject(arguments, ['volume'], Tone.UserMedia.defaults);\n\t\t        /**\n\t\t\t\t *  The MediaStreamNode \n\t\t\t\t *  @type {MediaStreamAudioSourceNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._mediaStream = null;\n\t\t        /**\n\t\t\t\t *  The media stream created by getUserMedia.\n\t\t\t\t *  @type {LocalMediaStream}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._stream = null;\n\t\t        /**\n\t\t\t\t *  The open device\n\t\t\t\t *  @type  {MediaDeviceInfo}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._device = null;\n\t\t        /**\n\t\t\t\t *  The output volume node\n\t\t\t\t *  @type  {Tone.Volume}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t\t        /**\n\t\t\t\t * The volume of the output in decibels.\n\t\t\t\t * @type {Decibels}\n\t\t\t\t * @signal\n\t\t\t\t * @example\n\t\t\t\t * input.volume.value = -6;\n\t\t\t\t */\n\t\t        this.volume = this._volume.volume;\n\t\t        this._readOnly('volume');\n\t\t        this.mute = options.mute;\n\t\t    };\n\t\t    Tone.extend(Tone.UserMedia);\n\t\t    /**\n\t\t\t * the default parameters\n\t\t\t * @type {Object}\n\t\t\t */\n\t\t    Tone.UserMedia.defaults = {\n\t\t        'volume': 0,\n\t\t        'mute': false\n\t\t    };\n\t\t    /**\n\t\t\t *  Open the media stream. If a string is passed in, it is assumed\n\t\t\t *  to be the label or id of the stream, if a number is passed in,\n\t\t\t *  it is the input number of the stream.\n\t\t\t *  @param  {String|Number} [labelOrId=\"default\"] The label or id of the audio input media device. \n\t\t\t *                                                With no argument, the default stream is opened.\n\t\t\t *  @return {Promise} The promise is resolved when the stream is open.\n\t\t\t */\n\t\t    Tone.UserMedia.prototype.open = function (labelOrId) {\n\t\t        labelOrId = this.defaultArg(labelOrId, 'default');\n\t\t        return this.enumerateDevices().then(function (devices) {\n\t\t            var device;\n\t\t            if (this.isNumber(labelOrId)) {\n\t\t                device = devices[labelOrId];\n\t\t            } else {\n\t\t                device = devices.find(function (device) {\n\t\t                    return device.label === labelOrId || device.deviceId === labelOrId;\n\t\t                });\n\t\t                if (!device) {\n\t\t                    //otherwise just take the first one\n\t\t                    device = devices[0];\n\t\t                }\n\t\t            }\n\t\t            //didn't find a matching device\n\t\t            if (!device) {\n\t\t                throw new Error('Tone.UserMedia: no matching audio inputs.');\n\t\t            }\n\t\t            this._device = device;\n\t\t            //do getUserMedia\n\t\t            var constraints = {\n\t\t                audio: {\n\t\t                    'deviceId': device.deviceId,\n\t\t                    'echoCancellation': false,\n\t\t                    'sampleRate': this.context.sampleRate\n\t\t                }\n\t\t            };\n\t\t            return navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n\t\t                //start a new source only if the previous one is closed\n\t\t                if (!this._stream) {\n\t\t                    this._stream = stream;\n\t\t                    //Wrap a MediaStreamSourceNode around the live input stream.\n\t\t                    this._mediaStream = this.context.createMediaStreamSource(stream);\n\t\t                    //Connect the MediaStreamSourceNode to a gate gain node\n\t\t                    this._mediaStream.connect(this.output);\n\t\t                }\n\t\t                return this;\n\t\t            }.bind(this));\n\t\t        }.bind(this));\n\t\t    };\n\t\t    /**\n\t\t\t *  Close the media stream\n\t\t\t *  @return {Tone.UserMedia} this\n\t\t\t */\n\t\t    Tone.UserMedia.prototype.close = function () {\n\t\t        if (this._stream) {\n\t\t            this._stream.getAudioTracks().forEach(function (track) {\n\t\t                track.stop();\n\t\t            });\n\t\t            this._stream = null;\n\t\t            //remove the old media stream\n\t\t            this._mediaStream.disconnect();\n\t\t            this._mediaStream = null;\n\t\t        }\n\t\t        this._device = null;\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  Returns a promise which resolves with the list of audio input devices available.\n\t\t\t *  @return {Promise} The promise that is resolved with the devices\n\t\t\t *  @example\n\t\t\t * extInput.enumerateDevices().then(function(devices){\n\t\t\t * \tconsole.log(devices)\n\t\t\t * })\n\t\t\t */\n\t\t    Tone.UserMedia.prototype.enumerateDevices = function () {\n\t\t        return navigator.mediaDevices.enumerateDevices().then(function (devices) {\n\t\t            return devices.filter(function (device) {\n\t\t                return device.kind === 'audioinput';\n\t\t            });\n\t\t        });\n\t\t    };\n\t\t    /**\n\t\t\t *  Returns the playback state of the source, \"started\" when the microphone is open\n\t\t\t *  and \"stopped\" when the mic is closed.\n\t\t\t *  @type {Tone.State}\n\t\t\t *  @readOnly\n\t\t\t *  @memberOf Tone.UserMedia#\n\t\t\t *  @name state\n\t\t\t */\n\t\t    Object.defineProperty(Tone.UserMedia.prototype, 'state', {\n\t\t        get: function () {\n\t\t            return this._stream && this._stream.active ? Tone.State.Started : Tone.State.Stopped;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * \tReturns an identifier for the represented device that is \n\t\t\t * \tpersisted across sessions. It is un-guessable by other applications and \n\t\t\t * \tunique to the origin of the calling application. It is reset when the \n\t\t\t * \tuser clears cookies (for Private Browsing, a different identifier is \n\t\t\t * \tused that is not persisted across sessions). Returns undefined when the \n\t\t\t * \tdevice is not open.\n\t\t\t *  @type {String}\n\t\t\t *  @readOnly\n\t\t\t *  @memberOf Tone.UserMedia#\n\t\t\t *  @name deviceId\n\t\t\t */\n\t\t    Object.defineProperty(Tone.UserMedia.prototype, 'deviceId', {\n\t\t        get: function () {\n\t\t            if (this._device) {\n\t\t                return this._device.deviceId;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * \tReturns a group identifier. Two devices have the \n\t\t\t * \tsame group identifier if they belong to the same physical device.\n\t\t\t * \tReturns undefined when the device is not open.\n\t\t\t *  @type {String}\n\t\t\t *  @readOnly\n\t\t\t *  @memberOf Tone.UserMedia#\n\t\t\t *  @name groupId\n\t\t\t */\n\t\t    Object.defineProperty(Tone.UserMedia.prototype, 'groupId', {\n\t\t        get: function () {\n\t\t            if (this._device) {\n\t\t                return this._device.groupId;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * \tReturns a label describing this device (for example \"Built-in Microphone\"). \n\t\t\t * \tReturns undefined when the device is not open or label is not available\n\t\t\t * \tbecause of permissions.\n\t\t\t *  @type {String}\n\t\t\t *  @readOnly\n\t\t\t *  @memberOf Tone.UserMedia#\n\t\t\t *  @name groupId\n\t\t\t */\n\t\t    Object.defineProperty(Tone.UserMedia.prototype, 'label', {\n\t\t        get: function () {\n\t\t            if (this._device) {\n\t\t                return this._device.label;\n\t\t            }\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * Mute the output. \n\t\t\t * @memberOf Tone.UserMedia#\n\t\t\t * @type {boolean}\n\t\t\t * @name mute\n\t\t\t * @example\n\t\t\t * //mute the output\n\t\t\t * userMedia.mute = true;\n\t\t\t */\n\t\t    Object.defineProperty(Tone.UserMedia.prototype, 'mute', {\n\t\t        get: function () {\n\t\t            return this._volume.mute;\n\t\t        },\n\t\t        set: function (mute) {\n\t\t            this._volume.mute = mute;\n\t\t        }\n\t\t    });\n\t\t    /**\n\t\t\t * Clean up.\n\t\t\t * @return {Tone.UserMedia} this\n\t\t\t */\n\t\t    Tone.UserMedia.prototype.dispose = function () {\n\t\t        Tone.prototype.dispose.call(this);\n\t\t        this.close();\n\t\t        this._writable('volume');\n\t\t        this._volume.dispose();\n\t\t        this._volume = null;\n\t\t        this.volume = null;\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t\t *  If getUserMedia is supported by the browser.\n\t\t\t *  @type  {Boolean}\n\t\t\t *  @memberOf Tone.UserMedia#\n\t\t\t *  @name supported\n\t\t\t *  @static\n\t\t\t *  @readOnly\n\t\t\t */\n\t\t    Object.defineProperty(Tone.UserMedia, 'supported', {\n\t\t        get: function () {\n\t\t            return !Tone.prototype.isUndef(navigator.mediaDevices) && Tone.prototype.isFunction(navigator.mediaDevices.getUserMedia);\n\t\t        }\n\t\t    });\n\t\t    return Tone.UserMedia;\n\t\t});\n\t\t\n\t\treturn Tone;\n\t}));\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/1.f362d3be.chunk.js","import Tone from 'tone'\n\nconst urls = ['./audio/0.mp3',\n './audio/1.mp3',\n './audio/2.mp3',\n'./audio/3.mp3',\n'./audio/4.mp3',\n './audio/5.mp3',\n './audio/6.mp3',\n './audio/7.mp3',\n './audio/8.mp3']\n\n\nexport default function buildLoop (store) {\n  const keys = new Tone.MultiPlayer(urls)\n  const comp = new Tone.Compressor({\n    ratio: 10,\n    threshold: -30,\n    release: 0.1,\n    attack: 0.02,\n    knee: 10\n  })\n  const pingPong = new Tone.PingPongDelay('4n+8n', 0.1)\n  pingPong.wet.value = 0.2\n  const instrument = keys.chain( pingPong, comp, Tone.Master)\n  const loop = new Tone.Sequence(\n    function (time, col) {\n      const selectedPads = store.selectedPads\n      const playingPads = selectedPads.filter(\n        pad => pad.n === col\n      )\n      playingPads.forEach(pad => instrument.start(pad.m, time, 0, '1', 0))\n      Tone.Draw.schedule(\n        function () {\n          const duration = Tone.Time('2n').toMilliseconds()\n          playingPads.forEach(pad => pad.pling(duration))\n        },\n        time\n      )\n    },\n    [ 0, 1, 2, 3, 4, 5, 6, 7 ],\n    '8n'\n  )\n  Tone.Transport.start()\n  loop.start()\n\n  return loop\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/sound/loop.js","(function(root, factory){\n\n\t//UMD\n\tif ( typeof define === \"function\" && define.amd ) {\n\t\tdefine(function() {\n\t\t\treturn factory();\n\t\t});\n\t} else if (typeof module === \"object\") {\n\t\tmodule.exports = factory();\n \t} else {\n\t\troot.Tone = factory();\n\t}\n\n}(this, function(){\n\n\t\"use strict\";\n\t\n\tvar Tone;\n\t//constructs the main Tone object\n\tfunction Main(func){\n\t\tTone = func();\n\t}\n\t//invokes each of the modules with the main Tone object as the argument\n\tfunction Module(func){\n\t\tfunc(Tone);\n\t}\t/**\n\t *  Tone.js\n\t *  @author Yotam Mann\n\t *  @license http://opensource.org/licenses/MIT MIT License\n\t *  @copyright 2014-2017 Yotam Mann\n\t */\n\tMain(function () {\n\t    \n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTONE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  @class  Tone is the base class of all other classes. It provides \n\t\t *          a lot of methods and functionality to all classes that extend\n\t\t *          it. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @alias Tone\n\t\t *  @param {number} [inputs=1] the number of input nodes\n\t\t *  @param {number} [outputs=1] the number of output nodes\n\t\t */\n\t    var Tone = function (inputs, outputs) {\n\t        /**\n\t\t\t *  the input node(s)\n\t\t\t *  @type {GainNode|Array}\n\t\t\t */\n\t        if (this.isUndef(inputs) || inputs === 1) {\n\t            this.input = this.context.createGain();\n\t        } else if (inputs > 1) {\n\t            this.input = new Array(inputs);\n\t        }\n\t        /**\n\t\t\t *  the output node(s)\n\t\t\t *  @type {GainNode|Array}\n\t\t\t */\n\t        if (this.isUndef(outputs) || outputs === 1) {\n\t            this.output = this.context.createGain();\n\t        } else if (outputs > 1) {\n\t            this.output = new Array(inputs);\n\t        }\n\t    };\n\t    /**\n\t\t *  Set the parameters at once. Either pass in an\n\t\t *  object mapping parameters to values, or to set a\n\t\t *  single parameter, by passing in a string and value.\n\t\t *  The last argument is an optional ramp time which \n\t\t *  will ramp any signal values to their destination value\n\t\t *  over the duration of the rampTime.\n\t\t *  @param {Object|string} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * //set values using an object\n\t\t * filter.set({\n\t\t * \t\"frequency\" : 300,\n\t\t * \t\"type\" : highpass\n\t\t * });\n\t\t *  @example\n\t\t * filter.set(\"type\", \"highpass\");\n\t\t *  @example\n\t\t * //ramp to the value 220 over 3 seconds. \n\t\t * oscillator.set({\n\t\t * \t\"frequency\" : 220\n\t\t * }, 3);\n\t\t */\n\t    Tone.prototype.set = function (params, value, rampTime) {\n\t        if (this.isObject(params)) {\n\t            rampTime = value;\n\t        } else if (this.isString(params)) {\n\t            var tmpObj = {};\n\t            tmpObj[params] = value;\n\t            params = tmpObj;\n\t        }\n\t        paramLoop:\n\t            for (var attr in params) {\n\t                value = params[attr];\n\t                var parent = this;\n\t                if (attr.indexOf('.') !== -1) {\n\t                    var attrSplit = attr.split('.');\n\t                    for (var i = 0; i < attrSplit.length - 1; i++) {\n\t                        parent = parent[attrSplit[i]];\n\t                        if (parent instanceof Tone) {\n\t                            attrSplit.splice(0, i + 1);\n\t                            var innerParam = attrSplit.join('.');\n\t                            parent.set(innerParam, value);\n\t                            continue paramLoop;\n\t                        }\n\t                    }\n\t                    attr = attrSplit[attrSplit.length - 1];\n\t                }\n\t                var param = parent[attr];\n\t                if (this.isUndef(param)) {\n\t                    continue;\n\t                }\n\t                if (Tone.Signal && param instanceof Tone.Signal || Tone.Param && param instanceof Tone.Param) {\n\t                    if (param.value !== value) {\n\t                        if (this.isUndef(rampTime)) {\n\t                            param.value = value;\n\t                        } else {\n\t                            param.rampTo(value, rampTime);\n\t                        }\n\t                    }\n\t                } else if (param instanceof AudioParam) {\n\t                    if (param.value !== value) {\n\t                        param.value = value;\n\t                    }\n\t                } else if (param instanceof Tone) {\n\t                    param.set(value);\n\t                } else if (param !== value) {\n\t                    parent[attr] = value;\n\t                }\n\t            }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the object's attributes. Given no arguments get\n\t\t *  will return all available object properties and their corresponding\n\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t *  to access deeper properties.\n\t\t *  @example\n\t\t * osc.get();\n\t\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t\t *  @example\n\t\t * osc.get(\"type\");\n\t\t * //returns { \"type\" : \"sine\"}\n\t\t * @example\n\t\t * //use dot notation to access deep properties\n\t\t * synth.get([\"envelope.attack\", \"envelope.release\"]);\n\t\t * //returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n\t\t *  @param {Array=|string|undefined} params the parameters to get, otherwise will return \n\t\t *  \t\t\t\t\t                  all available.\n\t\t *  @returns {Object}\n\t\t */\n\t    Tone.prototype.get = function (params) {\n\t        if (this.isUndef(params)) {\n\t            params = this._collectDefaults(this.constructor);\n\t        } else if (this.isString(params)) {\n\t            params = [params];\n\t        }\n\t        var ret = {};\n\t        for (var i = 0; i < params.length; i++) {\n\t            var attr = params[i];\n\t            var parent = this;\n\t            var subRet = ret;\n\t            if (attr.indexOf('.') !== -1) {\n\t                var attrSplit = attr.split('.');\n\t                for (var j = 0; j < attrSplit.length - 1; j++) {\n\t                    var subAttr = attrSplit[j];\n\t                    subRet[subAttr] = subRet[subAttr] || {};\n\t                    subRet = subRet[subAttr];\n\t                    parent = parent[subAttr];\n\t                }\n\t                attr = attrSplit[attrSplit.length - 1];\n\t            }\n\t            var param = parent[attr];\n\t            if (this.isObject(params[attr])) {\n\t                subRet[attr] = param.get();\n\t            } else if (Tone.Signal && param instanceof Tone.Signal) {\n\t                subRet[attr] = param.value;\n\t            } else if (Tone.Param && param instanceof Tone.Param) {\n\t                subRet[attr] = param.value;\n\t            } else if (param instanceof AudioParam) {\n\t                subRet[attr] = param.value;\n\t            } else if (param instanceof Tone) {\n\t                subRet[attr] = param.get();\n\t            } else if (!this.isFunction(param) && !this.isUndef(param)) {\n\t                subRet[attr] = param;\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  collect all of the default attributes in one\n\t\t *  @private\n\t\t *  @param {function} constr the constructor to find the defaults from\n\t\t *  @return {Array} all of the attributes which belong to the class\n\t\t */\n\t    Tone.prototype._collectDefaults = function (constr) {\n\t        var ret = [];\n\t        if (!this.isUndef(constr.defaults)) {\n\t            ret = Object.keys(constr.defaults);\n\t        }\n\t        if (!this.isUndef(constr._super)) {\n\t            var superDefs = this._collectDefaults(constr._super);\n\t            //filter out repeats\n\t            for (var i = 0; i < superDefs.length; i++) {\n\t                if (ret.indexOf(superDefs[i]) === -1) {\n\t                    ret.push(superDefs[i]);\n\t                }\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  @returns {string} returns the name of the class as a string\n\t\t */\n\t    Tone.prototype.toString = function () {\n\t        for (var className in Tone) {\n\t            var isLetter = className[0].match(/^[A-Z]$/);\n\t            var sameConstructor = Tone[className] === this.constructor;\n\t            if (this.isFunction(Tone[className]) && isLetter && sameConstructor) {\n\t                return className;\n\t            }\n\t        }\n\t        return 'Tone';\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCLASS VARS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The number of inputs feeding into the AudioNode. \n\t\t *  For source nodes, this will be 0.\n\t\t *  @memberOf Tone#\n\t\t *  @name numberOfInputs\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'numberOfInputs', {\n\t        get: function () {\n\t            if (this.input) {\n\t                if (this.isArray(this.input)) {\n\t                    return this.input.length;\n\t                } else {\n\t                    return 1;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of outputs coming out of the AudioNode. \n\t\t *  For source nodes, this will be 0.\n\t\t *  @memberOf Tone#\n\t\t *  @name numberOfInputs\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'numberOfOutputs', {\n\t        get: function () {\n\t            if (this.output) {\n\t                if (this.isArray(this.output)) {\n\t                    return this.output.length;\n\t                } else {\n\t                    return 1;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCONNECTIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.dispose = function () {\n\t        if (!this.isUndef(this.input)) {\n\t            if (this.input instanceof AudioNode) {\n\t                this.input.disconnect();\n\t            }\n\t            this.input = null;\n\t        }\n\t        if (!this.isUndef(this.output)) {\n\t            if (this.output instanceof AudioNode) {\n\t                this.output.disconnect();\n\t            }\n\t            this.output = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode\n\t\t *  @param  {Tone | AudioParam | AudioNode} unit \n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.connect = function (unit, outputNum, inputNum) {\n\t        if (Array.isArray(this.output)) {\n\t            outputNum = this.defaultArg(outputNum, 0);\n\t            this.output[outputNum].connect(unit, 0, inputNum);\n\t        } else {\n\t            this.output.connect(unit, outputNum, inputNum);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  disconnect the output\n\t\t *  @param {Number|AudioNode} output Either the output index to disconnect\n\t\t *                                   if the output is an array, or the\n\t\t *                                   node to disconnect from.\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.disconnect = function (destination, outputNum, inputNum) {\n\t        if (this.isArray(this.output)) {\n\t            if (this.isNumber(destination)) {\n\t                this.output[destination].disconnect();\n\t            } else {\n\t                outputNum = this.defaultArg(outputNum, 0);\n\t                this.output[outputNum].disconnect(destination, 0, inputNum);\n\t            }\n\t        } else {\n\t            this.output.disconnect.apply(this.output, arguments);\n\t        }\n\t    };\n\t    /**\n\t\t *  connect together all of the arguments in series\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.connectSeries = function () {\n\t        if (arguments.length > 1) {\n\t            var currentUnit = arguments[0];\n\t            for (var i = 1; i < arguments.length; i++) {\n\t                var toUnit = arguments[i];\n\t                currentUnit.connect(toUnit);\n\t                currentUnit = toUnit;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Connect the output of this node to the rest of the nodes in series.\n\t\t *  @example\n\t\t *  //connect a node to an effect, panVol and then to the master output\n\t\t *  node.chain(effect, panVol, Tone.Master);\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.chain = function () {\n\t        if (arguments.length > 0) {\n\t            var currentUnit = this;\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                var toUnit = arguments[i];\n\t                currentUnit.connect(toUnit);\n\t                currentUnit = toUnit;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the output of this node to the rest of the nodes in parallel.\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.fan = function () {\n\t        if (arguments.length > 0) {\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                this.connect(arguments[i]);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    //give native nodes chain and fan methods\n\t    AudioNode.prototype.chain = Tone.prototype.chain;\n\t    AudioNode.prototype.fan = Tone.prototype.fan;\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUTILITIES / HELPERS / MATHS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  If the `given` parameter is undefined, use the `fallback`. \n\t\t *  If both `given` and `fallback` are object literals, it will\n\t\t *  return a deep copy which includes all of the parameters from both \n\t\t *  objects. If a parameter is undefined in given, it will return\n\t\t *  the fallback property. \n\t\t *  <br><br>\n\t\t *  WARNING: if object is self referential, it will go into an an \n\t\t *  infinite recursive loop.\n\t\t *  \n\t\t *  @param  {*} given    \n\t\t *  @param  {*} fallback \n\t\t *  @return {*}          \n\t\t */\n\t    Tone.prototype.defaultArg = function (given, fallback) {\n\t        if (this.isObject(given) && this.isObject(fallback)) {\n\t            var ret = {};\n\t            //make a deep copy of the given object\n\t            for (var givenProp in given) {\n\t                ret[givenProp] = this.defaultArg(fallback[givenProp], given[givenProp]);\n\t            }\n\t            for (var fallbackProp in fallback) {\n\t                ret[fallbackProp] = this.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t            }\n\t            return ret;\n\t        } else {\n\t            return this.isUndef(given) ? fallback : given;\n\t        }\n\t    };\n\t    /**\n\t\t *  returns the args as an options object with given arguments\n\t\t *  mapped to the names provided. \n\t\t *\n\t\t *  if the args given is an array containing only one object, it is assumed\n\t\t *  that that's already the options object and will just return it. \n\t\t *  \n\t\t *  @param  {Array} values  the 'arguments' object of the function\n\t\t *  @param  {Array} keys the names of the arguments as they\n\t\t *                                 should appear in the options object\n\t\t *  @param {Object=} defaults optional defaults to mixin to the returned \n\t\t *                            options object                              \n\t\t *  @return {Object}       the options object with the names mapped to the arguments\n\t\t */\n\t    Tone.prototype.optionsObject = function (values, keys, defaults) {\n\t        var options = {};\n\t        if (values.length === 1 && this.isObject(values[0])) {\n\t            options = values[0];\n\t        } else {\n\t            for (var i = 0; i < keys.length; i++) {\n\t                options[keys[i]] = values[i];\n\t            }\n\t        }\n\t        if (!this.isUndef(defaults)) {\n\t            return this.defaultArg(options, defaults);\n\t        } else {\n\t            return options;\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // TYPE CHECKING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  test if the arg is undefined\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is undefined\n\t\t *  @function\n\t\t */\n\t    Tone.prototype.isUndef = function (val) {\n\t        return typeof val === 'undefined';\n\t    };\n\t    /**\n\t\t *  test if the arg is a function\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a function\n\t\t *  @function\n\t\t */\n\t    Tone.prototype.isFunction = function (val) {\n\t        return typeof val === 'function';\n\t    };\n\t    /**\n\t\t *  Test if the argument is a number.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a number\n\t\t */\n\t    Tone.prototype.isNumber = function (arg) {\n\t        return typeof arg === 'number';\n\t    };\n\t    /**\n\t\t *  Test if the given argument is an object literal (i.e. `{}`);\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is an object literal.\n\t\t */\n\t    Tone.prototype.isObject = function (arg) {\n\t        return Object.prototype.toString.call(arg) === '[object Object]' && arg.constructor === Object;\n\t    };\n\t    /**\n\t\t *  Test if the argument is a boolean.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a boolean\n\t\t */\n\t    Tone.prototype.isBoolean = function (arg) {\n\t        return typeof arg === 'boolean';\n\t    };\n\t    /**\n\t\t *  Test if the argument is an Array\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is an array\n\t\t */\n\t    Tone.prototype.isArray = function (arg) {\n\t        return Array.isArray(arg);\n\t    };\n\t    /**\n\t\t *  Test if the argument is a string.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a string\n\t\t */\n\t    Tone.prototype.isString = function (arg) {\n\t        return typeof arg === 'string';\n\t    };\n\t    /**\n\t\t *  An empty function.\n\t\t *  @static\n\t\t */\n\t    Tone.noOp = function () {\n\t    };\n\t    /**\n\t\t *  Make the property not writable. Internal use only. \n\t\t *  @private\n\t\t *  @param  {string}  property  the property to make not writable\n\t\t */\n\t    Tone.prototype._readOnly = function (property) {\n\t        if (Array.isArray(property)) {\n\t            for (var i = 0; i < property.length; i++) {\n\t                this._readOnly(property[i]);\n\t            }\n\t        } else {\n\t            Object.defineProperty(this, property, {\n\t                writable: false,\n\t                enumerable: true\n\t            });\n\t        }\n\t    };\n\t    /**\n\t\t *  Make an attribute writeable. Interal use only. \n\t\t *  @private\n\t\t *  @param  {string}  property  the property to make writable\n\t\t */\n\t    Tone.prototype._writable = function (property) {\n\t        if (Array.isArray(property)) {\n\t            for (var i = 0; i < property.length; i++) {\n\t                this._writable(property[i]);\n\t            }\n\t        } else {\n\t            Object.defineProperty(this, property, { writable: true });\n\t        }\n\t    };\n\t    /**\n\t\t * Possible play states. \n\t\t * @enum {string}\n\t\t */\n\t    Tone.State = {\n\t        Started: 'started',\n\t        Stopped: 'stopped',\n\t        Paused: 'paused'\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Equal power gain scale. Good for cross-fading.\n\t\t *  @param  {NormalRange} percent (0-1)\n\t\t *  @return {Number}         output gain (0-1)\n\t\t */\n\t    Tone.prototype.equalPowerScale = function (percent) {\n\t        var piFactor = 0.5 * Math.PI;\n\t        return Math.sin(percent * piFactor);\n\t    };\n\t    /**\n\t\t *  Convert decibels into gain.\n\t\t *  @param  {Decibels} db\n\t\t *  @return {Number}   \n\t\t */\n\t    Tone.prototype.dbToGain = function (db) {\n\t        return Math.pow(2, db / 6);\n\t    };\n\t    /**\n\t\t *  Convert gain to decibels.\n\t\t *  @param  {Number} gain (0-1)\n\t\t *  @return {Decibels}   \n\t\t */\n\t    Tone.prototype.gainToDb = function (gain) {\n\t        return 20 * (Math.log(gain) / Math.LN10);\n\t    };\n\t    /**\n\t\t *  Convert an interval (in semitones) to a frequency ratio.\n\t\t *  @param  {Interval} interval the number of semitones above the base note\n\t\t *  @return {number}          the frequency ratio\n\t\t *  @example\n\t\t * tone.intervalToFrequencyRatio(0); // 1\n\t\t * tone.intervalToFrequencyRatio(12); // 2\n\t\t * tone.intervalToFrequencyRatio(-12); // 0.5\n\t\t */\n\t    Tone.prototype.intervalToFrequencyRatio = function (interval) {\n\t        return Math.pow(2, interval / 12);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTIMING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Return the current time of the AudioContext clock.\n\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t */\n\t    Tone.prototype.now = function () {\n\t        return Tone.context.now();\n\t    };\n\t    /**\n\t\t *  Return the current time of the AudioContext clock.\n\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t *  @static\n\t\t */\n\t    Tone.now = function () {\n\t        return Tone.context.now();\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tINHERITANCE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  have a child inherit all of Tone's (or a parent's) prototype\n\t\t *  to inherit the parent's properties, make sure to call \n\t\t *  Parent.call(this) in the child's constructor\n\t\t *\n\t\t *  based on closure library's inherit function\n\t\t *\n\t\t *  @static\n\t\t *  @param  {function} \tchild  \n\t\t *  @param  {function=} parent (optional) parent to inherit from\n\t\t *                             if no parent is supplied, the child\n\t\t *                             will inherit from Tone\n\t\t */\n\t    Tone.extend = function (child, parent) {\n\t        if (Tone.prototype.isUndef(parent)) {\n\t            parent = Tone;\n\t        }\n\t        function TempConstructor() {\n\t        }\n\t        TempConstructor.prototype = parent.prototype;\n\t        child.prototype = new TempConstructor();\n\t        /** @override */\n\t        child.prototype.constructor = child;\n\t        child._super = parent;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCONTEXT\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The private audio context shared by all Tone Nodes. \n\t\t *  @private\n\t\t *  @type {Tone.Context|undefined}\n\t\t */\n\t    var audioContext;\n\t    /**\n\t\t *  A static pointer to the audio context accessible as Tone.context. \n\t\t *  @type {Tone.Context}\n\t\t *  @name context\n\t\t *  @memberOf Tone\n\t\t */\n\t    Object.defineProperty(Tone, 'context', {\n\t        get: function () {\n\t            return audioContext;\n\t        },\n\t        set: function (context) {\n\t            if (Tone.Context && context instanceof Tone.Context) {\n\t                audioContext = context;\n\t            } else {\n\t                audioContext = new Tone.Context(context);\n\t            }\n\t            //initialize the new audio context\n\t            if (Tone.Context) {\n\t                Tone.Context.emit('init', audioContext);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The AudioContext\n\t\t *  @type {Tone.Context}\n\t\t *  @name context\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'context', {\n\t        get: function () {\n\t            return Tone.context;\n\t        }\n\t    });\n\t    /**\n\t\t *  Tone automatically creates a context on init, but if you are working\n\t\t *  with other libraries which also create an AudioContext, it can be\n\t\t *  useful to set your own. If you are going to set your own context, \n\t\t *  be sure to do it at the start of your code, before creating any objects.\n\t\t *  @static\n\t\t *  @param {AudioContext} ctx The new audio context to set\n\t\t */\n\t    Tone.setContext = function (ctx) {\n\t        Tone.context = ctx;\n\t    };\n\t    /**\n\t\t *  The number of seconds of 1 processing block (128 samples)\n\t\t *  @type {Number}\n\t\t *  @name blockTime\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'blockTime', {\n\t        get: function () {\n\t            return 128 / this.context.sampleRate;\n\t        }\n\t    });\n\t    /**\n\t\t *  The duration in seconds of one sample.\n\t\t *  @type {Number}\n\t\t *  @name sampleTime\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'sampleTime', {\n\t        get: function () {\n\t            return 1 / this.context.sampleRate;\n\t        }\n\t    });\n\t    /**\n\t\t *  Whether or not all the technologies that Tone.js relies on are supported by the current browser. \n\t\t *  @type {Boolean}\n\t\t *  @name supported\n\t\t *  @memberOf Tone\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone, 'supported', {\n\t        get: function () {\n\t            var hasAudioContext = window.hasOwnProperty('AudioContext') || window.hasOwnProperty('webkitAudioContext');\n\t            var hasPromises = window.hasOwnProperty('Promise');\n\t            var hasWorkers = window.hasOwnProperty('Worker');\n\t            return hasAudioContext && hasPromises && hasWorkers;\n\t        }\n\t    });\n\t    Tone.version = 'r10';\n\t    // allow optional silencing of this log\n\t    if (!window.TONE_SILENCE_VERSION_LOGGING) {\n\t        console.log('%c * Tone.js ' + Tone.version + ' * ', 'background: #000; color: #fff');\n\t    }\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base class for all Signals. Used Internally. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.SignalBase = function () {\n\t    };\n\t    Tone.extend(Tone.SignalBase);\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t */\n\t    Tone.SignalBase.prototype.connect = function (node, outputNumber, inputNumber) {\n\t        //zero it out so that the signal can have full control\n\t        if (Tone.Signal && Tone.Signal === node.constructor || Tone.Param && Tone.Param === node.constructor || Tone.TimelineSignal && Tone.TimelineSignal === node.constructor) {\n\t            //cancel changes\n\t            node._param.cancelScheduledValues(0);\n\t            //reset the value\n\t            node._param.value = 0;\n\t            //mark the value as overridden\n\t            node.overridden = true;\n\t        } else if (node instanceof AudioParam) {\n\t            node.cancelScheduledValues(0);\n\t            node.value = 0;\n\t        }\n\t        Tone.prototype.connect.call(this, node, outputNumber, inputNumber);\n\t        return this;\n\t    };\n\t    return Tone.SignalBase;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Wraps the native Web Audio API \n\t\t *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {function|Array|Number} mapping The function used to define the values. \n\t\t *                                    The mapping function should take two arguments: \n\t\t *                                    the first is the value at the current position \n\t\t *                                    and the second is the array position. \n\t\t *                                    If the argument is an array, that array will be\n\t\t *                                    set as the wave shaping function. The input\n\t\t *                                    signal is an AudioRange [-1, 1] value and the output\n\t\t *                                    signal can take on any numerical values. \n\t\t *                                    \n\t\t *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.\n\t\t *  @example\n\t\t * var timesTwo = new Tone.WaveShaper(function(val){\n\t\t * \treturn val * 2;\n\t\t * }, 2048);\n\t\t *  @example\n\t\t * //a waveshaper can also be constructed with an array of values\n\t\t * var invert = new Tone.WaveShaper([1, -1]);\n\t\t */\n\t    Tone.WaveShaper = function (mapping, bufferLen) {\n\t        /**\n\t\t\t *  the waveshaper\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = this.input = this.output = this.context.createWaveShaper();\n\t        /**\n\t\t\t *  the waveshapers curve\n\t\t\t *  @type {Float32Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._curve = null;\n\t        if (Array.isArray(mapping)) {\n\t            this.curve = mapping;\n\t        } else if (isFinite(mapping) || this.isUndef(mapping)) {\n\t            this._curve = new Float32Array(this.defaultArg(mapping, 1024));\n\t        } else if (this.isFunction(mapping)) {\n\t            this._curve = new Float32Array(this.defaultArg(bufferLen, 1024));\n\t            this.setMap(mapping);\n\t        }\n\t    };\n\t    Tone.extend(Tone.WaveShaper, Tone.SignalBase);\n\t    /**\n\t\t *  Uses a mapping function to set the value of the curve. \n\t\t *  @param {function} mapping The function used to define the values. \n\t\t *                            The mapping function take two arguments: \n\t\t *                            the first is the value at the current position \n\t\t *                            which goes from -1 to 1 over the number of elements\n\t\t *                            in the curve array. The second argument is the array position. \n\t\t *  @returns {Tone.WaveShaper} this\n\t\t *  @example\n\t\t * //map the input signal from [-1, 1] to [0, 10]\n\t\t * shaper.setMap(function(val, index){\n\t\t * \treturn (val + 1) * 5;\n\t\t * })\n\t\t */\n\t    Tone.WaveShaper.prototype.setMap = function (mapping) {\n\t        for (var i = 0, len = this._curve.length; i < len; i++) {\n\t            var normalized = i / (len - 1) * 2 - 1;\n\t            this._curve[i] = mapping(normalized, i);\n\t        }\n\t        this._shaper.curve = this._curve;\n\t        return this;\n\t    };\n\t    /**\n\t\t * The array to set as the waveshaper curve. For linear curves\n\t\t * array length does not make much difference, but for complex curves\n\t\t * longer arrays will provide smoother interpolation. \n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {Array}\n\t\t * @name curve\n\t\t */\n\t    Object.defineProperty(Tone.WaveShaper.prototype, 'curve', {\n\t        get: function () {\n\t            return this._shaper.curve;\n\t        },\n\t        set: function (mapping) {\n\t            this._curve = new Float32Array(mapping);\n\t            this._shaper.curve = this._curve;\n\t        }\n\t    });\n\t    /**\n\t\t * Specifies what type of oversampling (if any) should be used when \n\t\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\". \n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.WaveShaper.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            if ([\n\t                    'none',\n\t                    '2x',\n\t                    '4x'\n\t                ].indexOf(oversampling) !== -1) {\n\t                this._shaper.oversample = oversampling;\n\t            } else {\n\t                throw new RangeError('Tone.WaveShaper: oversampling must be either \\'none\\', \\'2x\\', or \\'4x\\'');\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.WaveShaper} this\n\t\t */\n\t    Tone.WaveShaper.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._shaper.disconnect();\n\t        this._shaper = null;\n\t        this._curve = null;\n\t        return this;\n\t    };\n\t    return Tone.WaveShaper;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TimeBase is a flexible encoding of time\n\t\t *         which can be evaluated to and from a string.\n\t\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t *  @extends {Tone}\n\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t *  @param  {String=}  units  Unit values\n\t\t *  @example\n\t\t * Tone.TimeBase(4, \"n\")\n\t\t * Tone.TimeBase(2, \"t\")\n\t\t * Tone.TimeBase(\"2t\").add(\"1m\")\n\t\t * Tone.TimeBase(\"2t + 1m\");\n\t\t */\n\t    Tone.TimeBase = function (val, units) {\n\t        //allows it to be constructed with or without 'new'\n\t        if (this instanceof Tone.TimeBase) {\n\t            /**\n\t\t\t\t *  Any expressions parsed from the Time\n\t\t\t\t *  @type  {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._expr = this._noOp;\n\t            if (val instanceof Tone.TimeBase) {\n\t                this.copy(val);\n\t            } else if (!this.isUndef(units) || this.isNumber(val)) {\n\t                //default units\n\t                units = this.defaultArg(units, this._defaultUnits);\n\t                var method = this._primaryExpressions[units].method;\n\t                this._expr = method.bind(this, val);\n\t            } else if (this.isString(val)) {\n\t                this.set(val);\n\t            } else if (this.isUndef(val)) {\n\t                //default expression\n\t                this._expr = this._defaultExpr();\n\t            }\n\t        } else {\n\t            return new Tone.TimeBase(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.TimeBase);\n\t    /**\n\t\t *  Repalce the current time value with the value\n\t\t *  given by the expression string.\n\t\t *  @param  {String}  exprString\n\t\t *  @return {Tone.TimeBase} this\n\t\t */\n\t    Tone.TimeBase.prototype.set = function (exprString) {\n\t        this._expr = this._parseExprString(exprString);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Return a clone of the TimeBase object.\n\t\t *  @return  {Tone.TimeBase} The new cloned Tone.TimeBase\n\t\t */\n\t    Tone.TimeBase.prototype.clone = function () {\n\t        var instance = new this.constructor();\n\t        instance.copy(this);\n\t        return instance;\n\t    };\n\t    /**\n\t\t *  Copies the value of time to this Time\n\t\t *  @param {Tone.TimeBase} time\n\t\t *  @return  {TimeBase}\n\t\t */\n\t    Tone.TimeBase.prototype.copy = function (time) {\n\t        var val = time._expr();\n\t        return this.set(val);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tABSTRACT SYNTAX TREE PARSER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  All the primary expressions.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._primaryExpressions = {\n\t        'n': {\n\t            regexp: /^(\\d+)n/i,\n\t            method: function (value) {\n\t                value = parseInt(value);\n\t                if (value === 1) {\n\t                    return this._beatsToUnits(this._timeSignature());\n\t                } else {\n\t                    return this._beatsToUnits(4 / value);\n\t                }\n\t            }\n\t        },\n\t        't': {\n\t            regexp: /^(\\d+)t/i,\n\t            method: function (value) {\n\t                value = parseInt(value);\n\t                return this._beatsToUnits(8 / (parseInt(value) * 3));\n\t            }\n\t        },\n\t        'm': {\n\t            regexp: /^(\\d+)m/i,\n\t            method: function (value) {\n\t                return this._beatsToUnits(parseInt(value) * this._timeSignature());\n\t            }\n\t        },\n\t        'i': {\n\t            regexp: /^(\\d+)i/i,\n\t            method: function (value) {\n\t                return this._ticksToUnits(parseInt(value));\n\t            }\n\t        },\n\t        'hz': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)hz/i,\n\t            method: function (value) {\n\t                return this._frequencyToUnits(parseFloat(value));\n\t            }\n\t        },\n\t        'tr': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t            method: function (m, q, s) {\n\t                var total = 0;\n\t                if (m && m !== '0') {\n\t                    total += this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t                }\n\t                if (q && q !== '0') {\n\t                    total += this._beatsToUnits(parseFloat(q));\n\t                }\n\t                if (s && s !== '0') {\n\t                    total += this._beatsToUnits(parseFloat(s) / 4);\n\t                }\n\t                return total;\n\t            }\n\t        },\n\t        's': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?s)/,\n\t            method: function (value) {\n\t                return this._secondsToUnits(parseFloat(value));\n\t            }\n\t        },\n\t        'samples': {\n\t            regexp: /^(\\d+)samples/,\n\t            method: function (value) {\n\t                return parseInt(value) / this.context.sampleRate;\n\t            }\n\t        },\n\t        'default': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)/,\n\t            method: function (value) {\n\t                return this._primaryExpressions[this._defaultUnits].method.call(this, value);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  All the binary expressions that TimeBase can accept.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._binaryExpressions = {\n\t        '+': {\n\t            regexp: /^\\+/,\n\t            precedence: 2,\n\t            method: function (lh, rh) {\n\t                return lh() + rh();\n\t            }\n\t        },\n\t        '-': {\n\t            regexp: /^\\-/,\n\t            precedence: 2,\n\t            method: function (lh, rh) {\n\t                return lh() - rh();\n\t            }\n\t        },\n\t        '*': {\n\t            regexp: /^\\*/,\n\t            precedence: 1,\n\t            method: function (lh, rh) {\n\t                return lh() * rh();\n\t            }\n\t        },\n\t        '/': {\n\t            regexp: /^\\//,\n\t            precedence: 1,\n\t            method: function (lh, rh) {\n\t                return lh() / rh();\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  All the unary expressions.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._unaryExpressions = {\n\t        'neg': {\n\t            regexp: /^\\-/,\n\t            method: function (lh) {\n\t                return -lh();\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Syntactic glue which holds expressions together\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._syntaxGlue = {\n\t        '(': { regexp: /^\\(/ },\n\t        ')': { regexp: /^\\)/ }\n\t    };\n\t    /**\n\t\t *  tokenize the expression based on the Expressions object\n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._tokenize = function (expr) {\n\t        var position = -1;\n\t        var tokens = [];\n\t        while (expr.length > 0) {\n\t            expr = expr.trim();\n\t            var token = getNextToken(expr, this);\n\t            tokens.push(token);\n\t            expr = expr.substr(token.value.length);\n\t        }\n\t        function getNextToken(expr, context) {\n\t            var expressions = [\n\t                '_binaryExpressions',\n\t                '_unaryExpressions',\n\t                '_primaryExpressions',\n\t                '_syntaxGlue'\n\t            ];\n\t            for (var i = 0; i < expressions.length; i++) {\n\t                var group = context[expressions[i]];\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    var reg = op.regexp;\n\t                    var match = expr.match(reg);\n\t                    if (match !== null) {\n\t                        return {\n\t                            method: op.method,\n\t                            precedence: op.precedence,\n\t                            regexp: op.regexp,\n\t                            value: match[0]\n\t                        };\n\t                    }\n\t                }\n\t            }\n\t            throw new SyntaxError('Tone.TimeBase: Unexpected token ' + expr);\n\t        }\n\t        return {\n\t            next: function () {\n\t                return tokens[++position];\n\t            },\n\t            peek: function () {\n\t                return tokens[position + 1];\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  Given a token, find the value within the groupName\n\t\t *  @param {Object} token\n\t\t *  @param {String} groupName\n\t\t *  @param {Number} precedence\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._matchGroup = function (token, group, prec) {\n\t        var ret = false;\n\t        if (!this.isUndef(token)) {\n\t            for (var opName in group) {\n\t                var op = group[opName];\n\t                if (op.regexp.test(token.value)) {\n\t                    if (!this.isUndef(prec)) {\n\t                        if (op.precedence === prec) {\n\t                            return op;\n\t                        }\n\t                    } else {\n\t                        return op;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  Match a binary expression given the token and the precedence\n\t\t *  @param {Lexer} lexer\n\t\t *  @param {Number} precedence\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseBinary = function (lexer, precedence) {\n\t        if (this.isUndef(precedence)) {\n\t            precedence = 2;\n\t        }\n\t        var expr;\n\t        if (precedence < 0) {\n\t            expr = this._parseUnary(lexer);\n\t        } else {\n\t            expr = this._parseBinary(lexer, precedence - 1);\n\t        }\n\t        var token = lexer.peek();\n\t        while (token && this._matchGroup(token, this._binaryExpressions, precedence)) {\n\t            token = lexer.next();\n\t            expr = token.method.bind(this, expr, this._parseBinary(lexer, precedence - 1));\n\t            token = lexer.peek();\n\t        }\n\t        return expr;\n\t    };\n\t    /**\n\t\t *  Match a unary expression.\n\t\t *  @param {Lexer} lexer\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseUnary = function (lexer) {\n\t        var token, expr;\n\t        token = lexer.peek();\n\t        var op = this._matchGroup(token, this._unaryExpressions);\n\t        if (op) {\n\t            token = lexer.next();\n\t            expr = this._parseUnary(lexer);\n\t            return op.method.bind(this, expr);\n\t        }\n\t        return this._parsePrimary(lexer);\n\t    };\n\t    /**\n\t\t *  Match a primary expression (a value).\n\t\t *  @param {Lexer} lexer\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parsePrimary = function (lexer) {\n\t        var token, expr;\n\t        token = lexer.peek();\n\t        if (this.isUndef(token)) {\n\t            throw new SyntaxError('Tone.TimeBase: Unexpected end of expression');\n\t        }\n\t        if (this._matchGroup(token, this._primaryExpressions)) {\n\t            token = lexer.next();\n\t            var matching = token.value.match(token.regexp);\n\t            return token.method.bind(this, matching[1], matching[2], matching[3]);\n\t        }\n\t        if (token && token.value === '(') {\n\t            lexer.next();\n\t            expr = this._parseBinary(lexer);\n\t            token = lexer.next();\n\t            if (!(token && token.value === ')')) {\n\t                throw new SyntaxError('Expected )');\n\t            }\n\t            return expr;\n\t        }\n\t        throw new SyntaxError('Tone.TimeBase: Cannot process token ' + token.value);\n\t    };\n\t    /**\n\t\t *  Recursively parse the string expression into a syntax tree.\n\t\t *  @param   {string} expr \n\t\t *  @return  {Function} the bound method to be evaluated later\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseExprString = function (exprString) {\n\t        if (!this.isString(exprString)) {\n\t            exprString = exprString.toString();\n\t        }\n\t        var lexer = this._tokenize(exprString);\n\t        var tree = this._parseBinary(lexer);\n\t        return tree;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tDEFAULTS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The initial expression value\n\t\t *  @return  {Number}  The initial value 0\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._noOp = function () {\n\t        return 0;\n\t    };\n\t    /**\n\t\t *  The default expression value if no arguments are given\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._defaultExpr = function () {\n\t        return this._noOp;\n\t    };\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._defaultUnits = 's';\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._frequencyToUnits = function (freq) {\n\t        return 1 / freq;\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._beatsToUnits = function (beats) {\n\t        return 60 / Tone.Transport.bpm.value * beats;\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._secondsToUnits = function (seconds) {\n\t        return seconds;\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._ticksToUnits = function (ticks) {\n\t        return ticks * (this._beatsToUnits(1) / Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Return the time signature.\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._timeSignature = function () {\n\t        return Tone.Transport.timeSignature;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Push an expression onto the expression list\n\t\t *  @param  {Time}  val\n\t\t *  @param  {String}  type\n\t\t *  @param  {String}  units\n\t\t *  @return  {Tone.TimeBase} \n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._pushExpr = function (val, name, units) {\n\t        //create the expression\n\t        if (!(val instanceof Tone.TimeBase)) {\n\t            val = new this.constructor(val, units);\n\t        }\n\t        this._expr = this._binaryExpressions[name].method.bind(this, this._expr, val._expr);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add to the current value.\n\t\t *  @param  {Time}  val    The value to add\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\"\n\t\t */\n\t    Tone.TimeBase.prototype.add = function (val, units) {\n\t        return this._pushExpr(val, '+', units);\n\t    };\n\t    /**\n\t\t *  Subtract the value from the current time.\n\t\t *  @param  {Time}  val    The value to subtract\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\"\n\t\t */\n\t    Tone.TimeBase.prototype.sub = function (val, units) {\n\t        return this._pushExpr(val, '-', units);\n\t    };\n\t    /**\n\t\t *  Multiply the current value by the given time.\n\t\t *  @param  {Time}  val    The value to multiply\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\"\n\t\t */\n\t    Tone.TimeBase.prototype.mult = function (val, units) {\n\t        return this._pushExpr(val, '*', units);\n\t    };\n\t    /**\n\t\t *  Divide the current value by the given time.\n\t\t *  @param  {Time}  val    The value to divide by\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").div(2); //\"1m\"\n\t\t */\n\t    Tone.TimeBase.prototype.div = function (val, units) {\n\t        return this._pushExpr(val, '/', units);\n\t    };\n\t    /**\n\t\t *  Evaluate the time value. Returns the time\n\t\t *  in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.TimeBase.prototype.valueOf = function () {\n\t        return this._expr();\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return {Tone.TimeBase} this\n\t\t */\n\t    Tone.TimeBase.prototype.dispose = function () {\n\t        this._expr = null;\n\t    };\n\t    return Tone.TimeBase;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Time is a primitive type for encoding Time values. \n\t\t *         Eventually all time values are evaluated to seconds\n\t\t *         using the `eval` method. Tone.Time can be constructed\n\t\t *         with or without the `new` keyword. Tone.Time can be passed\n\t\t *         into the parameter of any method which takes time as an argument. \n\t\t *  @constructor\n\t\t *  @extends {Tone.TimeBase}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * var t = Tone.Time(\"4n\");//encodes a quarter note\n\t\t * t.mult(4); // multiply that value by 4\n\t\t * t.toNotation(); //returns \"1m\"\n\t\t */\n\t    Tone.Time = function (val, units) {\n\t        if (this instanceof Tone.Time) {\n\t            /**\n\t\t\t\t *  If the current clock time should\n\t\t\t\t *  be added to the output\n\t\t\t\t *  @type  {Boolean}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._plusNow = false;\n\t            Tone.TimeBase.call(this, val, units);\n\t        } else {\n\t            return new Tone.Time(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Time, Tone.TimeBase);\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.Time.prototype._unaryExpressions = Object.create(Tone.TimeBase.prototype._unaryExpressions);\n\t    /*\n\t\t *  Adds an additional unary expression\n\t\t *  which quantizes values to the next subdivision\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._unaryExpressions.quantize = {\n\t        regexp: /^@/,\n\t        method: function (rh) {\n\t            return Tone.Transport.nextSubdivision(rh());\n\t        }\n\t    };\n\t    /*\n\t\t *  Adds an additional unary expression\n\t\t *  which adds the current clock time.\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._unaryExpressions.now = {\n\t        regexp: /^\\+/,\n\t        method: function (lh) {\n\t            this._plusNow = true;\n\t            return lh();\n\t        }\n\t    };\n\t    /**\n\t\t *  Quantize the time by the given subdivision. Optionally add a\n\t\t *  percentage which will move the time value towards the ideal\n\t\t *  quantized value by that percentage. \n\t\t *  @param  {Number|Time}  val    The subdivision to quantize to\n\t\t *  @param  {NormalRange}  [percent=1]  Move the time value\n\t\t *                                   towards the quantized value by\n\t\t *                                   a percentage.\n\t\t *  @return  {Tone.Time}  this\n\t\t *  @example\n\t\t * Tone.Time(21).quantize(2) //returns 22\n\t\t * Tone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t\t */\n\t    Tone.Time.prototype.quantize = function (subdiv, percent) {\n\t        percent = this.defaultArg(percent, 1);\n\t        this._expr = function (expr, subdivision, percent) {\n\t            expr = expr();\n\t            subdivision = subdivision.toSeconds();\n\t            var multiple = Math.round(expr / subdivision);\n\t            var ideal = multiple * subdivision;\n\t            var diff = ideal - expr;\n\t            return expr + diff * percent;\n\t        }.bind(this, this._expr, new this.constructor(subdiv), percent);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Adds the clock time to the time expression at the \n\t\t *  moment of evaluation. \n\t\t *  @return  {Tone.Time}  this\n\t\t */\n\t    Tone.Time.prototype.addNow = function () {\n\t        this._plusNow = true;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  @override\n\t\t *  Override the default value return when no arguments are passed in.\n\t\t *  The default value is 'now'\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._defaultExpr = function () {\n\t        this._plusNow = true;\n\t        return this._noOp;\n\t    };\n\t    /**\n\t\t *  Copies the value of time to this Time\n\t\t *  @param {Tone.Time} time\n\t\t *  @return  {Time}\n\t\t */\n\t    Tone.Time.prototype.copy = function (time) {\n\t        Tone.TimeBase.prototype.copy.call(this, time);\n\t        this._plusNow = time._plusNow;\n\t        return this;\n\t    };\n\t    //CONVERSIONS//////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Convert a Time to Notation. Values will be thresholded to the nearest 128th note. \n\t\t *  @return {Notation} \n\t\t *  @example\n\t\t * //if the Transport is at 120bpm:\n\t\t * Tone.Time(2).toNotation();//returns \"1m\"\n\t\t */\n\t    Tone.Time.prototype.toNotation = function () {\n\t        var time = this.toSeconds();\n\t        var testNotations = [\n\t            '1m',\n\t            '2n',\n\t            '4n',\n\t            '8n',\n\t            '16n',\n\t            '32n',\n\t            '64n',\n\t            '128n'\n\t        ];\n\t        var retNotation = this._toNotationHelper(time, testNotations);\n\t        //try the same thing but with tripelets\n\t        var testTripletNotations = [\n\t            '1m',\n\t            '2n',\n\t            '2t',\n\t            '4n',\n\t            '4t',\n\t            '8n',\n\t            '8t',\n\t            '16n',\n\t            '16t',\n\t            '32n',\n\t            '32t',\n\t            '64n',\n\t            '64t',\n\t            '128n'\n\t        ];\n\t        var retTripletNotation = this._toNotationHelper(time, testTripletNotations);\n\t        //choose the simpler expression of the two\n\t        if (retTripletNotation.split('+').length < retNotation.split('+').length) {\n\t            return retTripletNotation;\n\t        } else {\n\t            return retNotation;\n\t        }\n\t    };\n\t    /**\n\t\t *  Helper method for Tone.toNotation\n\t\t *  @param {Number} units \n\t\t *  @param {Array} testNotations\n\t\t *  @return {String}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._toNotationHelper = function (units, testNotations) {\n\t        //the threshold is the last value in the array\n\t        var threshold = this._notationToUnits(testNotations[testNotations.length - 1]);\n\t        var retNotation = '';\n\t        for (var i = 0; i < testNotations.length; i++) {\n\t            var notationTime = this._notationToUnits(testNotations[i]);\n\t            //account for floating point errors (i.e. round up if the value is 0.999999)\n\t            var multiple = units / notationTime;\n\t            var floatingPointError = 0.000001;\n\t            if (1 - multiple % 1 < floatingPointError) {\n\t                multiple += floatingPointError;\n\t            }\n\t            multiple = Math.floor(multiple);\n\t            if (multiple > 0) {\n\t                if (multiple === 1) {\n\t                    retNotation += testNotations[i];\n\t                } else {\n\t                    retNotation += multiple.toString() + '*' + testNotations[i];\n\t                }\n\t                units -= multiple * notationTime;\n\t                if (units < threshold) {\n\t                    break;\n\t                } else {\n\t                    retNotation += ' + ';\n\t                }\n\t            }\n\t        }\n\t        if (retNotation === '') {\n\t            retNotation = '0';\n\t        }\n\t        return retNotation;\n\t    };\n\t    /**\n\t\t *  Convert a notation value to the current units\n\t\t *  @param  {Notation}  notation \n\t\t *  @return  {Number} \n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._notationToUnits = function (notation) {\n\t        var primaryExprs = this._primaryExpressions;\n\t        var notationExprs = [\n\t            primaryExprs.n,\n\t            primaryExprs.t,\n\t            primaryExprs.m\n\t        ];\n\t        for (var i = 0; i < notationExprs.length; i++) {\n\t            var expr = notationExprs[i];\n\t            var match = notation.match(expr.regexp);\n\t            if (match) {\n\t                return expr.method.call(this, match[1]);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t\t *  @return  {BarsBeatsSixteenths}\n\t\t */\n\t    Tone.Time.prototype.toBarsBeatsSixteenths = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.toSeconds() / quarterTime;\n\t        var measures = Math.floor(quarters / this._timeSignature());\n\t        var sixteenths = quarters % 1 * 4;\n\t        quarters = Math.floor(quarters) % this._timeSignature();\n\t        sixteenths = sixteenths.toString();\n\t        if (sixteenths.length > 3) {\n\t            sixteenths = parseFloat(sixteenths).toFixed(3);\n\t        }\n\t        var progress = [\n\t            measures,\n\t            quarters,\n\t            sixteenths\n\t        ];\n\t        return progress.join(':');\n\t    };\n\t    /**\n\t\t *  Return the time in ticks.\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Time.prototype.toTicks = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        return Math.floor(quarters * Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Return the time in samples\n\t\t *  @return  {Samples}  \n\t\t */\n\t    Tone.Time.prototype.toSamples = function () {\n\t        return this.toSeconds() * this.context.sampleRate;\n\t    };\n\t    /**\n\t\t *  Return the time as a frequency value\n\t\t *  @return  {Frequency} \n\t\t *  @example\n\t\t * Tone.Time(2).toFrequency(); //0.5\n\t\t */\n\t    Tone.Time.prototype.toFrequency = function () {\n\t        return 1 / this.toSeconds();\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.Time.prototype.toSeconds = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the time in milliseconds.\n\t\t *  @return  {Milliseconds} \n\t\t */\n\t    Tone.Time.prototype.toMilliseconds = function () {\n\t        return this.toSeconds() * 1000;\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.Time.prototype.valueOf = function () {\n\t        var val = this._expr();\n\t        return val + (this._plusNow ? this.now() : 0);\n\t    };\n\t    return Tone.Time;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Frequency is a primitive type for encoding Frequency values. \n\t\t *         Eventually all time values are evaluated to hertz\n\t\t *         using the `eval` method. \n\t\t *  @constructor\n\t\t *  @extends {Tone.TimeBase}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * Tone.Frequency(\"C3\") // 261\n\t\t * Tone.Frequency(38, \"midi\") //\n\t\t * Tone.Frequency(\"C3\").transpose(4);\n\t\t */\n\t    Tone.Frequency = function (val, units) {\n\t        if (this instanceof Tone.Frequency) {\n\t            Tone.TimeBase.call(this, val, units);\n\t        } else {\n\t            return new Tone.Frequency(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Frequency, Tone.TimeBase);\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUGMENT BASE EXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.Frequency.prototype._primaryExpressions = Object.create(Tone.TimeBase.prototype._primaryExpressions);\n\t    /*\n\t\t *  midi type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.midi = {\n\t        regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\t        method: function (value) {\n\t            return this.midiToFrequency(value);\n\t        }\n\t    };\n\t    /*\n\t\t *  note type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.note = {\n\t        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t        method: function (pitch, octave) {\n\t            var index = noteToScaleIndex[pitch.toLowerCase()];\n\t            var noteNumber = index + (parseInt(octave) + 1) * 12;\n\t            return this.midiToFrequency(noteNumber);\n\t        }\n\t    };\n\t    /*\n\t\t *  BeatsBarsSixteenths type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.tr = {\n\t        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t        method: function (m, q, s) {\n\t            var total = 1;\n\t            if (m && m !== '0') {\n\t                total *= this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t            }\n\t            if (q && q !== '0') {\n\t                total *= this._beatsToUnits(parseFloat(q));\n\t            }\n\t            if (s && s !== '0') {\n\t                total *= this._beatsToUnits(parseFloat(s) / 4);\n\t            }\n\t            return total;\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Transposes the frequency by the given number of semitones.\n\t\t *  @param  {Interval}  interval\n\t\t *  @return  {Tone.Frequency} this\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").transpose(3); //\"C5\"\n\t\t */\n\t    Tone.Frequency.prototype.transpose = function (interval) {\n\t        this._expr = function (expr, interval) {\n\t            var val = expr();\n\t            return val * this.intervalToFrequencyRatio(interval);\n\t        }.bind(this, this._expr, interval);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Takes an array of semitone intervals and returns\n\t\t *  an array of frequencies transposed by those intervals.\n\t\t *  @param  {Array}  intervals\n\t\t *  @return  {Tone.Frequency} this\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t\t */\n\t    Tone.Frequency.prototype.harmonize = function (intervals) {\n\t        this._expr = function (expr, intervals) {\n\t            var val = expr();\n\t            var ret = [];\n\t            for (var i = 0; i < intervals.length; i++) {\n\t                ret[i] = val * this.intervalToFrequencyRatio(intervals[i]);\n\t            }\n\t            return ret;\n\t        }.bind(this, this._expr, intervals);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Return the value of the frequency as a MIDI note\n\t\t *  @return  {MIDI}\n\t\t *  @example\n\t\t * Tone.Frequency(\"C4\").toMidi(); //60\n\t\t */\n\t    Tone.Frequency.prototype.toMidi = function () {\n\t        return this.frequencyToMidi(this.valueOf());\n\t    };\n\t    /**\n\t\t *  Return the value of the frequency in Scientific Pitch Notation\n\t\t *  @return  {Note}\n\t\t *  @example\n\t\t * Tone.Frequency(69, \"midi\").toNote(); //\"A4\"\n\t\t */\n\t    Tone.Frequency.prototype.toNote = function () {\n\t        var freq = this.valueOf();\n\t        var log = Math.log(freq / Tone.Frequency.A4) / Math.LN2;\n\t        var noteNumber = Math.round(12 * log) + 57;\n\t        var octave = Math.floor(noteNumber / 12);\n\t        if (octave < 0) {\n\t            noteNumber += -12 * octave;\n\t        }\n\t        var noteName = scaleIndexToNote[noteNumber % 12];\n\t        return noteName + octave.toString();\n\t    };\n\t    /**\n\t\t *  Return the duration of one cycle in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.Frequency.prototype.toSeconds = function () {\n\t        return 1 / this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the value in Hertz\n\t\t *  @return  {Frequency}\n\t\t */\n\t    Tone.Frequency.prototype.toFrequency = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the duration of one cycle in ticks\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Frequency.prototype.toTicks = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        return Math.floor(quarters * Tone.Transport.PPQ);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS HELPERS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._frequencyToUnits = function (freq) {\n\t        return freq;\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._ticksToUnits = function (ticks) {\n\t        return 1 / (ticks * 60 / (Tone.Transport.bpm.value * Tone.Transport.PPQ));\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._beatsToUnits = function (beats) {\n\t        return 1 / Tone.TimeBase.prototype._beatsToUnits.call(this, beats);\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._secondsToUnits = function (seconds) {\n\t        return 1 / seconds;\n\t    };\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._defaultUnits = 'hz';\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tFREQUENCY CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Note to scale index\n\t\t *  @type  {Object}\n\t\t */\n\t    var noteToScaleIndex = {\n\t        'cbb': -2,\n\t        'cb': -1,\n\t        'c': 0,\n\t        'c#': 1,\n\t        'cx': 2,\n\t        'dbb': 0,\n\t        'db': 1,\n\t        'd': 2,\n\t        'd#': 3,\n\t        'dx': 4,\n\t        'ebb': 2,\n\t        'eb': 3,\n\t        'e': 4,\n\t        'e#': 5,\n\t        'ex': 6,\n\t        'fbb': 3,\n\t        'fb': 4,\n\t        'f': 5,\n\t        'f#': 6,\n\t        'fx': 7,\n\t        'gbb': 5,\n\t        'gb': 6,\n\t        'g': 7,\n\t        'g#': 8,\n\t        'gx': 9,\n\t        'abb': 7,\n\t        'ab': 8,\n\t        'a': 9,\n\t        'a#': 10,\n\t        'ax': 11,\n\t        'bbb': 9,\n\t        'bb': 10,\n\t        'b': 11,\n\t        'b#': 12,\n\t        'bx': 13\n\t    };\n\t    /**\n\t\t *  scale index to note (sharps)\n\t\t *  @type  {Array}\n\t\t */\n\t    var scaleIndexToNote = [\n\t        'C',\n\t        'C#',\n\t        'D',\n\t        'D#',\n\t        'E',\n\t        'F',\n\t        'F#',\n\t        'G',\n\t        'G#',\n\t        'A',\n\t        'A#',\n\t        'B'\n\t    ];\n\t    /**\n\t\t *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)\n\t\t *  A4's values in Hertz. \n\t\t *  @type {Frequency}\n\t\t *  @static\n\t\t */\n\t    Tone.Frequency.A4 = 440;\n\t    /**\n\t\t *  Convert a MIDI note to frequency value. \n\t\t *  @param  {MIDI} midi The midi number to convert.\n\t\t *  @return {Frequency} the corresponding frequency value\n\t\t *  @example\n\t\t * tone.midiToFrequency(69); // returns 440\n\t\t */\n\t    Tone.Frequency.prototype.midiToFrequency = function (midi) {\n\t        return Tone.Frequency.A4 * Math.pow(2, (midi - 69) / 12);\n\t    };\n\t    /**\n\t\t *  Convert a frequency value to a MIDI note.\n\t\t *  @param {Frequency} frequency The value to frequency value to convert.\n\t\t *  @returns  {MIDI}\n\t\t *  @example\n\t\t * tone.midiToFrequency(440); // returns 69\n\t\t */\n\t    Tone.Frequency.prototype.frequencyToMidi = function (frequency) {\n\t        return 69 + 12 * Math.log(frequency / Tone.Frequency.A4) / Math.LN2;\n\t    };\n\t    return Tone.Frequency;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TransportTime is a the time along the Transport's\n\t\t *         timeline. It is similar to Tone.Time, but instead of evaluating\n\t\t *         against the AudioContext's clock, it is evaluated against\n\t\t *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n\t\t *  @constructor\n\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t *  @param  {String=}  units  Unit values\n\t\t *  @extends {Tone.Time}\n\t\t */\n\t    Tone.TransportTime = function (val, units) {\n\t        if (this instanceof Tone.TransportTime) {\n\t            Tone.Time.call(this, val, units);\n\t        } else {\n\t            return new Tone.TransportTime(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.TransportTime, Tone.Time);\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.TransportTime.prototype._unaryExpressions = Object.create(Tone.Time.prototype._unaryExpressions);\n\t    /**\n\t\t *  Adds an additional unary expression\n\t\t *  which quantizes values to the next subdivision\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.TransportTime.prototype._unaryExpressions.quantize = {\n\t        regexp: /^@/,\n\t        method: function (rh) {\n\t            var subdivision = this._secondsToTicks(rh());\n\t            var multiple = Math.ceil(Tone.Transport.ticks / subdivision);\n\t            return this._ticksToUnits(multiple * subdivision);\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert seconds into ticks\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Ticks}\n\t\t *  @private\n\t\t */\n\t    Tone.TransportTime.prototype._secondsToTicks = function (seconds) {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = seconds / quarterTime;\n\t        return Math.round(quarters * Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Evaluate the time expression. Returns values in ticks\n\t\t *  @return {Ticks}\n\t\t */\n\t    Tone.TransportTime.prototype.valueOf = function () {\n\t        var val = this._secondsToTicks(this._expr());\n\t        return val + (this._plusNow ? Tone.Transport.ticks : 0);\n\t    };\n\t    /**\n\t\t *  Return the time in ticks.\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.TransportTime.prototype.toTicks = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.TransportTime.prototype.toSeconds = function () {\n\t        var val = this._expr();\n\t        return val + (this._plusNow ? Tone.Transport.seconds : 0);\n\t    };\n\t    /**\n\t\t *  Return the time as a frequency value\n\t\t *  @return  {Frequency} \n\t\t */\n\t    Tone.TransportTime.prototype.toFrequency = function () {\n\t        return 1 / this.toSeconds();\n\t    };\n\t    return Tone.TransportTime;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Emitter gives classes which extend it\n\t\t *         the ability to listen for and emit events. \n\t\t *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n\t\t *         MIT (c) 2011 Jerome Etienne.\n\t\t *         \n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Emitter = function () {\n\t        /**\n\t\t\t *  Contains all of the events.\n\t\t\t *  @private\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t        this._events = {};\n\t    };\n\t    Tone.extend(Tone.Emitter);\n\t    /**\n\t\t *  Bind a callback to a specific event.\n\t\t *  @param  {String}    event     The name of the event to listen for.\n\t\t *  @param  {Function}  callback  The callback to invoke when the\n\t\t *                                event is emitted\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.on = function (event, callback) {\n\t        //split the event\n\t        var events = event.split(/\\W+/);\n\t        for (var i = 0; i < events.length; i++) {\n\t            var eventName = events[i];\n\t            if (!this._events.hasOwnProperty(eventName)) {\n\t                this._events[eventName] = [];\n\t            }\n\t            this._events[eventName].push(callback);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove the event listener.\n\t\t *  @param  {String}    event     The event to stop listening to.\n\t\t *  @param  {Function=}  callback  The callback which was bound to \n\t\t *                                the event with Tone.Emitter.on.\n\t\t *                                If no callback is given, all callbacks\n\t\t *                                events are removed.\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.off = function (event, callback) {\n\t        var events = event.split(/\\W+/);\n\t        for (var ev = 0; ev < events.length; ev++) {\n\t            event = events[ev];\n\t            if (this._events.hasOwnProperty(event)) {\n\t                if (Tone.prototype.isUndef(callback)) {\n\t                    this._events[event] = [];\n\t                } else {\n\t                    var eventList = this._events[event];\n\t                    for (var i = 0; i < eventList.length; i++) {\n\t                        if (eventList[i] === callback) {\n\t                            eventList.splice(i, 1);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Invoke all of the callbacks bound to the event\n\t\t *  with any arguments passed in. \n\t\t *  @param  {String}  event  The name of the event.\n\t\t *  @param {*...} args The arguments to pass to the functions listening.\n\t\t *  @return  {Tone.Emitter}  this\n\t\t */\n\t    Tone.Emitter.prototype.emit = function (event) {\n\t        if (this._events) {\n\t            var args = Array.apply(null, arguments).slice(1);\n\t            if (this._events.hasOwnProperty(event)) {\n\t                var eventList = this._events[event];\n\t                for (var i = 0, len = eventList.length; i < len; i++) {\n\t                    eventList[i].apply(this, args);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add Emitter functions (on/off/emit) to the object\n\t\t *  @param  {Object|Function}  object  The object or class to extend.\n\t\t */\n\t    Tone.Emitter.mixin = function (object) {\n\t        var functions = [\n\t            'on',\n\t            'off',\n\t            'emit'\n\t        ];\n\t        object._events = {};\n\t        for (var i = 0; i < functions.length; i++) {\n\t            var func = functions[i];\n\t            var emitterFunc = Tone.Emitter.prototype[func];\n\t            object[func] = emitterFunc;\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Emitter}  this\n\t\t */\n\t    Tone.Emitter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Emitter;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  shim\n\t\t *  @private\n\t\t */\n\t    if (!window.hasOwnProperty('AudioContext') && window.hasOwnProperty('webkitAudioContext')) {\n\t        window.AudioContext = window.webkitAudioContext;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the native AudioContext.\n\t\t *  @extends {Tone.Emitter}\n\t\t *  @param {AudioContext=} context optionally pass in a context\n\t\t */\n\t    Tone.Context = function (context) {\n\t        Tone.Emitter.call(this);\n\t        if (!context) {\n\t            context = new window.AudioContext();\n\t        }\n\t        this._context = context;\n\t        // extend all of the methods\n\t        for (var prop in this._context) {\n\t            this._defineProperty(this._context, prop);\n\t        }\n\t        ///////////////////////////////////////////////////////////////////////\n\t        // WORKER\n\t        ///////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  The default latency hint\n\t\t\t *  @type  {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._latencyHint = 'interactive';\n\t        /**\n\t\t\t *  The amount of time events are scheduled\n\t\t\t *  into the future\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lookAhead = 0.1;\n\t        /**\n\t\t\t *  How often the update look runs\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._updateInterval = this._lookAhead / 3;\n\t        /**\n\t\t\t *  A reference to the actual computed update interval\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._computedUpdateInterval = 0;\n\t        /**\n\t\t\t *  The web worker which is used to update Tone.Clock\n\t\t\t *  @private\n\t\t\t *  @type  {WebWorker}\n\t\t\t */\n\t        this._worker = this._createWorker();\n\t        /**\n\t\t\t *  An object containing all of the constants AudioBufferSourceNodes\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._constants = {};\n\t    };\n\t    Tone.extend(Tone.Context, Tone.Emitter);\n\t    Tone.Emitter.mixin(Tone.Context);\n\t    /**\n\t\t *  Define a property on this Tone.Context. \n\t\t *  This is used to extend the native AudioContext\n\t\t *  @param  {AudioContext}  context\n\t\t *  @param  {String}  prop \n\t\t *  @private\n\t\t */\n\t    Tone.Context.prototype._defineProperty = function (context, prop) {\n\t        if (this.isUndef(this[prop])) {\n\t            Object.defineProperty(this, prop, {\n\t                get: function () {\n\t                    if (typeof context[prop] === 'function') {\n\t                        return context[prop].bind(context);\n\t                    } else {\n\t                        return context[prop];\n\t                    }\n\t                },\n\t                set: function (val) {\n\t                    context[prop] = val;\n\t                }\n\t            });\n\t        }\n\t    };\n\t    /**\n\t\t *  The current audio context time\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.Context.prototype.now = function () {\n\t        return this._context.currentTime;\n\t    };\n\t    /**\n\t\t *  Generate a web worker\n\t\t *  @return  {WebWorker}\n\t\t *  @private\n\t\t */\n\t    Tone.Context.prototype._createWorker = function () {\n\t        //URL Shim\n\t        window.URL = window.URL || window.webkitURL;\n\t        var blob = new Blob([//the initial timeout time\n\t            'var timeoutTime = ' + (this._updateInterval * 1000).toFixed(1) + ';' + //onmessage callback\n\t            'self.onmessage = function(msg){' + '\\ttimeoutTime = parseInt(msg.data);' + '};' + //the tick function which posts a message\n\t            //and schedules a new tick\n\t            'function tick(){' + '\\tsetTimeout(tick, timeoutTime);' + '\\tself.postMessage(\\'tick\\');' + '}' + //call tick initially\n\t            'tick();']);\n\t        var blobUrl = URL.createObjectURL(blob);\n\t        var worker = new Worker(blobUrl);\n\t        worker.addEventListener('message', function () {\n\t            // tick the clock\n\t            this.emit('tick');\n\t        }.bind(this));\n\t        //lag compensation\n\t        worker.addEventListener('message', function () {\n\t            var now = this.now();\n\t            if (this.isNumber(this._lastUpdate)) {\n\t                var diff = now - this._lastUpdate;\n\t                this._computedUpdateInterval = Math.max(diff, this._computedUpdateInterval * 0.97);\n\t            }\n\t            this._lastUpdate = now;\n\t        }.bind(this));\n\t        return worker;\n\t    };\n\t    /**\n\t\t *  Generate a looped buffer at some constant value.\n\t\t *  @param  {Number}  val\n\t\t *  @return  {BufferSourceNode}\n\t\t */\n\t    Tone.Context.prototype.getConstant = function (val) {\n\t        if (this._constants[val]) {\n\t            return this._constants[val];\n\t        } else {\n\t            var buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t            var arr = buffer.getChannelData(0);\n\t            for (var i = 0; i < arr.length; i++) {\n\t                arr[i] = val;\n\t            }\n\t            var constant = this._context.createBufferSource();\n\t            constant.channelCount = 1;\n\t            constant.channelCountMode = 'explicit';\n\t            constant.buffer = buffer;\n\t            constant.loop = true;\n\t            constant.start(0);\n\t            this._constants[val] = constant;\n\t            return constant;\n\t        }\n\t    };\n\t    /**\n\t\t *  This is the time that the clock is falling behind\n\t\t *  the scheduled update interval. The Context automatically\n\t\t *  adjusts for the lag and schedules further in advance.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context\n\t\t *  @name lag\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'lag', {\n\t        get: function () {\n\t            var diff = this._computedUpdateInterval - this._updateInterval;\n\t            diff = Math.max(diff, 0);\n\t            return diff;\n\t        }\n\t    });\n\t    /**\n\t\t *  The amount of time in advance that events are scheduled.\n\t\t *  The lookAhead will adjust slightly in response to the \n\t\t *  measured update time to try to avoid clicks.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context\n\t\t *  @name lookAhead\n\t\t *  @static\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'lookAhead', {\n\t        get: function () {\n\t            return this._lookAhead;\n\t        },\n\t        set: function (lA) {\n\t            this._lookAhead = lA;\n\t        }\n\t    });\n\t    /**\n\t\t *  How often the Web Worker callback is invoked.\n\t\t *  This number corresponds to how responsive the scheduling\n\t\t *  can be. Context.updateInterval + Context.lookAhead gives you the\n\t\t *  total latency between scheduling an event and hearing it.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context\n\t\t *  @name updateInterval\n\t\t *  @static\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'updateInterval', {\n\t        get: function () {\n\t            return this._updateInterval;\n\t        },\n\t        set: function (interval) {\n\t            this._updateInterval = Math.max(interval, Tone.prototype.blockTime);\n\t            this._worker.postMessage(Math.max(interval * 1000, 1));\n\t        }\n\t    });\n\t    /**\n\t\t *  The type of playback, which affects tradeoffs between audio \n\t\t *  output latency and responsiveness. \n\t\t *  \n\t\t *  In addition to setting the value in seconds, the latencyHint also\n\t\t *  accepts the strings \"interactive\" (prioritizes low latency), \n\t\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often). \n\t\t *  @type {String|Seconds}\n\t\t *  @memberOf Tone.Context#\n\t\t *  @name latencyHint\n\t\t *  @static\n\t\t *  @example\n\t\t * //set the lookAhead to 0.3 seconds\n\t\t * Tone.context.latencyHint = 0.3;\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'latencyHint', {\n\t        get: function () {\n\t            return this._latencyHint;\n\t        },\n\t        set: function (hint) {\n\t            var lookAhead = hint;\n\t            this._latencyHint = hint;\n\t            if (this.isString(hint)) {\n\t                switch (hint) {\n\t                case 'interactive':\n\t                    lookAhead = 0.1;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'playback':\n\t                    lookAhead = 0.8;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'balanced':\n\t                    lookAhead = 0.25;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'fastest':\n\t                    lookAhead = 0.01;\n\t                    break;\n\t                }\n\t            }\n\t            this.lookAhead = lookAhead;\n\t            this.updateInterval = lookAhead / 3;\n\t        }\n\t    });\n\t    /**\n\t\t *  Shim all connect/disconnect and some deprecated methods which are still in\n\t\t *  some older implementations.\n\t\t *  @private\n\t\t */\n\t    function shimConnect() {\n\t        var nativeConnect = AudioNode.prototype.connect;\n\t        var nativeDisconnect = AudioNode.prototype.disconnect;\n\t        //replace the old connect method\n\t        function toneConnect(B, outNum, inNum) {\n\t            if (B.input) {\n\t                if (Array.isArray(B.input)) {\n\t                    if (Tone.prototype.isUndef(inNum)) {\n\t                        inNum = 0;\n\t                    }\n\t                    this.connect(B.input[inNum]);\n\t                } else {\n\t                    this.connect(B.input, outNum, inNum);\n\t                }\n\t            } else {\n\t                try {\n\t                    if (B instanceof AudioNode) {\n\t                        nativeConnect.call(this, B, outNum, inNum);\n\t                    } else {\n\t                        nativeConnect.call(this, B, outNum);\n\t                    }\n\t                } catch (e) {\n\t                    throw new Error('error connecting to node: ' + B + '\\n' + e);\n\t                }\n\t            }\n\t        }\n\t        //replace the old disconnect method\n\t        function toneDisconnect(B, outNum, inNum) {\n\t            if (B && B.input && Array.isArray(B.input)) {\n\t                if (Tone.prototype.isUndef(inNum)) {\n\t                    inNum = 0;\n\t                }\n\t                this.disconnect(B.input[inNum], outNum, inNum);\n\t            } else if (B && B.input) {\n\t                this.disconnect(B.input, outNum, inNum);\n\t            } else {\n\t                try {\n\t                    nativeDisconnect.apply(this, arguments);\n\t                } catch (e) {\n\t                    throw new Error('error disconnecting node: ' + B + '\\n' + e);\n\t                }\n\t            }\n\t        }\n\t        if (AudioNode.prototype.connect !== toneConnect) {\n\t            AudioNode.prototype.connect = toneConnect;\n\t            AudioNode.prototype.disconnect = toneDisconnect;\n\t        }\n\t    }\n\t    // set the audio context initially\n\t    if (Tone.supported) {\n\t        shimConnect();\n\t        Tone.context = new Tone.Context();\n\t    } else {\n\t        console.warn('This browser does not support Tone.js');\n\t    }\n\t    return Tone.Context;\n\t});\n\tModule(function (Tone) {\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTYPES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t * Units which a value can take on.\n\t\t * @enum {String}\n\t\t */\n\t    Tone.Type = {\n\t        /** \n\t\t\t *  Default units\n\t\t\t *  @typedef {Default}\n\t\t\t */\n\t        Default: 'number',\n\t        /**\n\t\t\t *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n\t\t\t *\n\t\t\t *  <ul>\n\t\t\t *  <li>Numbers, which will be taken literally as the time (in seconds).</li>\n\t\t\t *  <li>Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.</li>\n\t\t\t *  <li>TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times \n\t\t\t *  in the form BARS:QUARTERS:SIXTEENTHS.</li>\n\t\t\t *  <li>Frequency, (\"8hz\") is converted to the length of the cycle in seconds.</li>\n\t\t\t *  <li>Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as \n\t\t\t *  \"the current time plus whatever expression follows\".</li>\n\t\t\t *  <li>Expressions, (\"3:0 + 2 - (1m / 7)\") any of the above can also be combined \n\t\t\t *  into a mathematical expression which will be evaluated to compute the desired time.</li>\n\t\t\t *  <li>No Argument, for methods which accept time, no argument will be interpreted as \n\t\t\t *  \"now\" (i.e. the currentTime).</li>\n\t\t\t *  </ul>\n\t\t\t *  \n\t\t\t *  @typedef {Time}\n\t\t\t */\n\t        Time: 'time',\n\t        /**\n\t\t\t *  Frequency can be described similar to time, except ultimately the\n\t\t\t *  values are converted to frequency instead of seconds. A number\n\t\t\t *  is taken literally as the value in hertz. Additionally any of the \n\t\t\t *  Time encodings can be used. Note names in the form\n\t\t\t *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n\t\t\t *  frequency value. \n\t\t\t *  @typedef {Frequency}\n\t\t\t */\n\t        Frequency: 'frequency',\n\t        /**\n\t\t\t *  TransportTime describes a position along the Transport's timeline. It is\n\t\t\t *  similar to Time in that it uses all the same encodings, but TransportTime specifically\n\t\t\t *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable. \n\t\t\t *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\n\t\t\t *  @typedef {TransportTime}\n\t\t\t */\n\t        TransportTime: 'transportTime',\n\t        /** \n\t\t\t *  Ticks are the basic subunit of the Transport. They are\n\t\t\t *  the smallest unit of time that the Transport supports.\n\t\t\t *  @typedef {Ticks}\n\t\t\t */\n\t        Ticks: 'ticks',\n\t        /** \n\t\t\t *  Normal values are within the range [0, 1].\n\t\t\t *  @typedef {NormalRange}\n\t\t\t */\n\t        NormalRange: 'normalRange',\n\t        /** \n\t\t\t *  AudioRange values are between [-1, 1].\n\t\t\t *  @typedef {AudioRange}\n\t\t\t */\n\t        AudioRange: 'audioRange',\n\t        /** \n\t\t\t *  Decibels are a logarithmic unit of measurement which is useful for volume\n\t\t\t *  because of the logarithmic way that we perceive loudness. 0 decibels \n\t\t\t *  means no change in volume. -10db is approximately half as loud and 10db \n\t\t\t *  is twice is loud. \n\t\t\t *  @typedef {Decibels}\n\t\t\t */\n\t        Decibels: 'db',\n\t        /** \n\t\t\t *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\n\t\t\t *  @typedef {Interval}\n\t\t\t */\n\t        Interval: 'interval',\n\t        /** \n\t\t\t *  Beats per minute. \n\t\t\t *  @typedef {BPM}\n\t\t\t */\n\t        BPM: 'bpm',\n\t        /** \n\t\t\t *  The value must be greater than or equal to 0.\n\t\t\t *  @typedef {Positive}\n\t\t\t */\n\t        Positive: 'positive',\n\t        /** \n\t\t\t *  A cent is a hundredth of a semitone. \n\t\t\t *  @typedef {Cents}\n\t\t\t */\n\t        Cents: 'cents',\n\t        /** \n\t\t\t *  Angle between 0 and 360. \n\t\t\t *  @typedef {Degrees}\n\t\t\t */\n\t        Degrees: 'degrees',\n\t        /** \n\t\t\t *  A number representing a midi note.\n\t\t\t *  @typedef {MIDI}\n\t\t\t */\n\t        MIDI: 'midi',\n\t        /** \n\t\t\t *  A colon-separated representation of time in the form of\n\t\t\t *  Bars:Beats:Sixteenths. \n\t\t\t *  @typedef {BarsBeatsSixteenths}\n\t\t\t */\n\t        BarsBeatsSixteenths: 'barsBeatsSixteenths',\n\t        /** \n\t\t\t *  Sampling is the reduction of a continuous signal to a discrete signal.\n\t\t\t *  Audio is typically sampled 44100 times per second. \n\t\t\t *  @typedef {Samples}\n\t\t\t */\n\t        Samples: 'samples',\n\t        /** \n\t\t\t *  Hertz are a frequency representation defined as one cycle per second.\n\t\t\t *  @typedef {Hertz}\n\t\t\t */\n\t        Hertz: 'hertz',\n\t        /** \n\t\t\t *  A frequency represented by a letter name, \n\t\t\t *  accidental and octave. This system is known as\n\t\t\t *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).\n\t\t\t *  @typedef {Note}\n\t\t\t */\n\t        Note: 'note',\n\t        /** \n\t\t\t *  One millisecond is a thousandth of a second. \n\t\t\t *  @typedef {Milliseconds}\n\t\t\t */\n\t        Milliseconds: 'milliseconds',\n\t        /** \n\t\t\t *  Seconds are the time unit of the AudioContext. In the end, \n\t\t\t *  all values need to be evaluated to seconds. \n\t\t\t *  @typedef {Seconds}\n\t\t\t */\n\t        Seconds: 'seconds',\n\t        /** \n\t\t\t *  A string representing a duration relative to a measure. \n\t\t\t *  <ul>\n\t\t\t *  \t<li>\"4n\" = quarter note</li>\n\t\t\t *   \t<li>\"2m\" = two measures</li>\n\t\t\t *    \t<li>\"8t\" = eighth-note triplet</li>\n\t\t\t *  </ul>\n\t\t\t *  @typedef {Notation}\n\t\t\t */\n\t        Notation: 'notation'\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // AUGMENT TONE's PROTOTYPE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Convert Time into seconds.\n\t\t *  \n\t\t *  Unlike the method which it overrides, this takes into account \n\t\t *  transporttime and musical notation.\n\t\t *\n\t\t *  Time : 1.40\n\t\t *  Notation: 4n|1m|2t\n\t\t *  Now Relative: +3n\n\t\t *  Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)\n\t\t *\n\t\t *  @param  {Time} time \n\t\t *  @return {Seconds} \n\t\t */\n\t    Tone.prototype.toSeconds = function (time) {\n\t        if (this.isNumber(time)) {\n\t            return time;\n\t        } else if (this.isUndef(time)) {\n\t            return this.now();\n\t        } else if (this.isString(time)) {\n\t            return new Tone.Time(time).toSeconds();\n\t        } else if (time instanceof Tone.TimeBase) {\n\t            return time.toSeconds();\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert a frequency representation into a number.\n\t\t *  @param  {Frequency} freq \n\t\t *  @return {Hertz}      the frequency in hertz\n\t\t */\n\t    Tone.prototype.toFrequency = function (freq) {\n\t        if (this.isNumber(freq)) {\n\t            return freq;\n\t        } else if (this.isString(freq) || this.isUndef(freq)) {\n\t            return new Tone.Frequency(freq).valueOf();\n\t        } else if (freq instanceof Tone.TimeBase) {\n\t            return freq.toFrequency();\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert a time representation into ticks.\n\t\t *  @param  {Time} time\n\t\t *  @return {Ticks}  the time in ticks\n\t\t */\n\t    Tone.prototype.toTicks = function (time) {\n\t        if (this.isNumber(time) || this.isString(time)) {\n\t            return new Tone.TransportTime(time).toTicks();\n\t        } else if (this.isUndef(time)) {\n\t            return Tone.Transport.ticks;\n\t        } else if (time instanceof Tone.TimeBase) {\n\t            return time.toTicks();\n\t        }\n\t    };\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Param wraps the native Web Audio's AudioParam to provide\n\t\t *         additional unit conversion functionality. It also\n\t\t *         serves as a base-class for classes which have a single,\n\t\t *         automatable parameter. \n\t\t *  @extends {Tone}\n\t\t *  @param  {AudioParam}  param  The parameter to wrap.\n\t\t *  @param  {Tone.Type} units The units of the audio param.\n\t\t *  @param  {Boolean} convert If the param should be converted.\n\t\t */\n\t    Tone.Param = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'param',\n\t            'units',\n\t            'convert'\n\t        ], Tone.Param.defaults);\n\t        /**\n\t\t\t *  The native parameter to control\n\t\t\t *  @type  {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input = options.param;\n\t        /**\n\t\t\t *  The units of the parameter\n\t\t\t *  @type {Tone.Type}\n\t\t\t */\n\t        this.units = options.units;\n\t        /**\n\t\t\t *  If the value should be converted or not\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.convert = options.convert;\n\t        /**\n\t\t\t *  True if the signal value is being overridden by \n\t\t\t *  a connected signal.\n\t\t\t *  @readOnly\n\t\t\t *  @type  {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this.overridden = false;\n\t        /**\n\t\t\t *  If there is an LFO, this is where it is held.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = null;\n\t        if (this.isObject(options.lfo)) {\n\t            this.value = options.lfo;\n\t        } else if (!this.isUndef(options.value)) {\n\t            this.value = options.value;\n\t        }\n\t    };\n\t    Tone.extend(Tone.Param);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Param.defaults = {\n\t        'units': Tone.Type.Default,\n\t        'convert': true,\n\t        'param': undefined\n\t    };\n\t    /**\n\t\t * The current value of the parameter. \n\t\t * @memberOf Tone.Param#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Param.prototype, 'value', {\n\t        get: function () {\n\t            return this._toUnits(this._param.value);\n\t        },\n\t        set: function (value) {\n\t            if (this.isObject(value)) {\n\t                //throw an error if the LFO needs to be included\n\t                if (this.isUndef(Tone.LFO)) {\n\t                    throw new Error('Include \\'Tone.LFO\\' to use an LFO as a Param value.');\n\t                }\n\t                //remove the old one\n\t                if (this._lfo) {\n\t                    this._lfo.dispose();\n\t                }\n\t                this._lfo = new Tone.LFO(value).start();\n\t                this._lfo.connect(this.input);\n\t            } else {\n\t                var convertedVal = this._fromUnits(value);\n\t                this._param.cancelScheduledValues(0);\n\t                this._param.value = convertedVal;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Convert the given value from the type specified by Tone.Param.units\n\t\t *  into the destination value (such as Gain or Frequency).\n\t\t *  @private\n\t\t *  @param  {*} val the value to convert\n\t\t *  @return {number}     the number which the value should be set to\n\t\t */\n\t    Tone.Param.prototype._fromUnits = function (val) {\n\t        if (this.convert || this.isUndef(this.convert)) {\n\t            switch (this.units) {\n\t            case Tone.Type.Time:\n\t                return this.toSeconds(val);\n\t            case Tone.Type.Frequency:\n\t                return this.toFrequency(val);\n\t            case Tone.Type.Decibels:\n\t                return this.dbToGain(val);\n\t            case Tone.Type.NormalRange:\n\t                return Math.min(Math.max(val, 0), 1);\n\t            case Tone.Type.AudioRange:\n\t                return Math.min(Math.max(val, -1), 1);\n\t            case Tone.Type.Positive:\n\t                return Math.max(val, 0);\n\t            default:\n\t                return val;\n\t            }\n\t        } else {\n\t            return val;\n\t        }\n\t    };\n\t    /**\n\t\t * Convert the parameters value into the units specified by Tone.Param.units.\n\t\t * @private\n\t\t * @param  {number} val the value to convert\n\t\t * @return {number}\n\t\t */\n\t    Tone.Param.prototype._toUnits = function (val) {\n\t        if (this.convert || this.isUndef(this.convert)) {\n\t            switch (this.units) {\n\t            case Tone.Type.Decibels:\n\t                return this.gainToDb(val);\n\t            default:\n\t                return val;\n\t            }\n\t        } else {\n\t            return val;\n\t        }\n\t    };\n\t    /**\n\t\t *  the minimum output value\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Param.prototype._minOutput = 0.00001;\n\t    /**\n\t\t *  Schedules a parameter value change at the given time.\n\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t *  @param {Time}  time The time when the change should occur.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t */\n\t    Tone.Param.prototype.setValueAtTime = function (value, time) {\n\t        value = this._fromUnits(value);\n\t        time = this.toSeconds(time);\n\t        if (time <= this.now() + this.blockTime) {\n\t            this._param.value = value;\n\t        } else {\n\t            this._param.setValueAtTime(value, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Creates a schedule point with the current value at the current time.\n\t\t *  This is useful for creating an automation anchor point in order to \n\t\t *  schedule changes from the current value. \n\t\t *\n\t\t *  @param {number=} now (Optionally) pass the now value in. \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setRampPoint = function (now) {\n\t        now = this.defaultArg(now, this.now());\n\t        var currentVal = this._param.value;\n\t        // exponentialRampToValueAt cannot ever ramp from or to 0\n\t        // More info: https://bugzilla.mozilla.org/show_bug.cgi?id=1125600#c2\n\t        if (currentVal === 0) {\n\t            currentVal = this._minOutput;\n\t        }\n\t        this._param.setValueAtTime(currentVal, now);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules a linear continuous change in parameter value from the \n\t\t *  previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        this._param.linearRampToValueAtTime(value, this.toSeconds(endTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        value = Math.max(this._minOutput, value);\n\t        this._param.exponentialRampToValueAtTime(value, this.toSeconds(endTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the current time and current value to the given value over the \n\t\t *  duration of the rampTime.\n\t\t *  \n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the \n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //exponentially ramp to the value 2 over 4 seconds. \n\t\t * signal.exponentialRampToValue(2, 4);\n\t\t */\n\t    Tone.Param.prototype.exponentialRampToValue = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an linear continuous change in parameter value from \n\t\t *  the current time and current value to the given value over the \n\t\t *  duration of the rampTime.\n\t\t *  \n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the \n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //linearly ramp to the value 4 over 3 seconds. \n\t\t * signal.linearRampToValue(4, 3);\n\t\t */\n\t    Tone.Param.prototype.linearRampToValue = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value        \n\t\t *  @param {Time} startTime    \n\t\t *  @param {number} timeConstant \n\t\t *  @returns {Tone.Param} this \n\t\t */\n\t    Tone.Param.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        value = this._fromUnits(value);\n\t        // The value will never be able to approach without timeConstant > 0.\n\t        // http://www.w3.org/TR/webaudio/#dfn-setTargetAtTime, where the equation\n\t        // is described. 0 results in a division by 0.\n\t        value = Math.max(this._minOutput, value);\n\t        timeConstant = Math.max(this._minOutput, timeConstant);\n\t        this._param.setTargetAtTime(value, this.toSeconds(startTime), timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets an array of arbitrary parameter values starting at the given time\n\t\t *  for the given duration.\n\t\t *  \t\n\t\t *  @param {Array} values    \n\t\t *  @param {Time} startTime \n\t\t *  @param {Time} duration  \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setValueCurveAtTime = function (values, startTime, duration) {\n\t        for (var i = 0; i < values.length; i++) {\n\t            values[i] = this._fromUnits(values[i]);\n\t        }\n\t        this._param.setValueCurveAtTime(values, this.toSeconds(startTime), this.toSeconds(duration));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or \n\t\t *  equal to startTime.\n\t\t *  \n\t\t *  @param  {Time} startTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.cancelScheduledValues = function (startTime) {\n\t        this._param.cancelScheduledValues(this.toSeconds(startTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Ramps to the given value over the duration of the rampTime. \n\t\t *  Automatically selects the best ramp type (exponential or linear)\n\t\t *  depending on the `units` of the signal\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} rampTime \tThe time that it takes the \n\t\t *                              value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //ramp to the value either linearly or exponentially \n\t\t * //depending on the \"units\" value of the signal\n\t\t * signal.rampTo(0, 10);\n\t\t *  @example\n\t\t * //schedule it to ramp starting at a specific time\n\t\t * signal.rampTo(0, 10, 5)\n\t\t */\n\t    Tone.Param.prototype.rampTo = function (value, rampTime, startTime) {\n\t        rampTime = this.defaultArg(rampTime, 0);\n\t        if (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM || this.units === Tone.Type.Decibels) {\n\t            this.exponentialRampToValue(value, rampTime, startTime);\n\t        } else {\n\t            this.linearRampToValue(value, rampTime, startTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The LFO created by the signal instance. If none\n\t\t *  was created, this is null.\n\t\t *  @type {Tone.LFO}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Param#\n\t\t *  @name lfo\n\t\t */\n\t    Object.defineProperty(Tone.Param.prototype, 'lfo', {\n\t        get: function () {\n\t            return this._lfo;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._param = null;\n\t        if (this._lfo) {\n\t            this._lfo.dispose();\n\t            this._lfo = null;\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Param;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  createGain shim\n\t\t *  @private\n\t\t */\n\t    if (window.GainNode && !AudioContext.prototype.createGain) {\n\t        AudioContext.prototype.createGain = AudioContext.prototype.createGainNode;\n\t    }\n\t    /**\n\t\t *  @class A thin wrapper around the Native Web Audio GainNode.\n\t\t *         The GainNode is a basic building block of the Web Audio\n\t\t *         API and is useful for routing audio and adjusting gains. \n\t\t *  @extends {Tone}\n\t\t *  @param  {Number=}  gain  The initial gain of the GainNode\n\t\t *  @param {Tone.Type=} units The units of the gain parameter. \n\t\t */\n\t    Tone.Gain = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'gain',\n\t            'units'\n\t        ], Tone.Gain.defaults);\n\t        /**\n\t\t\t *  The GainNode\n\t\t\t *  @type  {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = this.output = this._gainNode = this.context.createGain();\n\t        /**\n\t\t\t *  The gain parameter of the gain node.\n\t\t\t *  @type {Tone.Param}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.gain = new Tone.Param({\n\t            'param': this._gainNode.gain,\n\t            'units': options.units,\n\t            'value': options.gain,\n\t            'convert': options.convert\n\t        });\n\t        this._readOnly('gain');\n\t    };\n\t    Tone.extend(Tone.Gain);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Gain.defaults = {\n\t        'gain': 1,\n\t        'convert': true\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Gain}  this\n\t\t */\n\t    Tone.Gain.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._gainNode.disconnect();\n\t        this._gainNode = null;\n\t        this._writable('gain');\n\t        this.gain.dispose();\n\t        this.gain = null;\n\t    };\n\t    //STATIC///////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Create input and outputs for this object.\n\t\t *  @param  {Number}  input   The number of inputs\n\t\t *  @param  {Number=}  outputs  The number of outputs\n\t\t *  @return  {Tone}  this\n\t\t *  @internal\n\t\t */\n\t    Tone.prototype.createInsOuts = function (inputs, outputs) {\n\t        if (inputs === 1) {\n\t            this.input = new Tone.Gain();\n\t        } else if (inputs > 1) {\n\t            this.input = new Array(inputs);\n\t        }\n\t        if (outputs === 1) {\n\t            this.output = new Tone.Gain();\n\t        } else if (outputs > 1) {\n\t            this.output = new Array(inputs);\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    return Tone.Gain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.\n\t\t *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n\t\t *          has all of the methods available to native Web Audio \n\t\t *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n\t\t *          as well as additional conveniences. Read more about working with signals \n\t\t *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Param}\n\t\t *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam\n\t\t *                                     is passed in, that parameter will be wrapped\n\t\t *                                     and controlled by the Signal. \n\t\t *  @param {string} [units=Number] unit The units the signal is in. \n\t\t *  @example\n\t\t * var signal = new Tone.Signal(10);\n\t\t */\n\t    Tone.Signal = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'value',\n\t            'units'\n\t        ], Tone.Signal.defaults);\n\t        /**\n\t\t\t * The node where the constant signal value is scaled.\n\t\t\t * @type {GainNode}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this._gain = this.context.createGain();\n\t        options.param = this._gain.gain;\n\t        Tone.Param.call(this, options);\n\t        /**\n\t\t\t * The node where the value is set.\n\t\t\t * @type {Tone.Param}\n\t\t\t * @private\n\t\t\t */\n\t        this.input = this._param = this._gain.gain;\n\t        //connect the const output to the node output\n\t        this.context.getConstant(1).chain(this._gain);\n\t    };\n\t    Tone.extend(Tone.Signal, Tone.Param);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Signal.defaults = {\n\t        'value': 0,\n\t        'units': Tone.Type.Default,\n\t        'convert': true\n\t    };\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t *  @method\n\t\t */\n\t    Tone.Signal.prototype.connect = Tone.SignalBase.prototype.connect;\n\t    /**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Signal} this\n\t\t */\n\t    Tone.Signal.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._param = null;\n\t        this._gain.disconnect();\n\t        this._gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Signal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A Timeline class for scheduling and maintaining state\n\t\t *         along a timeline. All events must have a \"time\" property. \n\t\t *         Internally, events are stored in time order for fast \n\t\t *         retrieval.\n\t\t *  @extends {Tone}\n\t\t *  @param {Positive} [memory=Infinity] The number of previous events that are retained.\n\t\t */\n\t    Tone.Timeline = function () {\n\t        var options = this.optionsObject(arguments, ['memory'], Tone.Timeline.defaults);\n\t        /**\n\t\t\t *  The array of scheduled timeline events\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeline = [];\n\t        /**\n\t\t\t *  An array of items to remove from the list. \n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._toRemove = [];\n\t        /**\n\t\t\t *  Flag if the tieline is mid iteration\n\t\t\t *  @private\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this._iterating = false;\n\t        /**\n\t\t\t *  The memory of the timeline, i.e.\n\t\t\t *  how many events in the past it will retain\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this.memory = options.memory;\n\t    };\n\t    Tone.extend(Tone.Timeline);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Timeline.defaults = { 'memory': Infinity };\n\t    /**\n\t\t *  The number of items in the timeline.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Timeline#\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Timeline.prototype, 'length', {\n\t        get: function () {\n\t            return this._timeline.length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t\t *  @param  {Object}  event  The event object to insert into the \n\t\t *                           timeline. \n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.add = function (event) {\n\t        //the event needs to have a time attribute\n\t        if (this.isUndef(event.time)) {\n\t            throw new Error('Tone.Timeline: events must have a time attribute');\n\t        }\n\t        if (this._timeline.length) {\n\t            var index = this._search(event.time);\n\t            this._timeline.splice(index + 1, 0, event);\n\t        } else {\n\t            this._timeline.push(event);\n\t        }\n\t        //if the length is more than the memory, remove the previous ones\n\t        if (this.length > this.memory) {\n\t            var diff = this.length - this.memory;\n\t            this._timeline.splice(0, diff);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove an event from the timeline.\n\t\t *  @param  {Object}  event  The event object to remove from the list.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.remove = function (event) {\n\t        if (this._iterating) {\n\t            this._toRemove.push(event);\n\t        } else {\n\t            var index = this._timeline.indexOf(event);\n\t            if (index !== -1) {\n\t                this._timeline.splice(index, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the nearest event whose time is less than or equal to the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Object} The event object set after that time.\n\t\t */\n\t    Tone.Timeline.prototype.get = function (time) {\n\t        var index = this._search(time);\n\t        if (index !== -1) {\n\t            return this._timeline[index];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the first event in the timeline without removing it\n\t\t *  @returns {Object} The first event object\n\t\t */\n\t    Tone.Timeline.prototype.peek = function () {\n\t        return this._timeline[0];\n\t    };\n\t    /**\n\t\t *  Return the first event in the timeline and remove it\n\t\t *  @returns {Object} The first event object\n\t\t */\n\t    Tone.Timeline.prototype.shift = function () {\n\t        return this._timeline.shift();\n\t    };\n\t    /**\n\t\t *  Get the event which is scheduled after the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Object} The event object after the given time\n\t\t */\n\t    Tone.Timeline.prototype.getAfter = function (time) {\n\t        var index = this._search(time);\n\t        if (index + 1 < this._timeline.length) {\n\t            return this._timeline[index + 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Get the event before the event at the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Object} The event object before the given time\n\t\t */\n\t    Tone.Timeline.prototype.getBefore = function (time) {\n\t        var len = this._timeline.length;\n\t        //if it's after the last item, return the last item\n\t        if (len > 0 && this._timeline[len - 1].time < time) {\n\t            return this._timeline[len - 1];\n\t        }\n\t        var index = this._search(time);\n\t        if (index - 1 >= 0) {\n\t            return this._timeline[index - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Cancel events after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.cancel = function (after) {\n\t        if (this._timeline.length > 1) {\n\t            var index = this._search(after);\n\t            if (index >= 0) {\n\t                if (this._timeline[index].time === after) {\n\t                    //get the first item with that time\n\t                    for (var i = index; i >= 0; i--) {\n\t                        if (this._timeline[i].time === after) {\n\t                            index = i;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    }\n\t                    this._timeline = this._timeline.slice(0, index);\n\t                } else {\n\t                    this._timeline = this._timeline.slice(0, index + 1);\n\t                }\n\t            } else {\n\t                this._timeline = [];\n\t            }\n\t        } else if (this._timeline.length === 1) {\n\t            //the first item's time\n\t            if (this._timeline[0].time >= after) {\n\t                this._timeline = [];\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel events before or equal to the given time.\n\t\t *  @param  {Number}  time  The time to cancel before.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.cancelBefore = function (time) {\n\t        if (this._timeline.length) {\n\t            var index = this._search(time);\n\t            if (index >= 0) {\n\t                this._timeline = this._timeline.slice(index + 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Does a binary serach on the timeline array and returns the \n\t\t *  nearest event index whose time is after or equal to the given time.\n\t\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t\t *  If the time is after the end, the index of the last item is returned.\n\t\t *  @param  {Number}  time  \n\t\t *  @return  {Number} the index in the timeline array \n\t\t *  @private\n\t\t */\n\t    Tone.Timeline.prototype._search = function (time) {\n\t        var beginning = 0;\n\t        var len = this._timeline.length;\n\t        var end = len;\n\t        if (len > 0 && this._timeline[len - 1].time <= time) {\n\t            return len - 1;\n\t        }\n\t        while (beginning < end) {\n\t            // calculate the midpoint for roughly equal partition\n\t            var midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t            var event = this._timeline[midPoint];\n\t            var nextEvent = this._timeline[midPoint + 1];\n\t            if (event.time === time) {\n\t                //choose the last one that has the same time\n\t                for (var i = midPoint; i < this._timeline.length; i++) {\n\t                    var testEvent = this._timeline[i];\n\t                    if (testEvent.time === time) {\n\t                        midPoint = i;\n\t                    }\n\t                }\n\t                return midPoint;\n\t            } else if (event.time < time && nextEvent.time > time) {\n\t                return midPoint;\n\t            } else if (event.time > time) {\n\t                //search lower\n\t                end = midPoint;\n\t            } else if (event.time < time) {\n\t                //search upper\n\t                beginning = midPoint + 1;\n\t            }\n\t        }\n\t        return -1;\n\t    };\n\t    /**\n\t\t *  Internal iterator. Applies extra safety checks for \n\t\t *  removing items from the array. \n\t\t *  @param  {Function}  callback \n\t\t *  @param  {Number=}    lowerBound     \n\t\t *  @param  {Number=}    upperBound    \n\t\t *  @private\n\t\t */\n\t    Tone.Timeline.prototype._iterate = function (callback, lowerBound, upperBound) {\n\t        this._iterating = true;\n\t        lowerBound = this.defaultArg(lowerBound, 0);\n\t        upperBound = this.defaultArg(upperBound, this._timeline.length - 1);\n\t        for (var i = lowerBound; i <= upperBound; i++) {\n\t            callback(this._timeline[i]);\n\t        }\n\t        this._iterating = false;\n\t        if (this._toRemove.length > 0) {\n\t            for (var j = 0; j < this._toRemove.length; j++) {\n\t                var index = this._timeline.indexOf(this._toRemove[j]);\n\t                if (index !== -1) {\n\t                    this._timeline.splice(index, 1);\n\t                }\n\t            }\n\t            this._toRemove = [];\n\t        }\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEach = function (callback) {\n\t        this._iterate(callback);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at or before the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachBefore = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var upperBound = this._search(time);\n\t        if (upperBound !== -1) {\n\t            this._iterate(callback, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array after the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachAfter = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var lowerBound = this._search(time);\n\t        this._iterate(callback, lowerBound + 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at or after the given time. Similar to \n\t\t *  forEachAfter, but includes the item(s) at the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachFrom = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var lowerBound = this._search(time);\n\t        //work backwards until the event time is less than time\n\t        while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t            lowerBound--;\n\t        }\n\t        this._iterate(callback, lowerBound + 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at the given time\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachAtTime = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var upperBound = this._search(time);\n\t        if (upperBound !== -1) {\n\t            this._iterate(function (event) {\n\t                if (event.time === time) {\n\t                    callback(event);\n\t                }\n\t            }, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Timeline}  this\n\t\t */\n\t    Tone.Timeline.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._timeline = null;\n\t        this._toRemove = null;\n\t    };\n\t    return Tone.Timeline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A signal which adds the method getValueAtTime. \n\t\t *         Code and inspiration from https://github.com/jsantell/web-audio-automation-timeline\n\t\t *  @extends {Tone.Param}\n\t\t *  @param {Number=} value The initial value of the signal\n\t\t *  @param {String=} units The conversion units of the signal.\n\t\t */\n\t    Tone.TimelineSignal = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'value',\n\t            'units'\n\t        ], Tone.Signal.defaults);\n\t        /**\n\t\t\t *  The scheduled events\n\t\t\t *  @type {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = new Tone.Timeline(10);\n\t        //constructors\n\t        Tone.Signal.apply(this, options);\n\t        options.param = this._param;\n\t        Tone.Param.call(this, options);\n\t        /**\n\t\t\t *  The initial scheduled value\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._initial = this._fromUnits(this._param.value);\n\t    };\n\t    Tone.extend(Tone.TimelineSignal, Tone.Param);\n\t    /**\n\t\t *  The event types of a schedulable signal.\n\t\t *  @enum {String}\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.Type = {\n\t        Linear: 'linear',\n\t        Exponential: 'exponential',\n\t        Target: 'target',\n\t        Curve: 'curve',\n\t        Set: 'set'\n\t    };\n\t    /**\n\t\t * The current value of the signal. \n\t\t * @memberOf Tone.TimelineSignal#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.TimelineSignal.prototype, 'value', {\n\t        get: function () {\n\t            var now = this.now();\n\t            var val = this.getValueAtTime(now);\n\t            return this._toUnits(val);\n\t        },\n\t        set: function (value) {\n\t            var convertedVal = this._fromUnits(value);\n\t            this._initial = convertedVal;\n\t            this.cancelScheduledValues();\n\t            this._param.value = convertedVal;\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tSCHEDULING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Schedules a parameter value change at the given time.\n\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t *  @param {Time}  time The time when the change should occur.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t *  @example\n\t\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t */\n\t    Tone.TimelineSignal.prototype.setValueAtTime = function (value, startTime) {\n\t        value = this._fromUnits(value);\n\t        startTime = this.toSeconds(startTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Set,\n\t            'value': value,\n\t            'time': startTime\n\t        });\n\t        //invoke the original event\n\t        this._param.setValueAtTime(value, startTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules a linear continuous change in parameter value from the \n\t\t *  previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        endTime = this.toSeconds(endTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Linear,\n\t            'value': value,\n\t            'time': endTime\n\t        });\n\t        this._param.linearRampToValueAtTime(value, endTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t        //get the previous event and make sure it's not starting from 0\n\t        endTime = this.toSeconds(endTime);\n\t        var beforeEvent = this._searchBefore(endTime);\n\t        if (beforeEvent && beforeEvent.value === 0) {\n\t            //reschedule that event\n\t            this.setValueAtTime(this._minOutput, beforeEvent.time);\n\t        }\n\t        value = this._fromUnits(value);\n\t        var setValue = Math.max(value, this._minOutput);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Exponential,\n\t            'value': setValue,\n\t            'time': endTime\n\t        });\n\t        //if the ramped to value is 0, make it go to the min output, and then set to 0.\n\t        if (value < this._minOutput) {\n\t            this._param.exponentialRampToValueAtTime(this._minOutput, endTime - this.sampleTime);\n\t            this.setValueAtTime(0, endTime);\n\t        } else {\n\t            this._param.exponentialRampToValueAtTime(value, endTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value        \n\t\t *  @param {Time} startTime    \n\t\t *  @param {number} timeConstant \n\t\t *  @returns {Tone.TimelineSignal} this \n\t\t */\n\t    Tone.TimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        value = this._fromUnits(value);\n\t        value = Math.max(this._minOutput, value);\n\t        timeConstant = Math.max(this._minOutput, timeConstant);\n\t        startTime = this.toSeconds(startTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Target,\n\t            'value': value,\n\t            'time': startTime,\n\t            'constant': timeConstant\n\t        });\n\t        this._param.setTargetAtTime(value, startTime, timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set an array of arbitrary values starting at the given time for the given duration.\n\t\t *  @param {Float32Array} values        \n\t\t *  @param {Time} startTime    \n\t\t *  @param {Time} duration\n\t\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t\t *  @returns {Tone.TimelineSignal} this \n\t\t */\n\t    Tone.TimelineSignal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {\n\t        scaling = this.defaultArg(scaling, 1);\n\t        //copy the array\n\t        var floats = new Array(values.length);\n\t        for (var i = 0; i < floats.length; i++) {\n\t            floats[i] = this._fromUnits(values[i]) * scaling;\n\t        }\n\t        startTime = this.toSeconds(startTime);\n\t        duration = this.toSeconds(duration);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Curve,\n\t            'value': floats,\n\t            'time': startTime,\n\t            'duration': duration\n\t        });\n\t        //set the first value\n\t        this._param.setValueAtTime(floats[0], startTime);\n\t        //schedule a lienar ramp for each of the segments\n\t        for (var j = 1; j < floats.length; j++) {\n\t            var segmentTime = startTime + j / (floats.length - 1) * duration;\n\t            this._param.linearRampToValueAtTime(floats[j], segmentTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or \n\t\t *  equal to startTime.\n\t\t *  \n\t\t *  @param  {Time} startTime\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.cancelScheduledValues = function (after) {\n\t        after = this.toSeconds(after);\n\t        this._events.cancel(after);\n\t        this._param.cancelScheduledValues(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the computed value at the given time. This provides\n\t\t *  a point from which a linear or exponential curve\n\t\t *  can be scheduled after. Will cancel events after \n\t\t *  the given time and shorten the currently scheduled\n\t\t *  linear or exponential ramp so that it ends at `time` .\n\t\t *  This is to avoid discontinuities and clicks in envelopes. \n\t\t *  @param {Time} time When to set the ramp point\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.setRampPoint = function (time) {\n\t        time = this.toSeconds(time);\n\t        //get the value at the given time\n\t        var val = this._toUnits(this.getValueAtTime(time));\n\t        //if there is an event at the given time\n\t        //and that even is not a \"set\"\n\t        var before = this._searchBefore(time);\n\t        if (before && before.time === time) {\n\t            //remove everything after\n\t            this.cancelScheduledValues(time + this.sampleTime);\n\t        } else if (before && before.type === Tone.TimelineSignal.Type.Curve && before.time + before.duration > time) {\n\t            //if the curve is still playing\n\t            //cancel the curve\n\t            this.cancelScheduledValues(time);\n\t            this.linearRampToValueAtTime(val, time);\n\t        } else {\n\t            //reschedule the next event to end at the given time\n\t            var after = this._searchAfter(time);\n\t            if (after) {\n\t                //cancel the next event(s)\n\t                this.cancelScheduledValues(time);\n\t                if (after.type === Tone.TimelineSignal.Type.Linear) {\n\t                    this.linearRampToValueAtTime(val, time);\n\t                } else if (after.type === Tone.TimelineSignal.Type.Exponential) {\n\t                    this.exponentialRampToValueAtTime(val, time);\n\t                }\n\t            }\n\t            this.setValueAtTime(val, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Do a linear ramp to the given value between the start and finish times.\n\t\t *  @param {Number} value The value to ramp to.\n\t\t *  @param {Time} start The beginning anchor point to do the linear ramp\n\t\t *  @param {Time} finish The ending anchor point by which the value of\n\t\t *                       the signal will equal the given value.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.linearRampToValueBetween = function (value, start, finish) {\n\t        this.setRampPoint(start);\n\t        this.linearRampToValueAtTime(value, finish);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Do a exponential ramp to the given value between the start and finish times.\n\t\t *  @param {Number} value The value to ramp to.\n\t\t *  @param {Time} start The beginning anchor point to do the exponential ramp\n\t\t *  @param {Time} finish The ending anchor point by which the value of\n\t\t *                       the signal will equal the given value.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.exponentialRampToValueBetween = function (value, start, finish) {\n\t        this.setRampPoint(start);\n\t        this.exponentialRampToValueAtTime(value, finish);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tGETTING SCHEDULED VALUES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value before or equal to the given time\n\t\t *  @param  {Number}  time  The time to query\n\t\t *  @return  {Object}  The event at or before the given time.\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._searchBefore = function (time) {\n\t        return this._events.get(time);\n\t    };\n\t    /**\n\t\t *  The event after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @return  {Object}  The next event after the given time\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._searchAfter = function (time) {\n\t        return this._events.getAfter(time);\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {Number}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.TimelineSignal.prototype.getValueAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        var after = this._searchAfter(time);\n\t        var before = this._searchBefore(time);\n\t        var value = this._initial;\n\t        //if it was set by\n\t        if (before === null) {\n\t            value = this._initial;\n\t        } else if (before.type === Tone.TimelineSignal.Type.Target) {\n\t            var previous = this._events.getBefore(before.time);\n\t            var previouVal;\n\t            if (previous === null) {\n\t                previouVal = this._initial;\n\t            } else {\n\t                previouVal = previous.value;\n\t            }\n\t            value = this._exponentialApproach(before.time, previouVal, before.value, before.constant, time);\n\t        } else if (before.type === Tone.TimelineSignal.Type.Curve) {\n\t            value = this._curveInterpolate(before.time, before.value, before.duration, time);\n\t        } else if (after === null) {\n\t            value = before.value;\n\t        } else if (after.type === Tone.TimelineSignal.Type.Linear) {\n\t            value = this._linearInterpolate(before.time, before.value, after.time, after.value, time);\n\t        } else if (after.type === Tone.TimelineSignal.Type.Exponential) {\n\t            value = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);\n\t        } else {\n\t            value = before.value;\n\t        }\n\t        return value;\n\t    };\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t *  @method\n\t\t */\n\t    Tone.TimelineSignal.prototype.connect = Tone.SignalBase.prototype.connect;\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUTOMATION CURVE CALCULATIONS\n\t    //\tMIT License, copyright (c) 2014 Jordan Santell\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Calculates the the value along the curve produced by setTargetAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._exponentialApproach = function (t0, v0, v1, timeConstant, t) {\n\t        return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by linearRampToValueAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._linearInterpolate = function (t0, v0, t1, v1, t) {\n\t        return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._exponentialInterpolate = function (t0, v0, t1, v1, t) {\n\t        v0 = Math.max(this._minOutput, v0);\n\t        return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by setValueCurveAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._curveInterpolate = function (start, curve, duration, time) {\n\t        var len = curve.length;\n\t        // If time is after duration, return the last curve value\n\t        if (time >= start + duration) {\n\t            return curve[len - 1];\n\t        } else if (time <= start) {\n\t            return curve[0];\n\t        } else {\n\t            var progress = (time - start) / duration;\n\t            var lowerIndex = Math.floor((len - 1) * progress);\n\t            var upperIndex = Math.ceil((len - 1) * progress);\n\t            var lowerVal = curve[lowerIndex];\n\t            var upperVal = curve[upperIndex];\n\t            if (upperIndex === lowerIndex) {\n\t                return lowerVal;\n\t            } else {\n\t                return this._linearInterpolate(lowerIndex, lowerVal, upperIndex, upperVal, progress * (len - 1));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._events.dispose();\n\t        this._events = null;\n\t    };\n\t    return Tone.TimelineSignal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Pow applies an exponent to the incoming signal. The incoming signal\n\t\t *         must be AudioRange.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {Positive} exp The exponent to apply to the incoming signal, must be at least 2. \n\t\t *  @example\n\t\t * var pow = new Tone.Pow(2);\n\t\t * var sig = new Tone.Signal(0.5).connect(pow);\n\t\t * //output of pow is 0.25. \n\t\t */\n\t    Tone.Pow = function (exp) {\n\t        /**\n\t\t\t * the exponent\n\t\t\t * @private\n\t\t\t * @type {number}\n\t\t\t */\n\t        this._exp = this.defaultArg(exp, 1);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._expScaler = this.input = this.output = new Tone.WaveShaper(this._expFunc(this._exp), 8192);\n\t    };\n\t    Tone.extend(Tone.Pow, Tone.SignalBase);\n\t    /**\n\t\t * The value of the exponent.\n\t\t * @memberOf Tone.Pow#\n\t\t * @type {number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Pow.prototype, 'value', {\n\t        get: function () {\n\t            return this._exp;\n\t        },\n\t        set: function (exp) {\n\t            this._exp = exp;\n\t            this._expScaler.setMap(this._expFunc(this._exp));\n\t        }\n\t    });\n\t    /**\n\t\t *  the function which maps the waveshaper\n\t\t *  @param   {number} exp\n\t\t *  @return {function}\n\t\t *  @private\n\t\t */\n\t    Tone.Pow.prototype._expFunc = function (exp) {\n\t        return function (val) {\n\t            return Math.pow(Math.abs(val), exp);\n\t        };\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Pow} this\n\t\t */\n\t    Tone.Pow.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._expScaler.dispose();\n\t        this._expScaler = null;\n\t        return this;\n\t    };\n\t    return Tone.Pow;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n\t\t *          envelope generator. Tone.Envelope outputs a signal which \n\t\t *          can be connected to an AudioParam or Tone.Signal. \n\t\t *          <img src=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Time} [attack] The amount of time it takes for the envelope to go from \n\t\t *                         0 to it's maximum value. \n\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t *                       \tto fall to the sustain value. \n\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t *                                \tthe release is triggered. \n\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0. \n\t\t *  @example\n\t\t * //an amplitude envelope\n\t\t * var gainNode = Tone.context.createGain();\n\t\t * var env = new Tone.Envelope({\n\t\t * \t\"attack\" : 0.1,\n\t\t * \t\"decay\" : 0.2,\n\t\t * \t\"sustain\" : 1,\n\t\t * \t\"release\" : 0.8,\n\t\t * });\n\t\t * env.connect(gainNode.gain);\n\t\t */\n\t    Tone.Envelope = function () {\n\t        //get all of the defaults\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope.defaults);\n\t        /** \n\t\t\t *  When triggerAttack is called, the attack time is the amount of\n\t\t\t *  time it takes for the envelope to reach it's maximum value. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.attack = options.attack;\n\t        /**\n\t\t\t *  After the attack portion of the envelope, the value will fall\n\t\t\t *  over the duration of the decay time to it's sustain value. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.decay = options.decay;\n\t        /**\n\t\t\t * \tThe sustain value is the value \n\t\t\t * \twhich the envelope rests at after triggerAttack is\n\t\t\t * \tcalled, but before triggerRelease is invoked. \n\t\t\t *  @type {NormalRange}\n\t\t\t */\n\t        this.sustain = options.sustain;\n\t        /**\n\t\t\t *  After triggerRelease is called, the envelope's\n\t\t\t *  value will fall to it's miminum value over the\n\t\t\t *  duration of the release time. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.release = options.release;\n\t        /**\n\t\t\t *  the next time the envelope is at standby\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._attackCurve = 'linear';\n\t        /**\n\t\t\t *  the next time the envelope is at standby\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._releaseCurve = 'exponential';\n\t        /**\n\t\t\t *  the signal\n\t\t\t *  @type {Tone.TimelineSignal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sig = this.output = new Tone.TimelineSignal();\n\t        this._sig.setValueAtTime(0, 0);\n\t        //set the attackCurve initially\n\t        this.attackCurve = options.attackCurve;\n\t        this.releaseCurve = options.releaseCurve;\n\t    };\n\t    Tone.extend(Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Envelope.defaults = {\n\t        'attack': 0.01,\n\t        'decay': 0.1,\n\t        'sustain': 0.5,\n\t        'release': 1,\n\t        'attackCurve': 'linear',\n\t        'releaseCurve': 'exponential'\n\t    };\n\t    /**\n\t\t * Read the current value of the envelope. Useful for \n\t\t * syncronizing visual output to the envelope. \n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'value', {\n\t        get: function () {\n\t            return this.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t * The shape of the attack. \n\t\t * Can be any of these strings:\n\t\t * <ul>\n\t\t *   <li>linear</li>\n\t\t *   <li>exponential</li>\n\t\t *   <li>sine</li>\n\t\t *   <li>cosine</li>\n\t\t *   <li>bounce</li>\n\t\t *   <li>ripple</li>\n\t\t *   <li>step</li>\n\t\t * </ul>\n\t\t * Can also be an array which describes the curve. Values\n\t\t * in the array are evenly subdivided and linearly\n\t\t * interpolated over the duration of the attack. \n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {String|Array}\n\t\t * @name attackCurve\n\t\t * @example\n\t\t * env.attackCurve = \"linear\";\n\t\t * @example\n\t\t * //can also be an array\n\t\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'attackCurve', {\n\t        get: function () {\n\t            if (this.isString(this._attackCurve)) {\n\t                return this._attackCurve;\n\t            } else if (this.isArray(this._attackCurve)) {\n\t                //look up the name in the curves array\n\t                for (var type in Tone.Envelope.Type) {\n\t                    if (Tone.Envelope.Type[type].In === this._attackCurve) {\n\t                        return type;\n\t                    }\n\t                }\n\t                //otherwise just return the array\n\t                return this._attackCurve;\n\t            }\n\t        },\n\t        set: function (curve) {\n\t            //check if it's a valid type\n\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t                var curveDef = Tone.Envelope.Type[curve];\n\t                if (this.isObject(curveDef)) {\n\t                    this._attackCurve = curveDef.In;\n\t                } else {\n\t                    this._attackCurve = curveDef;\n\t                }\n\t            } else if (this.isArray(curve)) {\n\t                this._attackCurve = curve;\n\t            } else {\n\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The shape of the release. See the attack curve types. \n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {String|Array}\n\t\t * @name releaseCurve\n\t\t * @example\n\t\t * env.releaseCurve = \"linear\";\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'releaseCurve', {\n\t        get: function () {\n\t            if (this.isString(this._releaseCurve)) {\n\t                return this._releaseCurve;\n\t            } else if (this.isArray(this._releaseCurve)) {\n\t                //look up the name in the curves array\n\t                for (var type in Tone.Envelope.Type) {\n\t                    if (Tone.Envelope.Type[type].Out === this._releaseCurve) {\n\t                        return type;\n\t                    }\n\t                }\n\t                //otherwise just return the array\n\t                return this._releaseCurve;\n\t            }\n\t        },\n\t        set: function (curve) {\n\t            //check if it's a valid type\n\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t                var curveDef = Tone.Envelope.Type[curve];\n\t                if (this.isObject(curveDef)) {\n\t                    this._releaseCurve = curveDef.Out;\n\t                } else {\n\t                    this._releaseCurve = curveDef;\n\t                }\n\t            } else if (this.isArray(curve)) {\n\t                this._releaseCurve = curve;\n\t            } else {\n\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Trigger the attack/decay portion of the ADSR envelope. \n\t\t *  @param  {Time} [time=now] When the attack should start.\n\t\t *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.\n\t\t *                               number between 0-1\n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t *  //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t\t *  env.triggerAttack(\"+0.5\", 0.2);\n\t\t */\n\t    Tone.Envelope.prototype.triggerAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        var originalAttack = this.toSeconds(this.attack);\n\t        var attack = originalAttack;\n\t        var decay = this.toSeconds(this.decay);\n\t        velocity = this.defaultArg(velocity, 1);\n\t        //check if it's not a complete attack\n\t        var currentValue = this.getValueAtTime(time);\n\t        if (currentValue > 0) {\n\t            //subtract the current value from the attack time\n\t            var attackRate = 1 / attack;\n\t            var remainingDistance = 1 - currentValue;\n\t            //the attack is now the remaining time\n\t            attack = remainingDistance / attackRate;\n\t        }\n\t        //attack\n\t        if (this._attackCurve === 'linear') {\n\t            this._sig.linearRampToValue(velocity, attack, time);\n\t        } else if (this._attackCurve === 'exponential') {\n\t            this._sig.exponentialRampToValue(velocity, attack, time);\n\t        } else if (attack > 0) {\n\t            this._sig.setRampPoint(time);\n\t            var curve = this._attackCurve;\n\t            //take only a portion of the curve\n\t            if (attack < originalAttack) {\n\t                var percentComplete = 1 - attack / originalAttack;\n\t                var sliceIndex = Math.floor(percentComplete * this._attackCurve.length);\n\t                curve = this._attackCurve.slice(sliceIndex);\n\t                //the first index is the current value\n\t                curve[0] = currentValue;\n\t            }\n\t            this._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t        }\n\t        //decay\n\t        this._sig.exponentialRampToValue(velocity * this.sustain, decay, attack + time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Triggers the release of the envelope.\n\t\t *  @param  {Time} [time=now] When the release portion of the envelope should start. \n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t *  //trigger release immediately\n\t\t *  env.triggerRelease();\n\t\t */\n\t    Tone.Envelope.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        var currentValue = this.getValueAtTime(time);\n\t        if (currentValue > 0) {\n\t            var release = this.toSeconds(this.release);\n\t            if (this._releaseCurve === 'linear') {\n\t                this._sig.linearRampToValue(0, release, time);\n\t            } else if (this._releaseCurve === 'exponential') {\n\t                this._sig.exponentialRampToValue(0, release, time);\n\t            } else {\n\t                var curve = this._releaseCurve;\n\t                if (this.isArray(curve)) {\n\t                    this._sig.setRampPoint(time);\n\t                    this._sig.setValueCurveAtTime(curve, time, release, currentValue);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {Number}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.Envelope.prototype.getValueAtTime = function (time) {\n\t        return this._sig.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t\t *  some duration, then triggerRelease. \n\t\t *  @param {Time} duration The duration of the sustain.\n\t\t *  @param {Time} [time=now] When the attack should be triggered.\n\t\t *  @param {number} [velocity=1] The velocity of the envelope. \n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t * //trigger the attack and then the release after 0.6 seconds.\n\t\t * env.triggerAttackRelease(0.6);\n\t\t */\n\t    Tone.Envelope.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + this.toSeconds(duration));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled envelope changes after the given time.\n\t\t *  @param  {Time} after\n\t\t *  @returns {Tone.Envelope} this\n\t\t */\n\t    Tone.Envelope.prototype.cancel = function (after) {\n\t        this._sig.cancelScheduledValues(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Borrows the connect method from Tone.Signal. \n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.Envelope.prototype.connect = Tone.Signal.prototype.connect;\n\t    /**\n\t \t *  Generate some complex envelope curves. \n\t \t */\n\t    (function _createCurves() {\n\t        var curveLen = 128;\n\t        var i, k;\n\t        //cosine curve\n\t        var cosineCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));\n\t        }\n\t        //ripple curve\n\t        var rippleCurve = [];\n\t        var rippleCurveFreq = 6.4;\n\t        for (i = 0; i < curveLen - 1; i++) {\n\t            k = i / (curveLen - 1);\n\t            var sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t            rippleCurve[i] = sineWave / 10 + k * 0.83;\n\t        }\n\t        rippleCurve[curveLen - 1] = 1;\n\t        //stairs curve\n\t        var stairsCurve = [];\n\t        var steps = 5;\n\t        for (i = 0; i < curveLen; i++) {\n\t            stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;\n\t        }\n\t        //in-out easing curve\n\t        var sineCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            k = i / (curveLen - 1);\n\t            sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t        }\n\t        //a bounce curve\n\t        var bounceCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            k = i / (curveLen - 1);\n\t            var freq = Math.pow(k, 3) * 4 + 0.2;\n\t            var val = Math.cos(freq * Math.PI * 2 * k);\n\t            bounceCurve[i] = Math.abs(val * (1 - k));\n\t        }\n\t        /**\n\t\t\t *  Invert a value curve to make it work for the release\n\t\t\t *  @private\n\t\t\t */\n\t        function invertCurve(curve) {\n\t            var out = new Array(curve.length);\n\t            for (var j = 0; j < curve.length; j++) {\n\t                out[j] = 1 - curve[j];\n\t            }\n\t            return out;\n\t        }\n\t        /**\n\t\t\t *  reverse the curve\n\t\t\t *  @private\n\t\t\t */\n\t        function reverseCurve(curve) {\n\t            return curve.slice(0).reverse();\n\t        }\n\t        /**\n\t\t\t *  attack and release curve arrays\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        Tone.Envelope.Type = {\n\t            'linear': 'linear',\n\t            'exponential': 'exponential',\n\t            'bounce': {\n\t                In: invertCurve(bounceCurve),\n\t                Out: bounceCurve\n\t            },\n\t            'cosine': {\n\t                In: cosineCurve,\n\t                Out: reverseCurve(cosineCurve)\n\t            },\n\t            'step': {\n\t                In: stairsCurve,\n\t                Out: invertCurve(stairsCurve)\n\t            },\n\t            'ripple': {\n\t                In: rippleCurve,\n\t                Out: invertCurve(rippleCurve)\n\t            },\n\t            'sine': {\n\t                In: sineCurve,\n\t                Out: invertCurve(sineCurve)\n\t            }\n\t        };\n\t    }());\n\t    /**\n\t\t *  Disconnect and dispose.\n\t\t *  @returns {Tone.Envelope} this\n\t\t */\n\t    Tone.Envelope.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._sig.dispose();\n\t        this._sig = null;\n\t        this._attackCurve = null;\n\t        this._releaseCurve = null;\n\t        return this;\n\t    };\n\t    return Tone.Envelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node. \n\t\t *          Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts\n\t\t *          an audio signal as the input and will apply the envelope to the amplitude\n\t\t *          of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @param {Time|Object} [attack] The amount of time it takes for the envelope to go from \n\t\t *                               0 to it's maximum value. \n\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t *                       \tto fall to the sustain value. \n\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t *                                \tthe release is triggered. \n\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0. \n\t\t *  @example\n\t\t * var ampEnv = new Tone.AmplitudeEnvelope({\n\t\t * \t\"attack\": 0.1,\n\t\t * \t\"decay\": 0.2,\n\t\t * \t\"sustain\": 1.0,\n\t\t * \t\"release\": 0.8\n\t\t * }).toMaster();\n\t\t * //create an oscillator and connect it\n\t\t * var osc = new Tone.Oscillator().connect(ampEnv).start();\n\t\t * //trigger the envelopes attack and release \"8t\" apart\n\t\t * ampEnv.triggerAttackRelease(\"8t\");\n\t\t */\n\t    Tone.AmplitudeEnvelope = function () {\n\t        Tone.Envelope.apply(this, arguments);\n\t        /**\n\t\t\t *  the input node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = this.output = new Tone.Gain();\n\t        this._sig.connect(this.output.gain);\n\t    };\n\t    Tone.extend(Tone.AmplitudeEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.AmplitudeEnvelope}  this\n\t\t */\n\t    Tone.AmplitudeEnvelope.prototype.dispose = function () {\n\t        this.input.dispose();\n\t        this.input = null;\n\t        Tone.Envelope.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.AmplitudeEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  AnalyserNode.getFloatTimeDomainData polyfill\n\t\t *  @private\n\t\t */\n\t    if (window.AnalyserNode && !AnalyserNode.prototype.getFloatTimeDomainData) {\n\t        //referenced https://github.com/mohayonao/get-float-time-domain-data \n\t        AnalyserNode.prototype.getFloatTimeDomainData = function (array) {\n\t            var uint8 = new Uint8Array(array.length);\n\t            this.getByteTimeDomainData(uint8);\n\t            for (var i = 0; i < uint8.length; i++) {\n\t                array[i] = (uint8[i] - 128) / 128;\n\t            }\n\t        };\n\t    }\n\t    /**\n\t\t *  @class  Wrapper around the native Web Audio's \n\t\t *          [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n\t\t *          Extracts FFT or Waveform data from the incoming signal.\n\t\t *  @extends {Tone}\n\t\t *  @param {String=} type The return type of the analysis, either \"fft\", or \"waveform\". \n\t\t *  @param {Number=} size The size of the FFT. Value must be a power of \n\t\t *                       two in the range 32 to 32768.\n\t\t */\n\t    Tone.Analyser = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'type',\n\t            'size'\n\t        ], Tone.Analyser.defaults);\n\t        /**\n\t\t\t *  The analyser node.\n\t\t\t *  @private\n\t\t\t *  @type {AnalyserNode}\n\t\t\t */\n\t        this._analyser = this.input = this.output = this.context.createAnalyser();\n\t        /**\n\t\t\t *  The analysis type\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The return type of the analysis\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._returnType = options.returnType;\n\t        /**\n\t\t\t *  The buffer that the FFT data is written to\n\t\t\t *  @type {TypedArray}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = null;\n\t        //set the values initially\n\t        this.size = options.size;\n\t        this.type = options.type;\n\t        this.returnType = options.returnType;\n\t        this.minDecibels = options.minDecibels;\n\t        this.maxDecibels = options.maxDecibels;\n\t    };\n\t    Tone.extend(Tone.Analyser);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Analyser.defaults = {\n\t        'size': 1024,\n\t        'returnType': 'byte',\n\t        'type': 'fft',\n\t        'smoothing': 0.8,\n\t        'maxDecibels': -30,\n\t        'minDecibels': -100\n\t    };\n\t    /**\n\t\t *  Possible return types of Tone.Analyser.analyse()\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Analyser.Type = {\n\t        Waveform: 'waveform',\n\t        FFT: 'fft'\n\t    };\n\t    /**\n\t\t *  Possible return types of Tone.Analyser.analyse(). \n\t\t *  byte values are between [0,255]. float values are between \n\t\t *  [-1, 1] when the type is set to \"waveform\" and between \n\t\t *  [minDecibels,maxDecibels] when the type is \"fft\".\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Analyser.ReturnType = {\n\t        Byte: 'byte',\n\t        Float: 'float'\n\t    };\n\t    /**\n\t\t *  Run the analysis given the current settings and return the \n\t\t *  result as a TypedArray. \n\t\t *  @returns {TypedArray}\n\t\t */\n\t    Tone.Analyser.prototype.analyse = function () {\n\t        if (this._type === Tone.Analyser.Type.FFT) {\n\t            if (this._returnType === Tone.Analyser.ReturnType.Byte) {\n\t                this._analyser.getByteFrequencyData(this._buffer);\n\t            } else {\n\t                this._analyser.getFloatFrequencyData(this._buffer);\n\t            }\n\t        } else if (this._type === Tone.Analyser.Type.Waveform) {\n\t            if (this._returnType === Tone.Analyser.ReturnType.Byte) {\n\t                this._analyser.getByteTimeDomainData(this._buffer);\n\t            } else {\n\t                this._analyser.getFloatTimeDomainData(this._buffer);\n\t            }\n\t        }\n\t        return this._buffer;\n\t    };\n\t    /**\n\t\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Number}\n\t\t *  @name size\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'size', {\n\t        get: function () {\n\t            return this._analyser.frequencyBinCount;\n\t        },\n\t        set: function (size) {\n\t            this._analyser.fftSize = size * 2;\n\t            this.type = this._type;\n\t        }\n\t    });\n\t    /**\n\t\t *  The return type of Tone.Analyser.analyse(), either \"byte\" or \"float\". \n\t\t *  When the type is set to \"byte\" the range of values returned in the array\n\t\t *  are between 0-255. \"float\" values are between \n\t\t *  [-1, 1] when the type is set to \"waveform\" and between \n\t\t *  [minDecibels,maxDecibels] when the type is \"fft\".\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {String}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'returnType', {\n\t        get: function () {\n\t            return this._returnType;\n\t        },\n\t        set: function (type) {\n\t            if (type === Tone.Analyser.ReturnType.Byte) {\n\t                this._buffer = new Uint8Array(this._analyser.frequencyBinCount);\n\t            } else if (type === Tone.Analyser.ReturnType.Float) {\n\t                this._buffer = new Float32Array(this._analyser.frequencyBinCount);\n\t            } else {\n\t                throw new TypeError('Tone.Analayser: invalid return type: ' + type);\n\t            }\n\t            this._returnType = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  The analysis function returned by Tone.Analyser.analyse(), either \"fft\" or \"waveform\". \n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {String}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            if (type !== Tone.Analyser.Type.Waveform && type !== Tone.Analyser.Type.FFT) {\n\t                throw new TypeError('Tone.Analyser: invalid type: ' + type);\n\t            }\n\t            this._type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  0 represents no time averaging with the last analysis frame.\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {NormalRange}\n\t\t *  @name smoothing\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'smoothing', {\n\t        get: function () {\n\t            return this._analyser.smoothingTimeConstant;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.smoothingTimeConstant = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The smallest decibel value which is analysed by the FFT. \n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Decibels}\n\t\t *  @name minDecibels\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'minDecibels', {\n\t        get: function () {\n\t            return this._analyser.minDecibels;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.minDecibels = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The largest decibel value which is analysed by the FFT. \n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Decibels}\n\t\t *  @name maxDecibels\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'maxDecibels', {\n\t        get: function () {\n\t            return this._analyser.maxDecibels;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.maxDecibels = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Analyser}  this\n\t\t */\n\t    Tone.Analyser.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._analyser.disconnect();\n\t        this._analyser = null;\n\t        this._buffer = null;\n\t    };\n\t    return Tone.Analyser;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Compressor is a thin wrapper around the Web Audio \n\t\t *         [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n\t\t *         Compression reduces the volume of loud sounds or amplifies quiet sounds \n\t\t *         by narrowing or \"compressing\" an audio signal's dynamic range. \n\t\t *         Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Decibels|Object} [threshold] The value above which the compression starts to be applied.\n\t\t *  @param {Positive} [ratio] The gain reduction ratio.\n\t\t *  @example\n\t\t * var comp = new Tone.Compressor(-30, 3);\n\t\t */\n\t    Tone.Compressor = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'threshold',\n\t            'ratio'\n\t        ], Tone.Compressor.defaults);\n\t        /**\n\t\t\t *  the compressor node\n\t\t\t *  @type {DynamicsCompressorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._compressor = this.input = this.output = this.context.createDynamicsCompressor();\n\t        /**\n\t\t\t *  the threshold vaue\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.threshold = new Tone.Param({\n\t            'param': this._compressor.threshold,\n\t            'units': Tone.Type.Decibels,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The attack parameter\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.attack = new Tone.Param(this._compressor.attack, Tone.Type.Time);\n\t        /**\n\t\t\t *  The release parameter\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.release = new Tone.Param(this._compressor.release, Tone.Type.Time);\n\t        /**\n\t\t\t *  The knee parameter\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.knee = new Tone.Param({\n\t            'param': this._compressor.knee,\n\t            'units': Tone.Type.Decibels,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The ratio value\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.ratio = new Tone.Param({\n\t            'param': this._compressor.ratio,\n\t            'convert': false\n\t        });\n\t        //set the defaults\n\t        this._readOnly([\n\t            'knee',\n\t            'release',\n\t            'attack',\n\t            'ratio',\n\t            'threshold'\n\t        ]);\n\t        this.set(options);\n\t    };\n\t    Tone.extend(Tone.Compressor);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Compressor.defaults = {\n\t        'ratio': 12,\n\t        'threshold': -24,\n\t        'release': 0.25,\n\t        'attack': 0.003,\n\t        'knee': 30\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Compressor} this\n\t\t */\n\t    Tone.Compressor.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'knee',\n\t            'release',\n\t            'attack',\n\t            'ratio',\n\t            'threshold'\n\t        ]);\n\t        this._compressor.disconnect();\n\t        this._compressor = null;\n\t        this.attack.dispose();\n\t        this.attack = null;\n\t        this.release.dispose();\n\t        this.release = null;\n\t        this.threshold.dispose();\n\t        this.threshold = null;\n\t        this.ratio.dispose();\n\t        this.ratio = null;\n\t        this.knee.dispose();\n\t        this.knee = null;\n\t        return this;\n\t    };\n\t    return Tone.Compressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Add a signal and a number or two signals. When no value is\n\t\t *         passed into the constructor, Tone.Add will sum <code>input[0]</code>\n\t\t *         and <code>input[1]</code>. If a value is passed into the constructor, \n\t\t *         the it will be added to the input.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value If no value is provided, Tone.Add will sum the first\n\t\t *                         and second inputs. \n\t\t *  @example\n\t\t * var signal = new Tone.Signal(2);\n\t\t * var add = new Tone.Add(2);\n\t\t * signal.connect(add);\n\t\t * //the output of add equals 4\n\t\t *  @example\n\t\t * //if constructed with no arguments\n\t\t * //it will add the first and second inputs\n\t\t * var add = new Tone.Add();\n\t\t * var sig0 = new Tone.Signal(3).connect(add, 0, 0);\n\t\t * var sig1 = new Tone.Signal(4).connect(add, 0, 1);\n\t\t * //the output of add equals 7. \n\t\t */\n\t    Tone.Add = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sum = this.input[0] = this.input[1] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t        this._param = this.input[1] = new Tone.Signal(value);\n\t        this._param.connect(this._sum);\n\t    };\n\t    Tone.extend(Tone.Add, Tone.Signal);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Add} this\n\t\t */\n\t    Tone.Add.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._sum.dispose();\n\t        this._sum = null;\n\t        this._param.dispose();\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Add;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Multiply two incoming signals. Or, if a number is given in the constructor, \n\t\t *          multiplies the incoming signal by that value. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value Constant value to multiple. If no value is provided,\n\t\t *                         it will return the product of the first and second inputs\n\t\t *  @example\n\t\t * var mult = new Tone.Multiply();\n\t\t * var sigA = new Tone.Signal(3);\n\t\t * var sigB = new Tone.Signal(4);\n\t\t * sigA.connect(mult, 0, 0);\n\t\t * sigB.connect(mult, 0, 1);\n\t\t * //output of mult is 12.\n\t\t *  @example\n\t\t * var mult = new Tone.Multiply(10);\n\t\t * var sig = new Tone.Signal(2).connect(mult);\n\t\t * //the output of mult is 20. \n\t\t */\n\t    Tone.Multiply = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the input node is the same as the output node\n\t\t\t *  it is also the GainNode which handles the scaling of incoming signal\n\t\t\t *  \n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mult = this.input[0] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  the scaling parameter\n\t\t\t *  @type {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input[1] = this.output.gain;\n\t        this._param.value = this.defaultArg(value, 0);\n\t    };\n\t    Tone.extend(Tone.Multiply, Tone.Signal);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Multiply} this\n\t\t */\n\t    Tone.Multiply.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._mult.dispose();\n\t        this._mult = null;\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Multiply;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var neg = new Tone.Negate();\n\t\t * var sig = new Tone.Signal(-2).connect(neg);\n\t\t * //output of neg is positive 2. \n\t\t */\n\t    Tone.Negate = function () {\n\t        /**\n\t\t\t *  negation is done by multiplying by -1\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multiply = this.input = this.output = new Tone.Multiply(-1);\n\t    };\n\t    Tone.extend(Tone.Negate, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Negate} this\n\t\t */\n\t    Tone.Negate.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._multiply.dispose();\n\t        this._multiply = null;\n\t        return this;\n\t    };\n\t    return Tone.Negate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Subtract the signal connected to <code>input[1]</code> from the signal connected \n\t\t *         to <code>input[0]</code>. If an argument is provided in the constructor, the \n\t\t *         signals <code>.value</code> will be subtracted from the incoming signal.\n\t\t *\n\t\t *  @extends {Tone.Signal}\n\t\t *  @constructor\n\t\t *  @param {number=} value The value to subtract from the incoming signal. If the value\n\t\t *                         is omitted, it will subtract the second signal from the first.\n\t\t *  @example\n\t\t * var sub = new Tone.Subtract(1);\n\t\t * var sig = new Tone.Signal(4).connect(sub);\n\t\t * //the output of sub is 3. \n\t\t *  @example\n\t\t * var sub = new Tone.Subtract();\n\t\t * var sigA = new Tone.Signal(10);\n\t\t * var sigB = new Tone.Signal(2.5);\n\t\t * sigA.connect(sub, 0, 0);\n\t\t * sigB.connect(sub, 0, 1);\n\t\t * //output of sub is 7.5\n\t\t */\n\t    Tone.Subtract = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sum = this.input[0] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  negate the input of the second input before connecting it\n\t\t\t *  to the summing node.\n\t\t\t *  @type {Tone.Negate}\n\t\t\t *  @private\n\t\t\t */\n\t        this._neg = new Tone.Negate();\n\t        /**\n\t\t\t *  the node where the value is set\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t        this._param = this.input[1] = new Tone.Signal(value);\n\t        this._param.chain(this._neg, this._sum);\n\t    };\n\t    Tone.extend(Tone.Subtract, Tone.Signal);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t */\n\t    Tone.Subtract.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._neg.dispose();\n\t        this._neg = null;\n\t        this._sum.disconnect();\n\t        this._sum = null;\n\t        this._param.dispose();\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Subtract;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var gt0 = new Tone.GreaterThanZero();\n\t\t * var sig = new Tone.Signal(0.01).connect(gt0);\n\t\t * //the output of gt0 is 1. \n\t\t * sig.value = 0;\n\t\t * //the output of gt0 is 0. \n\t\t */\n\t    Tone.GreaterThanZero = function () {\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._thresh = this.output = new Tone.WaveShaper(function (val) {\n\t            if (val <= 0) {\n\t                return 0;\n\t            } else {\n\t                return 1;\n\t            }\n\t        }, 127);\n\t        /**\n\t\t\t *  scale the first thresholded signal by a large value.\n\t\t\t *  this will help with values which are very close to 0\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.input = new Tone.Multiply(10000);\n\t        //connections\n\t        this._scale.connect(this._thresh);\n\t    };\n\t    Tone.extend(Tone.GreaterThanZero, Tone.SignalBase);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThanZero} this\n\t\t */\n\t    Tone.GreaterThanZero.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._thresh.dispose();\n\t        this._thresh = null;\n\t        return this;\n\t    };\n\t    return Tone.GreaterThanZero;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.\n\t\t *          can compare two signals or a signal and a number. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number} [value=0] the value to compare to the incoming signal\n\t\t *  @example\n\t\t * var gt = new Tone.GreaterThan(2);\n\t\t * var sig = new Tone.Signal(4).connect(gt);\n\t\t * //output of gt is equal 1. \n\t\t */\n\t    Tone.GreaterThan = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  subtract the amount from the incoming signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input[0] = new Tone.Subtract(value);\n\t        this.input[1] = this._param.input[1];\n\t        /**\n\t\t\t *  compare that amount to zero\n\t\t\t *  @type {Tone.GreaterThanZero}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gtz = this.output = new Tone.GreaterThanZero();\n\t        //connect\n\t        this._param.connect(this._gtz);\n\t    };\n\t    Tone.extend(Tone.GreaterThan, Tone.Signal);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThan} this\n\t\t */\n\t    Tone.GreaterThan.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._param.dispose();\n\t        this._param = null;\n\t        this._gtz.dispose();\n\t        this._gtz = null;\n\t        return this;\n\t    };\n\t    return Tone.GreaterThan;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Return the absolute value of an incoming signal. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var signal = new Tone.Signal(-1);\n\t\t * var abs = new Tone.Abs();\n\t\t * signal.connect(abs);\n\t\t * //the output of abs is 1. \n\t\t */\n\t    Tone.Abs = function () {\n\t        /**\n\t\t\t *  @type {Tone.LessThan}\n\t\t\t *  @private\n\t\t\t */\n\t        this._abs = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t            if (val === 0) {\n\t                return 0;\n\t            } else {\n\t                return Math.abs(val);\n\t            }\n\t        }, 127);\n\t    };\n\t    Tone.extend(Tone.Abs, Tone.SignalBase);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.Abs} this\n\t\t */\n\t    Tone.Abs.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._abs.dispose();\n\t        this._abs = null;\n\t        return this;\n\t    };\n\t    return Tone.Abs;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus\n\t\t *         values in the NormalRange. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {NormalRange} modulus The modulus to apply.\n\t\t *  @example\n\t\t * var mod = new Tone.Modulo(0.2)\n\t\t * var sig = new Tone.Signal(0.5).connect(mod);\n\t\t * //mod outputs 0.1\n\t\t */\n\t    Tone.Modulo = function (modulus) {\n\t        this.createInsOuts(1, 0);\n\t        /**\n\t\t\t *  A waveshaper gets the integer multiple of \n\t\t\t *  the input signal and the modulus.\n\t\t\t *  @private\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(Math.pow(2, 16));\n\t        /**\n\t\t\t *  the integer multiple is multiplied by the modulus\n\t\t\t *  @type  {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multiply = new Tone.Multiply();\n\t        /**\n\t\t\t *  and subtracted from the input signal\n\t\t\t *  @type  {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subtract = this.output = new Tone.Subtract();\n\t        /**\n\t\t\t *  the modulus signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modSignal = new Tone.Signal(modulus);\n\t        //connections\n\t        this.input.fan(this._shaper, this._subtract);\n\t        this._modSignal.connect(this._multiply, 0, 0);\n\t        this._shaper.connect(this._multiply, 0, 1);\n\t        this._multiply.connect(this._subtract, 0, 1);\n\t        this._setWaveShaper(modulus);\n\t    };\n\t    Tone.extend(Tone.Modulo, Tone.SignalBase);\n\t    /**\n\t\t *  @param  {number}  mod  the modulus to apply\n\t\t *  @private\n\t\t */\n\t    Tone.Modulo.prototype._setWaveShaper = function (mod) {\n\t        this._shaper.setMap(function (val) {\n\t            var multiple = Math.floor((val + 0.0001) / mod);\n\t            return multiple;\n\t        });\n\t    };\n\t    /**\n\t\t * The modulus value.\n\t\t * @memberOf Tone.Modulo#\n\t\t * @type {NormalRange}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Modulo.prototype, 'value', {\n\t        get: function () {\n\t            return this._modSignal.value;\n\t        },\n\t        set: function (mod) {\n\t            this._modSignal.value = mod;\n\t            this._setWaveShaper(mod);\n\t        }\n\t    });\n\t    /**\n\t\t * clean up\n\t\t *  @returns {Tone.Modulo} this\n\t\t */\n\t    Tone.Modulo.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        this._multiply.dispose();\n\t        this._multiply = null;\n\t        this._subtract.dispose();\n\t        this._subtract = null;\n\t        this._modSignal.dispose();\n\t        this._modSignal = null;\n\t        return this;\n\t    };\n\t    return Tone.Modulo;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. \n\t\t *         See Tone.GainToAudio.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t *  var a2g = new Tone.AudioToGain();\n\t\t */\n\t    Tone.AudioToGain = function () {\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t            return (x + 1) / 2;\n\t        });\n\t    };\n\t    Tone.extend(Tone.AudioToGain, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AudioToGain} this\n\t\t */\n\t    Tone.AudioToGain.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._norm.dispose();\n\t        this._norm = null;\n\t        return this;\n\t    };\n\t    return Tone.AudioToGain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Evaluate an expression at audio rate. <br><br>\n\t\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {string} expr the expression to generate\n\t\t *  @example\n\t\t * //adds the signals from input[0] and input[1].\n\t\t * var expr = new Tone.Expr(\"$0 + $1\");\n\t\t */\n\t    Tone.Expr = function () {\n\t        var expr = this._replacements(Array.prototype.slice.call(arguments));\n\t        var inputCount = this._parseInputs(expr);\n\t        /**\n\t\t\t *  hold onto all of the nodes for disposal\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._nodes = [];\n\t        /**\n\t\t\t *  The inputs. The length is determined by the expression. \n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.input = new Array(inputCount);\n\t        //create a gain for each input\n\t        for (var i = 0; i < inputCount; i++) {\n\t            this.input[i] = this.context.createGain();\n\t        }\n\t        //parse the syntax tree\n\t        var tree = this._parseTree(expr);\n\t        //evaluate the results\n\t        var result;\n\t        try {\n\t            result = this._eval(tree);\n\t        } catch (e) {\n\t            this._disposeNodes();\n\t            throw new Error('Tone.Expr: Could evaluate expression: ' + expr);\n\t        }\n\t        /**\n\t\t\t *  The output node is the result of the expression\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t        this.output = result;\n\t    };\n\t    Tone.extend(Tone.Expr, Tone.SignalBase);\n\t    //some helpers to cut down the amount of code\n\t    function applyBinary(Constructor, args, self) {\n\t        var op = new Constructor();\n\t        self._eval(args[0]).connect(op, 0, 0);\n\t        self._eval(args[1]).connect(op, 0, 1);\n\t        return op;\n\t    }\n\t    function applyUnary(Constructor, args, self) {\n\t        var op = new Constructor();\n\t        self._eval(args[0]).connect(op, 0, 0);\n\t        return op;\n\t    }\n\t    function getNumber(arg) {\n\t        return arg ? parseFloat(arg) : undefined;\n\t    }\n\t    function literalNumber(arg) {\n\t        return arg && arg.args ? parseFloat(arg.args) : undefined;\n\t    }\n\t    /*\n\t\t *  the Expressions that Tone.Expr can parse.\n\t\t *\n\t\t *  each expression belongs to a group and contains a regexp \n\t\t *  for selecting the operator as well as that operators method\n\t\t *  \n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Expr._Expressions = {\n\t        //values\n\t        'value': {\n\t            'signal': {\n\t                regexp: /^\\d+\\.\\d+|^\\d+/,\n\t                method: function (arg) {\n\t                    var sig = new Tone.Signal(getNumber(arg));\n\t                    return sig;\n\t                }\n\t            },\n\t            'input': {\n\t                regexp: /^\\$\\d/,\n\t                method: function (arg, self) {\n\t                    return self.input[getNumber(arg.substr(1))];\n\t                }\n\t            }\n\t        },\n\t        //syntactic glue\n\t        'glue': {\n\t            '(': { regexp: /^\\(/ },\n\t            ')': { regexp: /^\\)/ },\n\t            ',': { regexp: /^,/ }\n\t        },\n\t        //functions\n\t        'func': {\n\t            'abs': {\n\t                regexp: /^abs/,\n\t                method: applyUnary.bind(this, Tone.Abs)\n\t            },\n\t            'mod': {\n\t                regexp: /^mod/,\n\t                method: function (args, self) {\n\t                    var modulus = literalNumber(args[1]);\n\t                    var op = new Tone.Modulo(modulus);\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            },\n\t            'pow': {\n\t                regexp: /^pow/,\n\t                method: function (args, self) {\n\t                    var exp = literalNumber(args[1]);\n\t                    var op = new Tone.Pow(exp);\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            },\n\t            'a2g': {\n\t                regexp: /^a2g/,\n\t                method: function (args, self) {\n\t                    var op = new Tone.AudioToGain();\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            }\n\t        },\n\t        //binary expressions\n\t        'binary': {\n\t            '+': {\n\t                regexp: /^\\+/,\n\t                precedence: 1,\n\t                method: applyBinary.bind(this, Tone.Add)\n\t            },\n\t            '-': {\n\t                regexp: /^\\-/,\n\t                precedence: 1,\n\t                method: function (args, self) {\n\t                    //both unary and binary op\n\t                    if (args.length === 1) {\n\t                        return applyUnary(Tone.Negate, args, self);\n\t                    } else {\n\t                        return applyBinary(Tone.Subtract, args, self);\n\t                    }\n\t                }\n\t            },\n\t            '*': {\n\t                regexp: /^\\*/,\n\t                precedence: 0,\n\t                method: applyBinary.bind(this, Tone.Multiply)\n\t            }\n\t        },\n\t        //unary expressions\n\t        'unary': {\n\t            '-': {\n\t                regexp: /^\\-/,\n\t                method: applyUnary.bind(this, Tone.Negate)\n\t            },\n\t            '!': {\n\t                regexp: /^\\!/,\n\t                method: applyUnary.bind(this, Tone.NOT)\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  @param   {string} expr the expression string\n\t\t *  @return  {number}      the input count\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._parseInputs = function (expr) {\n\t        var inputArray = expr.match(/\\$\\d/g);\n\t        var inputMax = 0;\n\t        if (inputArray !== null) {\n\t            for (var i = 0; i < inputArray.length; i++) {\n\t                var inputNum = parseInt(inputArray[i].substr(1)) + 1;\n\t                inputMax = Math.max(inputMax, inputNum);\n\t            }\n\t        }\n\t        return inputMax;\n\t    };\n\t    /**\n\t\t *  @param   {Array} args \tan array of arguments\n\t\t *  @return  {string} the results of the replacements being replaced\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._replacements = function (args) {\n\t        var expr = args.shift();\n\t        for (var i = 0; i < args.length; i++) {\n\t            expr = expr.replace(/\\%/i, args[i]);\n\t        }\n\t        return expr;\n\t    };\n\t    /**\n\t\t *  tokenize the expression based on the Expressions object\n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._tokenize = function (expr) {\n\t        var position = -1;\n\t        var tokens = [];\n\t        while (expr.length > 0) {\n\t            expr = expr.trim();\n\t            var token = getNextToken(expr);\n\t            tokens.push(token);\n\t            expr = expr.substr(token.value.length);\n\t        }\n\t        function getNextToken(expr) {\n\t            for (var type in Tone.Expr._Expressions) {\n\t                var group = Tone.Expr._Expressions[type];\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    var reg = op.regexp;\n\t                    var match = expr.match(reg);\n\t                    if (match !== null) {\n\t                        return {\n\t                            type: type,\n\t                            value: match[0],\n\t                            method: op.method\n\t                        };\n\t                    }\n\t                }\n\t            }\n\t            throw new SyntaxError('Tone.Expr: Unexpected token ' + expr);\n\t        }\n\t        return {\n\t            next: function () {\n\t                return tokens[++position];\n\t            },\n\t            peek: function () {\n\t                return tokens[position + 1];\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  recursively parse the string expression into a syntax tree\n\t\t *  \n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._parseTree = function (expr) {\n\t        var lexer = this._tokenize(expr);\n\t        var isUndef = this.isUndef.bind(this);\n\t        function matchSyntax(token, syn) {\n\t            return !isUndef(token) && token.type === 'glue' && token.value === syn;\n\t        }\n\t        function matchGroup(token, groupName, prec) {\n\t            var ret = false;\n\t            var group = Tone.Expr._Expressions[groupName];\n\t            if (!isUndef(token)) {\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    if (op.regexp.test(token.value)) {\n\t                        if (!isUndef(prec)) {\n\t                            if (op.precedence === prec) {\n\t                                return true;\n\t                            }\n\t                        } else {\n\t                            return true;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            return ret;\n\t        }\n\t        function parseExpression(precedence) {\n\t            if (isUndef(precedence)) {\n\t                precedence = 5;\n\t            }\n\t            var expr;\n\t            if (precedence < 0) {\n\t                expr = parseUnary();\n\t            } else {\n\t                expr = parseExpression(precedence - 1);\n\t            }\n\t            var token = lexer.peek();\n\t            while (matchGroup(token, 'binary', precedence)) {\n\t                token = lexer.next();\n\t                expr = {\n\t                    operator: token.value,\n\t                    method: token.method,\n\t                    args: [\n\t                        expr,\n\t                        parseExpression(precedence - 1)\n\t                    ]\n\t                };\n\t                token = lexer.peek();\n\t            }\n\t            return expr;\n\t        }\n\t        function parseUnary() {\n\t            var token, expr;\n\t            token = lexer.peek();\n\t            if (matchGroup(token, 'unary')) {\n\t                token = lexer.next();\n\t                expr = parseUnary();\n\t                return {\n\t                    operator: token.value,\n\t                    method: token.method,\n\t                    args: [expr]\n\t                };\n\t            }\n\t            return parsePrimary();\n\t        }\n\t        function parsePrimary() {\n\t            var token, expr;\n\t            token = lexer.peek();\n\t            if (isUndef(token)) {\n\t                throw new SyntaxError('Tone.Expr: Unexpected termination of expression');\n\t            }\n\t            if (token.type === 'func') {\n\t                token = lexer.next();\n\t                return parseFunctionCall(token);\n\t            }\n\t            if (token.type === 'value') {\n\t                token = lexer.next();\n\t                return {\n\t                    method: token.method,\n\t                    args: token.value\n\t                };\n\t            }\n\t            if (matchSyntax(token, '(')) {\n\t                lexer.next();\n\t                expr = parseExpression();\n\t                token = lexer.next();\n\t                if (!matchSyntax(token, ')')) {\n\t                    throw new SyntaxError('Expected )');\n\t                }\n\t                return expr;\n\t            }\n\t            throw new SyntaxError('Tone.Expr: Parse error, cannot process token ' + token.value);\n\t        }\n\t        function parseFunctionCall(func) {\n\t            var token, args = [];\n\t            token = lexer.next();\n\t            if (!matchSyntax(token, '(')) {\n\t                throw new SyntaxError('Tone.Expr: Expected ( in a function call \"' + func.value + '\"');\n\t            }\n\t            token = lexer.peek();\n\t            if (!matchSyntax(token, ')')) {\n\t                args = parseArgumentList();\n\t            }\n\t            token = lexer.next();\n\t            if (!matchSyntax(token, ')')) {\n\t                throw new SyntaxError('Tone.Expr: Expected ) in a function call \"' + func.value + '\"');\n\t            }\n\t            return {\n\t                method: func.method,\n\t                args: args,\n\t                name: name\n\t            };\n\t        }\n\t        function parseArgumentList() {\n\t            var token, expr, args = [];\n\t            while (true) {\n\t                expr = parseExpression();\n\t                if (isUndef(expr)) {\n\t                    // TODO maybe throw exception?\n\t                    break;\n\t                }\n\t                args.push(expr);\n\t                token = lexer.peek();\n\t                if (!matchSyntax(token, ',')) {\n\t                    break;\n\t                }\n\t                lexer.next();\n\t            }\n\t            return args;\n\t        }\n\t        return parseExpression();\n\t    };\n\t    /**\n\t\t *  recursively evaluate the expression tree\n\t\t *  @param   {Object} tree \n\t\t *  @return  {AudioNode}      the resulting audio node from the expression\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._eval = function (tree) {\n\t        if (!this.isUndef(tree)) {\n\t            var node = tree.method(tree.args, this);\n\t            this._nodes.push(node);\n\t            return node;\n\t        }\n\t    };\n\t    /**\n\t\t *  dispose all the nodes\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._disposeNodes = function () {\n\t        for (var i = 0; i < this._nodes.length; i++) {\n\t            var node = this._nodes[i];\n\t            if (this.isFunction(node.dispose)) {\n\t                node.dispose();\n\t            } else if (this.isFunction(node.disconnect)) {\n\t                node.disconnect();\n\t            }\n\t            node = null;\n\t            this._nodes[i] = null;\n\t        }\n\t        this._nodes = null;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t */\n\t    Tone.Expr.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._disposeNodes();\n\t    };\n\t    return Tone.Expr;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t * var eqPowGain = new Tone.EqualPowerGain();\n\t\t */\n\t    Tone.EqualPowerGain = function () {\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._eqPower = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t            if (Math.abs(val) < 0.001) {\n\t                //should output 0 when input is 0\n\t                return 0;\n\t            } else {\n\t                return this.equalPowerScale(val);\n\t            }\n\t        }.bind(this), 4096);\n\t    };\n\t    Tone.extend(Tone.EqualPowerGain, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.EqualPowerGain} this\n\t\t */\n\t    Tone.EqualPowerGain.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._eqPower.dispose();\n\t        this._eqPower = null;\n\t        return this;\n\t    };\n\t    return Tone.EqualPowerGain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * @class  Tone.Crossfade provides equal power fading between two inputs. \n\t\t *         More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n\t\t *\n\t\t * @constructor\n\t\t * @extends {Tone}\n\t\t * @param {NormalRange} [initialFade=0.5]\n\t\t * @example\n\t\t * var crossFade = new Tone.CrossFade(0.5);\n\t\t * //connect effect A to crossfade from\n\t\t * //effect output 0 to crossfade input 0\n\t\t * effectA.connect(crossFade, 0, 0);\n\t\t * //connect effect B to crossfade from\n\t\t * //effect output 0 to crossfade input 1\n\t\t * effectB.connect(crossFade, 0, 1);\n\t\t * crossFade.fade.value = 0;\n\t\t * // ^ only effectA is output\n\t\t * crossFade.fade.value = 1;\n\t\t * // ^ only effectB is output\n\t\t * crossFade.fade.value = 0.5;\n\t\t * // ^ the two signals are mixed equally. \n\t\t */\n\t    Tone.CrossFade = function (initialFade) {\n\t        this.createInsOuts(2, 1);\n\t        /**\n\t\t\t *  Alias for <code>input[0]</code>. \n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.a = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  Alias for <code>input[1]</code>. \n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.b = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t * \tThe mix between the two inputs. A fade value of 0\n\t\t\t * \twill output 100% <code>input[0]</code> and \n\t\t\t * \ta value of 1 will output 100% <code>input[1]</code>. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.fade = new Tone.Signal(this.defaultArg(initialFade, 0.5), Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t        this._equalPowerA = new Tone.EqualPowerGain();\n\t        /**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t        this._equalPowerB = new Tone.EqualPowerGain();\n\t        /**\n\t\t\t *  invert the incoming signal\n\t\t\t *  @private\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t        this._invert = new Tone.Expr('1 - $0');\n\t        //connections\n\t        this.a.connect(this.output);\n\t        this.b.connect(this.output);\n\t        this.fade.chain(this._equalPowerB, this.b.gain);\n\t        this.fade.chain(this._invert, this._equalPowerA, this.a.gain);\n\t        this._readOnly('fade');\n\t    };\n\t    Tone.extend(Tone.CrossFade);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.CrossFade} this\n\t\t */\n\t    Tone.CrossFade.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('fade');\n\t        this._equalPowerA.dispose();\n\t        this._equalPowerA = null;\n\t        this._equalPowerB.dispose();\n\t        this._equalPowerB = null;\n\t        this.fade.dispose();\n\t        this.fade = null;\n\t        this._invert.dispose();\n\t        this._invert = null;\n\t        this.a.dispose();\n\t        this.a = null;\n\t        this.b.dispose();\n\t        this.b = null;\n\t        return this;\n\t    };\n\t    return Tone.CrossFade;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Filter is a filter which allows for all of the same native methods\n\t\t *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface). \n\t\t *          Tone.Filter has the added ability to set the filter rolloff at -12 \n\t\t *          (default), -24 and -48. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Frequency|Object} [frequency] The cutoff frequency of the filter.\n\t\t *  @param {string=} type The type of filter.\n\t\t *  @param {number=} rolloff The drop in decibels per octave after the cutoff frequency.\n\t\t *                            3 choices: -12, -24, and -48\n\t\t *  @example\n\t\t *  var filter = new Tone.Filter(200, \"highpass\");\n\t\t */\n\t    Tone.Filter = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'rolloff'\n\t        ], Tone.Filter.defaults);\n\t        /**\n\t\t\t *  the filter(s)\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filters = [];\n\t        /**\n\t\t\t *  The cutoff frequency of the filter. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune parameter\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(0, Tone.Type.Cents);\n\t        /**\n\t\t\t *  The gain of the filter, only used in certain filter types\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.gain = new Tone.Signal({\n\t            'value': options.gain,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The Q or Quality of the filter\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q);\n\t        /**\n\t\t\t *  the type of the filter\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  the rolloff value of the filter\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rolloff = options.rolloff;\n\t        //set the rolloff;\n\t        this.rolloff = options.rolloff;\n\t        this._readOnly([\n\t            'detune',\n\t            'frequency',\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Filter);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Filter.defaults = {\n\t        'type': 'lowpass',\n\t        'frequency': 350,\n\t        'rolloff': -12,\n\t        'Q': 1,\n\t        'gain': 0\n\t    };\n\t    /**\n\t\t * The type of the filter. Types: \"lowpass\", \"highpass\", \n\t\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\". \n\t\t * @memberOf Tone.Filter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Filter.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            var types = [\n\t                'lowpass',\n\t                'highpass',\n\t                'bandpass',\n\t                'lowshelf',\n\t                'highshelf',\n\t                'notch',\n\t                'allpass',\n\t                'peaking'\n\t            ];\n\t            if (types.indexOf(type) === -1) {\n\t                throw new TypeError('Tone.Filter: invalid type ' + type);\n\t            }\n\t            this._type = type;\n\t            for (var i = 0; i < this._filters.length; i++) {\n\t                this._filters[i].type = type;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The rolloff of the filter which is the drop in db\n\t\t * per octave. Implemented internally by cascading filters.\n\t\t * Only accepts the values -12, -24, -48 and -96.\n\t\t * @memberOf Tone.Filter#\n\t\t * @type {number}\n\t\t * @name rolloff\n\t\t */\n\t    Object.defineProperty(Tone.Filter.prototype, 'rolloff', {\n\t        get: function () {\n\t            return this._rolloff;\n\t        },\n\t        set: function (rolloff) {\n\t            rolloff = parseInt(rolloff, 10);\n\t            var possibilities = [\n\t                -12,\n\t                -24,\n\t                -48,\n\t                -96\n\t            ];\n\t            var cascadingCount = possibilities.indexOf(rolloff);\n\t            //check the rolloff is valid\n\t            if (cascadingCount === -1) {\n\t                throw new RangeError('Tone.Filter: rolloff can only be -12, -24, -48 or -96');\n\t            }\n\t            cascadingCount += 1;\n\t            this._rolloff = rolloff;\n\t            //first disconnect the filters and throw them away\n\t            this.input.disconnect();\n\t            for (var i = 0; i < this._filters.length; i++) {\n\t                this._filters[i].disconnect();\n\t                this._filters[i] = null;\n\t            }\n\t            this._filters = new Array(cascadingCount);\n\t            for (var count = 0; count < cascadingCount; count++) {\n\t                var filter = this.context.createBiquadFilter();\n\t                filter.type = this._type;\n\t                this.frequency.connect(filter.frequency);\n\t                this.detune.connect(filter.detune);\n\t                this.Q.connect(filter.Q);\n\t                this.gain.connect(filter.gain);\n\t                this._filters[count] = filter;\n\t            }\n\t            //connect them up\n\t            var connectionChain = [this.input].concat(this._filters).concat([this.output]);\n\t            this.connectSeries.apply(this, connectionChain);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @return {Tone.Filter} this\n\t\t */\n\t    Tone.Filter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        for (var i = 0; i < this._filters.length; i++) {\n\t            this._filters[i].disconnect();\n\t            this._filters[i] = null;\n\t        }\n\t        this._filters = null;\n\t        this._writable([\n\t            'detune',\n\t            'frequency',\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.Q.dispose();\n\t        this.frequency = null;\n\t        this.Q = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.gain.dispose();\n\t        this.gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Filter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Split the incoming signal into three bands (low, mid, high)\n\t\t *         with two crossover frequency controls. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Frequency|Object} [lowFrequency] the low/mid crossover frequency\n\t\t *  @param {Frequency} [highFrequency] the mid/high crossover frequency\n\t\t */\n\t    Tone.MultibandSplit = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ], Tone.MultibandSplit.defaults);\n\t        /**\n\t\t\t *  the input\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = new Tone.Gain();\n\t        /**\n\t\t\t *  the outputs\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Array(3);\n\t        /**\n\t\t\t *  The low band. Alias for <code>output[0]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.low = this.output[0] = new Tone.Filter(0, 'lowpass');\n\t        /**\n\t\t\t *  the lower filter of the mid band\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowMidFilter = new Tone.Filter(0, 'highpass');\n\t        /**\n\t\t\t *  The mid band output. Alias for <code>output[1]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.mid = this.output[1] = new Tone.Filter(0, 'lowpass');\n\t        /**\n\t\t\t *  The high band output. Alias for <code>output[2]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.high = this.output[2] = new Tone.Filter(0, 'highpass');\n\t        /**\n\t\t\t *  The low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = new Tone.Signal(options.lowFrequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = new Tone.Signal(options.highFrequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The quality of all the filters\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q);\n\t        this.input.fan(this.low, this.high);\n\t        this.input.chain(this._lowMidFilter, this.mid);\n\t        //the frequency control signal\n\t        this.lowFrequency.connect(this.low.frequency);\n\t        this.lowFrequency.connect(this._lowMidFilter.frequency);\n\t        this.highFrequency.connect(this.mid.frequency);\n\t        this.highFrequency.connect(this.high.frequency);\n\t        //the Q value\n\t        this.Q.connect(this.low.Q);\n\t        this.Q.connect(this._lowMidFilter.Q);\n\t        this.Q.connect(this.mid.Q);\n\t        this.Q.connect(this.high.Q);\n\t        this._readOnly([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MultibandSplit);\n\t    /**\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MultibandSplit.defaults = {\n\t        'lowFrequency': 400,\n\t        'highFrequency': 2500,\n\t        'Q': 1\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MultibandSplit} this\n\t\t */\n\t    Tone.MultibandSplit.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t        this.low.dispose();\n\t        this.low = null;\n\t        this._lowMidFilter.dispose();\n\t        this._lowMidFilter = null;\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.high.dispose();\n\t        this.high = null;\n\t        this.lowFrequency.dispose();\n\t        this.lowFrequency = null;\n\t        this.highFrequency.dispose();\n\t        this.highFrequency = null;\n\t        this.Q.dispose();\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.MultibandSplit;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.EQ3 is a three band EQ with control over low, mid, and high gain as\n\t\t *         well as the low and high crossover frequencies.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  \n\t\t *  @param {Decibels|Object} [lowLevel] The gain applied to the lows.\n\t\t *  @param {Decibels} [midLevel] The gain applied to the mid.\n\t\t *  @param {Decibels} [highLevel] The gain applied to the high.\n\t\t *  @example\n\t\t * var eq = new Tone.EQ3(-10, 3, -20);\n\t\t */\n\t    Tone.EQ3 = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'low',\n\t            'mid',\n\t            'high'\n\t        ], Tone.EQ3.defaults);\n\t        /**\n\t\t\t *  the output node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  the multiband split\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multibandSplit = this.input = new Tone.MultibandSplit({\n\t            'lowFrequency': options.lowFrequency,\n\t            'highFrequency': options.highFrequency\n\t        });\n\t        /**\n\t\t\t *  The gain for the lower signals\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowGain = new Tone.Gain(options.low, Tone.Type.Decibels);\n\t        /**\n\t\t\t *  The gain for the mid signals\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midGain = new Tone.Gain(options.mid, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Tone.Gain}\n\t\t\t * @private\n\t\t\t */\n\t        this._highGain = new Tone.Gain(options.high, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The gain in decibels of the low part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.low = this._lowGain.gain;\n\t        /**\n\t\t\t * The gain in decibels of the mid part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.mid = this._midGain.gain;\n\t        /**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.high = this._highGain.gain;\n\t        /**\n\t\t\t *  The Q value for all of the filters. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = this._multibandSplit.Q;\n\t        /**\n\t\t\t *  The low/mid crossover frequency. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = this._multibandSplit.lowFrequency;\n\t        /**\n\t\t\t *  The mid/high crossover frequency. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = this._multibandSplit.highFrequency;\n\t        //the frequency bands\n\t        this._multibandSplit.low.chain(this._lowGain, this.output);\n\t        this._multibandSplit.mid.chain(this._midGain, this.output);\n\t        this._multibandSplit.high.chain(this._highGain, this.output);\n\t        this._readOnly([\n\t            'low',\n\t            'mid',\n\t            'high',\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.EQ3);\n\t    /**\n\t\t *  the default values\n\t\t */\n\t    Tone.EQ3.defaults = {\n\t        'low': 0,\n\t        'mid': 0,\n\t        'high': 0,\n\t        'lowFrequency': 400,\n\t        'highFrequency': 2500\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.EQ3} this\n\t\t */\n\t    Tone.EQ3.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'low',\n\t            'mid',\n\t            'high',\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ]);\n\t        this._multibandSplit.dispose();\n\t        this._multibandSplit = null;\n\t        this.lowFrequency = null;\n\t        this.highFrequency = null;\n\t        this._lowGain.dispose();\n\t        this._lowGain = null;\n\t        this._midGain.dispose();\n\t        this._midGain = null;\n\t        this._highGain.dispose();\n\t        this._highGain = null;\n\t        this.low = null;\n\t        this.mid = null;\n\t        this.high = null;\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.EQ3;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Performs a linear scaling on an input signal.\n\t\t *          Scales a NormalRange input to between\n\t\t *          outputMin and outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t *  @example\n\t\t * var scale = new Tone.Scale(50, 100);\n\t\t * var signal = new Tone.Signal(0.5).connect(scale);\n\t\t * //the output of scale equals 75\n\t\t */\n\t    Tone.Scale = function (outputMin, outputMax) {\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._outputMin = this.defaultArg(outputMin, 0);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._outputMax = this.defaultArg(outputMax, 1);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.input = new Tone.Multiply(1);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._add = this.output = new Tone.Add(0);\n\t        this._scale.connect(this._add);\n\t        this._setRange();\n\t    };\n\t    Tone.extend(Tone.Scale, Tone.SignalBase);\n\t    /**\n\t\t * The minimum output value. This number is output when \n\t\t * the value input value is 0. \n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.Scale.prototype, 'min', {\n\t        get: function () {\n\t            return this._outputMin;\n\t        },\n\t        set: function (min) {\n\t            this._outputMin = min;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value. This number is output when \n\t\t * the value input value is 1. \n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.Scale.prototype, 'max', {\n\t        get: function () {\n\t            return this._outputMax;\n\t        },\n\t        set: function (max) {\n\t            this._outputMax = max;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t    Tone.Scale.prototype._setRange = function () {\n\t        this._add.value = this._outputMin;\n\t        this._scale.value = this._outputMax - this._outputMin;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Scale} this\n\t\t */\n\t    Tone.Scale.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._add.dispose();\n\t        this._add = null;\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        return this;\n\t    };\n\t    return Tone.Scale;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class  Performs an exponential scaling on an input signal.\n\t\t *          Scales a NormalRange value [0,1] exponentially\n\t\t *          to the output range of outputMin to outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t *  @param {number} [exponent=2] The exponent which scales the incoming signal.\n\t\t *  @example\n\t\t * var scaleExp = new Tone.ScaleExp(0, 100, 2);\n\t\t * var signal = new Tone.Signal(0.5).connect(scaleExp);\n\t\t */\n\t    Tone.ScaleExp = function (outputMin, outputMax, exponent) {\n\t        /**\n\t\t\t *  scale the input to the output range\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.output = new Tone.Scale(outputMin, outputMax);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t        this._exp = this.input = new Tone.Pow(this.defaultArg(exponent, 2));\n\t        this._exp.connect(this._scale);\n\t    };\n\t    Tone.extend(Tone.ScaleExp, Tone.SignalBase);\n\t    /**\n\t\t * Instead of interpolating linearly between the <code>min</code> and \n\t\t * <code>max</code> values, setting the exponent will interpolate between\n\t\t * the two values with an exponential curve. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum output value. This number is output when \n\t\t * the value input value is 0. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'min', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value. This number is output when \n\t\t * the value input value is 1. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'max', {\n\t        get: function () {\n\t            return this._scale.max;\n\t        },\n\t        set: function (max) {\n\t            this._scale.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.ScaleExp} this\n\t\t */\n\t    Tone.ScaleExp.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._exp.dispose();\n\t        this._exp = null;\n\t        return this;\n\t    };\n\t    return Tone.ScaleExp;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  createDelay shim\n\t\t *  @private\n\t\t */\n\t    if (window.DelayNode && !AudioContext.prototype.createDelay) {\n\t        AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface). \n\t\t *  @extends {Tone}\n\t\t *  @param {Time=} delayTime The delay applied to the incoming signal.\n\t\t *  @param {Time=} maxDelay The maximum delay time. \n\t\t */\n\t    Tone.Delay = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'maxDelay'\n\t        ], Tone.Delay.defaults);\n\t        /**\n\t\t\t *  The native delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = this.input = this.output = this.context.createDelay(this.toSeconds(options.maxDelay));\n\t        /**\n\t\t\t *  The amount of time the incoming signal is\n\t\t\t *  delayed. \n\t\t\t *  @type {Tone.Param}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = new Tone.Param({\n\t            'param': this._delayNode.delayTime,\n\t            'units': Tone.Type.Time,\n\t            'value': options.delayTime\n\t        });\n\t        this._readOnly('delayTime');\n\t    };\n\t    Tone.extend(Tone.Delay);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Delay.defaults = {\n\t        'maxDelay': 1,\n\t        'delayTime': 0\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Delay}  this\n\t\t */\n\t    Tone.Delay.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._delayNode.disconnect();\n\t        this._delayNode = null;\n\t        this._writable('delayTime');\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.Delay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Comb filters are basic building blocks for physical modeling. Read more\n\t\t *         about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [delayTime] The delay time of the filter. \n\t\t *  @param {NormalRange=} resonance The amount of feedback the filter has. \n\t\t */\n\t    Tone.FeedbackCombFilter = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'resonance'\n\t        ], Tone.FeedbackCombFilter.defaults);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = this.input = this.output = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The amount of delay of the comb filter. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delay.delayTime;\n\t        /**\n\t\t\t *  the feedback node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of feedback of the delayed signal. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._feedback.gain;\n\t        this._delay.chain(this._feedback, this._delay);\n\t        this._readOnly([\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FeedbackCombFilter);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackCombFilter.defaults = {\n\t        'delayTime': 0.1,\n\t        'resonance': 0.5\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackCombFilter} this\n\t\t */\n\t    Tone.FeedbackCombFilter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this.delayTime = null;\n\t        this._feedback.dispose();\n\t        this._feedback = null;\n\t        this.resonance = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackCombFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Follower is a  crude envelope follower which will follow \n\t\t *          the amplitude of an incoming signal. \n\t\t *          Take care with small (< 0.02) attack or decay values \n\t\t *          as follower has some ripple which is exaggerated\n\t\t *          at these values. Read more about envelope followers (also known \n\t\t *          as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Time|Object} [attack] The rate at which the follower rises.\n\t\t *  @param {Time=} release The rate at which the folower falls. \n\t\t *  @example\n\t\t * var follower = new Tone.Follower(0.2, 0.4);\n\t\t */\n\t    Tone.Follower = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'release'\n\t        ], Tone.Follower.defaults);\n\t        /**\n\t\t\t *  @type {Tone.Abs}\n\t\t\t *  @private\n\t\t\t */\n\t        this._abs = new Tone.Abs();\n\t        /**\n\t\t\t *  the lowpass filter which smooths the input\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filter = this.context.createBiquadFilter();\n\t        this._filter.type = 'lowpass';\n\t        this._filter.frequency.value = 0;\n\t        this._filter.Q.value = -100;\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._frequencyValues = new Tone.WaveShaper();\n\t        /**\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sub = new Tone.Subtract();\n\t        /**\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = new Tone.Delay(this.blockTime);\n\t        /**\n\t\t\t *  this keeps it far from 0, even for very small differences\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mult = new Tone.Multiply(10000);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._attack = options.attack;\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._release = options.release;\n\t        //the smoothed signal to get the values\n\t        this.input.chain(this._abs, this._filter, this.output);\n\t        //the difference path\n\t        this._abs.connect(this._sub, 0, 1);\n\t        this._filter.chain(this._delay, this._sub);\n\t        //threshold the difference and use the thresh to set the frequency\n\t        this._sub.chain(this._mult, this._frequencyValues, this._filter.frequency);\n\t        //set the attack and release values in the table\n\t        this._setAttackRelease(this._attack, this._release);\n\t    };\n\t    Tone.extend(Tone.Follower);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Follower.defaults = {\n\t        'attack': 0.05,\n\t        'release': 0.5\n\t    };\n\t    /**\n\t\t *  sets the attack and release times in the wave shaper\n\t\t *  @param   {Time} attack  \n\t\t *  @param   {Time} release \n\t\t *  @private\n\t\t */\n\t    Tone.Follower.prototype._setAttackRelease = function (attack, release) {\n\t        var minTime = this.blockTime;\n\t        attack = Tone.Time(attack).toFrequency();\n\t        release = Tone.Time(release).toFrequency();\n\t        attack = Math.max(attack, minTime);\n\t        release = Math.max(release, minTime);\n\t        this._frequencyValues.setMap(function (val) {\n\t            if (val <= 0) {\n\t                return attack;\n\t            } else {\n\t                return release;\n\t            }\n\t        });\n\t    };\n\t    /**\n\t\t * The attack time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Time}\n\t\t * @name attack\n\t\t */\n\t    Object.defineProperty(Tone.Follower.prototype, 'attack', {\n\t        get: function () {\n\t            return this._attack;\n\t        },\n\t        set: function (attack) {\n\t            this._attack = attack;\n\t            this._setAttackRelease(this._attack, this._release);\n\t        }\n\t    });\n\t    /**\n\t\t * The release time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Time}\n\t\t * @name release\n\t\t */\n\t    Object.defineProperty(Tone.Follower.prototype, 'release', {\n\t        get: function () {\n\t            return this._release;\n\t        },\n\t        set: function (release) {\n\t            this._release = release;\n\t            this._setAttackRelease(this._attack, this._release);\n\t        }\n\t    });\n\t    /**\n\t\t *  Borrows the connect method from Signal so that the output can be used\n\t\t *  as a Tone.Signal control signal.\n\t\t *  @function\n\t\t */\n\t    Tone.Follower.prototype.connect = Tone.Signal.prototype.connect;\n\t    /**\n\t\t *  dispose\n\t\t *  @returns {Tone.Follower} this\n\t\t */\n\t    Tone.Follower.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._filter.disconnect();\n\t        this._filter = null;\n\t        this._frequencyValues.disconnect();\n\t        this._frequencyValues = null;\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this._sub.disconnect();\n\t        this._sub = null;\n\t        this._abs.dispose();\n\t        this._abs = null;\n\t        this._mult.dispose();\n\t        this._mult = null;\n\t        this._curve = null;\n\t        return this;\n\t    };\n\t    return Tone.Follower;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.ScaledEnvelop is an envelope which can be scaled \n\t\t *         to any range. It's useful for applying an envelope \n\t\t *         to a frequency or any other non-NormalRange signal \n\t\t *         parameter. \n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var scaledEnv = new Tone.ScaledEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"min\" : 200,\n\t\t *  \t\"max\" : 2000\n\t\t *  });\n\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t */\n\t    Tone.ScaledEnvelope = function () {\n\t        //get all of the defaults\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope.defaults);\n\t        Tone.Envelope.call(this, options);\n\t        options = this.defaultArg(options, Tone.ScaledEnvelope.defaults);\n\t        /** \n\t\t\t *  scale the incoming signal by an exponent\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t        this._exp = this.output = new Tone.Pow(options.exponent);\n\t        /**\n\t\t\t *  scale the signal to the desired range\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.output = new Tone.Scale(options.min, options.max);\n\t        this._sig.chain(this._exp, this._scale);\n\t    };\n\t    Tone.extend(Tone.ScaledEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.ScaledEnvelope.defaults = {\n\t        'min': 0,\n\t        'max': 1,\n\t        'exponent': 1\n\t    };\n\t    /**\n\t\t * The envelope's min output value. This is the value which it\n\t\t * starts at. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'min', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's max output value. In other words, the value\n\t\t * at the peak of the attack portion of the envelope. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'max', {\n\t        get: function () {\n\t            return this._scale.max;\n\t        },\n\t        set: function (max) {\n\t            this._scale.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's exponent value. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.ScaledEnvelope} this\n\t\t */\n\t    Tone.ScaledEnvelope.prototype.dispose = function () {\n\t        Tone.Envelope.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._exp.dispose();\n\t        this._exp = null;\n\t        return this;\n\t    };\n\t    return Tone.ScaledEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`\n\t\t *         it's got a `baseFrequency` and `octaves` parameter. \n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var env = new Tone.FrequencyEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"baseFrequency\" : \"C2\",\n\t\t *  \t\"octaves\" : 4\n\t\t *  });\n\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t */\n\t    Tone.FrequencyEnvelope = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope.defaults);\n\t        Tone.ScaledEnvelope.call(this, options);\n\t        options = this.defaultArg(options, Tone.FrequencyEnvelope.defaults);\n\t        /**\n\t\t\t *  Stores the octave value\n\t\t\t *  @type {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        //setup\n\t        this.baseFrequency = options.baseFrequency;\n\t        this.octaves = options.octaves;\n\t    };\n\t    Tone.extend(Tone.FrequencyEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.FrequencyEnvelope.defaults = {\n\t        'baseFrequency': 200,\n\t        'octaves': 4,\n\t        'exponent': 2\n\t    };\n\t    /**\n\t\t * The envelope's mininum output value. This is the value which it\n\t\t * starts at. \n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = this.toFrequency(min);\n\t            //also update the octaves\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t * The number of octaves above the baseFrequency that the\n\t\t * envelope will scale to.\n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            this._scale.max = this.baseFrequency * Math.pow(2, octaves);\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's exponent value. \n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FrequencyEnvelope} this\n\t\t */\n\t    Tone.FrequencyEnvelope.prototype.dispose = function () {\n\t        Tone.ScaledEnvelope.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.FrequencyEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Gate only passes a signal through when the incoming \n\t\t *          signal exceeds a specified threshold. To do this, Gate uses \n\t\t *          a Tone.Follower to follow the amplitude of the incoming signal. \n\t\t *          A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Decibels|Object} [threshold] The threshold above which the gate will open. \n\t\t *  @param {Time=} attack The follower's attack time\n\t\t *  @param {Time=} release The follower's release time\n\t\t *  @example\n\t\t * var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();\n\t\t * var mic = new Tone.UserMedia().connect(gate);\n\t\t * //the gate will only pass through the incoming \n\t\t * //signal when it's louder than -30db\n\t\t */\n\t    Tone.Gate = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'threshold',\n\t            'attack',\n\t            'release'\n\t        ], Tone.Gate.defaults);\n\t        /**\n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t        this._follower = new Tone.Follower(options.attack, options.release);\n\t        /**\n\t\t\t *  @type {Tone.GreaterThan}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gt = new Tone.GreaterThan(this.dbToGain(options.threshold));\n\t        //the connections\n\t        this.input.connect(this.output);\n\t        //the control signal\n\t        this.input.chain(this._gt, this._follower, this.output.gain);\n\t    };\n\t    Tone.extend(Tone.Gate);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Gate.defaults = {\n\t        'attack': 0.1,\n\t        'release': 0.1,\n\t        'threshold': -40\n\t    };\n\t    /**\n\t\t * The threshold of the gate in decibels\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Decibels}\n\t\t * @name threshold\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'threshold', {\n\t        get: function () {\n\t            return this.gainToDb(this._gt.value);\n\t        },\n\t        set: function (thresh) {\n\t            this._gt.value = this.dbToGain(thresh);\n\t        }\n\t    });\n\t    /**\n\t\t * The attack speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Time}\n\t\t * @name attack\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'attack', {\n\t        get: function () {\n\t            return this._follower.attack;\n\t        },\n\t        set: function (attackTime) {\n\t            this._follower.attack = attackTime;\n\t        }\n\t    });\n\t    /**\n\t\t * The release speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Time}\n\t\t * @name release\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'release', {\n\t        get: function () {\n\t            return this._follower.release;\n\t        },\n\t        set: function (releaseTime) {\n\t            this._follower.release = releaseTime;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Gate} this\n\t\t */\n\t    Tone.Gate.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._follower.dispose();\n\t        this._gt.dispose();\n\t        this._follower = null;\n\t        this._gt = null;\n\t        return this;\n\t    };\n\t    return Tone.Gate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A Timeline State. Provides the methods: <code>setStateAtTime(\"state\", time)</code>\n\t\t *          and <code>getValueAtTime(time)</code>.\n\t\t *\n\t\t *  @extends {Tone.Timeline}\n\t\t *  @param {String} initial The initial state of the TimelineState. \n\t\t *                          Defaults to <code>undefined</code>\n\t\t */\n\t    Tone.TimelineState = function (initial) {\n\t        Tone.Timeline.call(this);\n\t        /**\n\t\t\t *  The initial state\n\t\t\t *  @private\n\t\t\t *  @type {String}\n\t\t\t */\n\t        this._initial = initial;\n\t    };\n\t    Tone.extend(Tone.TimelineState, Tone.Timeline);\n\t    /**\n\t\t *  Returns the scheduled state scheduled before or at\n\t\t *  the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t */\n\t    Tone.TimelineState.prototype.getValueAtTime = function (time) {\n\t        var event = this.get(time);\n\t        if (event !== null) {\n\t            return event.state;\n\t        } else {\n\t            return this._initial;\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the scheduled state scheduled before or at\n\t\t *  the given time.\n\t\t *  @param  {String}  state The name of the state to set.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t */\n\t    Tone.TimelineState.prototype.setStateAtTime = function (state, time) {\n\t        this.add({\n\t            'state': state,\n\t            'time': time\n\t        });\n\t    };\n\t    return Tone.TimelineState;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A sample accurate clock which provides a callback at the given rate. \n\t\t *          While the callback is not sample-accurate (it is still susceptible to\n\t\t *          loose JS timing), the time passed in as the argument to the callback\n\t\t *          is precise. For most applications, it is better to use Tone.Transport\n\t\t *          instead of the Clock by itself since you can synchronize multiple callbacks.\n\t\t *\n\t\t * \t@constructor\n\t\t *  @extends {Tone.Emitter}\n\t\t * \t@param {function} callback The callback to be invoked with the time of the audio event\n\t\t * \t@param {Frequency} frequency The rate of the callback\n\t\t * \t@example\n\t\t * //the callback will be invoked approximately once a second\n\t\t * //and will print the time exactly once a second apart.\n\t\t * var clock = new Tone.Clock(function(time){\n\t\t * \tconsole.log(time);\n\t\t * }, 1);\n\t\t */\n\t    Tone.Clock = function () {\n\t        Tone.Emitter.call(this);\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'frequency'\n\t        ], Tone.Clock.defaults);\n\t        /**\n\t\t\t *  The callback function to invoke at the scheduled tick.\n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  The next time the callback is scheduled.\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._nextTick = 0;\n\t        /**\n\t\t\t *  The last state of the clock.\n\t\t\t *  @type  {State}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lastState = Tone.State.Stopped;\n\t        /**\n\t\t\t *  The rate the callback function should be invoked. \n\t\t\t *  @type  {BPM}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.TimelineSignal(options.frequency, Tone.Type.Frequency);\n\t        this._readOnly('frequency');\n\t        /**\n\t\t\t *  The number of times the callback was invoked. Starts counting at 0\n\t\t\t *  and increments after the callback was invoked. \n\t\t\t *  @type {Ticks}\n\t\t\t *  @readOnly\n\t\t\t */\n\t        this.ticks = 0;\n\t        /**\n\t\t\t *  The state timeline\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  The loop function bound to its context. \n\t\t\t *  This is necessary to remove the event in the end.\n\t\t\t *  @type {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._boundLoop = this._loop.bind(this);\n\t        //bind a callback to the worker thread\n\t        this.context.on('tick', this._boundLoop);\n\t    };\n\t    Tone.extend(Tone.Clock, Tone.Emitter);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Clock.defaults = {\n\t        'callback': Tone.noOp,\n\t        'frequency': 1,\n\t        'lookAhead': 'auto'\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Clock#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Clock.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the clock at the given time. Optionally pass in an offset\n\t\t *  of where to start the tick counter from.\n\t\t *  @param  {Time}  time    The time the clock should start\n\t\t *  @param  {Ticks=}  offset  Where the tick counter starts counting from.\n\t\t *  @return  {Tone.Clock}  this\n\t\t */\n\t    Tone.Clock.prototype.start = function (time, offset) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) !== Tone.State.Started) {\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': time,\n\t                'offset': offset\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.Clock} this\n\t\t *  @example\n\t\t * clock.stop();\n\t\t */\n\t    Tone.Clock.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the clock. Pausing does not reset the tick counter.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.Clock} this\n\t\t */\n\t    Tone.Clock.prototype.pause = function (time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Paused, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The scheduling loop.\n\t\t *  @param  {Number}  time  The current page time starting from 0\n\t\t *                          when the page was loaded.\n\t\t *  @private\n\t\t */\n\t    Tone.Clock.prototype._loop = function () {\n\t        //get the frequency value to compute the value of the next loop\n\t        var now = this.now();\n\t        //if it's started\n\t        var lookAhead = this.context.lookAhead;\n\t        var updateInterval = this.context.updateInterval;\n\t        var lagCompensation = this.context.lag * 2;\n\t        var loopInterval = now + lookAhead + updateInterval + lagCompensation;\n\t        while (loopInterval > this._nextTick && this._state) {\n\t            var currentState = this._state.getValueAtTime(this._nextTick);\n\t            if (currentState !== this._lastState) {\n\t                this._lastState = currentState;\n\t                var event = this._state.get(this._nextTick);\n\t                // emit an event\n\t                if (currentState === Tone.State.Started) {\n\t                    //correct the time\n\t                    this._nextTick = event.time;\n\t                    if (!this.isUndef(event.offset)) {\n\t                        this.ticks = event.offset;\n\t                    }\n\t                    this.emit('start', event.time, this.ticks);\n\t                } else if (currentState === Tone.State.Stopped) {\n\t                    this.ticks = 0;\n\t                    this.emit('stop', event.time);\n\t                } else if (currentState === Tone.State.Paused) {\n\t                    this.emit('pause', event.time);\n\t                }\n\t            }\n\t            var tickTime = this._nextTick;\n\t            if (this.frequency) {\n\t                this._nextTick += 1 / this.frequency.getValueAtTime(this._nextTick);\n\t                if (currentState === Tone.State.Started) {\n\t                    this.callback(tickTime);\n\t                    this.ticks++;\n\t                }\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the scheduled state at the given time.\n\t\t *  @param  {Time}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t *  @example\n\t\t * clock.start(\"+0.1\");\n\t\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t\t */\n\t    Tone.Clock.prototype.getStateAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        return this._state.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Clock} this\n\t\t */\n\t    Tone.Clock.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this.context.off('tick', this._boundLoop);\n\t        this._writable('frequency');\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._boundLoop = null;\n\t        this._nextTick = Infinity;\n\t        this.callback = null;\n\t        this._state.dispose();\n\t        this._state = null;\n\t    };\n\t    return Tone.Clock;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Similar to Tone.Timeline, but all events represent\n\t\t *         intervals with both \"time\" and \"duration\" times. The \n\t\t *         events are placed in a tree structure optimized\n\t\t *         for querying an intersection point with the timeline\n\t\t *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n\t\t *         to represent the data.\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.IntervalTimeline = function () {\n\t        /**\n\t\t\t *  The root node of the inteval tree\n\t\t\t *  @type  {IntervalNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._root = null;\n\t        /**\n\t\t\t *  Keep track of the length of the timeline.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._length = 0;\n\t    };\n\t    Tone.extend(Tone.IntervalTimeline);\n\t    /**\n\t\t *  The event to add to the timeline. All events must \n\t\t *  have a time and duration value\n\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.add = function (event) {\n\t        if (this.isUndef(event.time) || this.isUndef(event.duration)) {\n\t            throw new Error('Tone.IntervalTimeline: events must have time and duration parameters');\n\t        }\n\t        var node = new IntervalNode(event.time, event.time + event.duration, event);\n\t        if (this._root === null) {\n\t            this._root = node;\n\t        } else {\n\t            this._root.insert(node);\n\t        }\n\t        this._length++;\n\t        // Restructure tree to be balanced\n\t        while (node !== null) {\n\t            node.updateHeight();\n\t            node.updateMax();\n\t            this._rebalance(node);\n\t            node = node.parent;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove an event from the timeline.\n\t\t *  @param  {Object}  event  The event to remove from the timeline\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.remove = function (event) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(event.time, results);\n\t            for (var i = 0; i < results.length; i++) {\n\t                var node = results[i];\n\t                if (node.event === event) {\n\t                    this._removeNode(node);\n\t                    this._length--;\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The number of items in the timeline.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.IntervalTimeline#\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.IntervalTimeline.prototype, 'length', {\n\t        get: function () {\n\t            return this._length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Remove events whose time time is after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.cancel = function (after) {\n\t        this.forEachAfter(after, function (event) {\n\t            this.remove(event);\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the root node as the given node\n\t\t *  @param {IntervalNode} node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._setRoot = function (node) {\n\t        this._root = node;\n\t        if (this._root !== null) {\n\t            this._root.parent = null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Replace the references to the node in the node's parent\n\t\t *  with the replacement node.\n\t\t *  @param  {IntervalNode}  node        \n\t\t *  @param  {IntervalNode}  replacement \n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._replaceNodeInParent = function (node, replacement) {\n\t        if (node.parent !== null) {\n\t            if (node.isLeftChild()) {\n\t                node.parent.left = replacement;\n\t            } else {\n\t                node.parent.right = replacement;\n\t            }\n\t            this._rebalance(node.parent);\n\t        } else {\n\t            this._setRoot(replacement);\n\t        }\n\t    };\n\t    /**\n\t\t *  Remove the node from the tree and replace it with \n\t\t *  a successor which follows the schema.\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._removeNode = function (node) {\n\t        if (node.left === null && node.right === null) {\n\t            this._replaceNodeInParent(node, null);\n\t        } else if (node.right === null) {\n\t            this._replaceNodeInParent(node, node.left);\n\t        } else if (node.left === null) {\n\t            this._replaceNodeInParent(node, node.right);\n\t        } else {\n\t            var balance = node.getBalance();\n\t            var replacement, temp;\n\t            if (balance > 0) {\n\t                if (node.left.right === null) {\n\t                    replacement = node.left;\n\t                    replacement.right = node.right;\n\t                    temp = replacement;\n\t                } else {\n\t                    replacement = node.left.right;\n\t                    while (replacement.right !== null) {\n\t                        replacement = replacement.right;\n\t                    }\n\t                    replacement.parent.right = replacement.left;\n\t                    temp = replacement.parent;\n\t                    replacement.left = node.left;\n\t                    replacement.right = node.right;\n\t                }\n\t            } else {\n\t                if (node.right.left === null) {\n\t                    replacement = node.right;\n\t                    replacement.left = node.left;\n\t                    temp = replacement;\n\t                } else {\n\t                    replacement = node.right.left;\n\t                    while (replacement.left !== null) {\n\t                        replacement = replacement.left;\n\t                    }\n\t                    replacement.parent = replacement.parent;\n\t                    replacement.parent.left = replacement.right;\n\t                    temp = replacement.parent;\n\t                    replacement.left = node.left;\n\t                    replacement.right = node.right;\n\t                }\n\t            }\n\t            if (node.parent !== null) {\n\t                if (node.isLeftChild()) {\n\t                    node.parent.left = replacement;\n\t                } else {\n\t                    node.parent.right = replacement;\n\t                }\n\t            } else {\n\t                this._setRoot(replacement);\n\t            }\n\t            // this._replaceNodeInParent(node, replacement);\n\t            this._rebalance(temp);\n\t        }\n\t        node.dispose();\n\t    };\n\t    /**\n\t\t *  Rotate the tree to the left\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rotateLeft = function (node) {\n\t        var parent = node.parent;\n\t        var isLeftChild = node.isLeftChild();\n\t        // Make node.right the new root of this sub tree (instead of node)\n\t        var pivotNode = node.right;\n\t        node.right = pivotNode.left;\n\t        pivotNode.left = node;\n\t        if (parent !== null) {\n\t            if (isLeftChild) {\n\t                parent.left = pivotNode;\n\t            } else {\n\t                parent.right = pivotNode;\n\t            }\n\t        } else {\n\t            this._setRoot(pivotNode);\n\t        }\n\t    };\n\t    /**\n\t\t *  Rotate the tree to the right\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rotateRight = function (node) {\n\t        var parent = node.parent;\n\t        var isLeftChild = node.isLeftChild();\n\t        // Make node.left the new root of this sub tree (instead of node)\n\t        var pivotNode = node.left;\n\t        node.left = pivotNode.right;\n\t        pivotNode.right = node;\n\t        if (parent !== null) {\n\t            if (isLeftChild) {\n\t                parent.left = pivotNode;\n\t            } else {\n\t                parent.right = pivotNode;\n\t            }\n\t        } else {\n\t            this._setRoot(pivotNode);\n\t        }\n\t    };\n\t    /**\n\t\t *  Balance the BST\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rebalance = function (node) {\n\t        var balance = node.getBalance();\n\t        if (balance > 1) {\n\t            if (node.left.getBalance() < 0) {\n\t                this._rotateLeft(node.left);\n\t            } else {\n\t                this._rotateRight(node);\n\t            }\n\t        } else if (balance < -1) {\n\t            if (node.right.getBalance() > 0) {\n\t                this._rotateRight(node.right);\n\t            } else {\n\t                this._rotateLeft(node);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Get an event whose time and duration span the give time. Will\n\t\t *  return the match whose \"time\" value is closest to the given time.\n\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t *  @return  {Object}  The event which spans the desired time\n\t\t */\n\t    Tone.IntervalTimeline.prototype.get = function (time) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(time, results);\n\t            if (results.length > 0) {\n\t                var max = results[0];\n\t                for (var i = 1; i < results.length; i++) {\n\t                    if (results[i].low > max.low) {\n\t                        max = results[i];\n\t                    }\n\t                }\n\t                return max.event;\n\t            }\n\t        }\n\t        return null;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the timeline.\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEach = function (callback) {\n\t        if (this._root !== null) {\n\t            var allNodes = [];\n\t            if (this._root !== null) {\n\t                this._root.traverse(function (node) {\n\t                    allNodes.push(node);\n\t                });\n\t            }\n\t            for (var i = 0; i < allNodes.length; i++) {\n\t                var ev = allNodes[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array in which the given time\n\t\t *  overlaps with the time and duration time of the event.\n\t\t *  @param  {Number}  time The time to check if items are overlapping\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEachAtTime = function (time, callback) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(time, results);\n\t            for (var i = results.length - 1; i >= 0; i--) {\n\t                var ev = results[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array in which the time is greater\n\t\t *  than the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEachAfter = function (time, callback) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.searchAfter(time, results);\n\t            for (var i = results.length - 1; i >= 0; i--) {\n\t                var ev = results[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.dispose = function () {\n\t        var allNodes = [];\n\t        if (this._root !== null) {\n\t            this._root.traverse(function (node) {\n\t                allNodes.push(node);\n\t            });\n\t        }\n\t        for (var i = 0; i < allNodes.length; i++) {\n\t            allNodes[i].dispose();\n\t        }\n\t        allNodes = null;\n\t        this._root = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tINTERVAL NODE HELPER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Represents a node in the binary search tree, with the addition\n\t\t *  of a \"high\" value which keeps track of the highest value of\n\t\t *  its children. \n\t\t *  References: \n\t\t *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n\t\t *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n\t\t *  @param {Number} low\n\t\t *  @param {Number} high\n\t\t *  @private\n\t\t */\n\t    var IntervalNode = function (low, high, event) {\n\t        //the event container\n\t        this.event = event;\n\t        //the low value\n\t        this.low = low;\n\t        //the high value\n\t        this.high = high;\n\t        //the high value for this and all child nodes\n\t        this.max = this.high;\n\t        //the nodes to the left\n\t        this._left = null;\n\t        //the nodes to the right\n\t        this._right = null;\n\t        //the parent node\n\t        this.parent = null;\n\t        //the number of child nodes\n\t        this.height = 0;\n\t    };\n\t    /** \n\t\t *  Insert a node into the correct spot in the tree\n\t\t *  @param  {IntervalNode}  node\n\t\t */\n\t    IntervalNode.prototype.insert = function (node) {\n\t        if (node.low <= this.low) {\n\t            if (this.left === null) {\n\t                this.left = node;\n\t            } else {\n\t                this.left.insert(node);\n\t            }\n\t        } else {\n\t            if (this.right === null) {\n\t                this.right = node;\n\t            } else {\n\t                this.right.insert(node);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Search the tree for nodes which overlap \n\t\t *  with the given point\n\t\t *  @param  {Number}  point  The point to query\n\t\t *  @param  {Array}  results  The array to put the results\n\t\t */\n\t    IntervalNode.prototype.search = function (point, results) {\n\t        // If p is to the right of the rightmost point of any interval\n\t        // in this node and all children, there won't be any matches.\n\t        if (point > this.max) {\n\t            return;\n\t        }\n\t        // Search left children\n\t        if (this.left !== null) {\n\t            this.left.search(point, results);\n\t        }\n\t        // Check this node\n\t        if (this.low <= point && this.high > point) {\n\t            results.push(this);\n\t        }\n\t        // If p is to the left of the time of this interval,\n\t        // then it can't be in any child to the right.\n\t        if (this.low > point) {\n\t            return;\n\t        }\n\t        // Search right children\n\t        if (this.right !== null) {\n\t            this.right.search(point, results);\n\t        }\n\t    };\n\t    /**\n\t\t *  Search the tree for nodes which are less \n\t\t *  than the given point\n\t\t *  @param  {Number}  point  The point to query\n\t\t *  @param  {Array}  results  The array to put the results\n\t\t */\n\t    IntervalNode.prototype.searchAfter = function (point, results) {\n\t        // Check this node\n\t        if (this.low >= point) {\n\t            results.push(this);\n\t            if (this.left !== null) {\n\t                this.left.searchAfter(point, results);\n\t            }\n\t        }\n\t        // search the right side\n\t        if (this.right !== null) {\n\t            this.right.searchAfter(point, results);\n\t        }\n\t    };\n\t    /**\n\t\t *  Invoke the callback on this element and both it's branches\n\t\t *  @param  {Function}  callback\n\t\t */\n\t    IntervalNode.prototype.traverse = function (callback) {\n\t        callback(this);\n\t        if (this.left !== null) {\n\t            this.left.traverse(callback);\n\t        }\n\t        if (this.right !== null) {\n\t            this.right.traverse(callback);\n\t        }\n\t    };\n\t    /**\n\t\t *  Update the height of the node\n\t\t */\n\t    IntervalNode.prototype.updateHeight = function () {\n\t        if (this.left !== null && this.right !== null) {\n\t            this.height = Math.max(this.left.height, this.right.height) + 1;\n\t        } else if (this.right !== null) {\n\t            this.height = this.right.height + 1;\n\t        } else if (this.left !== null) {\n\t            this.height = this.left.height + 1;\n\t        } else {\n\t            this.height = 0;\n\t        }\n\t    };\n\t    /**\n\t\t *  Update the height of the node\n\t\t */\n\t    IntervalNode.prototype.updateMax = function () {\n\t        this.max = this.high;\n\t        if (this.left !== null) {\n\t            this.max = Math.max(this.max, this.left.max);\n\t        }\n\t        if (this.right !== null) {\n\t            this.max = Math.max(this.max, this.right.max);\n\t        }\n\t    };\n\t    /**\n\t\t *  The balance is how the leafs are distributed on the node\n\t\t *  @return  {Number}  Negative numbers are balanced to the right\n\t\t */\n\t    IntervalNode.prototype.getBalance = function () {\n\t        var balance = 0;\n\t        if (this.left !== null && this.right !== null) {\n\t            balance = this.left.height - this.right.height;\n\t        } else if (this.left !== null) {\n\t            balance = this.left.height + 1;\n\t        } else if (this.right !== null) {\n\t            balance = -(this.right.height + 1);\n\t        }\n\t        return balance;\n\t    };\n\t    /**\n\t\t *  @returns {Boolean} true if this node is the left child\n\t\t *  of its parent\n\t\t */\n\t    IntervalNode.prototype.isLeftChild = function () {\n\t        return this.parent !== null && this.parent.left === this;\n\t    };\n\t    /**\n\t\t *  get/set the left node\n\t\t *  @type {IntervalNode}\n\t\t */\n\t    Object.defineProperty(IntervalNode.prototype, 'left', {\n\t        get: function () {\n\t            return this._left;\n\t        },\n\t        set: function (node) {\n\t            this._left = node;\n\t            if (node !== null) {\n\t                node.parent = this;\n\t            }\n\t            this.updateHeight();\n\t            this.updateMax();\n\t        }\n\t    });\n\t    /**\n\t\t *  get/set the right node\n\t\t *  @type {IntervalNode}\n\t\t */\n\t    Object.defineProperty(IntervalNode.prototype, 'right', {\n\t        get: function () {\n\t            return this._right;\n\t        },\n\t        set: function (node) {\n\t            this._right = node;\n\t            if (node !== null) {\n\t                node.parent = this;\n\t            }\n\t            this.updateHeight();\n\t            this.updateMax();\n\t        }\n\t    });\n\t    /**\n\t\t *  null out references.\n\t\t */\n\t    IntervalNode.prototype.dispose = function () {\n\t        this.parent = null;\n\t        this._left = null;\n\t        this._right = null;\n\t        this.event = null;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEND INTERVAL NODE HELPER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    return Tone.IntervalTimeline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Transport for timing musical events.\n\t\t *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n\t\t *          Tone.Transport timing events pass in the exact time of the scheduled event\n\t\t *          in the argument of the callback function. Pass that time value to the object\n\t\t *          you're scheduling. <br><br>\n\t\t *          A single transport is created for you when the library is initialized. \n\t\t *          <br><br>\n\t\t *          The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n\t\t *          called with the time of that event as the argument. \n\t\t *\n\t\t *  @extends {Tone.Emitter}\n\t\t *  @singleton\n\t\t *  @example\n\t\t * //repeated event every 8th note\n\t\t * Tone.Transport.scheduleRepeat(function(time){\n\t\t * \t//do something with the time\n\t\t * }, \"8n\");\n\t\t *  @example\n\t\t * //schedule an event on the 16th measure\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \t//do something with the time\n\t\t * }, \"16:0:0\");\n\t\t */\n\t    Tone.Transport = function () {\n\t        Tone.Emitter.call(this);\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tLOOPING\n\t        //////////////////////////////////////////////////////////////////////\n\t        /** \n\t\t\t * \tIf the transport loops or not.\n\t\t\t *  @type {boolean}\n\t\t\t */\n\t        this.loop = false;\n\t        /** \n\t\t\t * \tThe loop start position in ticks\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = 0;\n\t        /** \n\t\t\t * \tThe loop end position in ticks\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = 0;\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tCLOCK/TEMPO\n\t        //////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  Pulses per quarter is the number of ticks per quarter note.\n\t\t\t *  @private\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this._ppq = TransportConstructor.defaults.PPQ;\n\t        /**\n\t\t\t *  watches the main oscillator for timing ticks\n\t\t\t *  initially starts at 120bpm\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Clock}\n\t\t\t */\n\t        this._clock = new Tone.Clock({\n\t            'callback': this._processTick.bind(this),\n\t            'frequency': 0\n\t        });\n\t        this._bindClockEvents();\n\t        /**\n\t\t\t *  The Beats Per Minute of the Transport. \n\t\t\t *  @type {BPM}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * Tone.Transport.bpm.value = 80;\n\t\t\t * //ramp the bpm to 120 over 10 seconds\n\t\t\t * Tone.Transport.bpm.rampTo(120, 10);\n\t\t\t */\n\t        this.bpm = this._clock.frequency;\n\t        this.bpm._toUnits = this._toUnits.bind(this);\n\t        this.bpm._fromUnits = this._fromUnits.bind(this);\n\t        this.bpm.units = Tone.Type.BPM;\n\t        this.bpm.value = TransportConstructor.defaults.bpm;\n\t        this._readOnly('bpm');\n\t        /**\n\t\t\t *  The time signature, or more accurately the numerator\n\t\t\t *  of the time signature over a denominator of 4. \n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeSignature = TransportConstructor.defaults.timeSignature;\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tTIMELINE EVENTS\n\t        //////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  All the events in an object to keep track by ID\n\t\t\t *  @type {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scheduledEvents = {};\n\t        /**\n\t\t\t *  The event ID counter\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._eventID = 0;\n\t        /**\n\t\t\t * \tThe scheduled events.\n\t\t\t *  @type {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeline = new Tone.Timeline();\n\t        /**\n\t\t\t *  Repeated events\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._repeatedEvents = new Tone.IntervalTimeline();\n\t        /**\n\t\t\t *  Events that occur once\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._onceEvents = new Tone.Timeline();\n\t        /** \n\t\t\t *  All of the synced Signals\n\t\t\t *  @private \n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this._syncedSignals = [];\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tSWING\n\t        //////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  The subdivision of the swing\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._swingTicks = TransportConstructor.defaults.PPQ / 2;\n\t        //8n\n\t        /**\n\t\t\t *  The swing amount\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._swingAmount = 0;\n\t    };\n\t    Tone.extend(Tone.Transport, Tone.Emitter);\n\t    /**\n\t\t *  the defaults\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Transport.defaults = {\n\t        'bpm': 120,\n\t        'swing': 0,\n\t        'swingSubdivision': '8n',\n\t        'timeSignature': 4,\n\t        'loopStart': 0,\n\t        'loopEnd': '4m',\n\t        'PPQ': 192\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tTICKS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  called on every tick\n\t\t *  @param   {number} tickTime clock relative tick time\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._processTick = function (tickTime) {\n\t        var ticks = this._clock.ticks;\n\t        //handle swing\n\t        if (this._swingAmount > 0 && ticks % this._ppq !== 0 && //not on a downbeat\n\t            ticks % (this._swingTicks * 2) !== 0) {\n\t            //add some swing\n\t            var progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);\n\t            var amount = Math.sin(progress * Math.PI) * this._swingAmount;\n\t            tickTime += Tone.Time(this._swingTicks * 2 / 3, 'i') * amount;\n\t        }\n\t        //do the loop test\n\t        if (this.loop) {\n\t            if (ticks === this._loopEnd) {\n\t                this.emit('loopEnd', tickTime);\n\t                this._clock.ticks = this._loopStart;\n\t                ticks = this._loopStart;\n\t                this.emit('loopStart', tickTime, this.seconds);\n\t                this.emit('loop', tickTime);\n\t            }\n\t        }\n\t        //process the single occurrence events\n\t        this._onceEvents.forEachBefore(ticks, function (event) {\n\t            event.callback(tickTime);\n\t            //remove the event\n\t            delete this._scheduledEvents[event.id.toString()];\n\t        }.bind(this));\n\t        //and clear the single occurrence timeline\n\t        this._onceEvents.cancelBefore(ticks);\n\t        //fire the next tick events if their time has come\n\t        this._timeline.forEachAtTime(ticks, function (event) {\n\t            event.callback(tickTime);\n\t        });\n\t        //process the repeated events\n\t        this._repeatedEvents.forEachAtTime(ticks, function (event) {\n\t            if ((ticks - event.time) % event.interval === 0) {\n\t                event.callback(tickTime);\n\t            }\n\t        });\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSCHEDULABLE EVENTS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Schedule an event along the timeline.\n\t\t *  @param {Function} callback The callback to be invoked at the time.\n\t\t *  @param {TransportTime}  time The time to invoke the callback at.\n\t\t *  @return {Number} The id of the event which can be used for canceling the event. \n\t\t *  @example\n\t\t * //trigger the callback when the Transport reaches the desired time\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \tenvelope.triggerAttack(time);\n\t\t * }, \"128i\");\n\t\t */\n\t    Tone.Transport.prototype.schedule = function (callback, time) {\n\t        var event = {\n\t            'time': this.toTicks(time),\n\t            'callback': callback\n\t        };\n\t        var id = this._eventID++;\n\t        this._scheduledEvents[id.toString()] = {\n\t            'event': event,\n\t            'timeline': this._timeline\n\t        };\n\t        this._timeline.add(event);\n\t        return id;\n\t    };\n\t    /**\n\t\t *  Schedule a repeated event along the timeline. The event will fire\n\t\t *  at the `interval` starting at the `startTime` and for the specified\n\t\t *  `duration`. \n\t\t *  @param  {Function}  callback   The callback to invoke.\n\t\t *  @param  {Time}    interval   The duration between successive\n\t\t *                               callbacks.\n\t\t *  @param  {TimelinePosition=}    startTime  When along the timeline the events should\n\t\t *                               start being invoked.\n\t\t *  @param {Time} [duration=Infinity] How long the event should repeat. \n\t\t *  @return  {Number}    The ID of the scheduled event. Use this to cancel\n\t\t *                           the event. \n\t\t *  @example\n\t\t * //a callback invoked every eighth note after the first measure\n\t\t * Tone.Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t\t */\n\t    Tone.Transport.prototype.scheduleRepeat = function (callback, interval, startTime, duration) {\n\t        if (interval <= 0) {\n\t            throw new Error('Tone.Transport: repeat events must have an interval larger than 0');\n\t        }\n\t        var event = {\n\t            'time': this.toTicks(startTime),\n\t            'duration': this.toTicks(this.defaultArg(duration, Infinity)),\n\t            'interval': this.toTicks(interval),\n\t            'callback': callback\n\t        };\n\t        var id = this._eventID++;\n\t        this._scheduledEvents[id.toString()] = {\n\t            'event': event,\n\t            'timeline': this._repeatedEvents\n\t        };\n\t        this._repeatedEvents.add(event);\n\t        return id;\n\t    };\n\t    /**\n\t\t *  Schedule an event that will be removed after it is invoked. \n\t\t *  Note that if the given time is less than the current transport time, \n\t\t *  the event will be invoked immediately. \n\t\t *  @param {Function} callback The callback to invoke once.\n\t\t *  @param {TransportTime} time The time the callback should be invoked.\n\t\t *  @returns {Number} The ID of the scheduled event. \n\t\t */\n\t    Tone.Transport.prototype.scheduleOnce = function (callback, time) {\n\t        var id = this._eventID++;\n\t        var event = {\n\t            'time': this.toTicks(time),\n\t            'callback': callback,\n\t            'id': id\n\t        };\n\t        this._scheduledEvents[id.toString()] = {\n\t            'event': event,\n\t            'timeline': this._onceEvents\n\t        };\n\t        this._onceEvents.add(event);\n\t        return id;\n\t    };\n\t    /**\n\t\t *  Clear the passed in event id from the timeline\n\t\t *  @param {Number} eventId The id of the event.\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.clear = function (eventId) {\n\t        if (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t            var item = this._scheduledEvents[eventId.toString()];\n\t            item.timeline.remove(item.event);\n\t            delete this._scheduledEvents[eventId.toString()];\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove scheduled events from the timeline after\n\t\t *  the given time. Repeated events will be removed\n\t\t *  if their startTime is after the given time\n\t\t *  @param {TransportTime} [after=0] Clear all events after\n\t\t *                          this time. \n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.cancel = function (after) {\n\t        after = this.defaultArg(after, 0);\n\t        after = this.toTicks(after);\n\t        this._timeline.cancel(after);\n\t        this._onceEvents.cancel(after);\n\t        this._repeatedEvents.cancel(after);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSTART/STOP/PAUSE\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Bind start/stop/pause events from the clock and emit them.\n\t\t */\n\t    Tone.Transport.prototype._bindClockEvents = function () {\n\t        this._clock.on('start', function (time, offset) {\n\t            offset = Tone.Time(this._clock.ticks, 'i').toSeconds();\n\t            this.emit('start', time, offset);\n\t        }.bind(this));\n\t        this._clock.on('stop', function (time) {\n\t            this.emit('stop', time);\n\t        }.bind(this));\n\t        this._clock.on('pause', function (time) {\n\t            this.emit('pause', time);\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'state', {\n\t        get: function () {\n\t            return this._clock.getStateAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now] The time when the transport should start.\n\t\t *  @param  {TransportTime=} offset The timeline offset to start the transport.\n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * //start the transport in one second starting at beginning of the 5th measure. \n\t\t * Tone.Transport.start(\"+1\", \"4:0:0\");\n\t\t */\n\t    Tone.Transport.prototype.start = function (time, offset) {\n\t        //start the clock\n\t        if (!this.isUndef(offset)) {\n\t            offset = this.toTicks(offset);\n\t        }\n\t        this._clock.start(time, offset);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now] The time when the transport should stop. \n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * Tone.Transport.stop();\n\t\t */\n\t    Tone.Transport.prototype.stop = function (time) {\n\t        this._clock.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now]\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.pause = function (time) {\n\t        this._clock.pause(time);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSETTERS/GETTERS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The time signature as just the numerator over 4. \n\t\t *  For example 4/4 would be just 4 and 6/8 would be 3.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Number|Array}\n\t\t *  @name timeSignature\n\t\t *  @example\n\t\t * //common time\n\t\t * Tone.Transport.timeSignature = 4;\n\t\t * // 7/8\n\t\t * Tone.Transport.timeSignature = [7, 8];\n\t\t * //this will be reduced to a single number\n\t\t * Tone.Transport.timeSignature; //returns 3.5\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'timeSignature', {\n\t        get: function () {\n\t            return this._timeSignature;\n\t        },\n\t        set: function (timeSig) {\n\t            if (this.isArray(timeSig)) {\n\t                timeSig = timeSig[0] / timeSig[1] * 4;\n\t            }\n\t            this._timeSignature = timeSig;\n\t        }\n\t    });\n\t    /**\n\t\t * When the Tone.Transport.loop = true, this is the starting position of the loop.\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {TransportTime}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toSeconds();\n\t        },\n\t        set: function (startPosition) {\n\t            this._loopStart = this.toTicks(startPosition);\n\t        }\n\t    });\n\t    /**\n\t\t * When the Tone.Transport.loop = true, this is the ending position of the loop.\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {TransportTime}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toSeconds();\n\t        },\n\t        set: function (endPosition) {\n\t            this._loopEnd = this.toTicks(endPosition);\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the loop start and stop at the same time. \n\t\t *  @param {TransportTime} startPosition \n\t\t *  @param {TransportTime} endPosition   \n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * //loop over the first measure\n\t\t * Tone.Transport.setLoopPoints(0, \"1m\");\n\t\t * Tone.Transport.loop = true;\n\t\t */\n\t    Tone.Transport.prototype.setLoopPoints = function (startPosition, endPosition) {\n\t        this.loopStart = startPosition;\n\t        this.loopEnd = endPosition;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The swing value. Between 0-1 where 1 equal to \n\t\t *  the note + half the subdivision.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {NormalRange}\n\t\t *  @name swing\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'swing', {\n\t        get: function () {\n\t            return this._swingAmount;\n\t        },\n\t        set: function (amount) {\n\t            //scale the values to a normal range\n\t            this._swingAmount = amount;\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the subdivision which the swing will be applied to. \n\t\t *  The default value is an 8th note. Value must be less \n\t\t *  than a quarter note.\n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Time}\n\t\t *  @name swingSubdivision\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'swingSubdivision', {\n\t        get: function () {\n\t            return Tone.Time(this._swingTicks, 'i').toNotation();\n\t        },\n\t        set: function (subdivision) {\n\t            this._swingTicks = this.toTicks(subdivision);\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t\t *  Setting the value will jump to that position right away. \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {BarsBeatsSixteenths}\n\t\t *  @name position\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'position', {\n\t        get: function () {\n\t            return Tone.TransportTime(this.ticks, 'i').toBarsBeatsSixteenths();\n\t        },\n\t        set: function (progress) {\n\t            var ticks = this.toTicks(progress);\n\t            this.ticks = ticks;\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's position in seconds\n\t\t *  Setting the value will jump to that position right away. \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Seconds}\n\t\t *  @name seconds\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'seconds', {\n\t        get: function () {\n\t            return Tone.TransportTime(this.ticks, 'i').toSeconds();\n\t        },\n\t        set: function (progress) {\n\t            var ticks = this.toTicks(progress);\n\t            this.ticks = ticks;\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's loop position as a normalized value. Always\n\t\t *  returns 0 if the transport if loop is not true. \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @name progress\n\t\t *  @type {NormalRange}\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'progress', {\n\t        get: function () {\n\t            if (this.loop) {\n\t                return (this.ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The transports current tick position.\n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Ticks}\n\t\t *  @name ticks\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'ticks', {\n\t        get: function () {\n\t            return this._clock.ticks;\n\t        },\n\t        set: function (t) {\n\t            if (this._clock.ticks !== t) {\n\t                var now = this.now();\n\t                //stop everything synced to the transport\n\t                if (this.state === Tone.State.Started) {\n\t                    this.emit('stop', now);\n\t                    this._clock.ticks = t;\n\t                    //restart it with the new time\n\t                    this.emit('start', now, this.seconds);\n\t                } else {\n\t                    this._clock.ticks = t;\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Pulses Per Quarter note. This is the smallest resolution\n\t\t *  the Transport timing supports. This should be set once\n\t\t *  on initialization and not set again. Changing this value \n\t\t *  after other objects have been created can cause problems. \n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Number}\n\t\t *  @name PPQ\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'PPQ', {\n\t        get: function () {\n\t            return this._ppq;\n\t        },\n\t        set: function (ppq) {\n\t            var bpm = this.bpm.value;\n\t            this._ppq = ppq;\n\t            this.bpm.value = bpm;\n\t        }\n\t    });\n\t    /**\n\t\t *  The hint to the type of playback. Affects tradeoffs between audio \n\t\t *  output latency and responsiveness. \n\t\t *  \n\t\t *  In addition to setting the value in seconds, the latencyHint also\n\t\t *  accepts the strings \"interactive\" (prioritizes low latency), \n\t\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often). \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Seconds|String}\n\t\t *  @name latencyHint\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'latencyHint', {\n\t        get: function () {\n\t            return Tone.Clock.latencyHint;\n\t        },\n\t        set: function (hint) {\n\t            Tone.Clock.latencyHint = hint;\n\t        }\n\t    });\n\t    /**\n\t\t *  Convert from BPM to frequency (factoring in PPQ)\n\t\t *  @param  {BPM}  bpm The BPM value to convert to frequency\n\t\t *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._fromUnits = function (bpm) {\n\t        return 1 / (60 / bpm / this.PPQ);\n\t    };\n\t    /**\n\t\t *  Convert from frequency (with PPQ) into BPM\n\t\t *  @param  {Frequency}  freq The clocks frequency to convert to BPM\n\t\t *  @return  {BPM}  The frequency value as BPM.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._toUnits = function (freq) {\n\t        return freq / this.PPQ * 60;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSYNCING\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the time aligned to the next subdivision\n\t\t *  of the Transport. If the Transport is not started,\n\t\t *  it will return 0.\n\t\t *  Note: this will not work precisely during tempo ramps.\n\t\t *  @param  {Time}  subdivision  The subdivision to quantize to\n\t\t *  @return  {Number}  The context time of the next subdivision.\n\t\t *  @example\n\t\t * Tone.Transport.start(); //the transport must be started\n\t\t * Tone.Transport.nextSubdivision(\"4n\");\n\t\t */\n\t    Tone.Transport.prototype.nextSubdivision = function (subdivision) {\n\t        subdivision = this.toSeconds(subdivision);\n\t        //if the transport's not started, return 0\n\t        var now;\n\t        if (this.state === Tone.State.Started) {\n\t            now = this._clock._nextTick;\n\t        } else {\n\t            return 0;\n\t        }\n\t        var transportPos = Tone.Time(this.ticks, 'i');\n\t        var remainingTime = subdivision - transportPos % subdivision;\n\t        if (remainingTime === 0) {\n\t            remainingTime = subdivision;\n\t        }\n\t        return now + remainingTime;\n\t    };\n\t    /**\n\t\t *  Attaches the signal to the tempo control signal so that \n\t\t *  any changes in the tempo will change the signal in the same\n\t\t *  ratio. \n\t\t *  \n\t\t *  @param  {Tone.Signal} signal \n\t\t *  @param {number=} ratio Optionally pass in the ratio between\n\t\t *                         the two signals. Otherwise it will be computed\n\t\t *                         based on their current values. \n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.syncSignal = function (signal, ratio) {\n\t        if (!ratio) {\n\t            //get the sync ratio\n\t            if (signal._param.value !== 0) {\n\t                ratio = signal._param.value / this.bpm._param.value;\n\t            } else {\n\t                ratio = 0;\n\t            }\n\t        }\n\t        var ratioSignal = new Tone.Gain(ratio);\n\t        this.bpm.chain(ratioSignal, signal._param);\n\t        this._syncedSignals.push({\n\t            'ratio': ratioSignal,\n\t            'signal': signal,\n\t            'initial': signal._param.value\n\t        });\n\t        signal._param.value = 0;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsyncs a previously synced signal from the transport's control. \n\t\t *  See Tone.Transport.syncSignal.\n\t\t *  @param  {Tone.Signal} signal \n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.unsyncSignal = function (signal) {\n\t        for (var i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t            var syncedSignal = this._syncedSignals[i];\n\t            if (syncedSignal.signal === signal) {\n\t                syncedSignal.ratio.dispose();\n\t                syncedSignal.signal._param.value = syncedSignal.initial;\n\t                this._syncedSignals.splice(i, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Transport} this\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this._clock.dispose();\n\t        this._clock = null;\n\t        this._writable('bpm');\n\t        this.bpm = null;\n\t        this._timeline.dispose();\n\t        this._timeline = null;\n\t        this._onceEvents.dispose();\n\t        this._onceEvents = null;\n\t        this._repeatedEvents.dispose();\n\t        this._repeatedEvents = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tINITIALIZATION\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    var TransportConstructor = Tone.Transport;\n\t    Tone.Transport = new TransportConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Transport instanceof TransportConstructor) {\n\t            Tone.Transport = context.Transport;\n\t        } else {\n\t            Tone.Transport = new TransportConstructor();\n\t            //store the Transport on the context so it can be retrieved later\n\t            context.Transport = Tone.Transport;\n\t        }\n\t    });\n\t    return Tone.Transport;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Volume is a simple volume node, useful for creating a volume fader. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Decibels} [volume=0] the initial volume\n\t\t *  @example\n\t\t * var vol = new Tone.Volume(-12);\n\t\t * instrument.chain(vol, Tone.Master);\n\t\t */\n\t    Tone.Volume = function () {\n\t        var options = this.optionsObject(arguments, ['volume'], Tone.Volume.defaults);\n\t        /**\n\t\t\t * the output node\n\t\t\t * @type {GainNode}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this.input = new Tone.Gain(options.volume, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The unmuted volume\n\t\t\t * @type {Decibels}\n\t\t\t * @private\n\t\t\t */\n\t        this._unmutedVolume = options.volume;\n\t        /**\n\t\t\t *  The volume control in decibels. \n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.volume = this.output.gain;\n\t        this._readOnly('volume');\n\t        //set the mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.Volume);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Volume.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.Volume#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * volume.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Volume.prototype, 'mute', {\n\t        get: function () {\n\t            return this.volume.value === -Infinity;\n\t        },\n\t        set: function (mute) {\n\t            if (!this.mute && mute) {\n\t                this._unmutedVolume = this.volume.value;\n\t                //maybe it should ramp here?\n\t                this.volume.value = -Infinity;\n\t            } else if (this.mute && !mute) {\n\t                this.volume.value = this._unmutedVolume;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Volume} this\n\t\t */\n\t    Tone.Volume.prototype.dispose = function () {\n\t        this.input.dispose();\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('volume');\n\t        this.volume.dispose();\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.Volume;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A single master output which is connected to the\n\t\t *          AudioDestinationNode (aka your speakers). \n\t\t *          It provides useful conveniences such as the ability \n\t\t *          to set the volume and mute the entire application. \n\t\t *          It also gives you the ability to apply master effects to your application. \n\t\t *          <br><br>\n\t\t *          Like Tone.Transport, A single Tone.Master is created\n\t\t *          on initialization and you do not need to explicitly construct one.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @singleton\n\t\t *  @example\n\t\t * //the audio will go from the oscillator to the speakers\n\t\t * oscillator.connect(Tone.Master);\n\t\t * //a convenience for connecting to the master output is also provided:\n\t\t * oscillator.toMaster();\n\t\t * //the above two examples are equivalent.\n\t\t */\n\t    Tone.Master = function () {\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  The private volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume();\n\t        /**\n\t\t\t * The volume of the master output.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        //connections\n\t        this.input.chain(this.output, this.context.destination);\n\t    };\n\t    Tone.extend(Tone.Master);\n\t    /**\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Master.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.Master#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * Tone.Master.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Master.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously \n\t\t *  chained in the master effects chain. \n\t\t *  @param {AudioNode|Tone...} args All arguments will be connected in a row\n\t\t *                                  and the Master will be routed through it.\n\t\t *  @return  {Tone.Master}  this\n\t\t *  @example\n\t\t * //some overall compression to keep the levels in check\n\t\t * var masterCompressor = new Tone.Compressor({\n\t\t * \t\"threshold\" : -6,\n\t\t * \t\"ratio\" : 3,\n\t\t * \t\"attack\" : 0.5,\n\t\t * \t\"release\" : 0.1\n\t\t * });\n\t\t * //give a little boost to the lows\n\t\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t\t * //route everything through the filter \n\t\t * //and compressor before going to the speakers\n\t\t * Tone.Master.chain(lowBump, masterCompressor);\n\t\t */\n\t    Tone.Master.prototype.chain = function () {\n\t        this.input.disconnect();\n\t        this.input.chain.apply(this.input, arguments);\n\t        arguments[arguments.length - 1].connect(this.output);\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Master}  this\n\t\t */\n\t    Tone.Master.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUGMENT TONE's PROTOTYPE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)\n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * //connect an oscillator to the master output\n\t\t * var osc = new Tone.Oscillator().toMaster();\n\t\t */\n\t    Tone.prototype.toMaster = function () {\n\t        this.connect(Tone.Master);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Also augment AudioNode's prototype to include toMaster\n\t\t *  as a convenience\n\t\t *  @returns {AudioNode} this\n\t\t */\n\t    AudioNode.prototype.toMaster = function () {\n\t        this.connect(Tone.Master);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  initialize the module and listen for new audio contexts\n\t\t */\n\t    var MasterConstructor = Tone.Master;\n\t    Tone.Master = new MasterConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        // if it already exists, just restore it\n\t        if (context.Master instanceof MasterConstructor) {\n\t            Tone.Master = context.Master;\n\t        } else {\n\t            Tone.Master = new MasterConstructor();\n\t        }\n\t        context.Master = Tone.Master;\n\t    });\n\t    return Tone.Master;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base class for sources. Sources have start/stop methods\n\t\t *          and the ability to be synced to the \n\t\t *          start/stop of Tone.Transport. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * //Multiple state change events can be chained together,\n\t\t * //but must be set in the correct order and with ascending times\n\t\t * \n\t\t * // OK\n\t\t * state.start().stop(\"+0.2\");\n\t\t * // AND\n\t\t * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n\t\t *\n\t\t * // BAD\n\t\t * state.stop(\"+0.2\").start();\n\t\t * // OR\n\t\t * state.start(\"+0.3\").stop(\"+0.2\");\n\t\t * \n\t\t */\n\t    Tone.Source = function (options) {\n\t        // this.createInsOuts(0, 1);\n\t        options = this.defaultArg(options, Tone.Source.defaults);\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        /**\n\t\t\t * \tKeep track of the scheduled state.\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        this._state.memory = 10;\n\t        /**\n\t\t\t *  The synced `start` callback function from the transport\n\t\t\t *  @type {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._synced = false;\n\t        /**\n\t\t\t *  Keep track of all of the scheduled event ids\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scheduled = [];\n\t        //make the output explicitly stereo\n\t        this._volume.output.output.channelCount = 2;\n\t        this._volume.output.output.channelCountMode = 'explicit';\n\t        //mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.Source);\n\t    /**\n\t\t *  The default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Source.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Source#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Source.prototype, 'state', {\n\t        get: function () {\n\t            if (this._synced) {\n\t                if (Tone.Transport.state === Tone.State.Started) {\n\t                    return this._state.getValueAtTime(Tone.Transport.seconds);\n\t                } else {\n\t                    return Tone.State.Stopped;\n\t                }\n\t            } else {\n\t                return this._state.getValueAtTime(this.now());\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.Source#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * source.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Source.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    //overwrite these functions\n\t    Tone.Source.prototype._start = Tone.noOp;\n\t    Tone.Source.prototype._stop = Tone.noOp;\n\t    /**\n\t\t *  Start the source at the specified time. If no time is given, \n\t\t *  start the source now.\n\t\t *  @param  {Time} [time=now] When the source should be started.\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t\t */\n\t    Tone.Source.prototype.start = function (time, offset, duration) {\n\t        if (this.isUndef(time) && this._synced) {\n\t            time = Tone.Transport.seconds;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        //if it's started, stop it and restart it\n\t        if (!this.retrigger && this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this.stop(time);\n\t        }\n\t        this._state.setStateAtTime(Tone.State.Started, time);\n\t        if (this._synced) {\n\t            // add the offset time to the event\n\t            var event = this._state.get(time);\n\t            event.offset = this.defaultArg(offset, 0);\n\t            event.duration = duration;\n\t            var sched = Tone.Transport.schedule(function (t) {\n\t                this._start(t, offset, duration);\n\t            }.bind(this), time);\n\t            this._scheduled.push(sched);\n\t        } else {\n\t            this._start.apply(this, arguments);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the source at the specified time. If no time is given, \n\t\t *  stop the source now.\n\t\t *  @param  {Time} [time=now] When the source should be stopped. \n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * source.stop(); // stops the source immediately\n\t\t */\n\t    Tone.Source.prototype.stop = function (time) {\n\t        if (this.isUndef(time) && this._synced) {\n\t            time = Tone.Transport.seconds;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        if (!this._synced) {\n\t            this._stop.apply(this, arguments);\n\t        } else {\n\t            var sched = Tone.Transport.schedule(this._stop.bind(this), time);\n\t            this._scheduled.push(sched);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the source to the Transport so that all subsequent\n\t\t *  calls to `start` and `stop` are synced to the TransportTime\n\t\t *  instead of the AudioContext time. \n\t\t *\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t\t * source.sync().start(0).stop(0.3);\n\t\t * //start the transport.\n\t\t * Tone.Transport.start();\n\t\t *\n\t\t *  @example\n\t\t * //start the transport with an offset and the sync'ed sources\n\t\t * //will start in the correct position\n\t\t * source.sync().start(0.1);\n\t\t * //the source will be invoked with an offset of 0.4\n\t\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t\t */\n\t    Tone.Source.prototype.sync = function () {\n\t        this._synced = true;\n\t        Tone.Transport.on('start loopStart', function (time, offset) {\n\t            if (offset > 0) {\n\t                // get the playback state at that time\n\t                var stateEvent = this._state.get(offset);\n\t                // listen for start events which may occur in the middle of the sync'ed time\n\t                if (stateEvent && stateEvent.state === Tone.State.Started && stateEvent.time !== offset) {\n\t                    // get the offset\n\t                    var startOffset = offset - this.toSeconds(stateEvent.time);\n\t                    var duration;\n\t                    if (stateEvent.duration) {\n\t                        duration = this.toSeconds(stateEvent.duration) - startOffset;\n\t                    }\n\t                    this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t                }\n\t            }\n\t        }.bind(this));\n\t        Tone.Transport.on('stop pause loopEnd', function (time) {\n\t            if (this._state.getValueAtTime(Tone.Transport.seconds) === Tone.State.Started) {\n\t                this._stop(time);\n\t            }\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t\t *  @returns {Tone.Source} this\n\t\t */\n\t    Tone.Source.prototype.unsync = function () {\n\t        this._synced = false;\n\t        Tone.Transport.off('start stop pause loopEnd loopStart');\n\t        // clear all of the scheduled ids\n\t        for (var i = 0; i < this._scheduled.length; i++) {\n\t            var id = this._scheduled[i];\n\t            Tone.Transport.clear(id);\n\t        }\n\t        this._scheduled = [];\n\t        this._state.cancel(0);\n\t        return this;\n\t    };\n\t    /**\n\t\t *\tClean up.\n\t\t *  @return {Tone.Source} this\n\t\t */\n\t    Tone.Source.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.unsync();\n\t        this._scheduled = null;\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        this._state.dispose();\n\t        this._state = null;\n\t    };\n\t    return Tone.Source;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  OscillatorNode shim\n\t\t *  @private\n\t\t */\n\t    if (window.OscillatorNode && !OscillatorNode.prototype.start) {\n\t        OscillatorNode.prototype.start = OscillatorNode.prototype.noteOn;\n\t        OscillatorNode.prototype.stop = OscillatorNode.prototype.noteOff;\n\t        if (!OscillatorNode.prototype.setPeriodicWave) {\n\t            OscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;\n\t        }\n\t        if (!AudioContext.prototype.createPeriodicWave) {\n\t            AudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;\n\t        }\n\t    }\n\t    /**\n\t\t *  @class Tone.Oscillator supports a number of features including\n\t\t *         phase rotation, multiple oscillator types (see Tone.Oscillator.type), \n\t\t *         and Transport syncing (see Tone.Oscillator.syncFrequency).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {Frequency} [frequency] Starting frequency\n\t\t *  @param {string} [type] The oscillator type. Read more about type below.\n\t\t *  @example\n\t\t * //make and start a 440hz sine tone\n\t\t * var osc = new Tone.Oscillator(440, \"sine\").toMaster().start();\n\t\t */\n\t    Tone.Oscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.Oscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  the main oscillator\n\t\t\t *  @type {OscillatorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = null;\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  the periodic wave\n\t\t\t *  @type {PeriodicWave}\n\t\t\t *  @private\n\t\t\t */\n\t        this._wave = null;\n\t        /**\n\t\t\t *  The partials of the oscillator\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._partials = this.defaultArg(options.partials, [1]);\n\t        /**\n\t\t\t *  the phase of the oscillator\n\t\t\t *  between 0 - 360\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._phase = options.phase;\n\t        /**\n\t\t\t *  the type of the oscillator\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = null;\n\t        //setup\n\t        this.type = options.type;\n\t        this.phase = this._phase;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Oscillator, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Oscillator.defaults = {\n\t        'type': 'sine',\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'partials': []\n\t    };\n\t    /**\n\t\t *  The Oscillator types\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Oscillator.Type = {\n\t        Sine: 'sine',\n\t        Triangle: 'triangle',\n\t        Sawtooth: 'sawtooth',\n\t        Square: 'square',\n\t        Custom: 'custom'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now] \n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._start = function (time) {\n\t        //new oscillator with previous values\n\t        this._oscillator = this.context.createOscillator();\n\t        this._oscillator.setPeriodicWave(this._wave);\n\t        //connect the control signal to the oscillator frequency & detune\n\t        this._oscillator.connect(this.output);\n\t        this.frequency.connect(this._oscillator.frequency);\n\t        this.detune.connect(this._oscillator.detune);\n\t        //start the oscillator\n\t        this._oscillator.start(this.toSeconds(time));\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @private\n\t\t *  @param  {Time} [time=now] (optional) timing parameter\n\t\t *  @returns {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype._stop = function (time) {\n\t        if (this._oscillator) {\n\t            this._oscillator.stop(this.toSeconds(time));\n\t            this._oscillator = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t\t *  will also affect the oscillators frequency. \n\t\t *  @returns {Tone.Oscillator} this\n\t\t *  @example\n\t\t * Tone.Transport.bpm.value = 120;\n\t\t * osc.frequency.value = 440;\n\t\t * //the ration between the bpm and the frequency will be maintained\n\t\t * osc.syncFrequency();\n\t\t * Tone.Transport.bpm.value = 240; \n\t\t * // the frequency of the oscillator is doubled to 880\n\t\t */\n\t    Tone.Oscillator.prototype.syncFrequency = function () {\n\t        Tone.Transport.syncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsync the oscillator's frequency from the Transport. \n\t\t *  See Tone.Oscillator.syncFrequency\n\t\t *  @returns {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype.unsyncFrequency = function () {\n\t        Tone.Transport.unsyncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t\t * 8 partials of the triangle wave.\n\t\t * <br><br> \n\t\t * Uses PeriodicWave internally even for native types so that it can set the phase. \n\t\t * PeriodicWave equations are from the \n\t\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t\t *  \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * //set it to a square wave\n\t\t * osc.type = \"square\";\n\t\t * @example\n\t\t * //set the first 6 partials of a sawtooth wave\n\t\t * osc.type = \"sawtooth6\";\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            var coefs = this._getRealImaginary(type, this._phase);\n\t            var periodicWave = this.context.createPeriodicWave(coefs[0], coefs[1]);\n\t            this._wave = periodicWave;\n\t            if (this._oscillator !== null) {\n\t                this._oscillator.setPeriodicWave(this._wave);\n\t            }\n\t            this._type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Returns the real and imaginary components based \n\t\t *  on the oscillator type.\n\t\t *  @returns {Array} [real, imaginary]\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._getRealImaginary = function (type, phase) {\n\t        var fftSize = 4096;\n\t        var periodicWaveSize = fftSize / 2;\n\t        var real = new Float32Array(periodicWaveSize);\n\t        var imag = new Float32Array(periodicWaveSize);\n\t        var partialCount = 1;\n\t        if (type === Tone.Oscillator.Type.Custom) {\n\t            partialCount = this._partials.length + 1;\n\t            periodicWaveSize = partialCount;\n\t        } else {\n\t            var partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t            if (partial) {\n\t                partialCount = parseInt(partial[2]) + 1;\n\t                type = partial[1];\n\t                partialCount = Math.max(partialCount, 2);\n\t                periodicWaveSize = partialCount;\n\t            }\n\t        }\n\t        for (var n = 1; n < periodicWaveSize; ++n) {\n\t            var piFactor = 2 / (n * Math.PI);\n\t            var b;\n\t            switch (type) {\n\t            case Tone.Oscillator.Type.Sine:\n\t                b = n <= partialCount ? 1 : 0;\n\t                break;\n\t            case Tone.Oscillator.Type.Square:\n\t                b = n & 1 ? 2 * piFactor : 0;\n\t                break;\n\t            case Tone.Oscillator.Type.Sawtooth:\n\t                b = piFactor * (n & 1 ? 1 : -1);\n\t                break;\n\t            case Tone.Oscillator.Type.Triangle:\n\t                if (n & 1) {\n\t                    b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);\n\t                } else {\n\t                    b = 0;\n\t                }\n\t                break;\n\t            case Tone.Oscillator.Type.Custom:\n\t                b = this._partials[n - 1];\n\t                break;\n\t            default:\n\t                throw new TypeError('Tone.Oscillator: invalid type: ' + type);\n\t            }\n\t            if (b !== 0) {\n\t                real[n] = -b * Math.sin(phase * n);\n\t                imag[n] = b * Math.cos(phase * n);\n\t            } else {\n\t                real[n] = 0;\n\t                imag[n] = 0;\n\t            }\n\t        }\n\t        return [\n\t            real,\n\t            imag\n\t        ];\n\t    };\n\t    /**\n\t\t *  Compute the inverse FFT for a given phase.\t\n\t\t *  @param  {Float32Array}  real\n\t\t *  @param  {Float32Array}  imag \n\t\t *  @param  {NormalRange}  phase \n\t\t *  @return  {AudioRange}\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._inverseFFT = function (real, imag, phase) {\n\t        var sum = 0;\n\t        var len = real.length;\n\t        for (var i = 0; i < len; i++) {\n\t            sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t        }\n\t        return sum;\n\t    };\n\t    /**\n\t\t *  Returns the initial value of the oscillator.\n\t\t *  @return  {AudioRange}\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._getInitialValue = function () {\n\t        var coefs = this._getRealImaginary(this._type, 0);\n\t        var real = coefs[0];\n\t        var imag = coefs[1];\n\t        var maxValue = 0;\n\t        var twoPi = Math.PI * 2;\n\t        //check for peaks in 8 places\n\t        for (var i = 0; i < 8; i++) {\n\t            maxValue = Math.max(this._inverseFFT(real, imag, i / 8 * twoPi), maxValue);\n\t        }\n\t        return -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t    };\n\t    /**\n\t\t * The partials of the waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'partials', {\n\t        get: function () {\n\t            if (this._type !== Tone.Oscillator.Type.Custom) {\n\t                return [];\n\t            } else {\n\t                return this._partials;\n\t            }\n\t        },\n\t        set: function (partials) {\n\t            this._partials = partials;\n\t            this.type = Tone.Oscillator.Type.Custom;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees. \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t * @example\n\t\t * osc.phase = 180; //flips the phase of the oscillator\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._phase * (180 / Math.PI);\n\t        },\n\t        set: function (phase) {\n\t            this._phase = phase * Math.PI / 180;\n\t            //reset the type\n\t            this.type = this._type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._oscillator !== null) {\n\t            this._oscillator.disconnect();\n\t            this._oscillator = null;\n\t        }\n\t        this._wave = null;\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this._partials = null;\n\t        return this;\n\t    };\n\t    return Tone.Oscillator;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be\n\t\t *         it's own class is that many browsers optimize out Tone.Signal\n\t\t *         with a value of 0 and will not process nodes further down the graph. \n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Zero = function () {\n\t        /**\n\t\t\t *  The gain node\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = this.input = this.output = new Tone.Gain();\n\t        this.context.getConstant(0).connect(this._gain);\n\t    };\n\t    Tone.extend(Tone.Zero);\n\t    /**\n\t\t *  clean up\n\t\t *  @return  {Tone.Zero}  this\n\t\t */\n\t    Tone.Zero.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._gain.dispose();\n\t        this._gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Zero;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  LFO stands for low frequency oscillator. Tone.LFO produces an output signal \n\t\t *          which can be attached to an AudioParam or Tone.Signal \n\t\t *          in order to modulate that parameter with an oscillator. The LFO can \n\t\t *          also be synced to the transport to start/stop and change when the tempo changes.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @param {Frequency|Object} [frequency] The frequency of the oscillation. Typically, LFOs will be\n\t\t *                               in the frequency range of 0.1 to 10 hertz. \n\t\t *  @param {number=} min The minimum output value of the LFO. \n\t\t *  @param {number=} max The maximum value of the LFO. \n\t\t *  @example\n\t\t * var lfo = new Tone.LFO(\"4n\", 400, 4000);\n\t\t * lfo.connect(filter.frequency);\n\t\t */\n\t    Tone.LFO = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'min',\n\t            'max'\n\t        ], Tone.LFO.defaults);\n\t        /** \n\t\t\t *  The oscillator. \n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = new Tone.Oscillator({\n\t            'frequency': options.frequency,\n\t            'type': options.type\n\t        });\n\t        /**\n\t\t\t *  the lfo's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._oscillator.frequency;\n\t        /**\n\t\t\t * The amplitude of the LFO, which controls the output range between\n\t\t\t * the min and max output. For example if the min is -10 and the max \n\t\t\t * is 10, setting the amplitude to 0.5 would make the LFO modulate\n\t\t\t * between -5 and 5. \n\t\t\t * @type {Number}\n\t\t\t * @signal\n\t\t\t */\n\t        this.amplitude = this._oscillator.volume;\n\t        this.amplitude.units = Tone.Type.NormalRange;\n\t        this.amplitude.value = options.amplitude;\n\t        /**\n\t\t\t *  The signal which is output when the LFO is stopped\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stoppedSignal = new Tone.Signal(0, Tone.Type.AudioRange);\n\t        /**\n\t\t\t *  Just outputs zeros.\n\t\t\t *  @type {Tone.Zero}\n\t\t\t *  @private\n\t\t\t */\n\t        this._zeros = new Tone.Zero();\n\t        /**\n\t\t\t *  The value that the LFO outputs when it's stopped\n\t\t\t *  @type {AudioRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stoppedValue = 0;\n\t        /**\n\t\t\t *  @type {Tone.AudioToGain} \n\t\t\t *  @private\n\t\t\t */\n\t        this._a2g = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  @type {Tone.Scale} \n\t\t\t *  @private\n\t\t\t */\n\t        this._scaler = this.output = new Tone.Scale(options.min, options.max);\n\t        /**\n\t\t\t *  the units of the LFO (used for converting)\n\t\t\t *  @type {Tone.Type} \n\t\t\t *  @private\n\t\t\t */\n\t        this._units = Tone.Type.Default;\n\t        this.units = options.units;\n\t        //connect it up\n\t        this._oscillator.chain(this._a2g, this._scaler);\n\t        this._zeros.connect(this._a2g);\n\t        this._stoppedSignal.connect(this._a2g);\n\t        this._readOnly([\n\t            'amplitude',\n\t            'frequency'\n\t        ]);\n\t        this.phase = options.phase;\n\t    };\n\t    Tone.extend(Tone.LFO, Tone.Oscillator);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.LFO.defaults = {\n\t        'type': 'sine',\n\t        'min': 0,\n\t        'max': 1,\n\t        'phase': 0,\n\t        'frequency': '4n',\n\t        'amplitude': 1,\n\t        'units': Tone.Type.Default\n\t    };\n\t    /**\n\t\t *  Start the LFO. \n\t\t *  @param  {Time} [time=now] the time the LFO will start\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._stoppedSignal.setValueAtTime(0, time);\n\t        this._oscillator.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the LFO. \n\t\t *  @param  {Time} [time=now] the time the LFO will stop\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\t        this._oscillator.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the start/stop/pause to the transport \n\t\t *  and the frequency to the bpm of the transport\n\t\t *  @returns {Tone.LFO} this\n\t\t *  @example\n\t\t *  lfo.frequency.value = \"8n\";\n\t\t *  lfo.sync().start(0)\n\t\t *  //the rate of the LFO will always be an eighth note, \n\t\t *  //even as the tempo changes\n\t\t */\n\t    Tone.LFO.prototype.sync = function () {\n\t        this._oscillator.sync();\n\t        this._oscillator.syncFrequency();\n\t        return this;\n\t    };\n\t    /**\n\t\t *  unsync the LFO from transport control\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.unsync = function () {\n\t        this._oscillator.unsync();\n\t        this._oscillator.unsyncFrequency();\n\t        return this;\n\t    };\n\t    /**\n\t\t * The miniumum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'min', {\n\t        get: function () {\n\t            return this._toUnits(this._scaler.min);\n\t        },\n\t        set: function (min) {\n\t            min = this._fromUnits(min);\n\t            this._scaler.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'max', {\n\t        get: function () {\n\t            return this._toUnits(this._scaler.max);\n\t        },\n\t        set: function (max) {\n\t            max = this._fromUnits(max);\n\t            this._scaler.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the oscillator: sine, square, sawtooth, triangle. \n\t\t * @memberOf Tone.LFO#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'type', {\n\t        get: function () {\n\t            return this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            this._oscillator.type = type;\n\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t            this._stoppedSignal.value = this._stoppedValue;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'phase', {\n\t        get: function () {\n\t            return this._oscillator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._oscillator.phase = phase;\n\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t            this._stoppedSignal.value = this._stoppedValue;\n\t        }\n\t    });\n\t    /**\n\t\t * The output units of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {Tone.Type}\n\t\t * @name units\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'units', {\n\t        get: function () {\n\t            return this._units;\n\t        },\n\t        set: function (val) {\n\t            var currentMin = this.min;\n\t            var currentMax = this.max;\n\t            //convert the min and the max\n\t            this._units = val;\n\t            this.min = currentMin;\n\t            this.max = currentMax;\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.LFO#\n\t\t * @type {Boolean}\n\t\t * @name mute\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'mute', {\n\t        get: function () {\n\t            return this._oscillator.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._oscillator.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.LFO#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'state', {\n\t        get: function () {\n\t            return this._oscillator.state;\n\t        }\n\t    });\n\t    /**\n\t\t *  Connect the output of the LFO to an AudioParam, AudioNode, or Tone Node. \n\t\t *  Tone.LFO will automatically convert to the destination units of the \n\t\t *  will get the units from the connected node.\n\t\t *  @param  {Tone | AudioParam | AudioNode} node \n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone.LFO} this\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype.connect = function (node) {\n\t        if (node.constructor === Tone.Signal || node.constructor === Tone.Param || node.constructor === Tone.TimelineSignal) {\n\t            this.convert = node.convert;\n\t            this.units = node.units;\n\t        }\n\t        Tone.Signal.prototype.connect.apply(this, arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  private method borrowed from Param converts \n\t\t *  units from their destination value\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype._fromUnits = Tone.Param.prototype._fromUnits;\n\t    /**\n\t\t *  private method borrowed from Param converts \n\t\t *  units to their destination value\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype._toUnits = Tone.Param.prototype._toUnits;\n\t    /**\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'amplitude',\n\t            'frequency'\n\t        ]);\n\t        this._oscillator.dispose();\n\t        this._oscillator = null;\n\t        this._stoppedSignal.dispose();\n\t        this._stoppedSignal = null;\n\t        this._zeros.dispose();\n\t        this._zeros = null;\n\t        this._scaler.dispose();\n\t        this._scaler = null;\n\t        this._a2g.dispose();\n\t        this._a2g = null;\n\t        this.frequency = null;\n\t        this.amplitude = null;\n\t        return this;\n\t    };\n\t    return Tone.LFO;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Limiter will limit the loudness of an incoming signal. \n\t\t *         It is composed of a Tone.Compressor with a fast attack \n\t\t *         and release. Limiters are commonly used to safeguard against \n\t\t *         signal clipping. Unlike a compressor, limiters do not provide \n\t\t *         smooth gain reduction and almost completely prevent \n\t\t *         additional gain above the threshold.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {number} threshold The theshold above which the limiting is applied. \n\t\t *  @example\n\t\t *  var limiter = new Tone.Limiter(-6);\n\t\t */\n\t    Tone.Limiter = function () {\n\t        var options = this.optionsObject(arguments, ['threshold'], Tone.Limiter.defaults);\n\t        /**\n\t\t\t *  the compressor\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this._compressor = this.input = this.output = new Tone.Compressor({\n\t            'attack': 0.001,\n\t            'decay': 0.001,\n\t            'threshold': options.threshold\n\t        });\n\t        /**\n\t\t\t * The threshold of of the limiter\n\t\t\t * @type {Decibel}\n\t\t\t * @signal\n\t\t\t */\n\t        this.threshold = this._compressor.threshold;\n\t        this._readOnly('threshold');\n\t    };\n\t    Tone.extend(Tone.Limiter);\n\t    /**\n\t\t *  The default value\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Limiter.defaults = { 'threshold': -12 };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Limiter} this\n\t\t */\n\t    Tone.Limiter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._compressor.dispose();\n\t        this._compressor = null;\n\t        this._writable('threshold');\n\t        this.threshold = null;\n\t        return this;\n\t    };\n\t    return Tone.Limiter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Lowpass is a lowpass feedback comb filter. It is similar to \n\t\t *         Tone.FeedbackCombFilter, but includes a lowpass filter.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [delayTime] The delay time of the comb filter\n\t\t *  @param {NormalRange=} resonance The resonance (feedback) of the comb filter\n\t\t *  @param {Frequency=} dampening The cutoff of the lowpass filter dampens the\n\t\t *                                signal as it is fedback. \n\t\t */\n\t    Tone.LowpassCombFilter = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'resonance',\n\t            'dampening'\n\t        ], Tone.LowpassCombFilter.defaults);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = this.input = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The delayTime of the comb filter. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delay.delayTime;\n\t        /**\n\t\t\t *  the lowpass filter\n\t\t\t *  @type  {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowpass = this.output = this.context.createBiquadFilter();\n\t        this._lowpass.Q.value = -3.0102999566398125;\n\t        this._lowpass.type = 'lowpass';\n\t        /**\n\t\t\t *  The dampening control of the feedback\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = new Tone.Param({\n\t            'param': this._lowpass.frequency,\n\t            'units': Tone.Type.Frequency,\n\t            'value': options.dampening\n\t        });\n\t        /**\n\t\t\t *  the feedback gain\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of feedback of the delayed signal. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._feedback.gain;\n\t        //connections\n\t        this._delay.chain(this._lowpass, this._feedback, this._delay);\n\t        this._readOnly([\n\t            'dampening',\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.LowpassCombFilter);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.LowpassCombFilter.defaults = {\n\t        'delayTime': 0.1,\n\t        'resonance': 0.5,\n\t        'dampening': 3000\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.LowpassCombFilter} this\n\t\t */\n\t    Tone.LowpassCombFilter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'dampening',\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t        this.dampening.dispose();\n\t        this.dampening = null;\n\t        this.resonance.dispose();\n\t        this.resonance = null;\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this.delayTime = null;\n\t        this._lowpass.disconnect();\n\t        this._lowpass = null;\n\t        this._feedback.disconnect();\n\t        this._feedback = null;\n\t        return this;\n\t    };\n\t    return Tone.LowpassCombFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Merge brings two signals into the left and right \n\t\t *          channels of a single stereo channel.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var merge = new Tone.Merge().toMaster();\n\t\t * //routing a sine tone in the left channel\n\t\t * //and noise in the right channel\n\t\t * var osc = new Tone.Oscillator().connect(merge.left);\n\t\t * var noise = new Tone.Noise().connect(merge.right);\n\t\t * //starting our oscillators\n\t\t * noise.start();\n\t\t * osc.start();\n\t\t */\n\t    Tone.Merge = function () {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  The left input channel.\n\t\t\t *  Alias for <code>input[0]</code>\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t        this.left = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  The right input channel.\n\t\t\t *  Alias for <code>input[1]</code>.\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t        this.right = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t *  the merger node for the two channels\n\t\t\t *  @type {ChannelMergerNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merger = this.output = this.context.createChannelMerger(2);\n\t        //connections\n\t        this.left.connect(this._merger, 0, 0);\n\t        this.right.connect(this._merger, 0, 1);\n\t        this.left.channelCount = 1;\n\t        this.right.channelCount = 1;\n\t        this.left.channelCountMode = 'explicit';\n\t        this.right.channelCountMode = 'explicit';\n\t    };\n\t    Tone.extend(Tone.Merge);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Merge} this\n\t\t */\n\t    Tone.Merge.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.left.dispose();\n\t        this.left = null;\n\t        this.right.dispose();\n\t        this.right = null;\n\t        this._merger.disconnect();\n\t        this._merger = null;\n\t        return this;\n\t    };\n\t    return Tone.Merge;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n\t\t *          of an input signal with some averaging applied. It can also get the raw \n\t\t *          value of the input signal.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {String} type Either \"level\" or \"signal\". \n\t\t *  @param {Number} smoothing The amount of smoothing applied between frames.\n\t\t *  @example\n\t\t * var meter = new Tone.Meter();\n\t\t * var mic = new Tone.UserMedia().start();\n\t\t * //connect mic to the meter\n\t\t * mic.connect(meter);\n\t\t * //the current level of the mic input\n\t\t * var level = meter.value;\n\t\t */\n\t    Tone.Meter = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'type',\n\t            'smoothing'\n\t        ], Tone.Meter.defaults);\n\t        /**\n\t\t\t *  The type of the meter, either \"level\" or \"signal\". \n\t\t\t *  A \"level\" meter will return the volume level (rms) of the \n\t\t\t *  input signal and a \"signal\" meter will return\n\t\t\t *  the signal value of the input. \n\t\t\t *  @type  {String}\n\t\t\t */\n\t        this.type = options.type;\n\t        /**\n\t\t\t *  The analyser node which computes the levels.\n\t\t\t *  @private\n\t\t\t *  @type  {Tone.Analyser}\n\t\t\t */\n\t        this.input = this.output = this._analyser = new Tone.Analyser('waveform', 512);\n\t        this._analyser.returnType = 'float';\n\t        /**\n\t\t\t *  The amount of carryover between the current and last frame. \n\t\t\t *  Only applied meter for \"level\" type.\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.smoothing = options.smoothing;\n\t        /**\n\t\t\t *  The last computed value\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lastValue = 0;\n\t    };\n\t    Tone.extend(Tone.Meter);\n\t    /**\n\t\t *  @private\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Meter.Type = {\n\t        Level: 'level',\n\t        Signal: 'signal'\n\t    };\n\t    /**\n\t\t *  The defaults\n\t\t *  @type {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Meter.defaults = {\n\t        'smoothing': 0.8,\n\t        'type': Tone.Meter.Type.Level\n\t    };\n\t    /**\n\t\t * The current value of the meter. A value of 1 is\n\t\t * \"unity\".\n\t\t * @memberOf Tone.Meter#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Meter.prototype, 'value', {\n\t        get: function () {\n\t            var signal = this._analyser.analyse();\n\t            if (this.type === Tone.Meter.Type.Level) {\n\t                //rms\n\t                var sum = 0;\n\t                for (var i = 0; i < signal.length; i++) {\n\t                    sum += Math.pow(signal[i], 2);\n\t                }\n\t                var rms = Math.sqrt(sum / signal.length);\n\t                //smooth it\n\t                rms = Math.max(rms, this._lastValue * this.smoothing);\n\t                this._lastValue = rms;\n\t                //scale it\n\t                var unity = 0.35;\n\t                var val = rms / unity;\n\t                //scale the output curve\n\t                return Math.sqrt(val);\n\t            } else {\n\t                return signal[0];\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Meter} this\n\t\t */\n\t    Tone.Meter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._analyser.dispose();\n\t        this._analyser = null;\n\t        return this;\n\t    };\n\t    return Tone.Meter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *\t@class  Tone.Split splits an incoming signal into left and right channels.\n\t\t *\t\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var split = new Tone.Split();\n\t\t * stereoSignal.connect(split);\n\t\t */\n\t    Tone.Split = function () {\n\t        this.createInsOuts(0, 2);\n\t        /** \n\t\t\t *  @type {ChannelSplitterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._splitter = this.input = this.context.createChannelSplitter(2);\n\t        /** \n\t\t\t *  Left channel output. \n\t\t\t *  Alias for <code>output[0]</code>\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.left = this.output[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  Right channel output.\n\t\t\t *  Alias for <code>output[1]</code>\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.right = this.output[1] = new Tone.Gain();\n\t        //connections\n\t        this._splitter.connect(this.left, 0, 0);\n\t        this._splitter.connect(this.right, 1, 0);\n\t    };\n\t    Tone.extend(Tone.Split);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Split} this\n\t\t */\n\t    Tone.Split.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._splitter.disconnect();\n\t        this.left.dispose();\n\t        this.left = null;\n\t        this.right.dispose();\n\t        this.right = null;\n\t        this._splitter = null;\n\t        return this;\n\t    };\n\t    return Tone.Split;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels). <br><br>\n\t\t *         <code>\n\t\t *         Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>\n\t\t *         Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideSplit = function () {\n\t        this.createInsOuts(0, 2);\n\t        /**\n\t\t\t *  split the incoming signal into left and right channels\n\t\t\t *  @type  {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t        this._split = this.input = new Tone.Split();\n\t        /**\n\t\t\t *  The mid send. Connect to mid processing. Alias for\n\t\t\t *  <code>output[0]</code>\n\t\t\t *  @type {Tone.Expr}\n\t\t\t */\n\t        this.mid = this.output[0] = new Tone.Expr('($0 + $1) * $2');\n\t        /**\n\t\t\t *  The side output. Connect to side processing. Alias for\n\t\t\t *  <code>output[1]</code>\n\t\t\t *  @type {Tone.Expr}\n\t\t\t */\n\t        this.side = this.output[1] = new Tone.Expr('($0 - $1) * $2');\n\t        this._split.connect(this.mid, 0, 0);\n\t        this._split.connect(this.mid, 1, 1);\n\t        this._split.connect(this.side, 0, 0);\n\t        this._split.connect(this.side, 1, 1);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this.mid, 0, 2);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this.side, 0, 2);\n\t    };\n\t    Tone.extend(Tone.MidSideSplit);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideSplit} this\n\t\t */\n\t    Tone.MidSideSplit.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._split.dispose();\n\t        this._split = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideSplit;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels). \n\t\t *         MidSideMerge merges the mid and side signal after they've been seperated\n\t\t *         by Tone.MidSideSplit.<br><br>\n\t\t *         <code>\n\t\t *         Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>\n\t\t *         Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.StereoEffect}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideMerge = function () {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  The mid signal input. Alias for\n\t\t\t *  <code>input[0]</code>\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.mid = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  recombine the mid/side into Left\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._left = new Tone.Expr('($0 + $1) * $2');\n\t        /**\n\t\t\t *  The side signal input. Alias for\n\t\t\t *  <code>input[1]</code>\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.side = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t *  recombine the mid/side into Right\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._right = new Tone.Expr('($0 - $1) * $2');\n\t        /**\n\t\t\t *  Merge the left/right signal back into a stereo signal.\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = this.output = new Tone.Merge();\n\t        this.mid.connect(this._left, 0, 0);\n\t        this.side.connect(this._left, 0, 1);\n\t        this.mid.connect(this._right, 0, 0);\n\t        this.side.connect(this._right, 0, 1);\n\t        this._left.connect(this._merge, 0, 0);\n\t        this._right.connect(this._merge, 0, 1);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this._left, 0, 2);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this._right, 0, 2);\n\t    };\n\t    Tone.extend(Tone.MidSideMerge);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideMerge} this\n\t\t */\n\t    Tone.MidSideMerge.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._left.dispose();\n\t        this._left = null;\n\t        this._right.dispose();\n\t        this._right = null;\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideMerge;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.MidSideCompressor applies two different compressors to the mid\n\t\t *         and side signal components. See Tone.MidSideSplit. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @param {Object} options The options that are passed to the mid and side\n\t\t *                          compressors. \n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideCompressor = function (options) {\n\t        options = this.defaultArg(options, Tone.MidSideCompressor.defaults);\n\t        /**\n\t\t\t *  the mid/side split\n\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideSplit = this.input = new Tone.MidSideSplit();\n\t        /**\n\t\t\t *  the mid/side recombination\n\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideMerge = this.output = new Tone.MidSideMerge();\n\t        /**\n\t\t\t *  The compressor applied to the mid signal\n\t\t\t *  @type  {Tone.Compressor}\n\t\t\t */\n\t        this.mid = new Tone.Compressor(options.mid);\n\t        /**\n\t\t\t *  The compressor applied to the side signal\n\t\t\t *  @type  {Tone.Compressor}\n\t\t\t */\n\t        this.side = new Tone.Compressor(options.side);\n\t        this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n\t        this._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n\t        this._readOnly([\n\t            'mid',\n\t            'side'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MidSideCompressor);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MidSideCompressor.defaults = {\n\t        'mid': {\n\t            'ratio': 3,\n\t            'threshold': -24,\n\t            'release': 0.03,\n\t            'attack': 0.02,\n\t            'knee': 16\n\t        },\n\t        'side': {\n\t            'ratio': 6,\n\t            'threshold': -30,\n\t            'release': 0.25,\n\t            'attack': 0.03,\n\t            'knee': 10\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MidSideCompressor} this\n\t\t */\n\t    Tone.MidSideCompressor.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'mid',\n\t            'side'\n\t        ]);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._midSideSplit.dispose();\n\t        this._midSideSplit = null;\n\t        this._midSideMerge.dispose();\n\t        this._midSideMerge = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideCompressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Mono coerces the incoming mono or stereo signal into a mono signal\n\t\t *         where both left and right channels have the same value. This can be useful \n\t\t *         for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t */\n\t    Tone.Mono = function () {\n\t        this.createInsOuts(1, 0);\n\t        /**\n\t\t\t *  merge the signal\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = this.output = new Tone.Merge();\n\t        this.input.connect(this._merge, 0, 0);\n\t        this.input.connect(this._merge, 0, 1);\n\t        this.input.gain.value = this.dbToGain(-10);\n\t    };\n\t    Tone.extend(Tone.Mono);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Mono} this\n\t\t */\n\t    Tone.Mono.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        return this;\n\t    };\n\t    return Tone.Mono;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A compressor with seperate controls over low/mid/high dynamics\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Object} options The low/mid/high compressor settings.\n\t\t *  @example\n\t\t *  var multiband = new Tone.MultibandCompressor({\n\t\t *  \t\"lowFrequency\" : 200,\n\t\t *  \t\"highFrequency\" : 1300\n\t\t *  \t\"low\" : {\n\t\t *  \t\t\"threshold\" : -12\n\t\t *  \t}\n\t\t *  })\n\t\t */\n\t    Tone.MultibandCompressor = function (options) {\n\t        options = this.defaultArg(arguments, Tone.MultibandCompressor.defaults);\n\t        /**\n\t\t\t *  split the incoming signal into high/mid/low\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._splitter = this.input = new Tone.MultibandSplit({\n\t            'lowFrequency': options.lowFrequency,\n\t            'highFrequency': options.highFrequency\n\t        });\n\t        /**\n\t\t\t *  low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = this._splitter.lowFrequency;\n\t        /**\n\t\t\t *  mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = this._splitter.highFrequency;\n\t        /**\n\t\t\t *  the output\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  The compressor applied to the low frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.low = new Tone.Compressor(options.low);\n\t        /**\n\t\t\t *  The compressor applied to the mid frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.mid = new Tone.Compressor(options.mid);\n\t        /**\n\t\t\t *  The compressor applied to the high frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.high = new Tone.Compressor(options.high);\n\t        //connect the compressor\n\t        this._splitter.low.chain(this.low, this.output);\n\t        this._splitter.mid.chain(this.mid, this.output);\n\t        this._splitter.high.chain(this.high, this.output);\n\t        this._readOnly([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MultibandCompressor);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MultibandCompressor.defaults = {\n\t        'low': Tone.Compressor.defaults,\n\t        'mid': Tone.Compressor.defaults,\n\t        'high': Tone.Compressor.defaults,\n\t        'lowFrequency': 250,\n\t        'highFrequency': 2000\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MultibandCompressor} this\n\t\t */\n\t    Tone.MultibandCompressor.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._splitter.dispose();\n\t        this._writable([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t        this.low.dispose();\n\t        this.mid.dispose();\n\t        this.high.dispose();\n\t        this._splitter = null;\n\t        this.low = null;\n\t        this.mid = null;\n\t        this.high = null;\n\t        this.lowFrequency = null;\n\t        this.highFrequency = null;\n\t        return this;\n\t    };\n\t    return Tone.MultibandCompressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Panner is an equal power Left/Right Panner and does not\n\t\t *          support 3D. Panner uses the StereoPannerNode when available. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {NormalRange} [initialPan=0] The initail panner value (defaults to 0 = center)\n\t\t *  @example\n\t\t *  //pan the input signal hard right. \n\t\t *  var panner = new Tone.Panner(1);\n\t\t */\n\t    Tone.Panner = function (initialPan) {\n\t        if (this._hasStereoPanner) {\n\t            /**\n\t\t\t\t *  the panner node\n\t\t\t\t *  @type {StereoPannerNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._panner = this.input = this.output = this.context.createStereoPanner();\n\t            /**\n\t\t\t\t *  The pan control. -1 = hard left, 1 = hard right. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t            this.pan = this._panner.pan;\n\t        } else {\n\t            /**\n\t\t\t\t *  the dry/wet knob\n\t\t\t\t *  @type {Tone.CrossFade}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._crossFade = new Tone.CrossFade();\n\t            /**\n\t\t\t\t *  @type {Tone.Merge}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._merger = this.output = new Tone.Merge();\n\t            /**\n\t\t\t\t *  @type {Tone.Split}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._splitter = this.input = new Tone.Split();\n\t            /**\n\t\t\t\t *  The pan control. -1 = hard left, 1 = hard right. \n\t\t\t\t *  @type {AudioRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t            this.pan = new Tone.Signal(0, Tone.Type.AudioRange);\n\t            /**\n\t\t\t\t *  always sends 0\n\t\t\t\t *  @type {Tone.Zero}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._zero = new Tone.Zero();\n\t            /**\n\t\t\t\t *  The analog to gain conversion\n\t\t\t\t *  @type  {Tone.AudioToGain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._a2g = new Tone.AudioToGain();\n\t            //CONNECTIONS:\n\t            this._zero.connect(this._a2g);\n\t            this.pan.chain(this._a2g, this._crossFade.fade);\n\t            //left channel is a, right channel is b\n\t            this._splitter.connect(this._crossFade, 0, 0);\n\t            this._splitter.connect(this._crossFade, 1, 1);\n\t            //merge it back together\n\t            this._crossFade.a.connect(this._merger, 0, 0);\n\t            this._crossFade.b.connect(this._merger, 0, 1);\n\t        }\n\t        //initial value\n\t        this.pan.value = this.defaultArg(initialPan, 0);\n\t        this._readOnly('pan');\n\t    };\n\t    Tone.extend(Tone.Panner);\n\t    /**\n\t\t *  indicates if the panner is using the new StereoPannerNode internally\n\t\t *  @type  {boolean}\n\t\t *  @private\n\t\t */\n\t    Tone.Panner.prototype._hasStereoPanner = Tone.prototype.isFunction(Tone.context.createStereoPanner);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Panner} this\n\t\t */\n\t    Tone.Panner.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('pan');\n\t        if (this._hasStereoPanner) {\n\t            this._panner.disconnect();\n\t            this._panner = null;\n\t            this.pan = null;\n\t        } else {\n\t            this._zero.dispose();\n\t            this._zero = null;\n\t            this._crossFade.dispose();\n\t            this._crossFade = null;\n\t            this._splitter.dispose();\n\t            this._splitter = null;\n\t            this._merger.dispose();\n\t            this._merger = null;\n\t            this.pan.dispose();\n\t            this.pan = null;\n\t            this._a2g.dispose();\n\t            this._a2g = null;\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Panner;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A spatialized panner node which supports equalpower or HRTF panning.\n\t\t *          Tries to normalize the API across various browsers. See Tone.Listener\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Number} positionX The initial x position.\n\t\t *  @param {Number} positionY The initial y position.\n\t\t *  @param {Number} positionZ The initial z position.\n\t\t */\n\t    Tone.Panner3D = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'positionX',\n\t            'positionY',\n\t            'positionZ'\n\t        ], Tone.Panner3D.defaults);\n\t        /**\n\t\t\t *  The panner node\n\t\t\t *  @type {PannerNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = this.input = this.output = this.context.createPanner();\n\t        //set some values\n\t        this._panner.panningModel = options.panningModel;\n\t        this._panner.maxDistance = options.maxDistance;\n\t        this._panner.distanceModel = options.distanceModel;\n\t        this._panner.coneOuterGain = options.coneOuterGain;\n\t        this._panner.coneOuterAngle = options.coneOuterAngle;\n\t        this._panner.coneInnerAngle = options.coneInnerAngle;\n\t        this._panner.refDistance = options.refDistance;\n\t        this._panner.rolloffFactor = options.rolloffFactor;\n\t        /**\n\t\t\t *  Holds the current orientation\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._orientation = [\n\t            options.orientationX,\n\t            options.orientationY,\n\t            options.orientationZ\n\t        ];\n\t        /**\n\t\t\t *  Holds the current position\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._position = [\n\t            options.positionX,\n\t            options.positionY,\n\t            options.positionZ\n\t        ];\n\t        // set the default position/orientation\n\t        this.orientationX = options.orientationX;\n\t        this.orientationY = options.orientationY;\n\t        this.orientationZ = options.orientationZ;\n\t        this.positionX = options.positionX;\n\t        this.positionY = options.positionY;\n\t        this.positionZ = options.positionZ;\n\t    };\n\t    Tone.extend(Tone.Panner3D);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t *  Defaults according to the specification\n\t\t */\n\t    Tone.Panner3D.defaults = {\n\t        'positionX': 0,\n\t        'positionY': 0,\n\t        'positionZ': 0,\n\t        'orientationX': 0,\n\t        'orientationY': 0,\n\t        'orientationZ': 0,\n\t        'panningModel': 'equalpower',\n\t        'maxDistance': 10000,\n\t        'distanceModel': 'inverse',\n\t        'coneOuterGain': 0,\n\t        'coneOuterAngle': 360,\n\t        'coneInnerAngle': 360,\n\t        'refDistance': 1,\n\t        'rolloffFactor': 1\n\t    };\n\t    /**\n\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.Panner3D.prototype._rampTimeConstant = 0.01;\n\t    /**\n\t\t *  Sets the position of the source in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.setPosition = function (x, y, z) {\n\t        if (this._panner.positionX) {\n\t            var now = this.now();\n\t            this._panner.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this._panner.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this._panner.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this._panner.setPosition(x, y, z);\n\t        }\n\t        this._position = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the orientation of the source in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.setOrientation = function (x, y, z) {\n\t        if (this._panner.orientationX) {\n\t            var now = this.now();\n\t            this._panner.orientationX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this._panner.orientationY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this._panner.orientationZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this._panner.setOrientation(x, y, z);\n\t        }\n\t        this._orientation = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The x position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionX\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionX', {\n\t        set: function (pos) {\n\t            this._position[0] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionY\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionY', {\n\t        set: function (pos) {\n\t            this._position[1] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionZ\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionZ', {\n\t        set: function (pos) {\n\t            this._position[2] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationX\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationX', {\n\t        set: function (pos) {\n\t            this._orientation[0] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationY\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationY', {\n\t        set: function (pos) {\n\t            this._orientation[1] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationZ\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationZ', {\n\t        set: function (pos) {\n\t            this._orientation[2] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  Proxy a property on the panner to an exposed public propery\n\t\t *  @param  {String}  prop\n\t\t *  @private\n\t\t */\n\t    Tone.Panner3D._aliasProperty = function (prop) {\n\t        Object.defineProperty(Tone.Panner3D.prototype, prop, {\n\t            set: function (val) {\n\t                this._panner[prop] = val;\n\t            },\n\t            get: function () {\n\t                return this._panner[prop];\n\t            }\n\t        });\n\t    };\n\t    /**\n\t\t *  The panning model. Either \"equalpower\" or \"HRTF\".\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name panningModel\n\t\t */\n\t    Tone.Panner3D._aliasProperty('panningModel');\n\t    /**\n\t\t *  A reference distance for reducing volume as source move further from the listener\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name refDistance\n\t\t */\n\t    Tone.Panner3D._aliasProperty('refDistance');\n\t    /**\n\t\t *  Describes how quickly the volume is reduced as source moves away from listener.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name rolloffFactor\n\t\t */\n\t    Tone.Panner3D._aliasProperty('rolloffFactor');\n\t    /**\n\t\t *  The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name distanceModel\n\t\t */\n\t    Tone.Panner3D._aliasProperty('distanceModel');\n\t    /**\n\t\t *  The angle, in degrees, inside of which there will be no volume reduction\n\t\t *  @type {Degrees}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneInnerAngle\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneInnerAngle');\n\t    /**\n\t\t *  The angle, in degrees, outside of which the volume will be reduced \n\t\t *  to a constant value of coneOuterGain\n\t\t *  @type {Degrees}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneOuterAngle\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneOuterAngle');\n\t    /**\n\t\t *  The gain outside of the coneOuterAngle\n\t\t *  @type {Gain}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneOuterGain\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneOuterGain');\n\t    /**\n\t\t *  The maximum distance between source and listener, \n\t\t *  after which the volume will not be reduced any further.\n\t\t *  @type {Positive}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name maxDistance\n\t\t */\n\t    Tone.Panner3D._aliasProperty('maxDistance');\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.dispose = function () {\n\t        this._panner.disconnect();\n\t        this._panner = null;\n\t        this._orientation = null;\n\t        this._position = null;\n\t        return this;\n\t    };\n\t    return Tone.Panner3D;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PanVol is a Tone.Panner and Tone.Volume in one.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {AudioRange} pan the initial pan\n\t\t *  @param {number} volume The output volume. \n\t\t *  @example\n\t\t * //pan the incoming signal left and drop the volume\n\t\t * var panVol = new Tone.PanVol(0.25, -12);\n\t\t */\n\t    Tone.PanVol = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'pan',\n\t            'volume'\n\t        ], Tone.PanVol.defaults);\n\t        /**\n\t\t\t *  The panning node\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = this.input = new Tone.Panner(options.pan);\n\t        /**\n\t\t\t *  The L/R panning control.\n\t\t\t *  @type {AudioRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.pan = this._panner.pan;\n\t        /**\n\t\t\t *  The volume node\n\t\t\t *  @type {Tone.Volume}\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t *  The volume control in decibels. \n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        //connections\n\t        this._panner.connect(this._volume);\n\t        this._readOnly([\n\t            'pan',\n\t            'volume'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PanVol);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.PanVol.defaults = {\n\t        'pan': 0.5,\n\t        'volume': 0\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.PanVol} this\n\t\t */\n\t    Tone.PanVol.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'pan',\n\t            'volume'\n\t        ]);\n\t        this._panner.dispose();\n\t        this._panner = null;\n\t        this.pan = null;\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.PanVol;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.CtrlInterpolate will interpolate between given values based\n\t\t *         on the \"index\" property. Passing in an array or object literal\n\t\t *         will interpolate each of the parameters. Note (i.e. \"C3\")\n\t\t *         and Time (i.e. \"4n + 2\") can be interpolated. All other values are\n\t\t *         assumed to be numbers. \n\t\t *  @example\n\t\t * var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);\n\t\t * interp.index = 0.75;\n\t\t * interp.value; //returns 1.5\n\t\t *\n\t\t *  @example\n\t\t * var interp = new Tone.CtrlInterpolate([\n\t\t * \t[2, 4, 5],\n\t\t * \t[9, 3, 2],\n\t\t * ]);\n\t\t * @param {Array} values The array of values to interpolate over\n\t\t * @param {Positive} index The initial interpolation index.\n\t\t * @extends {Tone}\n\t\t */\n\t    Tone.CtrlInterpolate = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'values',\n\t            'index'\n\t        ], Tone.CtrlInterpolate.defaults);\n\t        /**\n\t\t\t *  The values to interpolate between\n\t\t\t *  @type  {Array}\n\t\t\t */\n\t        this.values = options.values;\n\t        /**\n\t\t\t *  The interpolated index between values. For example: a value of 1.5\n\t\t\t *  would interpolate equally between the value at index 1\n\t\t\t *  and the value at index 2. \n\t\t\t *  @example\n\t\t\t * interp.index = 0; \n\t\t\t * interp.value; //returns the value at 0\n\t\t\t * interp.index = 0.5;\n\t\t\t * interp.value; //returns the value between indices 0 and 1. \n\t\t\t *  @type  {Positive}\n\t\t\t */\n\t        this.index = options.index;\n\t    };\n\t    Tone.extend(Tone.CtrlInterpolate);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlInterpolate.defaults = {\n\t        'index': 0,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  The current interpolated value based on the index\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlInterpolate#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlInterpolate.prototype, 'value', {\n\t        get: function () {\n\t            var index = this.index;\n\t            index = Math.min(index, this.values.length - 1);\n\t            var lowerPosition = Math.floor(index);\n\t            var lower = this.values[lowerPosition];\n\t            var upper = this.values[Math.ceil(index)];\n\t            return this._interpolate(index - lowerPosition, lower, upper);\n\t        }\n\t    });\n\t    /**\n\t\t *  Internal interpolation routine\n\t\t *  @param  {NormalRange}  index  The index between the lower and upper\n\t\t *  @param  {*}  lower \n\t\t *  @param  {*}  upper \n\t\t *  @return  {*}  The interpolated value\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlInterpolate.prototype._interpolate = function (index, lower, upper) {\n\t        if (this.isArray(lower)) {\n\t            var retArray = [];\n\t            for (var i = 0; i < lower.length; i++) {\n\t                retArray[i] = this._interpolate(index, lower[i], upper[i]);\n\t            }\n\t            return retArray;\n\t        } else if (this.isObject(lower)) {\n\t            var retObj = {};\n\t            for (var attr in lower) {\n\t                retObj[attr] = this._interpolate(index, lower[attr], upper[attr]);\n\t            }\n\t            return retObj;\n\t        } else {\n\t            lower = this._toNumber(lower);\n\t            upper = this._toNumber(upper);\n\t            return (1 - index) * lower + index * upper;\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert from the given type into a number\n\t\t *  @param  {Number|String}  value\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlInterpolate.prototype._toNumber = function (val) {\n\t        if (this.isNumber(val)) {\n\t            return val;\n\t        } else {\n\t            //otherwise assume that it's Time...\n\t            return this.toSeconds(val);\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.CtrlInterpolate}  this\n\t\t */\n\t    Tone.CtrlInterpolate.prototype.dispose = function () {\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlInterpolate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.CtrlMarkov represents a Markov Chain where each call\n\t\t *         to Tone.CtrlMarkov.next will move to the next state. If the next\n\t\t *         state choice is an array, the next state is chosen randomly with\n\t\t *         even probability for all of the choices. For a weighted probability\n\t\t *         of the next choices, pass in an object with \"state\" and \"probability\" attributes. \n\t\t *         The probabilities will be normalized and then chosen. If no next options\n\t\t *         are given for the current state, the state will stay there. \n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var chain = new Tone.CtrlMarkov({\n\t\t * \t\"beginning\" : [\"end\", \"middle\"],\n\t\t * \t\"middle\" : \"end\"\n\t\t * });\n\t\t * chain.value = \"beginning\";\n\t\t * chain.next(); //returns \"end\" or \"middle\" with 50% probability\n\t\t *\n\t\t *  @example\n\t\t * var chain = new Tone.CtrlMarkov({\n\t\t * \t\"beginning\" : [{\"value\" : \"end\", \"probability\" : 0.8}, \n\t\t * \t\t\t\t\t{\"value\" : \"middle\", \"probability\" : 0.2}],\n\t\t * \t\"middle\" : \"end\"\n\t\t * });\n\t\t * chain.value = \"beginning\";\n\t\t * chain.next(); //returns \"end\" with 80% probability or \"middle\" with 20%.\n\t\t *  @param {Object} values An object with the state names as the keys\n\t\t *                         and the next state(s) as the values. \n\t\t */\n\t    Tone.CtrlMarkov = function (values, initial) {\n\t        /**\n\t\t\t *  The Markov values with states as the keys\n\t\t\t *  and next state(s) as the values. \n\t\t\t *  @type {Object}\n\t\t\t */\n\t        this.values = this.defaultArg(values, {});\n\t        /**\n\t\t\t *  The current state of the Markov values. The next\n\t\t\t *  state will be evaluated and returned when Tone.CtrlMarkov.next\n\t\t\t *  is invoked.\n\t\t\t *  @type {String}\n\t\t\t */\n\t        this.value = this.defaultArg(initial, Object.keys(this.values)[0]);\n\t    };\n\t    Tone.extend(Tone.CtrlMarkov);\n\t    /**\n\t\t *  Returns the next state of the Markov values. \n\t\t *  @return  {String}\n\t\t */\n\t    Tone.CtrlMarkov.prototype.next = function () {\n\t        if (this.values.hasOwnProperty(this.value)) {\n\t            var next = this.values[this.value];\n\t            if (this.isArray(next)) {\n\t                var distribution = this._getProbDistribution(next);\n\t                var rand = Math.random();\n\t                var total = 0;\n\t                for (var i = 0; i < distribution.length; i++) {\n\t                    var dist = distribution[i];\n\t                    if (rand > total && rand < total + dist) {\n\t                        var chosen = next[i];\n\t                        if (this.isObject(chosen)) {\n\t                            this.value = chosen.value;\n\t                        } else {\n\t                            this.value = chosen;\n\t                        }\n\t                    }\n\t                    total += dist;\n\t                }\n\t            } else {\n\t                this.value = next;\n\t            }\n\t        }\n\t        return this.value;\n\t    };\n\t    /**\n\t\t *  Choose randomly from an array weighted options in the form \n\t\t *  {\"state\" : string, \"probability\" : number} or an array of values\n\t\t *  @param  {Array}  options \n\t\t *  @return  {Array}  The randomly selected choice\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlMarkov.prototype._getProbDistribution = function (options) {\n\t        var distribution = [];\n\t        var total = 0;\n\t        var needsNormalizing = false;\n\t        for (var i = 0; i < options.length; i++) {\n\t            var option = options[i];\n\t            if (this.isObject(option)) {\n\t                needsNormalizing = true;\n\t                distribution[i] = option.probability;\n\t            } else {\n\t                distribution[i] = 1 / options.length;\n\t            }\n\t            total += distribution[i];\n\t        }\n\t        if (needsNormalizing) {\n\t            //normalize the values\n\t            for (var j = 0; j < distribution.length; j++) {\n\t                distribution[j] = distribution[j] / total;\n\t            }\n\t        }\n\t        return distribution;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.CtrlMarkov}  this\n\t\t */\n\t    Tone.CtrlMarkov.prototype.dispose = function () {\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlMarkov;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Generate patterns from an array of values.\n\t\t *         Has a number of arpeggiation and randomized\n\t\t *         selection patterns. \n\t\t *           <ul>\n\t\t *  \t        <li>\"up\" - cycles upward</li>\n\t\t *  \t\t\t<li>\"down\" - cycles downward</li>\n\t\t *  \t\t\t<li>\"upDown\" - up then and down</li>\n\t\t *  \t\t\t<li>\"downUp\" - cycles down then and up</li>\n\t\t *  \t\t\t<li>\"alternateUp\" - jump up two and down one</li>\n\t\t *  \t\t\t<li>\"alternateDown\" - jump down two and up one</li>\n\t\t *  \t\t\t<li>\"random\" - randomly select an index</li>\n\t\t *  \t\t\t<li>\"randomWalk\" - randomly moves one index away from the current position</li>\n\t\t *  \t\t\t<li>\"randomOnce\" - randomly select an index without repeating until all values have been chosen.</li>\n\t\t *     \t\t</ul>\n\t\t *  @param  {Array}  values   An array of options to choose from.\n\t\t *  @param  {Tone.CtrlPattern.Type=}  type  The name of the pattern.\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.CtrlPattern = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'values',\n\t            'type'\n\t        ], Tone.CtrlPattern.defaults);\n\t        /**\n\t\t\t *  The array of values to arpeggiate over\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.values = options.values;\n\t        /**\n\t\t\t *  The current position in the values array\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.index = 0;\n\t        /**\n\t\t\t *  The type placeholder\n\t\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = null;\n\t        /**\n\t\t\t *  Shuffled values for the RandomOnce type\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shuffled = null;\n\t        /**\n\t\t\t *  The direction of the movement\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._direction = null;\n\t        this.type = options.type;\n\t    };\n\t    Tone.extend(Tone.CtrlPattern);\n\t    /**\n\t\t *  The Control Patterns\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t */\n\t    Tone.CtrlPattern.Type = {\n\t        Up: 'up',\n\t        Down: 'down',\n\t        UpDown: 'upDown',\n\t        DownUp: 'downUp',\n\t        AlternateUp: 'alternateUp',\n\t        AlternateDown: 'alternateDown',\n\t        Random: 'random',\n\t        RandomWalk: 'randomWalk',\n\t        RandomOnce: 'randomOnce'\n\t    };\n\t    /**\n\t\t *  The default values. \n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlPattern.defaults = {\n\t        'type': Tone.CtrlPattern.Type.Up,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  The value at the current index of the pattern.\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlPattern#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'value', {\n\t        get: function () {\n\t            //some safeguards\n\t            if (this.values.length === 0) {\n\t                return;\n\t            } else if (this.values.length === 1) {\n\t                return this.values[0];\n\t            }\n\t            this.index = Math.min(this.index, this.values.length - 1);\n\t            var val = this.values[this.index];\n\t            if (this.type === Tone.CtrlPattern.Type.RandomOnce) {\n\t                if (this.values.length !== this._shuffled.length) {\n\t                    this._shuffleValues();\n\t                }\n\t                val = this.values[this._shuffled[this.index]];\n\t            }\n\t            return val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The pattern used to select the next\n\t\t *  item from the values array\n\t\t *  @memberOf Tone.CtrlPattern#\n\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._type = type;\n\t            this._shuffled = null;\n\t            //the first index\n\t            if (this._type === Tone.CtrlPattern.Type.Up || this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.RandomOnce || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t                this.index = 0;\n\t            } else if (this._type === Tone.CtrlPattern.Type.Down || this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t                this.index = this.values.length - 1;\n\t            }\n\t            //the direction\n\t            if (this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            } else if (this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t            //randoms\n\t            if (this._type === Tone.CtrlPattern.Type.RandomOnce) {\n\t                this._shuffleValues();\n\t            } else if (this._type === Tone.CtrlPattern.Random) {\n\t                this.index = Math.floor(Math.random() * this.values.length);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Return the next value given the current position\n\t\t *  and pattern.\n\t\t *  @return {*} The next value\n\t\t */\n\t    Tone.CtrlPattern.prototype.next = function () {\n\t        var type = this.type;\n\t        //choose the next index\n\t        if (type === Tone.CtrlPattern.Type.Up) {\n\t            this.index++;\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.Down) {\n\t            this.index--;\n\t            if (this.index < 0) {\n\t                this.index = this.values.length - 1;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.UpDown || type === Tone.CtrlPattern.Type.DownUp) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index++;\n\t            } else {\n\t                this.index--;\n\t            }\n\t            if (this.index < 0) {\n\t                this.index = 1;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            } else if (this.index >= this.values.length) {\n\t                this.index = this.values.length - 2;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.Random) {\n\t            this.index = Math.floor(Math.random() * this.values.length);\n\t        } else if (type === Tone.CtrlPattern.Type.RandomWalk) {\n\t            if (Math.random() < 0.5) {\n\t                this.index--;\n\t                this.index = Math.max(this.index, 0);\n\t            } else {\n\t                this.index++;\n\t                this.index = Math.min(this.index, this.values.length - 1);\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.RandomOnce) {\n\t            this.index++;\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t                //reshuffle the values for next time\n\t                this._shuffleValues();\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.AlternateUp) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index += 2;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            } else {\n\t                this.index -= 1;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.AlternateDown) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index += 1;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            } else {\n\t                this.index -= 2;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t            if (this.index < 0) {\n\t                this.index = this.values.length - 1;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t        }\n\t        return this.value;\n\t    };\n\t    /**\n\t\t *  Shuffles the values and places the results into the _shuffled\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlPattern.prototype._shuffleValues = function () {\n\t        var copy = [];\n\t        this._shuffled = [];\n\t        for (var i = 0; i < this.values.length; i++) {\n\t            copy[i] = i;\n\t        }\n\t        while (copy.length > 0) {\n\t            var randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n\t            this._shuffled.push(randVal[0]);\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.CtrlPattern} this\n\t\t */\n\t    Tone.CtrlPattern.prototype.dispose = function () {\n\t        this._shuffled = null;\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlPattern;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Choose a random value.\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var randomWalk = new Tone.CtrlRandom({\n\t\t * \t\"min\" : 0,\n\t\t * \t\"max\" : 10,\n\t\t * \t\"integer\" : true\n\t\t * });\n\t\t * randomWalk.eval();\n\t\t *\n\t\t *  @param {Number|Time=} min The minimum return value.\n\t\t *  @param {Number|Time=} max The maximum return value.\n\t\t */\n\t    Tone.CtrlRandom = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'min',\n\t            'max'\n\t        ], Tone.CtrlRandom.defaults);\n\t        /**\n\t\t\t *  The minimum return value\n\t\t\t *  @type  {Number|Time}\n\t\t\t */\n\t        this.min = options.min;\n\t        /**\n\t\t\t *  The maximum return value\n\t\t\t *  @type  {Number|Time}\n\t\t\t */\n\t        this.max = options.max;\n\t        /**\n\t\t\t *  If the return value should be an integer\n\t\t\t *  @type  {Boolean}\n\t\t\t */\n\t        this.integer = options.integer;\n\t    };\n\t    Tone.extend(Tone.CtrlRandom);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlRandom.defaults = {\n\t        'min': 0,\n\t        'max': 1,\n\t        'integer': false\n\t    };\n\t    /**\n\t\t *  Return a random value between min and max. \n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlRandom#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlRandom.prototype, 'value', {\n\t        get: function () {\n\t            var min = this.toSeconds(this.min);\n\t            var max = this.toSeconds(this.max);\n\t            var rand = Math.random();\n\t            var val = rand * min + (1 - rand) * max;\n\t            if (this.integer) {\n\t                val = Math.floor(val);\n\t            }\n\t            return val;\n\t        }\n\t    });\n\t    return Tone.CtrlRandom;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  AudioBuffer.copyToChannel polyfill\n\t\t *  @private\n\t\t */\n\t    if (window.AudioBuffer && !AudioBuffer.prototype.copyToChannel) {\n\t        AudioBuffer.prototype.copyToChannel = function (src, chanNum, start) {\n\t            var channel = this.getChannelData(chanNum);\n\t            start = start || 0;\n\t            for (var i = 0; i < channel.length; i++) {\n\t                channel[i + start] = src[i];\n\t            }\n\t        };\n\t        AudioBuffer.prototype.copyFromChannel = function (dest, chanNum, start) {\n\t            var channel = this.getChannelData(chanNum);\n\t            start = start || 0;\n\t            for (var i = 0; i < channel.length; i++) {\n\t                dest[i] = channel[i + start];\n\t            }\n\t        };\n\t    }\n\t    /**\n\t\t *  @class  Buffer loading and storage. Tone.Buffer is used internally by all \n\t\t *          classes that make requests for audio files such as Tone.Player,\n\t\t *          Tone.Sampler and Tone.Convolver.\n\t\t *          <br><br>\n\t\t *          Aside from load callbacks from individual buffers, Tone.Buffer \n\t\t *  \t\tprovides static methods which keep track of the loading progress \n\t\t *  \t\tof all of the buffers. These methods are Tone.Buffer.on(\"load\" / \"progress\" / \"error\")\n\t\t *\n\t\t *  @constructor \n\t\t *  @extends {Tone}\n\t\t *  @param {AudioBuffer|string} url The url to load, or the audio buffer to set. \n\t\t *  @param {Function=} onload A callback which is invoked after the buffer is loaded. \n\t\t *                            It's recommended to use Tone.Buffer.onload instead \n\t\t *                            since it will give you a callback when ALL buffers are loaded.\n\t\t *  @param {Function=} onerror The callback to invoke if there is an error\n\t\t *  @example\n\t\t * var buffer = new Tone.Buffer(\"path/to/sound.mp3\", function(){\n\t\t * \t//the buffer is now available.\n\t\t * \tvar buff = buffer.get();\n\t\t * });\n\t\t */\n\t    Tone.Buffer = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload',\n\t            'onerror'\n\t        ], Tone.Buffer.defaults);\n\t        /**\n\t\t\t *  stores the loaded AudioBuffer\n\t\t\t *  @type {AudioBuffer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = null;\n\t        /**\n\t\t\t *  indicates if the buffer should be reversed or not\n\t\t\t *  @type {Boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._reversed = options.reverse;\n\t        /**\n\t\t\t *  The XHR\n\t\t\t *  @type  {XMLHttpRequest}\n\t\t\t *  @private\n\t\t\t */\n\t        this._xhr = null;\n\t        if (options.url instanceof AudioBuffer || options.url instanceof Tone.Buffer) {\n\t            this.set(options.url);\n\t            // invoke the onload callback\n\t            if (options.onload) {\n\t                options.onload(this);\n\t            }\n\t        } else if (this.isString(options.url)) {\n\t            this.load(options.url, options.onload, options.onerror);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Buffer);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Buffer.defaults = {\n\t        'url': undefined,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Pass in an AudioBuffer or Tone.Buffer to set the value\n\t\t *  of this buffer.\n\t\t *  @param {AudioBuffer|Tone.Buffer} buffer the buffer\n\t\t *  @returns {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.set = function (buffer) {\n\t        if (buffer instanceof Tone.Buffer) {\n\t            this._buffer = buffer.get();\n\t        } else {\n\t            this._buffer = buffer;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  @return {AudioBuffer} The audio buffer stored in the object.\n\t\t */\n\t    Tone.Buffer.prototype.get = function () {\n\t        return this._buffer;\n\t    };\n\t    /**\n\t\t *  Makes an xhr reqest for the selected url then decodes\n\t\t *  the file as an audio buffer. Invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {String} url The url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer\n\t\t */\n\t    Tone.Buffer.prototype.load = function (url, onload, onerror) {\n\t        var promise = new Promise(function (load, error) {\n\t            this._xhr = Tone.Buffer.load(url, //success\n\t            function (buff) {\n\t                this._xhr = null;\n\t                this.set(buff);\n\t                load(this);\n\t                if (onload) {\n\t                    onload(this);\n\t                }\n\t            }.bind(this), //error\n\t            function (err) {\n\t                this._xhr = null;\n\t                error(err);\n\t                if (onerror) {\n\t                    onerror(err);\n\t                }\n\t            }.bind(this));\n\t        }.bind(this));\n\t        return promise;\n\t    };\n\t    /**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this._buffer = null;\n\t        if (this._xhr) {\n\t            Tone.Buffer._currentDownloads--;\n\t            this._xhr.abort();\n\t            this._xhr = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * If the buffer is loaded or not\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'loaded', {\n\t        get: function () {\n\t            return this.length > 0;\n\t        }\n\t    });\n\t    /**\n\t\t * The duration of the buffer. \n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name duration\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'duration', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.duration;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The length of the buffer in samples\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name length\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'length', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.length;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of discrete audio channels. Returns 0 if no buffer\n\t\t * is loaded.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name numberOfChannels\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'numberOfChannels', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.numberOfChannels;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the audio buffer from the array\n\t\t *  @param {Float32Array} array The array to fill the audio buffer\n\t\t *  @param {Number} [channels=1] The number of channels contained in the array. \n\t\t *                               If the channel is more than 1, the input array\n\t\t *                               is expected to be a multidimensional array\n\t\t *                               with dimensions equal to the number of channels.\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.fromArray = function (array) {\n\t        var isMultidimensional = array[0].length > 0;\n\t        var channels = isMultidimensional ? array.length : 1;\n\t        var len = isMultidimensional ? array[0].length : array.length;\n\t        var buffer = this.context.createBuffer(channels, len, this.context.sampleRate);\n\t        if (!isMultidimensional && channels === 1) {\n\t            array = [array];\n\t        }\n\t        for (var c = 0; c < channels; c++) {\n\t            buffer.copyToChannel(array[c], c);\n\t        }\n\t        this._buffer = buffer;\n\t        return this;\n\t    };\n\t    /**\n\t\t * \tSums muliple channels into 1 channel\n\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t *  @return {Array}\n\t\t */\n\t    Tone.Buffer.prototype.toMono = function (chanNum) {\n\t        if (this.isNumber(chanNum)) {\n\t            this.fromArray(this.toArray(chanNum));\n\t        } else {\n\t            var outputArray = new Float32Array(this.length);\n\t            var numChannels = this.numberOfChannels;\n\t            for (var channel = 0; channel < numChannels; channel++) {\n\t                var channelArray = this.toArray(channel);\n\t                for (var i = 0; i < channelArray.length; i++) {\n\t                    outputArray[i] += channelArray[i];\n\t                }\n\t            }\n\t            //divide by the number of channels\n\t            outputArray = outputArray.map(function (sample) {\n\t                return sample / numChannels;\n\t            });\n\t            this.fromArray(outputArray);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional \n\t\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t *  @return {Array}\n\t\t */\n\t    Tone.Buffer.prototype.toArray = function (channel) {\n\t        if (this.isNumber(channel)) {\n\t            return this.getChannelData(channel);\n\t        } else if (this.numberOfChannels === 1) {\n\t            return this.toArray(0);\n\t        } else {\n\t            var ret = [];\n\t            for (var c = 0; c < this.numberOfChannels; c++) {\n\t                ret[c] = this.getChannelData(c);\n\t            }\n\t            return ret;\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t\t *  @param  {Number}  channel  The channel number to return\n\t\t *  @return  {Float32Array}  The audio as a TypedArray\n\t\t */\n\t    Tone.Buffer.prototype.getChannelData = function (channel) {\n\t        return this._buffer.getChannelData(channel);\n\t    };\n\t    /**\n\t\t *  Cut a subsection of the array and return a buffer of the\n\t\t *  subsection. Does not modify the original buffer\n\t\t *  @param {Time} start The time to start the slice\n\t\t *  @param {Time=} end The end time to slice. If none is given\n\t\t *                     will default to the end of the buffer\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.slice = function (start, end) {\n\t        end = this.defaultArg(end, this.duration);\n\t        var startSamples = Math.floor(this.context.sampleRate * this.toSeconds(start));\n\t        var endSamples = Math.floor(this.context.sampleRate * this.toSeconds(end));\n\t        var replacement = [];\n\t        for (var i = 0; i < this.numberOfChannels; i++) {\n\t            replacement[i] = this.toArray(i).slice(startSamples, endSamples);\n\t        }\n\t        var retBuffer = new Tone.Buffer().fromArray(replacement);\n\t        return retBuffer;\n\t    };\n\t    /**\n\t\t *  Reverse the buffer.\n\t\t *  @private\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype._reverse = function () {\n\t        if (this.loaded) {\n\t            for (var i = 0; i < this.numberOfChannels; i++) {\n\t                Array.prototype.reverse.call(this.getChannelData(i));\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Reverse the buffer.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'reverse', {\n\t        get: function () {\n\t            return this._reversed;\n\t        },\n\t        set: function (rev) {\n\t            if (this._reversed !== rev) {\n\t                this._reversed = rev;\n\t                this._reverse();\n\t            }\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // STATIC METHODS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //statically inherits Emitter methods\n\t    Tone.Emitter.mixin(Tone.Buffer);\n\t    /**\n\t\t *  the static queue for all of the xhr requests\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t    Tone.Buffer._downloadQueue = [];\n\t    /**\n\t\t *  the total number of downloads\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Buffer._currentDownloads = 0;\n\t    /**\n\t\t *  A path which is prefixed before every url.\n\t\t *  @type  {String}\n\t\t *  @static\n\t\t */\n\t    Tone.Buffer.baseUrl = '';\n\t    /**\n\t\t *  Loads a url using XMLHttpRequest.\n\t\t *  @param {String} url\n\t\t *  @param {Function} onload\n\t\t *  @param {Function} onerror\n\t\t *  @param {Function} onprogress\n\t\t *  @return {XMLHttpRequest}\n\t\t */\n\t    Tone.Buffer.load = function (url, onload, onerror) {\n\t        //default\n\t        onload = onload || Tone.noOp;\n\t        function onError(e) {\n\t            if (onerror) {\n\t                onerror(e);\n\t                Tone.Buffer.emit('error', e);\n\t            } else {\n\t                throw new Error(e);\n\t            }\n\t        }\n\t        function onProgress() {\n\t            //calculate the progress\n\t            var totalProgress = 0;\n\t            for (var i = 0; i < Tone.Buffer._downloadQueue.length; i++) {\n\t                totalProgress += Tone.Buffer._downloadQueue[i].progress;\n\t            }\n\t            Tone.Buffer.emit('progress', totalProgress / Tone.Buffer._downloadQueue.length);\n\t        }\n\t        var request = new XMLHttpRequest();\n\t        request.open('GET', Tone.Buffer.baseUrl + url, true);\n\t        request.responseType = 'arraybuffer';\n\t        //start out as 0\n\t        request.progress = 0;\n\t        Tone.Buffer._currentDownloads++;\n\t        Tone.Buffer._downloadQueue.push(request);\n\t        request.addEventListener('load', function () {\n\t            if (request.status === 200) {\n\t                Tone.context.decodeAudioData(request.response, function (buff) {\n\t                    request.progress = 1;\n\t                    onProgress();\n\t                    onload(buff);\n\t                    Tone.Buffer._currentDownloads--;\n\t                    if (Tone.Buffer._currentDownloads === 0) {\n\t                        // clear the downloads\n\t                        Tone.Buffer._downloadQueue = [];\n\t                        //emit the event at the end\n\t                        Tone.Buffer.emit('load');\n\t                    }\n\t                }, function () {\n\t                    onError('Tone.Buffer: could not decode audio data: ' + url);\n\t                });\n\t            } else {\n\t                onError('Tone.Buffer: could not locate file: ' + url);\n\t            }\n\t        });\n\t        request.addEventListener('error', onError);\n\t        request.addEventListener('progress', function (event) {\n\t            if (event.lengthComputable) {\n\t                //only go to 95%, the last 5% is when the audio is decoded\n\t                request.progress = event.loaded / event.total * 0.95;\n\t                onProgress();\n\t            }\n\t        });\n\t        request.send();\n\t        return request;\n\t    };\n\t    /**\n\t\t *  Stop all of the downloads in progress\n\t\t *  @return {Tone.Buffer}\n\t\t *  @static\n\t\t */\n\t    Tone.Buffer.cancelDownloads = function () {\n\t        Tone.Buffer._downloadQueue.forEach(function (request) {\n\t            request.abort();\n\t        });\n\t        Tone.Buffer._currentDownloads = 0;\n\t        return Tone.Buffer;\n\t    };\n\t    /**\n\t\t *  Checks a url's extension to see if the current browser can play that file type.\n\t\t *  @param {String} url The url/extension to test\n\t\t *  @return {Boolean} If the file extension can be played\n\t\t *  @static\n\t\t *  @example\n\t\t * Tone.Buffer.supportsType(\"wav\"); //returns true\n\t\t * Tone.Buffer.supportsType(\"path/to/file.wav\"); //returns true\n\t\t */\n\t    Tone.Buffer.supportsType = function (url) {\n\t        var extension = url.split('.');\n\t        extension = extension[extension.length - 1];\n\t        var response = document.createElement('audio').canPlayType('audio/' + extension);\n\t        return response !== '';\n\t    };\n\t    /**\n\t\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t\t *  @return {Promise}\n\t\t */\n\t    Tone.loaded = function () {\n\t        var onload, onerror;\n\t        function removeEvents() {\n\t            //remove the events when it's resolved\n\t            Tone.Buffer.off('load', onload);\n\t            Tone.Buffer.off('error', onerror);\n\t        }\n\t        return new Promise(function (success, fail) {\n\t            onload = function () {\n\t                success();\n\t            };\n\t            onerror = function () {\n\t                fail();\n\t            };\n\t            //add the event listeners\n\t            Tone.Buffer.on('load', onload);\n\t            Tone.Buffer.on('error', onerror);\n\t        }).then(removeEvents).catch(function (e) {\n\t            removeEvents();\n\t            throw new Error(e);\n\t        });\n\t    };\n\t    return Tone.Buffer;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class A data structure for holding multiple buffers.\n\t\t *  \n\t\t *  @param  {Object|Array}    urls      An object literal or array\n\t\t *                                      of urls to load.\n\t\t *  @param  {Function=}  callback  The callback to invoke when\n\t\t *                                 the buffers are loaded. \n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * //load a whole bank of piano samples\n\t\t * var pianoSamples = new Tone.Buffers({\n\t\t * \t\"C4\" : \"path/to/C4.mp3\"\n\t\t * \t\"C#4\" : \"path/to/C#4.mp3\"\n\t\t * \t\"D4\" : \"path/to/D4.mp3\"\n\t\t * \t\"D#4\" : \"path/to/D#4.mp3\"\n\t\t * \t...\n\t\t * }, function(){\n\t\t * \t//play one of the samples when they all load\n\t\t * \tplayer.buffer = pianoSamples.get(\"C4\");\n\t\t * \tplayer.start();\n\t\t * });\n\t\t * \n\t\t */\n\t    Tone.Buffers = function (urls, onload, baseUrl) {\n\t        /**\n\t\t\t *  All of the buffers\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffers = {};\n\t        /**\n\t\t\t *  A path which is prefixed before every url.\n\t\t\t *  @type  {String}\n\t\t\t */\n\t        this.baseUrl = this.defaultArg(baseUrl, '');\n\t        urls = this._flattenUrls(urls);\n\t        this._loadingCount = 0;\n\t        //add each one\n\t        for (var key in urls) {\n\t            this._loadingCount++;\n\t            this.add(key, urls[key], this._bufferLoaded.bind(this, onload));\n\t        }\n\t    };\n\t    Tone.extend(Tone.Buffers);\n\t    /**\n\t\t *  True if the buffers object has a buffer by that name.\n\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t *                                 buffer.\n\t\t *  @return  {Boolean}\n\t\t */\n\t    Tone.Buffers.prototype.has = function (name) {\n\t        return this._buffers.hasOwnProperty(name);\n\t    };\n\t    /**\n\t\t *  Get a buffer by name. If an array was loaded, \n\t\t *  then use the array index.\n\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t *                                 buffer.\n\t\t *  @return  {Tone.Buffer}\n\t\t */\n\t    Tone.Buffers.prototype.get = function (name) {\n\t        if (this.has(name)) {\n\t            return this._buffers[name];\n\t        } else {\n\t            throw new Error('Tone.Buffers: no buffer named ' + name);\n\t        }\n\t    };\n\t    /**\n\t\t *  A buffer was loaded. decrement the counter.\n\t\t *  @param  {Function}  callback \n\t\t *  @private\n\t\t */\n\t    Tone.Buffers.prototype._bufferLoaded = function (callback) {\n\t        this._loadingCount--;\n\t        if (this._loadingCount === 0 && callback) {\n\t            callback(this);\n\t        }\n\t    };\n\t    /**\n\t\t * If the buffers are loaded or not\n\t\t * @memberOf Tone.Buffers#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffers.prototype, 'loaded', {\n\t        get: function () {\n\t            var isLoaded = true;\n\t            for (var buffName in this._buffers) {\n\t                var buff = this.get(buffName);\n\t                isLoaded = isLoaded && buff.loaded;\n\t            }\n\t            return isLoaded;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a buffer by name and url to the Buffers\n\t\t *  @param  {String}    name      A unique name to give\n\t\t *                                the buffer\n\t\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, \n\t\t *                                                 or a buffer which will be added\n\t\t *                                                 with the given name.\n\t\t *  @param  {Function=}  callback  The callback to invoke \n\t\t *                                 when the url is loaded.\n\t\t */\n\t    Tone.Buffers.prototype.add = function (name, url, callback) {\n\t        callback = this.defaultArg(callback, Tone.noOp);\n\t        if (url instanceof Tone.Buffer) {\n\t            this._buffers[name] = url;\n\t            callback(this);\n\t        } else if (url instanceof AudioBuffer) {\n\t            this._buffers[name] = new Tone.Buffer(url);\n\t            callback(this);\n\t        } else if (this.isString(url)) {\n\t            this._buffers[name] = new Tone.Buffer(this.baseUrl + url, callback);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Flatten an object into a single depth object. \n\t\t *  thanks to https://gist.github.com/penguinboy/762197\n\t\t *  @param   {Object} ob \t\n\t\t *  @return  {Object}    \n\t\t *  @private\n\t\t */\n\t    Tone.Buffers.prototype._flattenUrls = function (ob) {\n\t        var toReturn = {};\n\t        for (var i in ob) {\n\t            if (!ob.hasOwnProperty(i))\n\t                continue;\n\t            if (this.isObject(ob[i])) {\n\t                var flatObject = this._flattenUrls(ob[i]);\n\t                for (var x in flatObject) {\n\t                    if (!flatObject.hasOwnProperty(x))\n\t                        continue;\n\t                    toReturn[i + '.' + x] = flatObject[x];\n\t                }\n\t            } else {\n\t                toReturn[i] = ob[i];\n\t            }\n\t        }\n\t        return toReturn;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Buffers} this\n\t\t */\n\t    Tone.Buffers.prototype.dispose = function () {\n\t        for (var name in this._buffers) {\n\t            this._buffers[name].dispose();\n\t        }\n\t        this._buffers = null;\n\t        return this;\n\t    };\n\t    return Tone.Buffers;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  buses are another way of routing audio\n\t\t *\n\t\t *  augments Tone.prototype to include send and recieve\n\t\t */\n\t    /**\n\t\t  *  All of the routes\n\t\t  *  \n\t\t  *  @type {Object}\n\t\t  *  @static\n\t\t  *  @private\n\t\t  */\n\t    var Buses = {};\n\t    /**\n\t\t *  Send this signal to the channel name. \n\t\t *  @param  {string} channelName A named channel to send the signal to.\n\t\t *  @param  {Decibels} amount The amount of the source to send to the bus. \n\t\t *  @return {GainNode} The gain node which connects this node to the desired channel. \n\t\t *                     Can be used to adjust the levels of the send.\n\t\t *  @example\n\t\t * source.send(\"reverb\", -12);\n\t\t */\n\t    Tone.prototype.send = function (channelName, amount) {\n\t        if (!Buses.hasOwnProperty(channelName)) {\n\t            Buses[channelName] = this.context.createGain();\n\t        }\n\t        amount = this.defaultArg(amount, 0);\n\t        var sendKnob = new Tone.Gain(amount, Tone.Type.Decibels);\n\t        this.output.chain(sendKnob, Buses[channelName]);\n\t        return sendKnob;\n\t    };\n\t    /**\n\t\t *  Recieve the input from the desired channelName to the input\n\t\t *\n\t\t *  @param  {string} channelName A named channel to send the signal to.\n\t\t *  @param {AudioNode} [input] If no input is selected, the\n\t\t *                                         input of the current node is\n\t\t *                                         chosen. \n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * reverbEffect.receive(\"reverb\");\n\t\t */\n\t    Tone.prototype.receive = function (channelName, input) {\n\t        if (!Buses.hasOwnProperty(channelName)) {\n\t            Buses[channelName] = this.context.createGain();\n\t        }\n\t        if (this.isUndef(input)) {\n\t            input = this.input;\n\t        }\n\t        Buses[channelName].connect(input);\n\t        return this;\n\t    };\n\t    //remove all the send/receives when a new audio context is passed in\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Buses) {\n\t            Buses = context.Buses;\n\t        } else {\n\t            Buses = {};\n\t            context.Buses = Buses;\n\t        }\n\t    });\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Draw is useful for synchronizing visuals and audio events.\n\t\t *         Callbacks from Tone.Transport or any of the Tone.Event classes\n\t\t *         always happen _before_ the scheduled time and are not synchronized\n\t\t *         to the animation frame so they are not good for triggering tightly\n\t\t *         synchronized visuals and sound. Tone.Draw makes it easy to schedule\n\t\t *         callbacks using the AudioContext time and uses requestAnimationFrame.\n\t\t *         \n\t\t *  @singleton\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \t//use the time argument to schedule a callback with Tone.Draw\n\t\t * \tTone.Draw.schedule(function(){\n\t\t * \t\t//do drawing or DOM manipulation here\n\t\t * \t}, time)\n\t\t * }, \"+0.5\")\n\t\t */\n\t    Tone.Draw = function () {\n\t        /**\n\t\t\t *  All of the events.\n\t\t\t *  @type  {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = new Tone.Timeline();\n\t        /**\n\t\t\t *  The duration after which events are not invoked.\n\t\t\t *  @type  {Number}\n\t\t\t *  @default 0.25\n\t\t\t */\n\t        this.expiration = 0.25;\n\t        /**\n\t\t\t *  The amount of time before the scheduled time \n\t\t\t *  that the callback can be invoked. Default is\n\t\t\t *  half the time of an animation frame (0.008 seconds).\n\t\t\t *  @type  {Number}\n\t\t\t *  @default 0.008\n\t\t\t */\n\t        this.anticipation = 0.008;\n\t        /**\n\t\t\t *  The draw loop\n\t\t\t *  @type  {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._boundDrawLoop = this._drawLoop.bind(this);\n\t    };\n\t    Tone.extend(Tone.Draw);\n\t    /**\n\t\t *  Schedule a function at the given time to be invoked\n\t\t *  on the nearest animation frame.\n\t\t *  @param  {Function}  callback  Callback is invoked at the given time.\n\t\t *  @param  {Time}    time      The time relative to the AudioContext time\n\t\t *                              to invoke the callback.\n\t\t *  @return  {Tone.Draw}    this\n\t\t */\n\t    Tone.Draw.prototype.schedule = function (callback, time) {\n\t        this._events.add({\n\t            callback: callback,\n\t            time: this.toSeconds(time)\n\t        });\n\t        //start the draw loop on the first event\n\t        if (this._events.length === 1) {\n\t            requestAnimationFrame(this._boundDrawLoop);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel events scheduled after the given time\n\t\t *  @param  {Time=}  after  Time after which scheduled events will \n\t\t *                          be removed from the scheduling timeline.\n\t\t *  @return  {Tone.Draw}  this\n\t\t */\n\t    Tone.Draw.prototype.cancel = function (after) {\n\t        this._events.cancel(this.toSeconds(after));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The draw loop\n\t\t *  @private\n\t\t */\n\t    Tone.Draw.prototype._drawLoop = function () {\n\t        var now = Tone.now();\n\t        while (this._events.length && this._events.peek().time - this.anticipation <= now) {\n\t            var event = this._events.shift();\n\t            if (now - event.time <= this.expiration) {\n\t                event.callback();\n\t            }\n\t        }\n\t        if (this._events.length > 0) {\n\t            requestAnimationFrame(this._boundDrawLoop);\n\t        }\n\t    };\n\t    //make a singleton\n\t    Tone.Draw = new Tone.Draw();\n\t    return Tone.Draw;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Both Tone.Panner3D and Tone.Listener have a position in 3D space \n\t\t *          using a right-handed cartesian coordinate system. \n\t\t *          The units used in the coordinate system are not defined; \n\t\t *          these coordinates are independent/invariant of any particular \n\t\t *          units such as meters or feet. Tone.Panner3D objects have an forward \n\t\t *          vector representing the direction the sound is projecting. Additionally, \n\t\t *          they have a sound cone representing how directional the sound is. \n\t\t *          For example, the sound could be omnidirectional, in which case it would \n\t\t *          be heard anywhere regardless of its forward, or it can be more directional \n\t\t *          and heard only if it is facing the listener. Tone.Listener objects \n\t\t *          (representing a person's ears) have an forward and up vector \n\t\t *          representing in which direction the person is facing. Because both the \n\t\t *          source stream and the listener can be moving, they both have a velocity \n\t\t *          vector representing both the speed and direction of movement. Taken together, \n\t\t *          these two velocities can be used to generate a doppler shift effect which changes the pitch.\n\t\t *          <br><br>\n\t\t *          Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @singleton\n\t\t *  @param {Number} positionX The initial x position.\n\t\t *  @param {Number} positionY The initial y position.\n\t\t *  @param {Number} positionZ The initial z position.\n\t\t */\n\t    Tone.Listener = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'positionX',\n\t            'positionY',\n\t            'positionZ'\n\t        ], ListenerConstructor.defaults);\n\t        /**\n\t\t\t *  Holds the current forward orientation\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._orientation = [\n\t            options.forwardX,\n\t            options.forwardY,\n\t            options.forwardZ,\n\t            options.upX,\n\t            options.upY,\n\t            options.upZ\n\t        ];\n\t        /**\n\t\t\t *  Holds the current position\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._position = [\n\t            options.positionX,\n\t            options.positionY,\n\t            options.positionZ\n\t        ];\n\t        // set the default position/forward\n\t        this.forwardX = options.forwardX;\n\t        this.forwardY = options.forwardY;\n\t        this.forwardZ = options.forwardZ;\n\t        this.upX = options.upX;\n\t        this.upY = options.upY;\n\t        this.upZ = options.upZ;\n\t        this.positionX = options.positionX;\n\t        this.positionY = options.positionY;\n\t        this.positionZ = options.positionZ;\n\t    };\n\t    Tone.extend(Tone.Listener);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t *  Defaults according to the specification\n\t\t */\n\t    Tone.Listener.defaults = {\n\t        'positionX': 0,\n\t        'positionY': 0,\n\t        'positionZ': 0,\n\t        'forwardX': 0,\n\t        'forwardY': 0,\n\t        'forwardZ': 1,\n\t        'upX': 0,\n\t        'upY': 1,\n\t        'upZ': 0\n\t    };\n\t    /**\n\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.Listener.prototype._rampTimeConstant = 0.01;\n\t    /**\n\t\t *  Sets the position of the listener in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.setPosition = function (x, y, z) {\n\t        if (this.context.listener.positionX) {\n\t            var now = this.now();\n\t            this.context.listener.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this.context.listener.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this.context.listener.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this.context.listener.setPosition(x, y, z);\n\t        }\n\t        this._position = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the orientation of the listener using two vectors, the forward\n\t\t *  vector (which direction the listener is facing) and the up vector \n\t\t *  (which the up direction of the listener). An up vector\n\t\t *  of 0, 0, 1 is equivalent to the listener standing up in the Z direction. \n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @param  {Number}  upX\n\t\t *  @param  {Number}  upY\n\t\t *  @param  {Number}  upZ\n\t\t *  @return {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.setOrientation = function (x, y, z, upX, upY, upZ) {\n\t        if (this.context.listener.forwardX) {\n\t            var now = this.now();\n\t            this.context.listener.forwardX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this.context.listener.forwardY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this.context.listener.forwardZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t            this.context.listener.upX.setTargetAtTime(upX, now, this._rampTimeConstant);\n\t            this.context.listener.upY.setTargetAtTime(upY, now, this._rampTimeConstant);\n\t            this.context.listener.upZ.setTargetAtTime(upZ, now, this._rampTimeConstant);\n\t        } else {\n\t            this.context.listener.setOrientation(x, y, z, upX, upY, upZ);\n\t        }\n\t        this._orientation = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The x position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionX', {\n\t        set: function (pos) {\n\t            this._position[0] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionY', {\n\t        set: function (pos) {\n\t            this._position[1] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionZ', {\n\t        set: function (pos) {\n\t            this._position[2] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardX', {\n\t        set: function (pos) {\n\t            this._orientation[0] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardY', {\n\t        set: function (pos) {\n\t            this._orientation[1] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardZ', {\n\t        set: function (pos) {\n\t            this._orientation[2] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upX', {\n\t        set: function (pos) {\n\t            this._orientation[3] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[3];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upY', {\n\t        set: function (pos) {\n\t            this._orientation[4] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[4];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upZ', {\n\t        set: function (pos) {\n\t            this._orientation[5] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[5];\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.dispose = function () {\n\t        this._orientation = null;\n\t        this._position = null;\n\t        return this;\n\t    };\n\t    //SINGLETON SETUP\n\t    var ListenerConstructor = Tone.Listener;\n\t    Tone.Listener = new ListenerConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Listener instanceof ListenerConstructor) {\n\t            //a single listener object\n\t            Tone.Listener = context.Listener;\n\t        } else {\n\t            //make new Listener insides\n\t            Tone.Listener = new ListenerConstructor();\n\t        }\n\t        context.Listener = Tone.Listener;\n\t    });\n\t    //END SINGLETON SETUP\n\t    return Tone.Listener;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  shim\n\t\t *  @private\n\t\t */\n\t    if (!window.hasOwnProperty('OfflineAudioContext') && window.hasOwnProperty('webkitOfflineAudioContext')) {\n\t        window.OfflineAudioContext = window.webkitOfflineAudioContext;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the OfflineAudioContext\n\t\t *  @extends {Tone.Context\n\t\t *  @param  {Number}  channels  The number of channels to render\n\t\t *  @param  {Number}  duration  The duration to render in samples\n\t\t *  @param {Number} sampleRate the sample rate to render at\n\t\t */\n\t    Tone.OfflineContext = function (channels, duration, sampleRate) {\n\t        /**\n\t\t\t *  The offline context\n\t\t\t *  @private\n\t\t\t *  @type  {OfflineAudioContext}\n\t\t\t */\n\t        var offlineContext = new OfflineAudioContext(channels, duration * sampleRate, sampleRate);\n\t        //wrap the methods/members\n\t        Tone.Context.call(this, offlineContext);\n\t        /**\n\t\t\t *  A private reference to the duration\n\t\t\t *  @private\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this._duration = duration;\n\t        /**\n\t\t\t *  An artificial clock source\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._currentTime = 0;\n\t        //modify the lookAhead and updateInterval to one block\n\t        this.lookAhead = this.blockTime;\n\t        this.updateInterval = this.blockTime;\n\t    };\n\t    Tone.extend(Tone.OfflineContext, Tone.Context);\n\t    /**\n\t\t *  Override the now method to point to the internal clock time\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.OfflineContext.prototype.now = function () {\n\t        return this._currentTime;\n\t    };\n\t    /**\n\t\t *  Overwrite this method since the worker is not necessary for the offline context\n\t\t *  @private\n\t\t */\n\t    Tone.OfflineContext.prototype._createWorker = function () {\n\t        //dummy worker that does nothing\n\t        return {\n\t            postMessage: function () {\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  Render the output of the OfflineContext\n\t\t *  @return  {Promise}\n\t\t */\n\t    Tone.OfflineContext.prototype.render = function () {\n\t        while (this._duration - this._currentTime >= 0) {\n\t            //invoke all the callbacks on that time\n\t            this.emit('tick');\n\t            //increment the clock\n\t            this._currentTime += Tone.prototype.blockTime;\n\t        }\n\t        //promise returned is not yet implemented in all browsers\n\t        return new Promise(function (done) {\n\t            this._context.oncomplete = function (e) {\n\t                done(e.renderedBuffer);\n\t            };\n\t            this._context.startRendering();\n\t        }.bind(this));\n\t    };\n\t    return Tone.OfflineContext;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext. \n\t\t *  The OfflineAudioContext is capable of rendering much faster than real time in many cases. \n\t\t *  The callback function also passes in an offline instance of Tone.Transport which can be used\n\t\t *  to schedule events along the Transport. \n\t\t *  @param  {Function}  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n\t\t *  @param  {Time}  duration     the amount of time to record for.\n\t\t *  @return  {Promise}  The promise which is invoked with the Tone.Buffer of the recorded output.\n\t\t *  @example\n\t\t * //render 2 seconds of the oscillator\n\t\t * Tone.Offline(function(){\n\t\t * \t//only nodes created in this callback will be recorded\n\t\t * \tvar oscillator = new Tone.Oscillator().toMaster().start(0)\n\t\t * \t//schedule their events\n\t\t * }, 2).then(function(buffer){\n\t\t * \t//do something with the output buffer\n\t\t * })\n\t\t * @example\n\t\t * //can also schedule events along the Transport\n\t\t * //using the passed in Offline Transport\n\t\t * Tone.Offline(function(Transport){\n\t\t * \tvar osc = new Tone.Oscillator().toMaster()\n\t\t * \tTransport.schedule(function(time){\n\t\t * \t\tosc.start(time).stop(time + 0.1)\n\t\t * \t}, 1)\n\t\t * \tTransport.start(0.2)\n\t\t * }, 4).then(function(buffer){\n\t\t * \t//do something with the output buffer\n\t\t * })\n\t\t */\n\t    Tone.Offline = function (callback, duration) {\n\t        //set the OfflineAudioContext\n\t        var sampleRate = Tone.context.sampleRate;\n\t        var originalContext = Tone.context;\n\t        var context = new Tone.OfflineContext(2, duration, sampleRate);\n\t        Tone.context = context;\n\t        //invoke the callback/scheduling\n\t        callback(Tone.Transport);\n\t        //process the audio\n\t        var rendered = context.render();\n\t        //return the original AudioContext\n\t        Tone.context = originalContext;\n\t        //return the audio\n\t        return rendered.then(function (buffer) {\n\t            //wrap it in a Tone.Buffer\n\t            return new Tone.Buffer(buffer);\n\t        });\n\t    };\n\t    return Tone.Offline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * \t@class  Tone.Effect is the base class for effects. Connect the effect between\n\t\t * \t        the effectSend and effectReturn GainNodes, then control the amount of\n\t\t * \t        effect which goes to the output using the wet control.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {NormalRange|Object} [wet] The starting wet value. \n\t\t */\n\t    Tone.Effect = function () {\n\t        this.createInsOuts(1, 1);\n\t        //get all of the defaults\n\t        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);\n\t        /**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t        /**\n\t\t\t *  The wet control is how much of the effected\n\t\t\t *  will pass through to the output. 1 = 100% effected\n\t\t\t *  signal, 0 = 100% dry signal. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.wet = this._dryWet.fade;\n\t        /**\n\t\t\t *  connect the effectSend to the input of hte effect\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSend = new Tone.Gain();\n\t        /**\n\t\t\t *  connect the output of the effect to the effectReturn\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturn = new Tone.Gain();\n\t        //connections\n\t        this.input.connect(this._dryWet.a);\n\t        this.input.connect(this.effectSend);\n\t        this.effectReturn.connect(this._dryWet.b);\n\t        this._dryWet.connect(this.output);\n\t        this._readOnly(['wet']);\n\t    };\n\t    Tone.extend(Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Effect.defaults = { 'wet': 1 };\n\t    /**\n\t\t *  chains the effect in between the effectSend and effectReturn\n\t\t *  @param  {Tone} effect\n\t\t *  @private\n\t\t *  @returns {Tone.Effect} this\n\t\t */\n\t    Tone.Effect.prototype.connectEffect = function (effect) {\n\t        this.effectSend.chain(effect, this.effectReturn);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Effect} this\n\t\t */\n\t    Tone.Effect.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._dryWet.dispose();\n\t        this._dryWet = null;\n\t        this.effectSend.dispose();\n\t        this.effectSend = null;\n\t        this.effectReturn.dispose();\n\t        this.effectReturn = null;\n\t        this._writable(['wet']);\n\t        this.wet = null;\n\t        return this;\n\t    };\n\t    return Tone.Effect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n\t\t *         Setting the LFO rate and depth allows for control over the filter modulation rate \n\t\t *         and depth.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Time|Object} [frequency] The rate of the LFO.\n\t\t *  @param {Frequency=} baseFrequency The lower value of the LFOs oscillation\n\t \t *  @param {Frequency=} octaves The number of octaves above the baseFrequency\n\t\t *  @example\n\t\t * //create an autofilter and start it's LFO\n\t\t * var autoFilter = new Tone.AutoFilter(\"4n\").toMaster().start();\n\t\t * //route an oscillator through the filter and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(autoFilter).start();\n\t\t */\n\t    Tone.AutoFilter = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'baseFrequency',\n\t            'octaves'\n\t        ], Tone.AutoFilter.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which drives the filter cutoff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'amplitude': options.depth\n\t        });\n\t        /**\n\t\t\t * The range of the filter modulating between the min and max frequency. \n\t\t\t * 0 = no modulation. 1 = full modulation.\n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        /**\n\t\t\t * How fast the filter modulates between min and max. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        /**\n\t\t\t *  The filter node\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.filter = new Tone.Filter(options.filter);\n\t        /**\n\t\t\t *  The octaves placeholder\n\t\t\t *  @type {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = 0;\n\t        //connections\n\t        this.connectEffect(this.filter);\n\t        this._lfo.connect(this.filter.frequency);\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.octaves = options.octaves;\n\t        this.baseFrequency = options.baseFrequency;\n\t    };\n\t    //extend Effect\n\t    Tone.extend(Tone.AutoFilter, Tone.Effect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoFilter.defaults = {\n\t        'frequency': 1,\n\t        'type': 'sine',\n\t        'depth': 1,\n\t        'baseFrequency': 200,\n\t        'octaves': 2.6,\n\t        'filter': {\n\t            'type': 'lowpass',\n\t            'rolloff': -12,\n\t            'Q': 1\n\t        }\n\t    };\n\t    /**\n\t\t * Start the effect.\n\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.start = function (time) {\n\t        this._lfo.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the effect.\n\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.stop = function (time) {\n\t        this._lfo.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the filter to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                               Transport has started. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.sync = function (delay) {\n\t        this._lfo.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the filter from the transport.\n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.unsync = function () {\n\t        this._lfo.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the AutoFilter. \n\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum value of the filter's cutoff frequency.\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {Frequency}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._lfo.min;\n\t        },\n\t        set: function (freq) {\n\t            this._lfo.min = this.toFrequency(freq);\n\t            //and set the max\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum value of the filter's cutoff frequency. \n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (oct) {\n\t            this._octaves = oct;\n\t            this._lfo.max = this.baseFrequency * Math.pow(2, oct);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this.filter.dispose();\n\t        this.filter = null;\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. \n\t\t *         More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency|Object} [frequency] Rate of left-right oscillation. \n\t\t *  @example\n\t\t * //create an autopanner and start it's LFO\n\t\t * var autoPanner = new Tone.AutoPanner(\"4n\").toMaster().start();\n\t\t * //route an oscillator through the panner and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(autoPanner).start();\n\t\t */\n\t    Tone.AutoPanner = function () {\n\t        var options = this.optionsObject(arguments, ['frequency'], Tone.AutoPanner.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which drives the panning\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'amplitude': options.depth,\n\t            'min': -1,\n\t            'max': 1\n\t        });\n\t        /**\n\t\t\t * The amount of panning between left and right. \n\t\t\t * 0 = always center. 1 = full range between left and right. \n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        /**\n\t\t\t *  the panner node which does the panning\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = new Tone.Panner();\n\t        /**\n\t\t\t * How fast the panner modulates between left and right. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        //connections\n\t        this.connectEffect(this._panner);\n\t        this._lfo.connect(this._panner.pan);\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'depth',\n\t            'frequency'\n\t        ]);\n\t    };\n\t    //extend Effect\n\t    Tone.extend(Tone.AutoPanner, Tone.Effect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoPanner.defaults = {\n\t        'frequency': 1,\n\t        'type': 'sine',\n\t        'depth': 1\n\t    };\n\t    /**\n\t\t * Start the effect.\n\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.start = function (time) {\n\t        this._lfo.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the effect.\n\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.stop = function (time) {\n\t        this._lfo.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the panner to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                               Transport has started. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.sync = function (delay) {\n\t        this._lfo.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the panner from the transport\n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.unsync = function () {\n\t        this._lfo.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the AutoFilter. \n\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AutoPanner.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this._panner.dispose();\n\t        this._panner = null;\n\t        this._writable([\n\t            'depth',\n\t            'frequency'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoPanner;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).\n\t\t *          The frequency of the filter is adjusted proportionally to the \n\t\t *          incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency|Object} [baseFrequency] The frequency the filter is set \n\t\t *                                            to at the low point of the wah\n\t\t *  @param {Positive} [octaves] The number of octaves above the baseFrequency\n\t\t *                                the filter will sweep to when fully open\n\t\t *  @param {Decibels} [sensitivity] The decibel threshold sensitivity for \n\t\t *                                   the incoming signal. Normal range of -40 to 0. \n\t\t *  @example\n\t\t * var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();\n\t\t * //initialize the synth and connect to autowah\n\t\t * var synth = new Synth.connect(autoWah);\n\t\t * //Q value influences the effect of the wah - default is 2\n\t\t * autoWah.Q.value = 6;\n\t\t * //more audible on higher notes\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\")\n\t\t */\n\t    Tone.AutoWah = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'baseFrequency',\n\t            'octaves',\n\t            'sensitivity'\n\t        ], Tone.AutoWah.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  The envelope follower. Set the attack/release\n\t\t\t *  timing to adjust how the envelope is followed. \n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t        this.follower = new Tone.Follower(options.follower);\n\t        /**\n\t\t\t *  scales the follower value to the frequency domain\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sweepRange = new Tone.ScaleExp(0, 1, 0.5);\n\t        /**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._baseFrequency = options.baseFrequency;\n\t        /**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  the input gain to adjust the sensitivity\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputBoost = new Tone.Gain();\n\t        /**\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._bandpass = new Tone.Filter({\n\t            'rolloff': -48,\n\t            'frequency': 0,\n\t            'Q': options.Q\n\t        });\n\t        /**\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._peaking = new Tone.Filter(0, 'peaking');\n\t        this._peaking.gain.value = options.gain;\n\t        /**\n\t\t\t * The gain of the filter.\n\t\t\t * @type {Number}\n\t\t\t * @signal\n\t\t\t */\n\t        this.gain = this._peaking.gain;\n\t        /**\n\t\t\t * The quality of the filter.\n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t */\n\t        this.Q = this._bandpass.Q;\n\t        //the control signal path\n\t        this.effectSend.chain(this._inputBoost, this.follower, this._sweepRange);\n\t        this._sweepRange.connect(this._bandpass.frequency);\n\t        this._sweepRange.connect(this._peaking.frequency);\n\t        //the filtered path\n\t        this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t        //set the initial value\n\t        this._setSweepRange();\n\t        this.sensitivity = options.sensitivity;\n\t        this._readOnly([\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AutoWah, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoWah.defaults = {\n\t        'baseFrequency': 100,\n\t        'octaves': 6,\n\t        'sensitivity': 0,\n\t        'Q': 2,\n\t        'gain': 2,\n\t        'follower': {\n\t            'attack': 0.3,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t * The number of octaves that the filter will sweep above the \n\t\t * baseFrequency. \n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Number}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            this._setSweepRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The base frequency from which the sweep will start from.\n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._baseFrequency;\n\t        },\n\t        set: function (baseFreq) {\n\t            this._baseFrequency = baseFreq;\n\t            this._setSweepRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The sensitivity to control how responsive to the input signal the filter is. \n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Decibels}\n\t\t * @name sensitivity\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'sensitivity', {\n\t        get: function () {\n\t            return this.gainToDb(1 / this._inputBoost.gain.value);\n\t        },\n\t        set: function (sensitivy) {\n\t            this._inputBoost.gain.value = 1 / this.dbToGain(sensitivy);\n\t        }\n\t    });\n\t    /**\n\t\t *  sets the sweep range of the scaler\n\t\t *  @private\n\t\t */\n\t    Tone.AutoWah.prototype._setSweepRange = function () {\n\t        this._sweepRange.min = this._baseFrequency;\n\t        this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.AutoWah} this\n\t\t */\n\t    Tone.AutoWah.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this.follower.dispose();\n\t        this.follower = null;\n\t        this._sweepRange.dispose();\n\t        this._sweepRange = null;\n\t        this._bandpass.dispose();\n\t        this._bandpass = null;\n\t        this._peaking.dispose();\n\t        this._peaking = null;\n\t        this._inputBoost.dispose();\n\t        this._inputBoost = null;\n\t        this._writable([\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t        this.gain = null;\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoWah;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Bitcrusher downsamples the incoming signal to a different bitdepth. \n\t\t *         Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing\n\t\t *         on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Number} bits The number of bits to downsample the signal. Nominal range\n\t\t *                       of 1 to 8. \n\t\t *  @example\n\t\t * //initialize crusher and route a synth through it\n\t\t * var crusher = new Tone.BitCrusher(4).toMaster();\n\t\t * var synth = new Tone.MonoSynth().connect(crusher);\n\t\t */\n\t    Tone.BitCrusher = function () {\n\t        var options = this.optionsObject(arguments, ['bits'], Tone.BitCrusher.defaults);\n\t        Tone.Effect.call(this, options);\n\t        var invStepSize = 1 / Math.pow(2, options.bits - 1);\n\t        /**\n\t\t\t *  Subtract the input signal and the modulus of the input signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subtract = new Tone.Subtract();\n\t        /**\n\t\t\t *  The mod function\n\t\t\t *  @type  {Tone.Modulo}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulo = new Tone.Modulo(invStepSize);\n\t        /**\n\t\t\t *  keeps track of the bits\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._bits = options.bits;\n\t        //connect it up\n\t        this.effectSend.fan(this._subtract, this._modulo);\n\t        this._modulo.connect(this._subtract, 0, 1);\n\t        this._subtract.connect(this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.BitCrusher, Tone.Effect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.BitCrusher.defaults = { 'bits': 4 };\n\t    /**\n\t\t * The bit depth of the effect. Nominal range of 1-8. \n\t\t * @memberOf Tone.BitCrusher#\n\t\t * @type {number}\n\t\t * @name bits\n\t\t */\n\t    Object.defineProperty(Tone.BitCrusher.prototype, 'bits', {\n\t        get: function () {\n\t            return this._bits;\n\t        },\n\t        set: function (bits) {\n\t            this._bits = bits;\n\t            var invStepSize = 1 / Math.pow(2, bits - 1);\n\t            this._modulo.value = invStepSize;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.BitCrusher} this\n\t\t */\n\t    Tone.BitCrusher.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._subtract.dispose();\n\t        this._subtract = null;\n\t        this._modulo.dispose();\n\t        this._modulo = null;\n\t        return this;\n\t    };\n\t    return Tone.BitCrusher;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good \n\t\t *         for making different types of distortion sounds.\n\t\t *         Note that odd orders sound very different from even ones, \n\t\t *         and order = 1 is no change. \n\t\t *         Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {Positive|Object} [order] The order of the chebyshev polynomial. Normal range between 1-100. \n\t\t *  @example\n\t\t * //create a new cheby\n\t\t * var cheby = new Tone.Chebyshev(50);\n\t\t * //create a monosynth connected to our cheby\n\t\t * synth = new Tone.MonoSynth().connect(cheby);\n\t\t */\n\t    Tone.Chebyshev = function () {\n\t        var options = this.optionsObject(arguments, ['order'], Tone.Chebyshev.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(4096);\n\t        /**\n\t\t\t * holds onto the order of the filter\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t        this._order = options.order;\n\t        this.connectEffect(this._shaper);\n\t        this.order = options.order;\n\t        this.oversample = options.oversample;\n\t    };\n\t    Tone.extend(Tone.Chebyshev, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Chebyshev.defaults = {\n\t        'order': 1,\n\t        'oversample': 'none'\n\t    };\n\t    /**\n\t\t *  get the coefficient for that degree\n\t\t *  @param {number} x the x value\n\t\t *  @param   {number} degree \n\t\t *  @param {Object} memo memoize the computed value. \n\t\t *                       this speeds up computation greatly. \n\t\t *  @return  {number}       the coefficient \n\t\t *  @private\n\t\t */\n\t    Tone.Chebyshev.prototype._getCoefficient = function (x, degree, memo) {\n\t        if (memo.hasOwnProperty(degree)) {\n\t            return memo[degree];\n\t        } else if (degree === 0) {\n\t            memo[degree] = 0;\n\t        } else if (degree === 1) {\n\t            memo[degree] = x;\n\t        } else {\n\t            memo[degree] = 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo);\n\t        }\n\t        return memo[degree];\n\t    };\n\t    /**\n\t\t * The order of the Chebyshev polynomial which creates\n\t\t * the equation which is applied to the incoming \n\t\t * signal through a Tone.WaveShaper. The equations\n\t\t * are in the form:<br>\n\t\t * order 2: 2x^2 + 1<br>\n\t\t * order 3: 4x^3 + 3x <br>\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {Positive}\n\t\t * @name order\n\t\t */\n\t    Object.defineProperty(Tone.Chebyshev.prototype, 'order', {\n\t        get: function () {\n\t            return this._order;\n\t        },\n\t        set: function (order) {\n\t            this._order = order;\n\t            var curve = new Array(4096);\n\t            var len = curve.length;\n\t            for (var i = 0; i < len; ++i) {\n\t                var x = i * 2 / len - 1;\n\t                if (x === 0) {\n\t                    //should output 0 when input is 0\n\t                    curve[i] = 0;\n\t                } else {\n\t                    curve[i] = this._getCoefficient(x, order, {});\n\t                }\n\t            }\n\t            this._shaper.curve = curve;\n\t        }\n\t    });\n\t    /**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.Chebyshev.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            this._shaper.oversample = oversampling;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Chebyshev} this\n\t\t */\n\t    Tone.Chebyshev.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        return this;\n\t    };\n\t    return Tone.Chebyshev;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R. \n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.Effect}\n\t\t */\n\t    Tone.StereoEffect = function () {\n\t        this.createInsOuts(1, 1);\n\t        //get the defaults\n\t        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);\n\t        /**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t        /**\n\t\t\t *  The wet control, i.e. how much of the effected\n\t\t\t *  will pass through to the output. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.wet = this._dryWet.fade;\n\t        /**\n\t\t\t *  then split it\n\t\t\t *  @type {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t        this._split = new Tone.Split();\n\t        /**\n\t\t\t *  the effects send LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSendL = this._split.left;\n\t        /**\n\t\t\t *  the effects send RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSendR = this._split.right;\n\t        /**\n\t\t\t *  the stereo effect merger\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = new Tone.Merge();\n\t        /**\n\t\t\t *  the effect return LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturnL = this._merge.left;\n\t        /**\n\t\t\t *  the effect return RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturnR = this._merge.right;\n\t        //connections\n\t        this.input.connect(this._split);\n\t        //dry wet connections\n\t        this.input.connect(this._dryWet, 0, 0);\n\t        this._merge.connect(this._dryWet, 0, 1);\n\t        this._dryWet.connect(this.output);\n\t        this._readOnly(['wet']);\n\t    };\n\t    Tone.extend(Tone.StereoEffect, Tone.Effect);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.StereoEffect} this\n\t\t */\n\t    Tone.StereoEffect.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._dryWet.dispose();\n\t        this._dryWet = null;\n\t        this._split.dispose();\n\t        this._split = null;\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        this.effectSendL = null;\n\t        this.effectSendR = null;\n\t        this.effectReturnL = null;\n\t        this.effectReturnR = null;\n\t        this._writable(['wet']);\n\t        this.wet = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * \t@class  Tone.FeedbackEffect provides a loop between an \n\t\t * \t        audio source and its own output. This is a base-class\n\t\t * \t        for feedback effects. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {NormalRange|Object} [feedback] The initial feedback value.\n\t\t */\n\t    Tone.FeedbackEffect = function () {\n\t        var options = this.optionsObject(arguments, ['feedback']);\n\t        options = this.defaultArg(options, Tone.FeedbackEffect.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the gain which controls the feedback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackGain = new Tone.Gain(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of signal which is fed back into the effect input. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = this._feedbackGain.gain;\n\t        //the feedback loop\n\t        this.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.FeedbackEffect, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackEffect.defaults = { 'feedback': 0.125 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.FeedbackEffect} this\n\t\t */\n\t    Tone.FeedbackEffect.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this._feedbackGain.dispose();\n\t        this._feedbackGain = null;\n\t        this.feedback = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Just like a stereo feedback effect, but the feedback is routed from left to right\n\t\t *         and right to left instead of on the same channel.\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.FeedbackEffect}\n\t\t */\n\t    Tone.StereoXFeedbackEffect = function () {\n\t        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The amount of feedback from the output\n\t\t\t *  back into the input of the effect (routed\n\t\t\t *  across left and right channels).\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackLR = new Tone.Gain();\n\t        /**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackRL = new Tone.Gain();\n\t        //connect it up\n\t        this.effectReturnL.chain(this._feedbackLR, this.effectSendR);\n\t        this.effectReturnR.chain(this._feedbackRL, this.effectSendL);\n\t        this.feedback.fan(this._feedbackLR.gain, this._feedbackRL.gain);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.StereoXFeedbackEffect, Tone.FeedbackEffect);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoXFeedbackEffect} this\n\t\t */\n\t    Tone.StereoXFeedbackEffect.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this.feedback.dispose();\n\t        this.feedback = null;\n\t        this._feedbackLR.dispose();\n\t        this._feedbackLR = null;\n\t        this._feedbackRL.dispose();\n\t        this._feedbackRL = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoXFeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Chorus is a stereo chorus effect with feedback composed of \n\t\t *         a left and right delay with a Tone.LFO applied to the delayTime of each channel. \n\t\t *         Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n\t\t *         Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.StereoXFeedbackEffect}\n\t\t *\t@param {Frequency|Object} [frequency] The frequency of the LFO.\n\t\t *\t@param {Milliseconds} [delayTime] The delay of the chorus effect in ms. \n\t\t *\t@param {NormalRange} [depth] The depth of the chorus.\n\t\t *\t@example\n\t\t * var chorus = new Tone.Chorus(4, 2.5, 0.5);\n\t\t * var synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);\n\t\t * synth.triggerAttackRelease([\"C3\",\"E3\",\"G3\"], \"8n\");\n\t\t */\n\t    Tone.Chorus = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'delayTime',\n\t            'depth'\n\t        ], Tone.Chorus.defaults);\n\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the depth of the chorus\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._depth = options.depth;\n\t        /**\n\t\t\t *  the delayTime\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayTime = options.delayTime / 1000;\n\t        /**\n\t\t\t *  the lfo which controls the delayTime\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'min': 0,\n\t            'max': 1\n\t        });\n\t        /**\n\t\t\t *  another LFO for the right side with a 180 degree phase diff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'min': 0,\n\t            'max': 1,\n\t            'phase': 180\n\t        });\n\t        /**\n\t\t\t *  delay for left\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNodeL = new Tone.Delay();\n\t        /**\n\t\t\t *  delay for right\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNodeR = new Tone.Delay();\n\t        /**\n\t\t\t * The frequency of the LFO which modulates the delayTime. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfoL.frequency;\n\t        //connections\n\t        this.effectSendL.chain(this._delayNodeL, this.effectReturnL);\n\t        this.effectSendR.chain(this._delayNodeR, this.effectReturnR);\n\t        //and pass through to make the detune apparent\n\t        this.effectSendL.connect(this.effectReturnL);\n\t        this.effectSendR.connect(this.effectReturnR);\n\t        //lfo setup\n\t        this._lfoL.connect(this._delayNodeL.delayTime);\n\t        this._lfoR.connect(this._delayNodeR.delayTime);\n\t        //start the lfo\n\t        this._lfoL.start();\n\t        this._lfoR.start();\n\t        //have one LFO frequency control the other\n\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t        //set the initial values\n\t        this.depth = this._depth;\n\t        this.frequency.value = options.frequency;\n\t        this.type = options.type;\n\t        this._readOnly(['frequency']);\n\t        this.spread = options.spread;\n\t    };\n\t    Tone.extend(Tone.Chorus, Tone.StereoXFeedbackEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Chorus.defaults = {\n\t        'frequency': 1.5,\n\t        'delayTime': 3.5,\n\t        'depth': 0.7,\n\t        'feedback': 0.1,\n\t        'type': 'sine',\n\t        'spread': 180\n\t    };\n\t    /**\n\t\t * The depth of the effect. A depth of 1 makes the delayTime\n\t\t * modulate between 0 and 2*delayTime (centered around the delayTime). \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {NormalRange}\n\t\t * @name depth\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'depth', {\n\t        get: function () {\n\t            return this._depth;\n\t        },\n\t        set: function (depth) {\n\t            this._depth = depth;\n\t            var deviation = this._delayTime * depth;\n\t            this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n\t            this._lfoL.max = this._delayTime + deviation;\n\t            this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n\t            this._lfoR.max = this._delayTime + deviation;\n\t        }\n\t    });\n\t    /**\n\t\t * The delayTime in milliseconds of the chorus. A larger delayTime\n\t\t * will give a more pronounced effect. Nominal range a delayTime\n\t\t * is between 2 and 20ms. \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {Milliseconds}\n\t\t * @name delayTime\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'delayTime', {\n\t        get: function () {\n\t            return this._delayTime * 1000;\n\t        },\n\t        set: function (delayTime) {\n\t            this._delayTime = delayTime / 1000;\n\t            this.depth = this._depth;\n\t        }\n\t    });\n\t    /**\n\t\t * The oscillator type of the LFO. \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfoL.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfoL.type = type;\n\t            this._lfoR.type = type;\n\t        }\n\t    });\n\t    /** \n\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {Degrees}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'spread', {\n\t        get: function () {\n\t            return this._lfoR.phase - this._lfoL.phase;    //180\n\t        },\n\t        set: function (spread) {\n\t            this._lfoL.phase = 90 - spread / 2;\n\t            this._lfoR.phase = spread / 2 + 90;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Chorus} this\n\t\t */\n\t    Tone.Chorus.prototype.dispose = function () {\n\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        this._delayNodeL.dispose();\n\t        this._delayNodeL = null;\n\t        this._delayNodeR.dispose();\n\t        this._delayNodeR = null;\n\t        this._writable('frequency');\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.Chorus;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Convolver is a wrapper around the Native Web Audio \n\t\t *          [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n\t\t *          Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n\t\t *          [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {string|Tone.Buffer|Object} [url] The URL of the impulse response or the Tone.Buffer\n\t\t *                                           contianing the impulse response. \n\t\t *  @param {Function} onload The callback to invoke when the url is loaded.\n\t\t *  @example\n\t\t * //initializing the convolver with an impulse response\n\t\t * var convolver = new Tone.Convolver(\"./path/to/ir.wav\").toMaster();\n\t\t */\n\t    Tone.Convolver = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.Convolver.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  convolver node\n\t\t\t *  @type {ConvolverNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._convolver = this.context.createConvolver();\n\t        /**\n\t\t\t *  the convolution buffer\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = new Tone.Buffer();\n\t        if (this.isString(options.url)) {\n\t            this._buffer.load(options.url, function (buffer) {\n\t                this.buffer = buffer;\n\t                options.onload();\n\t            }.bind(this));\n\t        } else if (options.url) {\n\t            this.buffer = options.url;\n\t            options.onload();\n\t        }\n\t        this.connectEffect(this._convolver);\n\t    };\n\t    Tone.extend(Tone.Convolver, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Convolver.defaults = { 'onload': Tone.noOp };\n\t    /**\n\t\t *  The convolver's buffer\n\t\t *  @memberOf Tone.Convolver#\n\t\t *  @type {AudioBuffer}\n\t\t *  @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Convolver.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer.get();\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t            this._convolver.buffer = this._buffer.get();\n\t        }\n\t    });\n\t    /**\n\t\t *  Load an impulse response url as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {string} url The url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @param  {function=} callback\n\t\t *  @returns {Promise}\n\t\t */\n\t    Tone.Convolver.prototype.load = function (url, callback) {\n\t        return this._buffer.load(url, function (buff) {\n\t            this.buffer = buff;\n\t            if (callback) {\n\t                callback();\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Convolver} this\n\t\t */\n\t    Tone.Convolver.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._convolver.disconnect();\n\t        this._convolver = null;\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    return Tone.Convolver;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Distortion is a simple distortion effect using Tone.WaveShaper.\n\t\t *         Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {Number|Object} [distortion] The amount of distortion (nominal range of 0-1)\n\t\t *  @example\n\t\t * var dist = new Tone.Distortion(0.8).toMaster();\n\t\t * var fm = new Tone.SimpleFM().connect(dist);\n\t\t * //this sounds good on bass notes\n\t\t * fm.triggerAttackRelease(\"A1\", \"8n\");\n\t\t */\n\t    Tone.Distortion = function () {\n\t        var options = this.optionsObject(arguments, ['distortion'], Tone.Distortion.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(4096);\n\t        /**\n\t\t\t * holds the distortion amount\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t        this._distortion = options.distortion;\n\t        this.connectEffect(this._shaper);\n\t        this.distortion = options.distortion;\n\t        this.oversample = options.oversample;\n\t    };\n\t    Tone.extend(Tone.Distortion, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Distortion.defaults = {\n\t        'distortion': 0.4,\n\t        'oversample': 'none'\n\t    };\n\t    /**\n\t\t * The amount of distortion.\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {NormalRange}\n\t\t * @name distortion\n\t\t */\n\t    Object.defineProperty(Tone.Distortion.prototype, 'distortion', {\n\t        get: function () {\n\t            return this._distortion;\n\t        },\n\t        set: function (amount) {\n\t            this._distortion = amount;\n\t            var k = amount * 100;\n\t            var deg = Math.PI / 180;\n\t            this._shaper.setMap(function (x) {\n\t                if (Math.abs(x) < 0.001) {\n\t                    //should output 0 when input is 0\n\t                    return 0;\n\t                } else {\n\t                    return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n\t                }\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.Distortion.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            this._shaper.oversample = oversampling;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Distortion} this\n\t\t */\n\t    Tone.Distortion.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        return this;\n\t    };\n\t    return Tone.Distortion;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.FeedbackDelay is a DelayNode in which part of output\n\t\t *          signal is fed back into the delay. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Time|Object} [delayTime] The delay applied to the incoming signal. \n\t\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t\t *                            is fed back through the delay.\n\t\t *  @example\n\t\t * var feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toMaster();\n\t\t * var tom = new Tone.DrumSynth({\n\t\t * \t\"octaves\" : 4,\n\t\t * \t\"pitchDecay\" : 0.1\n\t\t * }).connect(feedbackDelay);\n\t\t * tom.triggerAttackRelease(\"A2\",\"32n\");\n\t\t */\n\t    Tone.FeedbackDelay = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'feedback'\n\t        ], Tone.FeedbackDelay.defaults);\n\t        Tone.FeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The delayTime of the DelayNode. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delayNode.delayTime;\n\t        // connect it up\n\t        this.connectEffect(this._delayNode);\n\t        this._readOnly(['delayTime']);\n\t    };\n\t    Tone.extend(Tone.FeedbackDelay, Tone.FeedbackEffect);\n\t    /**\n\t\t *  The default values. \n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackDelay.defaults = { 'delayTime': 0.25 };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackDelay} this\n\t\t */\n\t    Tone.FeedbackDelay.prototype.dispose = function () {\n\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t        this._delayNode.dispose();\n\t        this._delayNode = null;\n\t        this._writable(['delayTime']);\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackDelay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  an array of comb filter delay values from Freeverb implementation\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterTunings = [\n\t        1557 / 44100,\n\t        1617 / 44100,\n\t        1491 / 44100,\n\t        1422 / 44100,\n\t        1277 / 44100,\n\t        1356 / 44100,\n\t        1188 / 44100,\n\t        1116 / 44100\n\t    ];\n\t    /**\n\t\t *  an array of allpass filter frequency values from Freeverb implementation\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var allpassFilterFrequencies = [\n\t        225,\n\t        556,\n\t        441,\n\t        341\n\t    ];\n\t    /**\n\t\t *  @class Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n\t\t *         Read more on reverb on [SoundOnSound](http://www.soundonsound.com/sos/may00/articles/reverb.htm).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [roomSize] Correlated to the decay time. \n\t\t *  @param {Frequency} [dampening] The cutoff frequency of a lowpass filter as part \n\t\t *                                 of the reverb. \n\t\t *  @example\n\t\t * var freeverb = new Tone.Freeverb().toMaster();\n\t\t * freeverb.dampening.value = 1000;\n\t\t * //routing synth through the reverb\n\t\t * var synth = new Tone.AMSynth().connect(freeverb);\n\t\t */\n\t    Tone.Freeverb = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'roomSize',\n\t            'dampening'\n\t        ], Tone.Freeverb.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The roomSize value between. A larger roomSize\n\t\t\t *  will result in a longer decay. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of dampening of the reverberant signal. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = new Tone.Signal(options.dampening, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  the comb filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._combFilters = [];\n\t        /**\n\t\t\t *  the allpass filters on the left\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFiltersL = [];\n\t        /**\n\t\t\t *  the allpass filters on the right\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFiltersR = [];\n\t        //make the allpass filters on the right\n\t        for (var l = 0; l < allpassFilterFrequencies.length; l++) {\n\t            var allpassL = this.context.createBiquadFilter();\n\t            allpassL.type = 'allpass';\n\t            allpassL.frequency.value = allpassFilterFrequencies[l];\n\t            this._allpassFiltersL.push(allpassL);\n\t        }\n\t        //make the allpass filters on the left\n\t        for (var r = 0; r < allpassFilterFrequencies.length; r++) {\n\t            var allpassR = this.context.createBiquadFilter();\n\t            allpassR.type = 'allpass';\n\t            allpassR.frequency.value = allpassFilterFrequencies[r];\n\t            this._allpassFiltersR.push(allpassR);\n\t        }\n\t        //make the comb filters\n\t        for (var c = 0; c < combFilterTunings.length; c++) {\n\t            var lfpf = new Tone.LowpassCombFilter(combFilterTunings[c]);\n\t            if (c < combFilterTunings.length / 2) {\n\t                this.effectSendL.chain(lfpf, this._allpassFiltersL[0]);\n\t            } else {\n\t                this.effectSendR.chain(lfpf, this._allpassFiltersR[0]);\n\t            }\n\t            this.roomSize.connect(lfpf.resonance);\n\t            this.dampening.connect(lfpf.dampening);\n\t            this._combFilters.push(lfpf);\n\t        }\n\t        //chain the allpass filters togetehr\n\t        this.connectSeries.apply(this, this._allpassFiltersL);\n\t        this.connectSeries.apply(this, this._allpassFiltersR);\n\t        this._allpassFiltersL[this._allpassFiltersL.length - 1].connect(this.effectReturnL);\n\t        this._allpassFiltersR[this._allpassFiltersR.length - 1].connect(this.effectReturnR);\n\t        this._readOnly([\n\t            'roomSize',\n\t            'dampening'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Freeverb, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Freeverb.defaults = {\n\t        'roomSize': 0.7,\n\t        'dampening': 3000\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Freeverb} this\n\t\t */\n\t    Tone.Freeverb.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        for (var al = 0; al < this._allpassFiltersL.length; al++) {\n\t            this._allpassFiltersL[al].disconnect();\n\t            this._allpassFiltersL[al] = null;\n\t        }\n\t        this._allpassFiltersL = null;\n\t        for (var ar = 0; ar < this._allpassFiltersR.length; ar++) {\n\t            this._allpassFiltersR[ar].disconnect();\n\t            this._allpassFiltersR[ar] = null;\n\t        }\n\t        this._allpassFiltersR = null;\n\t        for (var cf = 0; cf < this._combFilters.length; cf++) {\n\t            this._combFilters[cf].dispose();\n\t            this._combFilters[cf] = null;\n\t        }\n\t        this._combFilters = null;\n\t        this._writable([\n\t            'roomSize',\n\t            'dampening'\n\t        ]);\n\t        this.roomSize.dispose();\n\t        this.roomSize = null;\n\t        this.dampening.dispose();\n\t        this.dampening = null;\n\t        return this;\n\t    };\n\t    return Tone.Freeverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  an array of the comb filter delay time values\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterDelayTimes = [\n\t        1687 / 25000,\n\t        1601 / 25000,\n\t        2053 / 25000,\n\t        2251 / 25000\n\t    ];\n\t    /**\n\t\t *  the resonances of each of the comb filters\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterResonances = [\n\t        0.773,\n\t        0.802,\n\t        0.753,\n\t        0.733\n\t    ];\n\t    /**\n\t\t *  the allpass filter frequencies\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var allpassFilterFreqs = [\n\t        347,\n\t        113,\n\t        37\n\t    ];\n\t    /**\n\t\t *  @class Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n\t\t *         tuned by John Chowning in 1970.\n\t\t *         It is made up of three allpass filters and four Tone.FeedbackCombFilter. \n\t\t *         \n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [roomSize] Coorelates to the decay time.\n\t\t *  @example\n\t\t * var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);\n\t\t * var delay = new Tone.FeedbackDelay(0.5); \n\t\t * //connecting the synth to reverb through delay\n\t\t * var synth = new Tone.DuoSynth().chain(delay, reverb);\n\t\t * synth.triggerAttackRelease(\"A4\",\"8n\");\n\t\t */\n\t    Tone.JCReverb = function () {\n\t        var options = this.optionsObject(arguments, ['roomSize'], Tone.JCReverb.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  room size control values between [0,1]\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  scale the room size\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scaleRoomSize = new Tone.Scale(-0.733, 0.197);\n\t        /**\n\t\t\t *  a series of allpass filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFilters = [];\n\t        /**\n\t\t\t *  parallel feedback comb filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackCombFilters = [];\n\t        //make the allpass filters\n\t        for (var af = 0; af < allpassFilterFreqs.length; af++) {\n\t            var allpass = this.context.createBiquadFilter();\n\t            allpass.type = 'allpass';\n\t            allpass.frequency.value = allpassFilterFreqs[af];\n\t            this._allpassFilters.push(allpass);\n\t        }\n\t        //and the comb filters\n\t        for (var cf = 0; cf < combFilterDelayTimes.length; cf++) {\n\t            var fbcf = new Tone.FeedbackCombFilter(combFilterDelayTimes[cf], 0.1);\n\t            this._scaleRoomSize.connect(fbcf.resonance);\n\t            fbcf.resonance.value = combFilterResonances[cf];\n\t            this._allpassFilters[this._allpassFilters.length - 1].connect(fbcf);\n\t            if (cf < combFilterDelayTimes.length / 2) {\n\t                fbcf.connect(this.effectReturnL);\n\t            } else {\n\t                fbcf.connect(this.effectReturnR);\n\t            }\n\t            this._feedbackCombFilters.push(fbcf);\n\t        }\n\t        //chain the allpass filters together\n\t        this.roomSize.connect(this._scaleRoomSize);\n\t        this.connectSeries.apply(this, this._allpassFilters);\n\t        this.effectSendL.connect(this._allpassFilters[0]);\n\t        this.effectSendR.connect(this._allpassFilters[0]);\n\t        this._readOnly(['roomSize']);\n\t    };\n\t    Tone.extend(Tone.JCReverb, Tone.StereoEffect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.JCReverb.defaults = { 'roomSize': 0.5 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.JCReverb} this\n\t\t */\n\t    Tone.JCReverb.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        for (var apf = 0; apf < this._allpassFilters.length; apf++) {\n\t            this._allpassFilters[apf].disconnect();\n\t            this._allpassFilters[apf] = null;\n\t        }\n\t        this._allpassFilters = null;\n\t        for (var fbcf = 0; fbcf < this._feedbackCombFilters.length; fbcf++) {\n\t            this._feedbackCombFilters[fbcf].dispose();\n\t            this._feedbackCombFilters[fbcf] = null;\n\t        }\n\t        this._feedbackCombFilters = null;\n\t        this._writable(['roomSize']);\n\t        this.roomSize.dispose();\n\t        this.roomSize = null;\n\t        this._scaleRoomSize.dispose();\n\t        this._scaleRoomSize = null;\n\t        return this;\n\t    };\n\t    return Tone.JCReverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels) \n\t\t *         and effects them separately before being recombined.\n\t\t *         Applies a Mid/Side seperation and recombination.\n\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t *         <br><br>\n\t\t *         This is a base-class for Mid/Side Effects. \n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideEffect = function () {\n\t        Tone.Effect.apply(this, arguments);\n\t        /**\n\t\t\t *  The mid/side split\n\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideSplit = new Tone.MidSideSplit();\n\t        /**\n\t\t\t *  The mid/side merge\n\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideMerge = new Tone.MidSideMerge();\n\t        /**\n\t\t\t *  The mid send. Connect to mid processing\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this.midSend = this._midSideSplit.mid;\n\t        /**\n\t\t\t *  The side send. Connect to side processing\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this.sideSend = this._midSideSplit.side;\n\t        /**\n\t\t\t *  The mid return connection\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.midReturn = this._midSideMerge.mid;\n\t        /**\n\t\t\t *  The side return connection\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.sideReturn = this._midSideMerge.side;\n\t        //the connections\n\t        this.effectSend.connect(this._midSideSplit);\n\t        this._midSideMerge.connect(this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.MidSideEffect, Tone.Effect);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.MidSideEffect} this\n\t\t */\n\t    Tone.MidSideEffect.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._midSideSplit.dispose();\n\t        this._midSideSplit = null;\n\t        this._midSideMerge.dispose();\n\t        this._midSideMerge = null;\n\t        this.midSend = null;\n\t        this.sideSend = null;\n\t        this.midReturn = null;\n\t        this.sideReturn = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Phaser is a phaser effect. Phasers work by changing the phase\n\t\t *         of different frequency components of an incoming signal. Read more on \n\t\t *         [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)). \n\t\t *         Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n\t\t *\n\t\t *\t@extends {Tone.StereoEffect}\n\t\t *\t@constructor\n\t\t *\t@param {Frequency|Object} [frequency] The speed of the phasing. \n\t\t *\t@param {number} [octaves] The octaves of the effect. \n\t\t *\t@param {Frequency} [baseFrequency] The base frequency of the filters. \n\t\t *\t@example\n\t\t * var phaser = new Tone.Phaser({\n\t\t * \t\"frequency\" : 15, \n\t\t * \t\"octaves\" : 5, \n\t\t * \t\"baseFrequency\" : 1000\n\t\t * }).toMaster();\n\t\t * var synth = new Tone.FMSynth().connect(phaser);\n\t\t * synth.triggerAttackRelease(\"E3\", \"2n\");\n\t\t */\n\t    Tone.Phaser = function () {\n\t        //set the defaults\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'octaves',\n\t            'baseFrequency'\n\t        ], Tone.Phaser.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which controls the frequency on the left side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO(options.frequency, 0, 1);\n\t        /**\n\t\t\t *  the lfo which controls the frequency on the right side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO(options.frequency, 0, 1);\n\t        this._lfoR.phase = 180;\n\t        /**\n\t\t\t *  the base modulation frequency\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._baseFrequency = options.baseFrequency;\n\t        /**\n\t\t\t *  the octaves of the phasing\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  The quality factor of the filters\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q, Tone.Type.Positive);\n\t        /**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filtersL = this._makeFilters(options.stages, this._lfoL, this.Q);\n\t        /**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filtersR = this._makeFilters(options.stages, this._lfoR, this.Q);\n\t        /**\n\t\t\t * the frequency of the effect\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t        this.frequency = this._lfoL.frequency;\n\t        this.frequency.value = options.frequency;\n\t        //connect them up\n\t        this.effectSendL.connect(this._filtersL[0]);\n\t        this.effectSendR.connect(this._filtersR[0]);\n\t        this._filtersL[options.stages - 1].connect(this.effectReturnL);\n\t        this._filtersR[options.stages - 1].connect(this.effectReturnR);\n\t        //control the frequency with one LFO\n\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t        //set the options\n\t        this.baseFrequency = options.baseFrequency;\n\t        this.octaves = options.octaves;\n\t        //start the lfo\n\t        this._lfoL.start();\n\t        this._lfoR.start();\n\t        this._readOnly([\n\t            'frequency',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Phaser, Tone.StereoEffect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {object}\n\t\t */\n\t    Tone.Phaser.defaults = {\n\t        'frequency': 0.5,\n\t        'octaves': 3,\n\t        'stages': 10,\n\t        'Q': 10,\n\t        'baseFrequency': 350\n\t    };\n\t    /**\n\t\t *  @param {number} stages\n\t\t *  @returns {Array} the number of filters all connected together\n\t\t *  @private\n\t\t */\n\t    Tone.Phaser.prototype._makeFilters = function (stages, connectToFreq, Q) {\n\t        var filters = new Array(stages);\n\t        //make all the filters\n\t        for (var i = 0; i < stages; i++) {\n\t            var filter = this.context.createBiquadFilter();\n\t            filter.type = 'allpass';\n\t            Q.connect(filter.Q);\n\t            connectToFreq.connect(filter.frequency);\n\t            filters[i] = filter;\n\t        }\n\t        this.connectSeries.apply(this, filters);\n\t        return filters;\n\t    };\n\t    /**\n\t\t * The number of octaves the phase goes above\n\t\t * the baseFrequency\n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.Phaser.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            var max = this._baseFrequency * Math.pow(2, octaves);\n\t            this._lfoL.max = max;\n\t            this._lfoR.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The the base frequency of the filters. \n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {number}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.Phaser.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._baseFrequency;\n\t        },\n\t        set: function (freq) {\n\t            this._baseFrequency = freq;\n\t            this._lfoL.min = freq;\n\t            this._lfoR.min = freq;\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Phaser} this\n\t\t */\n\t    Tone.Phaser.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'Q'\n\t        ]);\n\t        this.Q.dispose();\n\t        this.Q = null;\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        for (var i = 0; i < this._filtersL.length; i++) {\n\t            this._filtersL[i].disconnect();\n\t            this._filtersL[i] = null;\n\t        }\n\t        this._filtersL = null;\n\t        for (var j = 0; j < this._filtersR.length; j++) {\n\t            this._filtersR[j].disconnect();\n\t            this._filtersR[j] = null;\n\t        }\n\t        this._filtersR = null;\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.Phaser;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.PingPongDelay is a feedback delay effect where the echo is heard\n\t\t *          first in one channel and next in the opposite channel. In a stereo\n\t\t *          system these are the right and left channels.\n\t\t *          PingPongDelay in more simplified terms is two Tone.FeedbackDelays \n\t\t *          with independent delay values. Each delay is routed to one channel\n\t\t *          (left or right), and the channel triggered second will always \n\t\t *          trigger at the same interval after the first.\n\t\t *\n\t\t * \t@constructor\n\t\t * \t@extends {Tone.StereoXFeedbackEffect}\n\t\t *  @param {Time|Object} [delayTime] The delayTime between consecutive echos.\n\t\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t\t *                                 is fed back through the delay.\n\t\t *  @example\n\t\t * var pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toMaster();\n\t\t * var drum = new Tone.DrumSynth().connect(pingPong);\n\t\t * drum.triggerAttackRelease(\"C4\", \"32n\");\n\t\t */\n\t    Tone.PingPongDelay = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'feedback'\n\t        ], Tone.PingPongDelay.defaults);\n\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the delay node on the left side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._leftDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the delay node on the right side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rightDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the predelay on the right side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rightPreDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the delay time signal\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = new Tone.Signal(options.delayTime, Tone.Type.Time);\n\t        //connect it up\n\t        this.effectSendL.chain(this._leftDelay, this.effectReturnL);\n\t        this.effectSendR.chain(this._rightPreDelay, this._rightDelay, this.effectReturnR);\n\t        this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n\t        //rearranged the feedback to be after the rightPreDelay\n\t        this._feedbackLR.disconnect();\n\t        this._feedbackLR.connect(this._rightDelay);\n\t        this._readOnly(['delayTime']);\n\t    };\n\t    Tone.extend(Tone.PingPongDelay, Tone.StereoXFeedbackEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PingPongDelay.defaults = {\n\t        'delayTime': 0.25,\n\t        'maxDelayTime': 1\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.PingPongDelay} this\n\t\t */\n\t    Tone.PingPongDelay.prototype.dispose = function () {\n\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t        this._leftDelay.dispose();\n\t        this._leftDelay = null;\n\t        this._rightDelay.dispose();\n\t        this._rightDelay = null;\n\t        this._rightPreDelay.dispose();\n\t        this._rightPreDelay = null;\n\t        this._writable(['delayTime']);\n\t        this.delayTime.dispose();\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.PingPongDelay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PitchShift does near-realtime pitch shifting to the incoming signal. \n\t\t *         The effect is achieved by speeding up or slowing down the delayTime\n\t\t *         of a DelayNode using a sawtooth wave. \n\t\t *         Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n\t\t *         Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n\t\t *         \n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Interval=} pitch The interval to transpose the incoming signal by. \n\t\t */\n\t    Tone.PitchShift = function () {\n\t        var options = this.optionsObject(arguments, ['pitch'], Tone.PitchShift.defaults);\n\t        Tone.FeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  The pitch signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._frequency = new Tone.Signal(0);\n\t        /**\n\t\t\t *  Uses two DelayNodes to cover up the jump in\n\t\t\t *  the sawtooth wave. \n\t\t\t *  @type  {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayA = new Tone.Delay(0, 1);\n\t        /**\n\t\t\t *  The first LFO.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoA = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 0.1,\n\t            'type': 'sawtooth'\n\t        }).connect(this._delayA.delayTime);\n\t        /**\n\t\t\t *  The second DelayNode\n\t\t\t *  @type  {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayB = new Tone.Delay(0, 1);\n\t        /**\n\t\t\t *  The first LFO.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoB = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 0.1,\n\t            'type': 'sawtooth',\n\t            'phase': 180\n\t        }).connect(this._delayB.delayTime);\n\t        /**\n\t\t\t *  Crossfade quickly between the two delay lines\n\t\t\t *  to cover up the jump in the sawtooth wave\n\t\t\t *  @type  {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._crossFade = new Tone.CrossFade();\n\t        /**\n\t\t\t *  LFO which alternates between the two\n\t\t\t *  delay lines to cover up the disparity in the\n\t\t\t *  sawtooth wave. \n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._crossFadeLFO = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 1,\n\t            'type': 'triangle',\n\t            'phase': 90\n\t        }).connect(this._crossFade.fade);\n\t        /**\n\t\t\t *  The delay node\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackDelay = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The amount of delay on the input signal\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._feedbackDelay.delayTime;\n\t        this._readOnly('delayTime');\n\t        /**\n\t\t\t *  Hold the current pitch\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pitch = options.pitch;\n\t        /**\n\t\t\t *  Hold the current windowSize\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._windowSize = options.windowSize;\n\t        //connect the two delay lines up\n\t        this._delayA.connect(this._crossFade.a);\n\t        this._delayB.connect(this._crossFade.b);\n\t        //connect the frequency\n\t        this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n\t        //route the input\n\t        this.effectSend.fan(this._delayA, this._delayB);\n\t        this._crossFade.chain(this._feedbackDelay, this.effectReturn);\n\t        //start the LFOs at the same time\n\t        var now = this.now();\n\t        this._lfoA.start(now);\n\t        this._lfoB.start(now);\n\t        this._crossFadeLFO.start(now);\n\t        //set the initial value\n\t        this.windowSize = this._windowSize;\n\t    };\n\t    Tone.extend(Tone.PitchShift, Tone.FeedbackEffect);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.PitchShift.defaults = {\n\t        'pitch': 0,\n\t        'windowSize': 0.1,\n\t        'delayTime': 0,\n\t        'feedback': 0\n\t    };\n\t    /**\n\t\t * Repitch the incoming signal by some interval (measured\n\t\t * in semi-tones). \n\t\t * @memberOf Tone.PitchShift#\n\t\t * @type {Interval}\n\t\t * @name pitch\n\t\t * @example\n\t\t * pitchShift.pitch = -12; //down one octave\n\t\t * pitchShift.pitch = 7; //up a fifth\n\t\t */\n\t    Object.defineProperty(Tone.PitchShift.prototype, 'pitch', {\n\t        get: function () {\n\t            return this._pitch;\n\t        },\n\t        set: function (interval) {\n\t            this._pitch = interval;\n\t            var factor = 0;\n\t            if (interval < 0) {\n\t                this._lfoA.min = 0;\n\t                this._lfoA.max = this._windowSize;\n\t                this._lfoB.min = 0;\n\t                this._lfoB.max = this._windowSize;\n\t                factor = this.intervalToFrequencyRatio(interval - 1) + 1;\n\t            } else {\n\t                this._lfoA.min = this._windowSize;\n\t                this._lfoA.max = 0;\n\t                this._lfoB.min = this._windowSize;\n\t                this._lfoB.max = 0;\n\t                factor = this.intervalToFrequencyRatio(interval) - 1;\n\t            }\n\t            this._frequency.value = factor * (1.2 / this._windowSize);\n\t        }\n\t    });\n\t    /**\n\t\t * The window size corresponds roughly to the sample length in a looping sampler. \n\t\t * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n\t\t * signal, but larger values will result in smoother pitch shifting for larger intervals. \n\t\t * A nominal range of 0.03 to 0.1 is recommended. \n\t\t * @memberOf Tone.PitchShift#\n\t\t * @type {Time}\n\t\t * @name windowSize\n\t\t * @example\n\t\t * pitchShift.windowSize = 0.1;\n\t\t */\n\t    Object.defineProperty(Tone.PitchShift.prototype, 'windowSize', {\n\t        get: function () {\n\t            return this._windowSize;\n\t        },\n\t        set: function (size) {\n\t            this._windowSize = this.toSeconds(size);\n\t            this.pitch = this._pitch;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.PitchShift}  this\n\t\t */\n\t    Tone.PitchShift.prototype.dispose = function () {\n\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t        this._frequency.dispose();\n\t        this._frequency = null;\n\t        this._delayA.disconnect();\n\t        this._delayA = null;\n\t        this._delayB.disconnect();\n\t        this._delayB = null;\n\t        this._lfoA.dispose();\n\t        this._lfoA = null;\n\t        this._lfoB.dispose();\n\t        this._lfoB = null;\n\t        this._crossFade.dispose();\n\t        this._crossFade = null;\n\t        this._crossFadeLFO.dispose();\n\t        this._crossFadeLFO = null;\n\t        this._writable('delayTime');\n\t        this._feedbackDelay.dispose();\n\t        this._feedbackDelay = null;\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.PitchShift;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Base class for stereo feedback effects where the effectReturn\n\t\t *         is fed back into the same channel. \n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.FeedbackEffect}\n\t\t */\n\t    Tone.StereoFeedbackEffect = function () {\n\t        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  controls the amount of feedback\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackL = new Tone.Gain();\n\t        /**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackR = new Tone.Gain();\n\t        //connect it up\n\t        this.effectReturnL.chain(this._feedbackL, this.effectSendL);\n\t        this.effectReturnR.chain(this._feedbackR, this.effectSendR);\n\t        this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.StereoFeedbackEffect, Tone.FeedbackEffect);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoFeedbackEffect} this\n\t\t */\n\t    Tone.StereoFeedbackEffect.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this.feedback.dispose();\n\t        this.feedback = null;\n\t        this._feedbackL.dispose();\n\t        this._feedbackL = null;\n\t        this._feedbackR.dispose();\n\t        this._feedbackR = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoFeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Applies a width factor to the mid/side seperation. \n\t\t *         0 is all mid and 1 is all side.\n\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t *         <br><br>\n\t\t *         <code>\n\t\t *         Mid *= 2*(1-width)<br>\n\t\t *         Side *= 2*width\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.MidSideEffect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [width] The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t\t */\n\t    Tone.StereoWidener = function () {\n\t        var options = this.optionsObject(arguments, ['width'], Tone.StereoWidener.defaults);\n\t        Tone.MidSideEffect.call(this, options);\n\t        /**\n\t\t\t *  The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  Mid multiplier\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midMult = new Tone.Expr('$0 * ($1 * (1 - $2))');\n\t        /**\n\t\t\t *  Side multiplier\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sideMult = new Tone.Expr('$0 * ($1 * $2)');\n\t        /**\n\t\t\t *  constant output of 2\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this._two = new Tone.Signal(2);\n\t        //the mid chain\n\t        this._two.connect(this._midMult, 0, 1);\n\t        this.width.connect(this._midMult, 0, 2);\n\t        //the side chain\n\t        this._two.connect(this._sideMult, 0, 1);\n\t        this.width.connect(this._sideMult, 0, 2);\n\t        //connect it to the effect send/return\n\t        this.midSend.chain(this._midMult, this.midReturn);\n\t        this.sideSend.chain(this._sideMult, this.sideReturn);\n\t        this._readOnly(['width']);\n\t    };\n\t    Tone.extend(Tone.StereoWidener, Tone.MidSideEffect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.StereoWidener.defaults = { 'width': 0.5 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.StereoWidener} this\n\t\t */\n\t    Tone.StereoWidener.prototype.dispose = function () {\n\t        Tone.MidSideEffect.prototype.dispose.call(this);\n\t        this._writable(['width']);\n\t        this.width.dispose();\n\t        this.width = null;\n\t        this._midMult.dispose();\n\t        this._midMult = null;\n\t        this._sideMult.dispose();\n\t        this._sideMult = null;\n\t        this._two.dispose();\n\t        this._two = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoWidener;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.\n\t\t *         The type, frequency, and depth of the LFO is controllable.\n\t\t *\n\t\t *  @extends {Tone.StereoEffect}\n\t\t *  @constructor\n\t\t *  @param {Frequency} [frequency] The rate of the effect.\n\t\t *  @param {NormalRange} [depth] The depth of the effect.\n\t\t *  @example\n\t\t * //create a tremolo and start it's LFO\n\t\t * var tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();\n\t\t * //route an oscillator through the tremolo and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(tremolo).start();\n\t\t */\n\t    Tone.Tremolo = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'depth'\n\t        ], Tone.Tremolo.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The tremelo LFO in the left channel\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO({\n\t            'phase': options.spread,\n\t            'min': 1,\n\t            'max': 0\n\t        });\n\t        /**\n\t\t\t *  The tremelo LFO in the left channel\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO({\n\t            'phase': options.spread,\n\t            'min': 1,\n\t            'max': 0\n\t        });\n\t        /**\n\t\t\t *  Where the gain is multiplied\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitudeL = new Tone.Gain();\n\t        /**\n\t\t\t *  Where the gain is multiplied\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitudeR = new Tone.Gain();\n\t        /**\n\t\t\t *  The frequency of the tremolo.\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The depth of the effect. A depth of 0, has no effect\n\t\t\t *  on the amplitude, and a depth of 1 makes the amplitude\n\t\t\t *  modulate fully between 0 and 1.\n\t\t\t *  @type  {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.depth = new Tone.Signal(options.depth, Tone.Type.NormalRange);\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.effectSendL.chain(this._amplitudeL, this.effectReturnL);\n\t        this.effectSendR.chain(this._amplitudeR, this.effectReturnR);\n\t        this._lfoL.connect(this._amplitudeL.gain);\n\t        this._lfoR.connect(this._amplitudeR.gain);\n\t        this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n\t        this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n\t        this.type = options.type;\n\t        this.spread = options.spread;\n\t    };\n\t    Tone.extend(Tone.Tremolo, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Tremolo.defaults = {\n\t        'frequency': 10,\n\t        'type': 'sine',\n\t        'depth': 0.5,\n\t        'spread': 180\n\t    };\n\t    /**\n\t\t * Start the tremolo.\n\t\t * @param {Time} [time=now] When the tremolo begins.\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.start = function (time) {\n\t        this._lfoL.start(time);\n\t        this._lfoR.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the tremolo.\n\t\t * @param {Time} [time=now] When the tremolo stops.\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.stop = function (time) {\n\t        this._lfoL.stop(time);\n\t        this._lfoR.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the effect to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                              Transport has started.\n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.Tremolo.prototype.sync = function (delay) {\n\t        this._lfoL.sync(delay);\n\t        this._lfoR.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the filter from the transport\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.unsync = function () {\n\t        this._lfoL.unsync();\n\t        this._lfoR.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * The Tremolo's oscillator type.\n\t\t * @memberOf Tone.Tremolo#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Tremolo.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfoL.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfoL.type = type;\n\t            this._lfoR.type = type;\n\t        }\n\t    });\n\t    /** \n\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t * @memberOf Tone.Tremolo#\n\t\t * @type {Degrees}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.Tremolo.prototype, 'spread', {\n\t        get: function () {\n\t            return this._lfoR.phase - this._lfoL.phase;    //180\n\t        },\n\t        set: function (spread) {\n\t            this._lfoL.phase = 90 - spread / 2;\n\t            this._lfoR.phase = spread / 2 + 90;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        this._amplitudeL.dispose();\n\t        this._amplitudeL = null;\n\t        this._amplitudeR.dispose();\n\t        this._amplitudeR = null;\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.Tremolo;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n\t\t *         modulates the delayTime of the delay, causing the pitch to rise\n\t\t *         and fall. \n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency} frequency The frequency of the vibrato.\n\t\t *  @param {NormalRange} depth The amount the pitch is modulated.\n\t\t */\n\t    Tone.Vibrato = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'depth'\n\t        ], Tone.Vibrato.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  The delay node used for the vibrato effect\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = new Tone.Delay(0, options.maxDelay);\n\t        /**\n\t\t\t *  The LFO used to control the vibrato\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'type': options.type,\n\t            'min': 0,\n\t            'max': options.maxDelay,\n\t            'frequency': options.frequency,\n\t            'phase': -90    //offse the phase so the resting position is in the center\n\t        }).start().connect(this._delayNode.delayTime);\n\t        /**\n\t\t\t *  The frequency of the vibrato\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        /**\n\t\t\t *  The depth of the vibrato. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        this.depth.value = options.depth;\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.effectSend.chain(this._delayNode, this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.Vibrato, Tone.Effect);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Vibrato.defaults = {\n\t        'maxDelay': 0.005,\n\t        'frequency': 5,\n\t        'depth': 0.1,\n\t        'type': 'sine'\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the Vibrato.\n\t\t * @memberOf Tone.Vibrato#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Vibrato.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Vibrato} this\n\t\t */\n\t    Tone.Vibrato.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._delayNode.dispose();\n\t        this._delayNode = null;\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t    };\n\t    return Tone.Vibrato;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable\n\t\t *          callback for a single or repeatable events along the timeline. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @param {function} callback The callback to invoke at the time. \n\t\t *  @param {*} value The value or values which should be passed to\n\t\t *                      the callback function on invocation.  \n\t\t *  @example\n\t\t * var chord = new Tone.Event(function(time, chord){\n\t\t * \t//the chord as well as the exact time of the event\n\t\t * \t//are passed in as arguments to the callback function\n\t\t * }, [\"D4\", \"E4\", \"F4\"]);\n\t\t * //start the chord at the beginning of the transport timeline\n\t\t * chord.start();\n\t\t * //loop it every measure for 8 measures\n\t\t * chord.loop = 8;\n\t\t * chord.loopEnd = \"1m\";\n\t\t */\n\t    Tone.Event = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'value'\n\t        ], Tone.Event.defaults);\n\t        /**\n\t\t\t *  Loop value\n\t\t\t *  @type  {Boolean|Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  The callback to invoke. \n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  The value which is passed to the\n\t\t\t *  callback function.\n\t\t\t *  @type  {*}\n\t\t\t *  @private\n\t\t\t */\n\t        this.value = options.value;\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = this.toTicks(options.loopStart);\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = this.toTicks(options.loopEnd);\n\t        /**\n\t\t\t *  Tracks the scheduled events\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  The playback speed of the note. A speed of 1\n\t\t\t *  is no change. \n\t\t\t *  @private\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this._playbackRate = 1;\n\t        /**\n\t\t\t *  A delay time from when the event is scheduled to start\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startOffset = 0;\n\t        /**\n\t\t\t *  The probability that the callback will be invoked\n\t\t\t *  at the scheduled time. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @example\n\t\t\t * //the callback will be invoked 50% of the time\n\t\t\t * event.probability = 0.5;\n\t\t\t */\n\t        this.probability = options.probability;\n\t        /**\n\t\t\t *  If set to true, will apply small (+/-0.02 seconds) random variation\n\t\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t\t *  by that amount.\n\t\t\t *  @example\n\t\t\t * event.humanize = true;\n\t\t\t *  @type {Boolean|Time}\n\t\t\t */\n\t        this.humanize = options.humanize;\n\t        /**\n\t\t\t *  If mute is true, the callback won't be\n\t\t\t *  invoked.\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.mute = options.mute;\n\t        //set the initial values\n\t        this.playbackRate = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.Event);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Event.defaults = {\n\t        'callback': Tone.noOp,\n\t        'loop': false,\n\t        'loopEnd': '1m',\n\t        'loopStart': 0,\n\t        'playbackRate': 1,\n\t        'value': null,\n\t        'probability': 1,\n\t        'mute': false,\n\t        'humanize': false\n\t    };\n\t    /**\n\t\t *  Reschedule all of the events along the timeline\n\t\t *  with the updated values.\n\t\t *  @param {Time} after Only reschedules events after the given time.\n\t\t *  @return  {Tone.Event}  this\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._rescheduleEvents = function (after) {\n\t        //if no argument is given, schedules all of the events\n\t        after = this.defaultArg(after, -1);\n\t        this._state.forEachFrom(after, function (event) {\n\t            var duration;\n\t            if (event.state === Tone.State.Started) {\n\t                if (!this.isUndef(event.id)) {\n\t                    Tone.Transport.clear(event.id);\n\t                }\n\t                var startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t                if (this._loop) {\n\t                    duration = Infinity;\n\t                    if (this.isNumber(this._loop)) {\n\t                        duration = this._loop * this._getLoopDuration();\n\t                    }\n\t                    var nextEvent = this._state.getAfter(startTick);\n\t                    if (nextEvent !== null) {\n\t                        duration = Math.min(duration, nextEvent.time - startTick);\n\t                    }\n\t                    if (duration !== Infinity) {\n\t                        //schedule a stop since it's finite duration\n\t                        this._state.setStateAtTime(Tone.State.Stopped, startTick + duration + 1);\n\t                        duration = Tone.Time(duration, 'i');\n\t                    }\n\t                    var interval = Tone.Time(this._getLoopDuration(), 'i');\n\t                    event.id = Tone.Transport.scheduleRepeat(this._tick.bind(this), interval, Tone.TransportTime(startTick, 'i'), duration);\n\t                } else {\n\t                    event.id = Tone.Transport.schedule(this._tick.bind(this), startTick + 'i');\n\t                }\n\t            }\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Event#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(Tone.Transport.ticks);\n\t        }\n\t    });\n\t    /**\n\t\t *  The start from the scheduled start time\n\t\t *  @type {Ticks}\n\t\t *  @memberOf Tone.Event#\n\t\t *  @name startOffset\n\t\t *  @private\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'startOffset', {\n\t        get: function () {\n\t            return this._startOffset;\n\t        },\n\t        set: function (offset) {\n\t            this._startOffset = offset;\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the note at the given time. \n\t\t *  @param  {TimelinePosition}  time  When the note should start.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.start = function (time) {\n\t        time = this.toTicks(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Stopped) {\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': time,\n\t                'id': undefined\n\t            });\n\t            this._rescheduleEvents(time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the Event at the given time.\n\t\t *  @param  {TimelinePosition}  time  When the note should stop.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.stop = function (time) {\n\t        this.cancel(time);\n\t        time = this.toTicks(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Stopped, time);\n\t            var previousEvent = this._state.getBefore(time);\n\t            var reschedulTime = time;\n\t            if (previousEvent !== null) {\n\t                reschedulTime = previousEvent.time;\n\t            }\n\t            this._rescheduleEvents(reschedulTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.cancel = function (time) {\n\t        time = this.defaultArg(time, -Infinity);\n\t        time = this.toTicks(time);\n\t        this._state.forEachFrom(time, function (event) {\n\t            Tone.Transport.clear(event.id);\n\t        });\n\t        this._state.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The callback function invoker. Also \n\t\t *  checks if the Event is done playing\n\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._tick = function (time) {\n\t        if (!this.mute && this._state.getValueAtTime(Tone.Transport.ticks) === Tone.State.Started) {\n\t            if (this.probability < 1 && Math.random() > this.probability) {\n\t                return;\n\t            }\n\t            if (this.humanize) {\n\t                var variation = 0.02;\n\t                if (!this.isBoolean(this.humanize)) {\n\t                    variation = this.toSeconds(this.humanize);\n\t                }\n\t                time += (Math.random() * 2 - 1) * variation;\n\t            }\n\t            this.callback(time, this.value);\n\t        }\n\t    };\n\t    /**\n\t\t *  Get the duration of the loop.\n\t\t *  @return  {Ticks}\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._getLoopDuration = function () {\n\t        return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t    };\n\t    /**\n\t\t *  If the note should loop or not\n\t\t *  between Tone.Event.loopStart and \n\t\t *  Tone.Event.loopEnd. An integer\n\t\t *  value corresponds to the number of\n\t\t *  loops the Event does after it starts.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Boolean|Positive}\n\t\t *  @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            this._rescheduleEvents();\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe playback rate of the note. Defaults to 1.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Positive}\n\t\t *  @name playbackRate\n\t\t *  @example\n\t\t * note.loop = true;\n\t\t * //repeat the note twice as fast\n\t\t * note.playbackRate = 2;\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this._rescheduleEvents();\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopEnd point is the time the event will loop\n\t\t *  if Tone.Event.loop is true.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toNotation();\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = this.toTicks(loopEnd);\n\t            if (this._loop) {\n\t                this._rescheduleEvents();\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The time when the loop should start. \n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toNotation();\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = this.toTicks(loopStart);\n\t            if (this._loop) {\n\t                this._rescheduleEvents();\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The current progress of the loop interval.\n\t\t *  Returns 0 if the event is not started yet or\n\t\t *  it is not set to loop.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {NormalRange}\n\t\t *  @name progress\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'progress', {\n\t        get: function () {\n\t            if (this._loop) {\n\t                var ticks = Tone.Transport.ticks;\n\t                var lastEvent = this._state.get(ticks);\n\t                if (lastEvent !== null && lastEvent.state === Tone.State.Started) {\n\t                    var loopDuration = this._getLoopDuration();\n\t                    var progress = (ticks - lastEvent.time) % loopDuration;\n\t                    return progress / loopDuration;\n\t                } else {\n\t                    return 0;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.dispose = function () {\n\t        this.cancel();\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this.callback = null;\n\t        this.value = null;\n\t    };\n\t    return Tone.Event;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Loop creates a looped callback at the \n\t\t *         specified interval. The callback can be \n\t\t *         started, stopped and scheduled along\n\t\t *         the Transport's timeline. \n\t\t *  @example\n\t\t * var loop = new Tone.Loop(function(time){\n\t\t * \t//triggered every eighth note. \n\t\t * \tconsole.log(time);\n\t\t * }, \"8n\").start(0);\n\t\t * Tone.Transport.start();\n\t\t *  @extends {Tone}\n\t\t *  @param {Function} callback The callback to invoke with the event.\n\t\t *  @param {Time} interval The time between successive callback calls. \n\t\t */\n\t    Tone.Loop = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'interval'\n\t        ], Tone.Loop.defaults);\n\t        /**\n\t\t\t *  The event which produces the callbacks\n\t\t\t */\n\t        this._event = new Tone.Event({\n\t            'callback': this._tick.bind(this),\n\t            'loop': true,\n\t            'loopEnd': options.interval,\n\t            'playbackRate': options.playbackRate,\n\t            'probability': options.probability\n\t        });\n\t        /**\n\t\t\t *  The callback to invoke with the next event in the pattern\n\t\t\t *  @type {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        //set the iterations\n\t        this.iterations = options.iterations;\n\t    };\n\t    Tone.extend(Tone.Loop);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Loop.defaults = {\n\t        'interval': '4n',\n\t        'callback': Tone.noOp,\n\t        'playbackRate': 1,\n\t        'iterations': Infinity,\n\t        'probability': true,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Start the loop at the specified time along the Transport's\n\t\t *  timeline.\n\t\t *  @param  {TimelinePosition=}  time  When to start the Loop.\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.start = function (time) {\n\t        this._event.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the loop at the given time.\n\t\t *  @param  {TimelinePosition=}  time  When to stop the Arpeggio\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.stop = function (time) {\n\t        this._event.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.cancel = function (time) {\n\t        this._event.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Internal function called when the notes should be called\n\t\t *  @param  {Number}  time  The time the event occurs\n\t\t *  @private\n\t\t */\n\t    Tone.Loop.prototype._tick = function (time) {\n\t        this.callback(time);\n\t    };\n\t    /**\n\t\t *  The state of the Loop, either started or stopped.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {String}\n\t\t *  @name state\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'state', {\n\t        get: function () {\n\t            return this._event.state;\n\t        }\n\t    });\n\t    /**\n\t\t *  The progress of the loop as a value between 0-1. 0, when\n\t\t *  the loop is stopped or done iterating. \n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {NormalRange}\n\t\t *  @name progress\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'progress', {\n\t        get: function () {\n\t            return this._event.progress;\n\t        }\n\t    });\n\t    /**\n\t\t *  The time between successive callbacks. \n\t\t *  @example\n\t\t * loop.interval = \"8n\"; //loop every 8n\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Time}\n\t\t *  @name interval\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'interval', {\n\t        get: function () {\n\t            return this._event.loopEnd;\n\t        },\n\t        set: function (interval) {\n\t            this._event.loopEnd = interval;\n\t        }\n\t    });\n\t    /**\n\t\t *  The playback rate of the loop. The normal playback rate is 1 (no change). \n\t\t *  A `playbackRate` of 2 would be twice as fast. \n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Time}\n\t\t *  @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._event.playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._event.playbackRate = rate;\n\t        }\n\t    });\n\t    /**\n\t\t *  Random variation +/-0.01s to the scheduled time. \n\t\t *  Or give it a time value which it will randomize by.\n\t\t *  @type {Boolean|Time}\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._event.humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._event.humanize = variation;\n\t        }\n\t    });\n\t    /**\n\t\t *  The probably of the callback being invoked.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'probability', {\n\t        get: function () {\n\t            return this._event.probability;\n\t        },\n\t        set: function (prob) {\n\t            this._event.probability = prob;\n\t        }\n\t    });\n\t    /**\n\t\t *  Muting the Loop means that no callbacks are invoked.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Boolean}\n\t\t *  @name mute\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'mute', {\n\t        get: function () {\n\t            return this._event.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._event.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of iterations of the loop. The default\n\t\t *  value is Infinity (loop forever).\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Positive}\n\t\t *  @name iterations\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'iterations', {\n\t        get: function () {\n\t            if (this._event.loop === true) {\n\t                return Infinity;\n\t            } else {\n\t                return this._event.loop;\n\t            }\n\t            return this._pattern.index;\n\t        },\n\t        set: function (iters) {\n\t            if (iters === Infinity) {\n\t                this._event.loop = true;\n\t            } else {\n\t                this._event.loop = iters;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.dispose = function () {\n\t        this._event.dispose();\n\t        this._event = null;\n\t        this.callback = null;\n\t    };\n\t    return Tone.Loop;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Part is a collection Tone.Events which can be\n\t\t *         started/stoped and looped as a single unit.\n\t\t *\n\t\t *  @extends {Tone.Event}\n\t\t *  @param {Function} callback The callback to invoke on each event\n\t\t *  @param {Array} events the array of events\n\t\t *  @example\n\t\t * var part = new Tone.Part(function(time, note){\n\t\t * \t//the notes given as the second element in the array\n\t\t * \t//will be passed in as the second argument\n\t\t * \tsynth.triggerAttackRelease(note, \"8n\", time);\n\t\t * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n\t\t *  @example\n\t\t * //use an array of objects as long as the object has a \"time\" attribute\n\t\t * var part = new Tone.Part(function(time, value){\n\t\t * \t//the value is an object which contains both the note and the velocity\n\t\t * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n\t\t * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9}, \n\t\t * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n\t\t * ]).start(0);\n\t\t */\n\t    Tone.Part = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'events'\n\t        ], Tone.Part.defaults);\n\t        /**\n\t\t\t *  If the part is looping or not\n\t\t\t *  @type  {Boolean|Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = this.toTicks(options.loopStart);\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = this.toTicks(options.loopEnd);\n\t        /**\n\t\t\t *  The playback rate of the part\n\t\t\t *  @type  {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  private holder of probability value\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._probability = options.probability;\n\t        /**\n\t\t\t *  the amount of variation from the\n\t\t\t *  given time. \n\t\t\t *  @type {Boolean|Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._humanize = options.humanize;\n\t        /**\n\t\t\t *  The start offset\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startOffset = 0;\n\t        /**\n\t\t\t *  Keeps track of the current state\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  An array of Objects. \n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = [];\n\t        /**\n\t\t\t *  The callback to invoke at all the scheduled events.\n\t\t\t *  @type {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  If mute is true, the callback won't be\n\t\t\t *  invoked.\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.mute = options.mute;\n\t        //add the events\n\t        var events = this.defaultArg(options.events, []);\n\t        if (!this.isUndef(options.events)) {\n\t            for (var i = 0; i < events.length; i++) {\n\t                if (Array.isArray(events[i])) {\n\t                    this.add(events[i][0], events[i][1]);\n\t                } else {\n\t                    this.add(events[i]);\n\t                }\n\t            }\n\t        }\n\t    };\n\t    Tone.extend(Tone.Part, Tone.Event);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Part.defaults = {\n\t        'callback': Tone.noOp,\n\t        'loop': false,\n\t        'loopEnd': '1m',\n\t        'loopStart': 0,\n\t        'playbackRate': 1,\n\t        'probability': 1,\n\t        'humanize': false,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Start the part at the given time. \n\t\t *  @param  {TransportTime}  time    When to start the part.\n\t\t *  @param  {Time=}  offset  The offset from the start of the part\n\t\t *                           to begin playing at.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.start = function (time, offset) {\n\t        var ticks = this.toTicks(time);\n\t        if (this._state.getValueAtTime(ticks) !== Tone.State.Started) {\n\t            if (this._loop) {\n\t                offset = this.defaultArg(offset, this._loopStart);\n\t            } else {\n\t                offset = this.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toTicks(offset);\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': ticks,\n\t                'offset': offset\n\t            });\n\t            this._forEach(function (event) {\n\t                this._startNote(event, ticks, offset);\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the event in the given event at the correct time given\n\t\t *  the ticks and offset and looping.\n\t\t *  @param  {Tone.Event}  event \n\t\t *  @param  {Ticks}  ticks\n\t\t *  @param  {Ticks}  offset\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._startNote = function (event, ticks, offset) {\n\t        ticks -= offset;\n\t        if (this._loop) {\n\t            if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t                if (event.startOffset < offset) {\n\t                    //start it on the next loop\n\t                    ticks += this._getLoopDuration();\n\t                }\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t                event.loop = false;\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            }\n\t        } else {\n\t            if (event.startOffset >= offset) {\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  The start from the scheduled start time\n\t\t *  @type {Ticks}\n\t\t *  @memberOf Tone.Part#\n\t\t *  @name startOffset\n\t\t *  @private\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'startOffset', {\n\t        get: function () {\n\t            return this._startOffset;\n\t        },\n\t        set: function (offset) {\n\t            this._startOffset = offset;\n\t            this._forEach(function (event) {\n\t                event.startOffset += this._startOffset;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  Stop the part at the given time.\n\t\t *  @param  {TimelinePosition}  time  When to stop the part.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.stop = function (time) {\n\t        var ticks = this.toTicks(time);\n\t        this._state.cancel(ticks);\n\t        this._state.setStateAtTime(Tone.State.Stopped, ticks);\n\t        this._forEach(function (event) {\n\t            event.stop(time);\n\t        });\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get/Set an Event's value at the given time. \n\t\t *  If a value is passed in and no event exists at\n\t\t *  the given time, one will be created with that value. \n\t\t *  If two events are at the same time, the first one will\n\t\t *  be returned.\n\t\t *  @example\n\t\t * part.at(\"1m\"); //returns the part at the first measure\n\t\t *\n\t\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2. \n\t\t * //if an event didn't exist at that time, it will be created.\n\t\t *  @param {TransportTime} time The time of the event to get or set.\n\t\t *  @param {*=} value If a value is passed in, the value of the\n\t\t *                    event at the given time will be set to it.\n\t\t *  @return {Tone.Event} the event at the time\n\t\t */\n\t    Tone.Part.prototype.at = function (time, value) {\n\t        time = Tone.TransportTime(time);\n\t        var tickTime = Tone.Time(1, 'i').toSeconds();\n\t        for (var i = 0; i < this._events.length; i++) {\n\t            var event = this._events[i];\n\t            if (Math.abs(time.toTicks() - event.startOffset) < tickTime) {\n\t                if (!this.isUndef(value)) {\n\t                    event.value = value;\n\t                }\n\t                return event;\n\t            }\n\t        }\n\t        //if there was no event at that time, create one\n\t        if (!this.isUndef(value)) {\n\t            this.add(time, value);\n\t            //return the new event\n\t            return this._events[this._events.length - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Add a an event to the part. \n\t\t *  @param {Time} time The time the note should start.\n\t\t *                            If an object is passed in, it should\n\t\t *                            have a 'time' attribute and the rest\n\t\t *                            of the object will be used as the 'value'.\n\t\t *  @param  {Tone.Event|*}  value \n\t\t *  @returns {Tone.Part} this\n\t\t *  @example\n\t\t * part.add(\"1m\", \"C#+11\");\n\t\t */\n\t    Tone.Part.prototype.add = function (time, value) {\n\t        //extract the parameters\n\t        if (time.hasOwnProperty('time')) {\n\t            value = time;\n\t            time = value.time;\n\t        }\n\t        time = this.toTicks(time);\n\t        var event;\n\t        if (value instanceof Tone.Event) {\n\t            event = value;\n\t            event.callback = this._tick.bind(this);\n\t        } else {\n\t            event = new Tone.Event({\n\t                'callback': this._tick.bind(this),\n\t                'value': value\n\t            });\n\t        }\n\t        //the start offset\n\t        event.startOffset = time;\n\t        //initialize the values\n\t        event.set({\n\t            'loopEnd': this.loopEnd,\n\t            'loopStart': this.loopStart,\n\t            'loop': this.loop,\n\t            'humanize': this.humanize,\n\t            'playbackRate': this.playbackRate,\n\t            'probability': this.probability\n\t        });\n\t        this._events.push(event);\n\t        //start the note if it should be played right now\n\t        this._restartEvent(event);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Restart the given event\n\t\t *  @param  {Tone.Event}  event \n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._restartEvent = function (event) {\n\t        this._state.forEach(function (stateEvent) {\n\t            if (stateEvent.state === Tone.State.Started) {\n\t                this._startNote(event, stateEvent.time, stateEvent.offset);\n\t            } else {\n\t                //stop the note\n\t                event.stop(Tone.TransportTime(stateEvent.time, 'i'));\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Remove an event from the part. Will recursively iterate\n\t\t *  into nested parts to find the event.\n\t\t *  @param {Time} time The time of the event\n\t\t *  @param {*} value Optionally select only a specific event value\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.remove = function (time, value) {\n\t        //extract the parameters\n\t        if (time.hasOwnProperty('time')) {\n\t            value = time;\n\t            time = value.time;\n\t        }\n\t        time = this.toTicks(time);\n\t        for (var i = this._events.length - 1; i >= 0; i--) {\n\t            var event = this._events[i];\n\t            if (event instanceof Tone.Part) {\n\t                event.remove(time, value);\n\t            } else {\n\t                if (event.startOffset === time) {\n\t                    if (this.isUndef(value) || !this.isUndef(value) && event.value === value) {\n\t                        this._events.splice(i, 1);\n\t                        event.dispose();\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove all of the notes from the group. \n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.removeAll = function () {\n\t        this._forEach(function (event) {\n\t            event.dispose();\n\t        });\n\t        this._events = [];\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t\t *  @param {TimelinePosition} after The time after which to cancel the scheduled events.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.cancel = function (after) {\n\t        after = this.toTicks(after);\n\t        this._forEach(function (event) {\n\t            event.cancel(after);\n\t        });\n\t        this._state.cancel(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over all of the events\n\t\t *  @param {Function} callback\n\t\t *  @param {Object} ctx The context\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._forEach = function (callback, ctx) {\n\t        ctx = this.defaultArg(ctx, this);\n\t        for (var i = this._events.length - 1; i >= 0; i--) {\n\t            var e = this._events[i];\n\t            if (e instanceof Tone.Part) {\n\t                e._forEach(callback, ctx);\n\t            } else {\n\t                callback.call(ctx, e);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the attribute of all of the events\n\t\t *  @param  {String}  attr  the attribute to set\n\t\t *  @param  {*}  value      The value to set it to\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._setAll = function (attr, value) {\n\t        this._forEach(function (event) {\n\t            event[attr] = value;\n\t        });\n\t    };\n\t    /**\n\t\t *  Internal tick method\n\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._tick = function (time, value) {\n\t        if (!this.mute) {\n\t            this.callback(time, value);\n\t        }\n\t    };\n\t    /**\n\t\t *  Determine if the event should be currently looping\n\t\t *  given the loop boundries of this Part.\n\t\t *  @param  {Tone.Event}  event  The event to test\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._testLoopBoundries = function (event) {\n\t        if (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd) {\n\t            event.cancel(0);\n\t        } else {\n\t            //reschedule it if it's stopped\n\t            if (event.state === Tone.State.Stopped) {\n\t                this._restartEvent(event);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  The probability of the notes being triggered.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'probability', {\n\t        get: function () {\n\t            return this._probability;\n\t        },\n\t        set: function (prob) {\n\t            this._probability = prob;\n\t            this._setAll('probability', prob);\n\t        }\n\t    });\n\t    /**\n\t\t *  If set to true, will apply small random variation\n\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t *  by that amount.\n\t\t *  @example\n\t\t * event.humanize = true;\n\t\t *  @type {Boolean|Time}\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._humanize = variation;\n\t            this._setAll('humanize', variation);\n\t        }\n\t    });\n\t    /**\n\t\t *  If the part should loop or not\n\t\t *  between Tone.Part.loopStart and \n\t\t *  Tone.Part.loopEnd. An integer\n\t\t *  value corresponds to the number of\n\t\t *  loops the Part does after it starts.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Boolean|Positive}\n\t\t *  @name loop\n\t\t *  @example\n\t\t * //loop the part 8 times\n\t\t * part.loop = 8;\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            this._forEach(function (event) {\n\t                event._loopStart = this._loopStart;\n\t                event._loopEnd = this._loopEnd;\n\t                event.loop = loop;\n\t                this._testLoopBoundries(event);\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopEnd point determines when it will \n\t\t *  loop if Tone.Part.loop is true.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toNotation();\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = this.toTicks(loopEnd);\n\t            if (this._loop) {\n\t                this._forEach(function (event) {\n\t                    event.loopEnd = loopEnd;\n\t                    this._testLoopBoundries(event);\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopStart point determines when it will \n\t\t *  loop if Tone.Part.loop is true.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toNotation();\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = this.toTicks(loopStart);\n\t            if (this._loop) {\n\t                this._forEach(function (event) {\n\t                    event.loopStart = this.loopStart;\n\t                    this._testLoopBoundries(event);\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe playback rate of the part\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Positive}\n\t\t *  @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this._setAll('playbackRate', rate);\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe number of scheduled notes in the part. \n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Positive}\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'length', {\n\t        get: function () {\n\t            return this._events.length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.dispose = function () {\n\t        this.removeAll();\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this.callback = null;\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Part;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Pattern arpeggiates between the given notes\n\t\t *         in a number of patterns. See Tone.CtrlPattern for\n\t\t *         a full list of patterns.\n\t\t *  @example\n\t\t * var pattern = new Tone.Pattern(function(time, note){\n\t\t *   //the order of the notes passed in depends on the pattern\n\t\t * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n\t\t *  @extends {Tone.Loop}\n\t\t *  @param {Function} callback The callback to invoke with the\n\t\t *                             event.\n\t\t *  @param {Array} values The values to arpeggiate over.\n\t\t */\n\t    Tone.Pattern = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'values',\n\t            'pattern'\n\t        ], Tone.Pattern.defaults);\n\t        Tone.Loop.call(this, options);\n\t        /**\n\t\t\t *  The pattern manager\n\t\t\t *  @type {Tone.CtrlPattern}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pattern = new Tone.CtrlPattern({\n\t            'values': options.values,\n\t            'type': options.pattern,\n\t            'index': options.index\n\t        });\n\t    };\n\t    Tone.extend(Tone.Pattern, Tone.Loop);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Pattern.defaults = {\n\t        'pattern': Tone.CtrlPattern.Type.Up,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  Internal function called when the notes should be called\n\t\t *  @param  {Number}  time  The time the event occurs\n\t\t *  @private\n\t\t */\n\t    Tone.Pattern.prototype._tick = function (time) {\n\t        this.callback(time, this._pattern.value);\n\t        this._pattern.next();\n\t    };\n\t    /**\n\t\t *  The current index in the values array.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {Positive}\n\t\t *  @name index\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'index', {\n\t        get: function () {\n\t            return this._pattern.index;\n\t        },\n\t        set: function (i) {\n\t            this._pattern.index = i;\n\t        }\n\t    });\n\t    /**\n\t\t *  The array of events.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {Array}\n\t\t *  @name values\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'values', {\n\t        get: function () {\n\t            return this._pattern.values;\n\t        },\n\t        set: function (vals) {\n\t            this._pattern.values = vals;\n\t        }\n\t    });\n\t    /**\n\t\t *  The current value of the pattern.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'value', {\n\t        get: function () {\n\t            return this._pattern.value;\n\t        }\n\t    });\n\t    /**\n\t\t *  The pattern type. See Tone.CtrlPattern for the full list of patterns.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {String}\n\t\t *  @name pattern\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'pattern', {\n\t        get: function () {\n\t            return this._pattern.type;\n\t        },\n\t        set: function (pattern) {\n\t            this._pattern.type = pattern;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Pattern}  this\n\t\t */\n\t    Tone.Pattern.prototype.dispose = function () {\n\t        Tone.Loop.prototype.dispose.call(this);\n\t        this._pattern.dispose();\n\t        this._pattern = null;\n\t    };\n\t    return Tone.Pattern;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A sequence is an alternate notation of a part. Instead\n\t\t *         of passing in an array of [time, event] pairs, pass\n\t\t *         in an array of events which will be spaced at the\n\t\t *         given subdivision. Sub-arrays will subdivide that beat\n\t\t *         by the number of items are in the array. \n\t\t *         Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n\t\t *  @param  {Function}  callback  The callback to invoke with every note\n\t\t *  @param  {Array}    events  The sequence\n\t\t *  @param  {Time} subdivision  The subdivision between which events are placed. \n\t\t *  @extends {Tone.Part}\n\t\t *  @example\n\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t * \tconsole.log(note);\n\t\t * //straight quater notes\n\t\t * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n\t\t *  @example\n\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t * \tconsole.log(note);\n\t\t * //subdivisions are given as subarrays\n\t\t * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n\t\t */\n\t    Tone.Sequence = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'events',\n\t            'subdivision'\n\t        ], Tone.Sequence.defaults);\n\t        //remove the events\n\t        var events = options.events;\n\t        delete options.events;\n\t        Tone.Part.call(this, options);\n\t        /**\n\t\t\t *  The subdivison of each note\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subdivision = this.toTicks(options.subdivision);\n\t        //if no time was passed in, the loop end is the end of the cycle\n\t        if (this.isUndef(options.loopEnd) && !this.isUndef(events)) {\n\t            this._loopEnd = events.length * this._subdivision;\n\t        }\n\t        //defaults to looping\n\t        this._loop = true;\n\t        //add all of the events\n\t        if (!this.isUndef(events)) {\n\t            for (var i = 0; i < events.length; i++) {\n\t                this.add(i, events[i]);\n\t            }\n\t        }\n\t    };\n\t    Tone.extend(Tone.Sequence, Tone.Part);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Sequence.defaults = { 'subdivision': '4n' };\n\t    /**\n\t\t *  The subdivision of the sequence. This can only be \n\t\t *  set in the constructor. The subdivision is the \n\t\t *  interval between successive steps. \n\t\t *  @type {Time}\n\t\t *  @memberOf Tone.Sequence#\n\t\t *  @name subdivision\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Sequence.prototype, 'subdivision', {\n\t        get: function () {\n\t            return Tone.Time(this._subdivision, 'i').toNotation();\n\t        }\n\t    });\n\t    /**\n\t\t *  Get/Set an index of the sequence. If the index contains a subarray, \n\t\t *  a Tone.Sequence representing that sub-array will be returned. \n\t\t *  @example\n\t\t * var sequence = new Tone.Sequence(playNote, [\"E4\", \"C4\", \"F#4\", [\"A4\", \"Bb3\"]])\n\t\t * sequence.at(0)// => returns \"E4\"\n\t\t * //set a value\n\t\t * sequence.at(0, \"G3\");\n\t\t * //get a nested sequence\n\t\t * sequence.at(3).at(1)// => returns \"Bb3\"\n\t\t * @param {Positive} index The index to get or set\n\t\t * @param {*} value Optionally pass in the value to set at the given index.\n\t\t */\n\t    Tone.Sequence.prototype.at = function (index, value) {\n\t        //if the value is an array, \n\t        if (this.isArray(value)) {\n\t            //remove the current event at that index\n\t            this.remove(index);\n\t        }\n\t        //call the parent's method\n\t        return Tone.Part.prototype.at.call(this, this._indexTime(index), value);\n\t    };\n\t    /**\n\t\t *  Add an event at an index, if there's already something\n\t\t *  at that index, overwrite it. If `value` is an array, \n\t\t *  it will be parsed as a subsequence.\n\t\t *  @param {Number} index The index to add the event to\n\t\t *  @param {*} value The value to add at that index\n\t\t *  @returns {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.add = function (index, value) {\n\t        if (value === null) {\n\t            return this;\n\t        }\n\t        if (this.isArray(value)) {\n\t            //make a subsequence and add that to the sequence\n\t            var subSubdivision = Math.round(this._subdivision / value.length);\n\t            value = new Tone.Sequence(this._tick.bind(this), value, Tone.Time(subSubdivision, 'i'));\n\t        }\n\t        Tone.Part.prototype.add.call(this, this._indexTime(index), value);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove a value from the sequence by index\n\t\t *  @param {Number} index The index of the event to remove\n\t\t *  @returns {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.remove = function (index, value) {\n\t        Tone.Part.prototype.remove.call(this, this._indexTime(index), value);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the time of the index given the Sequence's subdivision\n\t\t *  @param  {Number}  index \n\t\t *  @return  {Time}  The time of that index\n\t\t *  @private\n\t\t */\n\t    Tone.Sequence.prototype._indexTime = function (index) {\n\t        if (index instanceof Tone.TransportTime) {\n\t            return index;\n\t        } else {\n\t            return Tone.TransportTime(index * this._subdivision + this.startOffset, 'i');\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.dispose = function () {\n\t        Tone.Part.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.Sequence;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PulseOscillator is a pulse oscillator with control over pulse width,\n\t\t *         also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is \n\t\t *         a square and only odd-numbered harmonics are present. At all other widths \n\t\t *         even-numbered harmonics are present. Read more \n\t\t *         [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @param {Frequency} [frequency] The frequency of the oscillator\n\t\t *  @param {NormalRange} [width] The width of the pulse\n\t\t *  @example\n\t\t * var pulse = new Tone.PulseOscillator(\"E5\", 0.4).toMaster().start();\n\t\t */\n\t    Tone.PulseOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'width'\n\t        ], Tone.Oscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The width of the pulse. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  gate the width amount\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._widthGate = new Tone.Gain();\n\t        /**\n\t\t\t *  the sawtooth oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sawtooth = new Tone.Oscillator({\n\t            frequency: options.frequency,\n\t            detune: options.detune,\n\t            type: 'sawtooth',\n\t            phase: options.phase\n\t        });\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._sawtooth.frequency;\n\t        /**\n\t\t\t *  The detune in cents. \n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._sawtooth.detune;\n\t        /**\n\t\t\t *  Threshold the signal to turn it into a square\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._thresh = new Tone.WaveShaper(function (val) {\n\t            if (val < 0) {\n\t                return -1;\n\t            } else {\n\t                return 1;\n\t            }\n\t        });\n\t        //connections\n\t        this._sawtooth.chain(this._thresh, this.output);\n\t        this.width.chain(this._widthGate, this._thresh);\n\t        this._readOnly([\n\t            'width',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PulseOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  The default parameters.\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PulseOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'width': 0.2\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} time \n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._sawtooth.start(time);\n\t        this._widthGate.gain.setValueAtTime(1, time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time \n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._sawtooth.stop(time);\n\t        //the width is still connected to the output. \n\t        //that needs to be stopped also\n\t        this._widthGate.gain.setValueAtTime(0, time);\n\t    };\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._sawtooth.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._sawtooth.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the oscillator. Always returns \"pulse\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return 'pulse';\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return [];\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up method.\n\t\t *  @return {Tone.PulseOscillator} this\n\t\t */\n\t    Tone.PulseOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._sawtooth.dispose();\n\t        this._sawtooth = null;\n\t        this._writable([\n\t            'width',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.width.dispose();\n\t        this.width = null;\n\t        this._widthGate.dispose();\n\t        this._widthGate = null;\n\t        this._thresh.dispose();\n\t        this._thresh = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.PulseOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PWMOscillator modulates the width of a Tone.PulseOscillator \n\t\t *         at the modulationFrequency. This has the effect of continuously\n\t\t *         changing the timbre of the oscillator by altering the harmonics \n\t\t *         generated.\n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse. \n\t\t *  @example\n\t\t *  var pwm = new Tone.PWMOscillator(\"Ab3\", 0.3).toMaster().start();\n\t\t */\n\t    Tone.PWMOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'modulationFrequency'\n\t        ], Tone.PWMOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  the pulse oscillator\n\t\t\t *  @type {Tone.PulseOscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pulse = new Tone.PulseOscillator(options.modulationFrequency);\n\t        //change the pulse oscillator type\n\t        this._pulse._sawtooth.type = 'sine';\n\t        /**\n\t\t\t *  the modulator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator({\n\t            'frequency': options.frequency,\n\t            'detune': options.detune,\n\t            'phase': options.phase\n\t        });\n\t        /**\n\t\t\t *  Scale the oscillator so it doesn't go silent \n\t\t\t *  at the extreme values.\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = new Tone.Multiply(2);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._modulator.frequency;\n\t        /**\n\t\t\t *  The detune of the oscillator.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._modulator.detune;\n\t        /**\n\t\t\t *  The modulation rate of the oscillator. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.modulationFrequency = this._pulse.frequency;\n\t        //connections\n\t        this._modulator.chain(this._scale, this._pulse.width);\n\t        this._pulse.connect(this.output);\n\t        this._readOnly([\n\t            'modulationFrequency',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PWMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.PWMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationFrequency': 0.4\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._pulse.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._pulse.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the oscillator. Always returns \"pwm\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return 'pwm';\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return [];\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._modulator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.PWMOscillator} this\n\t\t */\n\t    Tone.PWMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._pulse.dispose();\n\t        this._pulse = null;\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._writable([\n\t            'modulationFrequency',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.modulationFrequency = null;\n\t        return this;\n\t    };\n\t    return Tone.PWMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FMOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.FMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.FMOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'modulationType'\n\t        ], Tone.FMOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The carrier oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._carrier.detune;\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t\t *  modulating signal (ma) -- as in ma/mf. \n\t\t\t *\t@type {Positive}\n\t\t\t *\t@signal\n\t\t\t */\n\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t        this.modulationIndex.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  The modulating oscillator\n\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t        /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //connections\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t        this._modulator.connect(this._modulationNode.gain);\n\t        this._modulationNode.connect(this._carrier.frequency);\n\t        this._carrier.connect(this.output);\n\t        this.detune.connect(this._modulator.detune);\n\t        this.phase = options.phase;\n\t        this._readOnly([\n\t            'modulationIndex',\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationIndex': 2,\n\t        'modulationType': 'square',\n\t        'harmonicity': 1\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._carrier.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._carrier.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._carrier.type;\n\t        },\n\t        set: function (type) {\n\t            this._carrier.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {String}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            return this._modulator.type;\n\t        },\n\t        set: function (type) {\n\t            this._modulator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._carrier.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._carrier.phase = phase;\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._carrier.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._carrier.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.FMOscillator} this\n\t\t */\n\t    Tone.FMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'modulationIndex',\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.modulationIndex.dispose();\n\t        this.modulationIndex = null;\n\t        return this;\n\t    };\n\t    return Tone.FMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AMOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.AMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.AMOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'modulationType'\n\t        ], Tone.AMOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The carrier oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._carrier.frequency;\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._carrier.detune;\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The modulating oscillator\n\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t        /**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationScale = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //connections\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.detune.connect(this._modulator.detune);\n\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t        this._carrier.chain(this._modulationNode, this.output);\n\t        this.phase = options.phase;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.AMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationType': 'square',\n\t        'harmonicity': 1\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._carrier.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._carrier.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._carrier.type;\n\t        },\n\t        set: function (type) {\n\t            this._carrier.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {string}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            return this._modulator.type;\n\t        },\n\t        set: function (type) {\n\t            this._modulator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._carrier.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._carrier.phase = phase;\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._carrier.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._carrier.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.AMOscillator} this\n\t\t */\n\t    Tone.AMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this._modulationScale.dispose();\n\t        this._modulationScale = null;\n\t        return this;\n\t    };\n\t    return Tone.AMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FatOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.FatOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.FatOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'spread'\n\t        ], Tone.FatOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  The array of oscillators\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillators = [];\n\t        /**\n\t\t\t *  The total spread of the oscillators\n\t\t\t *  @type  {Cents}\n\t\t\t *  @private\n\t\t\t */\n\t        this._spread = options.spread;\n\t        /**\n\t\t\t *  The type of the oscillator\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The phase of the oscillators\n\t\t\t *  @type {Degrees}\n\t\t\t *  @private\n\t\t\t */\n\t        this._phase = options.phase;\n\t        /**\n\t\t\t *  The partials array\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._partials = this.defaultArg(options.partials, []);\n\t        //set the count initially\n\t        this.count = options.count;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FatOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FatOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'spread': 20,\n\t        'count': 3,\n\t        'type': 'sawtooth'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.start(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.stop(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  Iterate over all of the oscillators\n\t\t *  @param  {Function}  iterator  The iterator function\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._forEach = function (iterator) {\n\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t            iterator.call(this, this._oscillators[i], i);\n\t        }\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._type = type;\n\t            this._forEach(function (osc) {\n\t                osc.type = type;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t * for a total detune spread of 40 cents.\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Cents}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'spread', {\n\t        get: function () {\n\t            return this._spread;\n\t        },\n\t        set: function (spread) {\n\t            this._spread = spread;\n\t            if (this._oscillators.length > 1) {\n\t                var start = -spread / 2;\n\t                var step = spread / (this._oscillators.length - 1);\n\t                this._forEach(function (osc, i) {\n\t                    osc.detune.value = start + step * i;\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of detuned oscillators\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Number}\n\t\t * @name count\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'count', {\n\t        get: function () {\n\t            return this._oscillators.length;\n\t        },\n\t        set: function (count) {\n\t            count = Math.max(count, 1);\n\t            if (this._oscillators.length !== count) {\n\t                // var partials = this.partials;\n\t                // var type = this.type;\n\t                //dispose the previous oscillators\n\t                this._forEach(function (osc) {\n\t                    osc.dispose();\n\t                });\n\t                this._oscillators = [];\n\t                for (var i = 0; i < count; i++) {\n\t                    var osc = new Tone.Oscillator();\n\t                    if (this.type === Tone.Oscillator.Type.Custom) {\n\t                        osc.partials = this._partials;\n\t                    } else {\n\t                        osc.type = this._type;\n\t                    }\n\t                    osc.phase = this._phase;\n\t                    osc.volume.value = -6 - count;\n\t                    this.frequency.connect(osc.frequency);\n\t                    this.detune.connect(osc.detune);\n\t                    osc.connect(this.output);\n\t                    this._oscillators[i] = osc;\n\t                }\n\t                //set the spread\n\t                this.spread = this._spread;\n\t                if (this.state === Tone.State.Started) {\n\t                    this._forEach(function (osc) {\n\t                        osc.start();\n\t                    });\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._phase;\n\t        },\n\t        set: function (phase) {\n\t            this._phase = phase;\n\t            this._forEach(function (osc) {\n\t                osc.phase = phase;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._partials;\n\t        },\n\t        set: function (partials) {\n\t            this._partials = partials;\n\t            this._type = Tone.Oscillator.Type.Custom;\n\t            this._forEach(function (osc) {\n\t                osc.partials = partials;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.FatOscillator} this\n\t\t */\n\t    Tone.FatOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this._forEach(function (osc) {\n\t            osc.dispose();\n\t        });\n\t        this._oscillators = null;\n\t        this._partials = null;\n\t        return this;\n\t    };\n\t    return Tone.FatOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n\t\t *         Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n\t\t *         into one class. The oscillator class can be changed by setting the `type`. \n\t\t *         `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n\t\t *         any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n\t\t *         will use the FMOscillator, AMOscillator or FatOscillator respectively. \n\t\t *         For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n\t\t *         to a FatOscillator of type \"sawtooth\". \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The initial frequency of the oscillator.\n\t\t *  @param {String} type The type of the oscillator.\n\t\t *  @example\n\t\t *  var omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\");\n\t\t */\n\t    Tone.OmniOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.OmniOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  the type of the oscillator source\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sourceType = undefined;\n\t        /**\n\t\t\t *  the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = null;\n\t        //set the oscillator\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        //set the options\n\t        this.set(options);\n\t    };\n\t    Tone.extend(Tone.OmniOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.OmniOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'type': 'sine',\n\t        'phase': 0\n\t    };\n\t    /**\n\t\t *  @enum {String}\n\t\t *  @private\n\t\t */\n\t    var OmniOscType = {\n\t        Pulse: 'PulseOscillator',\n\t        PWM: 'PWMOscillator',\n\t        Osc: 'Oscillator',\n\t        FM: 'FMOscillator',\n\t        AM: 'AMOscillator',\n\t        Fat: 'FatOscillator'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._start = function (time) {\n\t        this._oscillator.start(time);\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._stop = function (time) {\n\t        this._oscillator.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error \n\t\t * when it's not.\n\t\t * \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {String}\n\t\t * @name type\n\t\t * @example\n\t\t * omniOsc.type = \"pwm\";\n\t\t * //modulationFrequency is parameter which is available\n\t\t * //only when the type is \"pwm\". \n\t\t * omniOsc.modulationFrequency.value = 0.5;\n\t\t * @example\n\t\t * //an square wave frequency modulated by a sawtooth\n\t\t * omniOsc.type = \"fmsquare\";\n\t\t * omniOsc.modulationType = \"sawtooth\";\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'type', {\n\t        get: function () {\n\t            var prefix = '';\n\t            if (this._sourceType === OmniOscType.FM) {\n\t                prefix = 'fm';\n\t            } else if (this._sourceType === OmniOscType.AM) {\n\t                prefix = 'am';\n\t            } else if (this._sourceType === OmniOscType.Fat) {\n\t                prefix = 'fat';\n\t            }\n\t            return prefix + this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            if (type.substr(0, 2) === 'fm') {\n\t                this._createNewOscillator(OmniOscType.FM);\n\t                this._oscillator.type = type.substr(2);\n\t            } else if (type.substr(0, 2) === 'am') {\n\t                this._createNewOscillator(OmniOscType.AM);\n\t                this._oscillator.type = type.substr(2);\n\t            } else if (type.substr(0, 3) === 'fat') {\n\t                this._createNewOscillator(OmniOscType.Fat);\n\t                this._oscillator.type = type.substr(3);\n\t            } else if (type === 'pwm') {\n\t                this._createNewOscillator(OmniOscType.PWM);\n\t            } else if (type === 'pulse') {\n\t                this._createNewOscillator(OmniOscType.Pulse);\n\t            } else {\n\t                this._createNewOscillator(OmniOscType.Osc);\n\t                this._oscillator.type = type;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._oscillator.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._oscillator.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Set a member/attribute of the oscillator. \n\t\t *  @param {Object|String} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone.OmniOscillator} this\n\t\t */\n\t    Tone.OmniOscillator.prototype.set = function (params, value) {\n\t        //make sure the type is set first\n\t        if (params === 'type') {\n\t            this.type = value;\n\t        } else if (this.isObject(params) && params.hasOwnProperty('type')) {\n\t            this.type = params.type;\n\t        }\n\t        //then set the rest\n\t        Tone.prototype.set.apply(this, arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the oscillator to the frequency and detune signals\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._createNewOscillator = function (oscType) {\n\t        if (oscType !== this._sourceType) {\n\t            this._sourceType = oscType;\n\t            var OscillatorConstructor = Tone[oscType];\n\t            //short delay to avoid clicks on the change\n\t            var now = this.now() + this.blockTime;\n\t            if (this._oscillator !== null) {\n\t                var oldOsc = this._oscillator;\n\t                oldOsc.stop(now);\n\t                //dispose the old one\n\t                setTimeout(function () {\n\t                    oldOsc.dispose();\n\t                    oldOsc = null;\n\t                }, this.blockTime * 1000);\n\t            }\n\t            this._oscillator = new OscillatorConstructor();\n\t            this.frequency.connect(this._oscillator.frequency);\n\t            this.detune.connect(this._oscillator.detune);\n\t            this._oscillator.connect(this.output);\n\t            if (this.state === Tone.State.Started) {\n\t                this._oscillator.start(now);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t * The phase of the oscillator in degrees. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._oscillator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._oscillator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The width of the oscillator (only if the oscillator is set to \"pulse\")\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {NormalRange}\n\t\t * @signal\n\t\t * @name width\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pulse\");\n\t\t * //can access the width attribute only if type === \"pulse\"\n\t\t * omniOsc.width.value = 0.2; \n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'width', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Pulse) {\n\t                return this._oscillator.width;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of detuned oscillators\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Number}\n\t\t * @name count\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'count', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                return this._oscillator.count;\n\t            }\n\t        },\n\t        set: function (count) {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                this._oscillator.count = count;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t\t * for more info.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Cents}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'spread', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                return this._oscillator.spread;\n\t            }\n\t        },\n\t        set: function (spread) {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                this._oscillator.spread = spread;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator. Only if the oscillator\n\t\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t\t * for more info. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {String}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                return this._oscillator.modulationType;\n\t            }\n\t        },\n\t        set: function (mType) {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                this._oscillator.modulationType = mType;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t * modulating signal (ma) -- as in ma/mf. \n\t\t * See Tone.FMOscillator for more info. \n\t\t * @type {Positive}\n\t\t * @signal\n\t\t * @name modulationIndex\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationIndex', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM) {\n\t                return this._oscillator.modulationIndex;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t\t *  for more info. \n\t\t *  @memberOf Tone.OmniOscillator#\n\t\t *  @signal\n\t\t *  @type {Positive}\n\t\t *  @name harmonicity\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'harmonicity', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                return this._oscillator.harmonicity;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The modulationFrequency Signal of the oscillator \n\t\t * (only if the oscillator type is set to pwm). See \n\t\t * Tone.PWMOscillator for more info. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Frequency}\n\t\t * @signal\n\t\t * @name modulationFrequency\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pwm\");\n\t\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t\t * omniOsc.modulationFrequency.value = 0.2; \n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationFrequency', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.PWM) {\n\t                return this._oscillator.modulationFrequency;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.OmniOscillator} this\n\t\t */\n\t    Tone.OmniOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._oscillator.dispose();\n\t        this._oscillator = null;\n\t        this._sourceType = null;\n\t        return this;\n\t    };\n\t    return Tone.OmniOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base-class for all instruments\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Instrument = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.Instrument.defaults);\n\t        /**\n\t\t\t *  The output and volume triming node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t    };\n\t    Tone.extend(Tone.Instrument);\n\t    /**\n\t\t *  the default attributes\n\t\t *  @type {object}\n\t\t */\n\t    Tone.Instrument.defaults = {\n\t        /** the volume of the output in decibels */\n\t        'volume': 0\n\t    };\n\t    /**\n\t\t *  @abstract\n\t\t *  @param {string|number} note the note to trigger\n\t\t *  @param {Time} [time=now] the time to trigger the ntoe\n\t\t *  @param {number} [velocity=1] the velocity to trigger the note\n\t\t */\n\t    Tone.Instrument.prototype.triggerAttack = Tone.noOp;\n\t    /**\n\t\t *  @abstract\n\t\t *  @param {Time} [time=now] when to trigger the release\n\t\t */\n\t    Tone.Instrument.prototype.triggerRelease = Tone.noOp;\n\t    /**\n\t\t *  Trigger the attack and then the release after the duration. \n\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t *  @param  {Time} duration How long the note should be held for before\n\t\t *                          triggering the release. This value must be greater than 0. \n\t\t *  @param {Time} [time=now]  When the note should be triggered.\n\t\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t\t *  @returns {Tone.Instrument} this\n\t\t *  @example\n\t\t * //trigger \"C4\" for the duration of an 8th note\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.Instrument.prototype.triggerAttackRelease = function (note, duration, time, velocity) {\n\t        if (this.isUndef(time)) {\n\t            time = this.now() + this.blockTime;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(note, time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Instrument} this\n\t\t */\n\t    Tone.Instrument.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this._writable(['volume']);\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.Instrument;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  This is an abstract base class for other monophonic instruments to \n\t\t *          extend. IMPORTANT: It does not make any sound on its own and\n\t\t *          shouldn't be directly instantiated.\n\t\t *\n\t\t *  @constructor\n\t\t *  @abstract\n\t\t *  @extends {Tone.Instrument}\n\t\t */\n\t    Tone.Monophonic = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.Monophonic.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The glide time between notes. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.portamento = options.portamento;\n\t    };\n\t    Tone.extend(Tone.Monophonic, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Monophonic.defaults = { 'portamento': 0 };\n\t    /**\n\t\t *  Trigger the attack of the note optionally with a given velocity. \n\t\t *  \n\t\t *  \n\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t *  @param  {Time} [time=now]     When the note should start.\n\t\t *  @param  {number} [velocity=1] velocity The velocity scaler \n\t\t *                                determines how \"loud\" the note \n\t\t *                                will be triggered.\n\t\t *  @returns {Tone.Monophonic} this\n\t\t *  @example\n\t\t * synth.triggerAttack(\"C4\");\n\t\t *  @example\n\t\t * //trigger the note a half second from now at half velocity\n\t\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t\t */\n\t    Tone.Monophonic.prototype.triggerAttack = function (note, time, velocity) {\n\t        if (this.isUndef(time)) {\n\t            time = this.now() + this.blockTime;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._triggerEnvelopeAttack(time, velocity);\n\t        this.setNote(note, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of the envelope\n\t\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t\t *  @returns {Tone.Monophonic} this\n\t\t *  @example\n\t\t * synth.triggerRelease();\n\t\t */\n\t    Tone.Monophonic.prototype.triggerRelease = function (time) {\n\t        if (this.isUndef(time)) {\n\t            time = this.now() + this.blockTime;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._triggerEnvelopeRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @private\n\t\t */\n\t    Tone.Monophonic.prototype._triggerEnvelopeAttack = function () {\n\t    };\n\t    /**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @private\n\t\t */\n\t    Tone.Monophonic.prototype._triggerEnvelopeRelease = function () {\n\t    };\n\t    /**\n\t\t *  Set the note at the given time. If no time is given, the note\n\t\t *  will set immediately. \n\t\t *  @param {Frequency} note The note to change to.\n\t\t *  @param  {Time} [time=now] The time when the note should be set. \n\t\t *  @returns {Tone.Monophonic} this\n\t\t * @example\n\t\t * //change to F#6 in one quarter note from now.\n\t\t * synth.setNote(\"F#6\", \"+4n\");\n\t\t * @example\n\t\t * //change to Bb4 right now\n\t\t * synth.setNote(\"Bb4\");\n\t\t */\n\t    Tone.Monophonic.prototype.setNote = function (note, time) {\n\t        time = this.toSeconds(time);\n\t        if (this.portamento > 0) {\n\t            var currentNote = this.frequency.value;\n\t            this.frequency.setValueAtTime(currentNote, time);\n\t            var portTime = this.toSeconds(this.portamento);\n\t            this.frequency.exponentialRampToValueAtTime(note, time + portTime);\n\t        } else {\n\t            this.frequency.setValueAtTime(note, time);\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Monophonic;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Synth is composed simply of a Tone.OmniOscillator\n\t\t *          routed through a Tone.AmplitudeEnvelope. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.Synth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.Synth = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.Synth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this.oscillator.frequency;\n\t        /**\n\t\t\t *  The detune control.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this.oscillator.detune;\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the oscillators to the output\n\t        this.oscillator.chain(this.envelope, this.output);\n\t        //start the oscillators\n\t        this.oscillator.start();\n\t        this._readOnly([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Synth, Tone.Monophonic);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Synth.defaults = {\n\t        'oscillator': { 'type': 'triangle' },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0.3,\n\t            'release': 1\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.Synth} this\n\t\t *  @private\n\t\t */\n\t    Tone.Synth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.Synth} this\n\t\t *  @private\n\t\t */\n\t    Tone.Synth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Synth} this\n\t\t */\n\t    Tone.Synth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.Synth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  AMSynth uses the output of one Tone.Synth to modulate the\n\t\t *          amplitude of another Tone.Synth. The harmonicity (the ratio between\n\t\t *          the two signals) affects the timbre of the output signal greatly.\n\t\t *          Read more about Amplitude Modulation Synthesis on \n\t\t *          [SoundOnSound](http://www.soundonsound.com/sos/mar00/articles/synthsecrets.htm).\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                            see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.AMSynth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"4n\");\n\t\t */\n\t    Tone.AMSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.AMSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The carrier voice. \n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Synth();\n\t        this._carrier.volume.value = -10;\n\t        /**\n\t\t\t *  The carrier's oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.oscillator = this._carrier.oscillator;\n\t        /**\n\t\t\t *  The carrier's envelope\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t        /**\n\t\t\t *  The modulator voice. \n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Synth();\n\t        this._modulator.volume.value = -10;\n\t        /**\n\t\t\t *  The modulator's oscillator which is applied\n\t\t\t *  to the amplitude of the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t        /**\n\t\t\t *  The modulator's envelope\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t        /**\n\t\t\t *  The frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationScale = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain();\n\t        //control the two voices frequency\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t        this._carrier.chain(this._modulationNode, this.output);\n\t        this._readOnly([\n\t            'frequency',\n\t            'harmonicity',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AMSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AMSynth.defaults = {\n\t        'harmonicity': 3,\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.01,\n\t            'decay': 0.01,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        },\n\t        'modulation': { 'type': 'square' },\n\t        'modulationEnvelope': {\n\t            'attack': 0.5,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t *  trigger the attack portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note\n\t\t *  @private\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the port glide\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.modulationEnvelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  trigger the release portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @private\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        this.modulationEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'harmonicity',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._modulationScale.dispose();\n\t        this._modulationScale = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.oscillator = null;\n\t        this.envelope = null;\n\t        this.modulationEnvelope = null;\n\t        this.modulation = null;\n\t        return this;\n\t    };\n\t    return Tone.AMSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.\n\t\t *          The amplitude of the Tone.Oscillator and the cutoff frequency of the \n\t\t *          Tone.Filter are controlled by Tone.Envelopes. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n\t\t *          \n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.MonoSynth({\n\t\t * \t\"oscillator\" : {\n\t\t * \t\t\"type\" : \"square\"\n\t\t *  },\n\t\t *  \"envelope\" : {\n\t\t *  \t\"attack\" : 0.1\n\t\t *  }\n\t\t * }).toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.MonoSynth = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.MonoSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this.oscillator.frequency;\n\t        /**\n\t\t\t *  The detune control.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this.oscillator.detune;\n\t        /**\n\t\t\t *  The filter.\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.filter = new Tone.Filter(options.filter);\n\t        /**\n\t\t\t *  The filter envelope.\n\t\t\t *  @type {Tone.FrequencyEnvelope}\n\t\t\t */\n\t        this.filterEnvelope = new Tone.FrequencyEnvelope(options.filterEnvelope);\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the oscillators to the output\n\t        this.oscillator.chain(this.filter, this.envelope, this.output);\n\t        //start the oscillators\n\t        this.oscillator.start();\n\t        //connect the filter envelope\n\t        this.filterEnvelope.connect(this.filter.frequency);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'filter',\n\t            'filterEnvelope',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MonoSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MonoSynth.defaults = {\n\t        'frequency': 'C4',\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'square' },\n\t        'filter': {\n\t            'Q': 6,\n\t            'type': 'lowpass',\n\t            'rolloff': -24\n\t        },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0.9,\n\t            'release': 1\n\t        },\n\t        'filterEnvelope': {\n\t            'attack': 0.06,\n\t            'decay': 0.2,\n\t            'sustain': 0.5,\n\t            'release': 2,\n\t            'baseFrequency': 200,\n\t            'octaves': 7,\n\t            'exponent': 2\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.MonoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.filterEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.MonoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        this.filterEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t */\n\t    Tone.MonoSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'filter',\n\t            'filterEnvelope',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this.filterEnvelope.dispose();\n\t        this.filterEnvelope = null;\n\t        this.filter.dispose();\n\t        this.filter = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.MonoSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.DuoSynth is a monophonic synth composed of two \n\t\t *          MonoSynths run in parallel with control over the \n\t\t *          frequency ratio between the two voices and vibrato effect.\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var duoSynth = new Tone.DuoSynth().toMaster();\n\t\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t\t */\n\t    Tone.DuoSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.DuoSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  the first voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t        this.voice0 = new Tone.MonoSynth(options.voice0);\n\t        this.voice0.volume.value = -10;\n\t        /**\n\t\t\t *  the second voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t        this.voice1 = new Tone.MonoSynth(options.voice1);\n\t        this.voice1.volume.value = -10;\n\t        /**\n\t\t\t *  The vibrato LFO. \n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._vibrato = new Tone.LFO(options.vibratoRate, -50, 50);\n\t        this._vibrato.start();\n\t        /**\n\t\t\t * the vibrato frequency\n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.vibratoRate = this._vibrato.frequency;\n\t        /**\n\t\t\t *  the vibrato gain\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._vibratoGain = new Tone.Gain(options.vibratoAmount, Tone.Type.Positive);\n\t        /**\n\t\t\t * The amount of vibrato\n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t */\n\t        this.vibratoAmount = this._vibratoGain.gain;\n\t        /**\n\t\t\t *  the frequency control\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * duoSynth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        //control the two voices frequency\n\t        this.frequency.connect(this.voice0.frequency);\n\t        this.frequency.chain(this.harmonicity, this.voice1.frequency);\n\t        this._vibrato.connect(this._vibratoGain);\n\t        this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\t        this.voice0.connect(this.output);\n\t        this.voice1.connect(this.output);\n\t        this._readOnly([\n\t            'voice0',\n\t            'voice1',\n\t            'frequency',\n\t            'vibratoAmount',\n\t            'vibratoRate'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.DuoSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.DuoSynth.defaults = {\n\t        'vibratoAmount': 0.5,\n\t        'vibratoRate': 5,\n\t        'harmonicity': 1.5,\n\t        'voice0': {\n\t            'volume': -10,\n\t            'portamento': 0,\n\t            'oscillator': { 'type': 'sine' },\n\t            'filterEnvelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            },\n\t            'envelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            }\n\t        },\n\t        'voice1': {\n\t            'volume': -10,\n\t            'portamento': 0,\n\t            'oscillator': { 'type': 'sine' },\n\t            'filterEnvelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            },\n\t            'envelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelopes\n\t\t *  \n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.DuoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.voice0.envelope.triggerAttack(time, velocity);\n\t        this.voice1.envelope.triggerAttack(time, velocity);\n\t        this.voice0.filterEnvelope.triggerAttack(time);\n\t        this.voice1.filterEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelopes\n\t\t *  \n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.DuoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.voice0.triggerRelease(time);\n\t        this.voice1.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t */\n\t    Tone.DuoSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'voice0',\n\t            'voice1',\n\t            'frequency',\n\t            'vibratoAmount',\n\t            'vibratoRate'\n\t        ]);\n\t        this.voice0.dispose();\n\t        this.voice0 = null;\n\t        this.voice1.dispose();\n\t        this.voice1 = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._vibratoGain.dispose();\n\t        this._vibratoGain = null;\n\t        this._vibrato = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this.vibratoAmount.dispose();\n\t        this.vibratoAmount = null;\n\t        this.vibratoRate = null;\n\t        return this;\n\t    };\n\t    return Tone.DuoSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n\t\t *          the frequency of a second Tone.Synth. A lot of spectral content \n\t\t *          can be explored using the modulationIndex parameter. Read more about\n\t\t *          frequency modulation synthesis on [SoundOnSound](http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm).\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var fmSynth = new Tone.FMSynth().toMaster();\n\t\t * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t\t */\n\t    Tone.FMSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.FMSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The carrier voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Synth(options.carrier);\n\t        this._carrier.volume.value = -10;\n\t        /**\n\t\t\t *  The carrier's oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.oscillator = this._carrier.oscillator;\n\t        /**\n\t\t\t *  The carrier's envelope\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t        /**\n\t\t\t *  The modulator voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Synth(options.modulator);\n\t        this._modulator.volume.value = -10;\n\t        /**\n\t\t\t *  The modulator's oscillator which is applied\n\t\t\t *  to the amplitude of the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t        /**\n\t\t\t *  The modulator's envelope\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  The modulation index which essentially the depth or amount of the modulation. It is the \n\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t\t *  modulating signal (ma) -- as in ma/mf. \n\t\t\t *\t@type {Positive}\n\t\t\t *\t@signal\n\t\t\t */\n\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t        this.modulationIndex.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //control the two voices frequency\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t        this._modulator.connect(this._modulationNode.gain);\n\t        this._modulationNode.connect(this._carrier.frequency);\n\t        this._carrier.connect(this.output);\n\t        this._readOnly([\n\t            'frequency',\n\t            'harmonicity',\n\t            'modulationIndex',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FMSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FMSynth.defaults = {\n\t        'harmonicity': 3,\n\t        'modulationIndex': 10,\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.01,\n\t            'decay': 0.01,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        },\n\t        'modulation': { 'type': 'square' },\n\t        'modulationEnvelope': {\n\t            'attack': 0.5,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t * \ttrigger the attack portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t *  @param {number} [velocity=1] the velocity of the note\n\t\t *  @returns {Tone.FMSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.FMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.modulationEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  trigger the release portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.FMSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.FMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        this.modulationEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FMSynth} this\n\t\t */\n\t    Tone.FMSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'harmonicity',\n\t            'modulationIndex',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.modulationIndex.dispose();\n\t        this.modulationIndex = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.oscillator = null;\n\t        this.envelope = null;\n\t        this.modulationEnvelope = null;\n\t        this.modulation = null;\n\t        return this;\n\t    };\n\t    return Tone.FMSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.MembraneSynth makes kick and tom sounds using a single oscillator\n\t\t *          with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n\t\t *          is routed through a Tone.AmplitudeEnvelope to the output. The drum\n\t\t *          quality of the sound comes from the frequency envelope applied\n\t\t *          during during Tone.MembraneSynth.triggerAttack(note). The frequency\n\t\t *          envelope starts at <code>note * .octaves</code> and ramps to \n\t\t *          <code>note</code> over the duration of <code>.pitchDecay</code>. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.MembraneSynth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C2\", \"8n\");\n\t\t */\n\t    Tone.MembraneSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.MembraneSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator).start();\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        /**\n\t\t\t *  The number of octaves the pitch envelope ramps.\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this.octaves = options.octaves;\n\t        /**\n\t\t\t *  The amount of time the frequency envelope takes. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.pitchDecay = options.pitchDecay;\n\t        this.oscillator.chain(this.envelope, this.output);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MembraneSynth, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MembraneSynth.defaults = {\n\t        'pitchDecay': 0.05,\n\t        'octaves': 10,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 0.4,\n\t            'sustain': 0.01,\n\t            'release': 1.4,\n\t            'attackCurve': 'exponential'\n\t        }\n\t    };\n\t    /**\n\t\t *  Trigger the note at the given time with the given velocity. \n\t\t *  \n\t\t *  @param  {Frequency} note     the note\n\t\t *  @param  {Time} [time=now]     the time, if not given is now\n\t\t *  @param  {number} [velocity=1] velocity defaults to 1\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t *  @example\n\t\t *  kick.triggerAttack(60);\n\t\t */\n\t    Tone.MembraneSynth.prototype.triggerAttack = function (note, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        note = this.toFrequency(note);\n\t        var maxNote = note * this.octaves;\n\t        this.oscillator.frequency.setValueAtTime(maxNote, time);\n\t        this.oscillator.frequency.exponentialRampToValueAtTime(note, time + this.toSeconds(this.pitchDecay));\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of the note.\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t */\n\t    Tone.MembraneSynth.prototype.triggerRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t */\n\t    Tone.MembraneSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.MembraneSynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  Inharmonic ratio of frequencies based on the Roland TR-808\n\t\t *  Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var inharmRatios = [\n\t        1,\n\t        1.483,\n\t        1.932,\n\t        2.546,\n\t        2.63,\n\t        3.897\n\t    ];\n\t    /**\n\t\t *  @class  A highly inharmonic and spectrally complex source with a highpass filter\n\t\t *          and amplitude envelope which is good for making metalophone sounds. Based\n\t\t *          on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n\t\t *          Inspiration from [Sound on Sound](http://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] The options availble for the synth\n\t\t *                             see defaults below\n\t\t */\n\t    Tone.MetalSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.MetalSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The frequency of the cymbal\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The array of FMOscillators\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillators = [];\n\t        /**\n\t\t\t *  The frequency multipliers\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._freqMultipliers = [];\n\t        /**\n\t\t\t *  The amplitude for the body\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitue = new Tone.Gain(0).connect(this.output);\n\t        /**\n\t\t\t *  highpass the output\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._highpass = new Tone.Filter({\n\t            'type': 'highpass',\n\t            'Q': -3.0102999566398125\n\t        }).connect(this._amplitue);\n\t        /**\n\t\t\t *  The number of octaves the highpass\n\t\t\t *  filter frequency ramps\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  Scale the body envelope\n\t\t\t *  for the bandpass\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filterFreqScaler = new Tone.Scale(options.resonance, 7000);\n\t        /**\n\t\t\t *  The envelope which is connected both to the \n\t\t\t *  amplitude and highpass filter's cutoff frequency\n\t\t\t *  @type  {Tone.Envelope}\n\t\t\t */\n\t        this.envelope = new Tone.Envelope({\n\t            'attack': options.envelope.attack,\n\t            'attackCurve': 'linear',\n\t            'decay': options.envelope.decay,\n\t            'sustain': 0,\n\t            'release': options.envelope.release\n\t        }).chain(this._filterFreqScaler, this._highpass.frequency);\n\t        this.envelope.connect(this._amplitue.gain);\n\t        for (var i = 0; i < inharmRatios.length; i++) {\n\t            var osc = new Tone.FMOscillator({\n\t                'type': 'square',\n\t                'modulationType': 'square',\n\t                'harmonicity': options.harmonicity,\n\t                'modulationIndex': options.modulationIndex\n\t            });\n\t            osc.connect(this._highpass).start(0);\n\t            this._oscillators[i] = osc;\n\t            var mult = new Tone.Multiply(inharmRatios[i]);\n\t            this._freqMultipliers[i] = mult;\n\t            this.frequency.chain(mult, osc.frequency);\n\t        }\n\t        //set the octaves\n\t        this.octaves = options.octaves;\n\t    };\n\t    Tone.extend(Tone.MetalSynth, Tone.Instrument);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MetalSynth.defaults = {\n\t        'frequency': 200,\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 1.4,\n\t            'release': 0.2\n\t        },\n\t        'harmonicity': 5.1,\n\t        'modulationIndex': 32,\n\t        'resonance': 4000,\n\t        'octaves': 1.5\n\t    };\n\t    /**\n\t\t *  Trigger the attack.\n\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerAttack = function (time, vel) {\n\t        time = this.toSeconds(time);\n\t        vel = this.defaultArg(vel, 1);\n\t        this.envelope.triggerAttack(time, vel);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release of the envelope.\n\t\t *  @param  {Time}  time      When the release should be triggered.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and release of the envelope after the given \n\t\t *  duration. \n\t\t *  @param  {Time}  duration  The duration before triggering the release\n\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The modulationIndex of the oscillators which make up the source.\n\t\t *  see Tone.FMOscillator.modulationIndex\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Positive}\n\t\t *  @name  modulationIndex\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'modulationIndex', {\n\t        get: function () {\n\t            return this._oscillators[0].modulationIndex.value;\n\t        },\n\t        set: function (val) {\n\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t                this._oscillators[i].modulationIndex.value = val;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The harmonicity of the oscillators which make up the source.\n\t\t *  see Tone.FMOscillator.harmonicity\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Positive}\n\t\t *  @name  harmonicity\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'harmonicity', {\n\t        get: function () {\n\t            return this._oscillators[0].harmonicity.value;\n\t        },\n\t        set: function (val) {\n\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t                this._oscillators[i].harmonicity.value = val;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The frequency of the highpass filter attached to the envelope\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Frequency}\n\t\t *  @name  resonance\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'resonance', {\n\t        get: function () {\n\t            return this._filterFreqScaler.min;\n\t        },\n\t        set: function (val) {\n\t            this._filterFreqScaler.min = val;\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of octaves above the \"resonance\" frequency\n\t\t *  that the filter ramps during the attack/decay envelope\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Number}\n\t\t *  @name  octaves\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octs) {\n\t            this._octaves = octs;\n\t            this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, octs);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.MetalSynth} this\n\t\t */\n\t    Tone.MetalSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t            this._oscillators[i].dispose();\n\t            this._freqMultipliers[i].dispose();\n\t        }\n\t        this._oscillators = null;\n\t        this._freqMultipliers = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._filterFreqScaler.dispose();\n\t        this._filterFreqScaler = null;\n\t        this._amplitue.dispose();\n\t        this._amplitue = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this._highpass.dispose();\n\t        this._highpass = null;\n\t    };\n\t    return Tone.MetalSynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  BufferSource polyfill\n\t\t */\n\t    if (window.AudioBufferSourceNode && !AudioBufferSourceNode.prototype.start) {\n\t        AudioBufferSourceNode.prototype.start = AudioBufferSourceNode.prototype.noteGrainOn;\n\t        AudioBufferSourceNode.prototype.stop = AudioBufferSourceNode.prototype.noteOff;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the native BufferSourceNode.\n\t\t *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n\t\t *  @param  {Function}  onended  The callback to invoke when the \n\t\t *                               buffer is done playing.\n\t\t */\n\t    Tone.BufferSource = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'buffer',\n\t            'onended'\n\t        ], Tone.BufferSource.defaults);\n\t        /**\n\t\t\t *  The callback to invoke after the \n\t\t\t *  buffer source is done playing. \n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.onended = options.onended;\n\t        /**\n\t\t\t *  The time that the buffer was started.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startTime = -1;\n\t        /**\n\t\t\t *  The time that the buffer is scheduled to stop.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stopTime = -1;\n\t        /**\n\t\t\t *  The gain node which envelopes the BufferSource\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gainNode = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  The buffer source\n\t\t\t *  @type  {AudioBufferSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._source = this.context.createBufferSource();\n\t        this._source.connect(this._gainNode);\n\t        /**\n\t\t\t *  The playbackRate of the buffer\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.playbackRate = new Tone.Param(this._source.playbackRate, Tone.Type.Positive);\n\t        /**\n\t\t\t *  The fadeIn time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeIn = options.fadeIn;\n\t        /**\n\t\t\t *  The fadeOut time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeOut = options.fadeOut;\n\t        /**\n\t\t\t *  The value that the buffer ramps to\n\t\t\t *  @type {Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = 1;\n\t        /**\n\t\t\t * The onended timeout\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._onendedTimeout = -1;\n\t        //set the buffer initially\n\t        if (!this.isUndef(options.buffer)) {\n\t            this.buffer = options.buffer;\n\t        }\n\t        this.loop = options.loop;\n\t    };\n\t    Tone.extend(Tone.BufferSource);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.BufferSource.defaults = {\n\t        'onended': Tone.noOp,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.BufferSource#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'state', {\n\t        get: function () {\n\t            var now = this.now();\n\t            if (this._startTime !== -1 && now >= this._startTime && now < this._stopTime) {\n\t                return Tone.State.Started;\n\t            } else {\n\t                return Tone.State.Stopped;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the buffer\n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.\n\t\t *  @param  {Time=}  fadeInTime  The optional fadeIn ramp time.\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.start = function (time, offset, duration, gain, fadeInTime) {\n\t        if (this._startTime !== -1) {\n\t            throw new Error('Tone.BufferSource: can only be started once.');\n\t        }\n\t        if (this.buffer) {\n\t            time = this.toSeconds(time);\n\t            //if it's a loop the default offset is the loopstart point\n\t            if (this.loop) {\n\t                offset = this.defaultArg(offset, this.loopStart);\n\t            } else {\n\t                //otherwise the default offset is 0\n\t                offset = this.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toSeconds(offset);\n\t            //the values in seconds\n\t            time = this.toSeconds(time);\n\t            this._source.start(time, offset);\n\t            gain = this.defaultArg(gain, 1);\n\t            this._gain = gain;\n\t            //the fadeIn time\n\t            if (this.isUndef(fadeInTime)) {\n\t                fadeInTime = this.toSeconds(this.fadeIn);\n\t            } else {\n\t                fadeInTime = this.toSeconds(fadeInTime);\n\t            }\n\t            if (fadeInTime > 0) {\n\t                this._gainNode.gain.setValueAtTime(0, time);\n\t                this._gainNode.gain.linearRampToValueAtTime(this._gain, time + fadeInTime);\n\t            } else {\n\t                this._gainNode.gain.setValueAtTime(gain, time);\n\t            }\n\t            this._startTime = time + fadeInTime;\n\t            if (!this.isUndef(duration)) {\n\t                duration = this.defaultArg(duration, this.buffer.duration - offset);\n\t                duration = this.toSeconds(duration);\n\t                this.stop(time + duration + fadeInTime, fadeInTime);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the buffer. Optionally add a ramp time to fade the \n\t\t *  buffer out. \n\t\t *  @param  {Time=}  time         The time the buffer should stop.\n\t\t *  @param  {Time=}  fadeOutTime  How long the gain should fade out for\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.stop = function (time, fadeOutTime) {\n\t        if (this.buffer) {\n\t            time = this.toSeconds(time);\n\t            //the fadeOut time\n\t            if (this.isUndef(fadeOutTime)) {\n\t                fadeOutTime = this.toSeconds(this.fadeOut);\n\t            } else {\n\t                fadeOutTime = this.toSeconds(fadeOutTime);\n\t            }\n\t            this._stopTime = time + fadeOutTime;\n\t            //cancel the end curve\n\t            this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t            //set a new one\n\t            if (fadeOutTime > 0) {\n\t                this._gainNode.gain.setValueAtTime(this._gain, time);\n\t                this._gainNode.gain.linearRampToValueAtTime(0, time + fadeOutTime);\n\t                time += fadeOutTime;\n\t            } else {\n\t                this._gainNode.gain.setValueAtTime(0, time);\n\t            }\n\t            // fix for safari bug and old FF\n\t            if (!this.isNumber(this._source.playbackState) || this._source.playbackState === 2) {\n\t                this._source.stop(time);\n\t            }\n\t            clearTimeout(this._onendedTimeout);\n\t            this._onendedTimeout = setTimeout(this._onended.bind(this), (this._stopTime - this.now()) * 1000);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Internal callback when the buffer is ended. \n\t\t *  Invokes `onended` and disposes the node.\n\t\t *  @private\n\t\t */\n\t    Tone.BufferSource.prototype._onended = function () {\n\t        this.onended(this);\n\t        this.dispose();\n\t    };\n\t    /**\n\t\t * If loop is true, the loop will start at this position. \n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._source.loopStart;\n\t        },\n\t        set: function (loopStart) {\n\t            this._source.loopStart = this.toSeconds(loopStart);\n\t        }\n\t    });\n\t    /**\n\t\t * If loop is true, the loop will end at this position.\n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._source.loopEnd;\n\t        },\n\t        set: function (loopEnd) {\n\t            this._source.loopEnd = this.toSeconds(loopEnd);\n\t        }\n\t    });\n\t    /**\n\t\t * The audio buffer belonging to the player. \n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {AudioBuffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'buffer', {\n\t        get: function () {\n\t            if (this._source) {\n\t                return this._source.buffer;\n\t            } else {\n\t                return null;\n\t            }\n\t        },\n\t        set: function (buffer) {\n\t            if (buffer instanceof Tone.Buffer) {\n\t                this._source.buffer = buffer.get();\n\t            } else {\n\t                this._source.buffer = buffer;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * If the buffer should loop once it's over. \n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {boolean}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loop', {\n\t        get: function () {\n\t            return this._source.loop;\n\t        },\n\t        set: function (loop) {\n\t            this._source.loop = loop;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.dispose = function () {\n\t        this.onended = null;\n\t        if (this._source) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        if (this._gainNode) {\n\t            this._gainNode.dispose();\n\t            this._gainNode = null;\n\t        }\n\t        this._startTime = -1;\n\t        this.playbackRate = null;\n\t        this.output = null;\n\t        clearTimeout(this._onendedTimeout);\n\t        return this;\n\t    };\n\t    return Tone.BufferSource;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.\n\t\t *          Tone.Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n\t\t *          colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {string} type the noise type (white|pink|brown)\n\t\t *  @example\n\t\t * //initialize the noise and start\n\t\t * var noise = new Tone.Noise(\"pink\").start();\n\t\t * \n\t\t * //make an autofilter to shape the noise\n\t\t * var autoFilter = new Tone.AutoFilter({\n\t\t * \t\"frequency\" : \"8m\", \n\t\t * \t\"min\" : 800, \n\t\t * \t\"max\" : 15000\n\t\t * }).connect(Tone.Master);\n\t\t * \n\t\t * //connect the noise\n\t\t * noise.connect(autoFilter);\n\t\t * //start the autofilter LFO\n\t\t * autoFilter.start()\n\t\t */\n\t    Tone.Noise = function () {\n\t        var options = this.optionsObject(arguments, ['type'], Tone.Noise.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t        this._source = null;\n\t        /**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {AudioBuffer}\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The playback rate of the noise. Affects\n\t\t\t *  the \"frequency\" of the noise.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.Noise, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Noise.defaults = {\n\t        'type': 'white',\n\t        'playbackRate': 1\n\t    };\n\t    /**\n\t\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\". \n\t\t * @memberOf Tone.Noise#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * noise.type = \"white\";\n\t\t */\n\t    Object.defineProperty(Tone.Noise.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            if (this._type !== type) {\n\t                if (type in _noiseBuffers) {\n\t                    this._type = type;\n\t                    //if it's playing, stop and restart it\n\t                    if (this.state === Tone.State.Started) {\n\t                        var now = this.now() + this.blockTime;\n\t                        this._stop(now);\n\t                        this._start(now);\n\t                    }\n\t                } else {\n\t                    throw new TypeError('Tone.Noise: invalid type: ' + type);\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The playback rate of the noise. Affects\n\t\t *  the \"frequency\" of the noise.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */\n\t    Object.defineProperty(Tone.Noise.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            if (this._source) {\n\t                this._source.playbackRate.value = rate;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  internal start method\n\t\t *\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.Noise.prototype._start = function (time) {\n\t        var buffer = _noiseBuffers[this._type];\n\t        this._source = new Tone.BufferSource(buffer).connect(this.output);\n\t        this._source.loop = true;\n\t        this._source.playbackRate.value = this._playbackRate;\n\t        this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t    };\n\t    /**\n\t\t *  internal stop method\n\t\t *\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.Noise.prototype._stop = function (time) {\n\t        if (this._source) {\n\t            this._source.stop(this.toSeconds(time));\n\t            this._source = null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Noise} this\n\t\t */\n\t    Tone.Noise.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._source !== null) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // THE BUFFERS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //Noise buffer stats\n\t    var bufferLength = 44100 * 5;\n\t    var channels = 2;\n\t    /**\n\t\t *\tthe noise arrays. only generated once on init\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t *  borrowed heavily from https://github.com/zacharydenton/noise.js \n\t\t *  (c) 2013 Zach Denton (MIT)\n\t\t */\n\t    var _noiseArrays = {\n\t        'pink': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                var b0, b1, b2, b3, b4, b5, b6;\n\t                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    var white = Math.random() * 2 - 1;\n\t                    b0 = 0.99886 * b0 + white * 0.0555179;\n\t                    b1 = 0.99332 * b1 + white * 0.0750759;\n\t                    b2 = 0.969 * b2 + white * 0.153852;\n\t                    b3 = 0.8665 * b3 + white * 0.3104856;\n\t                    b4 = 0.55 * b4 + white * 0.5329522;\n\t                    b5 = -0.7616 * b5 - white * 0.016898;\n\t                    channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t                    channel[i] *= 0.11;\n\t                    // (roughly) compensate for gain\n\t                    b6 = white * 0.115926;\n\t                }\n\t            }\n\t            return buffer;\n\t        }(),\n\t        'brown': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                var lastOut = 0;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    var white = Math.random() * 2 - 1;\n\t                    channel[i] = (lastOut + 0.02 * white) / 1.02;\n\t                    lastOut = channel[i];\n\t                    channel[i] *= 3.5;    // (roughly) compensate for gain\n\t                }\n\t            }\n\t            return buffer;\n\t        }(),\n\t        'white': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    channel[i] = Math.random() * 2 - 1;\n\t                }\n\t            }\n\t            return buffer;\n\t        }()\n\t    };\n\t    /**\n\t\t *\tstatic noise buffers\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Tone.Buffer}\n\t\t */\n\t    var _noiseBuffers = {};\n\t    //create the Tone.Buffers\n\t    function createBuffers() {\n\t        for (var type in _noiseArrays) {\n\t            _noiseBuffers[type] = new Tone.Buffer().fromArray(_noiseArrays[type]);\n\t        }\n\t    }\n\t    createBuffers();\n\t    Tone.Context.on('init', createBuffers);\n\t    return Tone.Noise;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter), \n\t\t *          and two envelopes (Tone.Envelop). One envelope controls the amplitude\n\t\t *          of the noise and the other is controls the cutoff frequency of the filter. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t * @example\n\t\t * var noiseSynth = new Tone.NoiseSynth().toMaster();\n\t\t * noiseSynth.triggerAttackRelease(\"8n\");\n\t\t */\n\t    Tone.NoiseSynth = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.NoiseSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The noise source.\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @example\n\t\t\t * noiseSynth.set(\"noise.type\", \"brown\");\n\t\t\t */\n\t        this.noise = new Tone.Noise();\n\t        /**\n\t\t\t *  The amplitude envelope. \n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the noise to the output\n\t        this.noise.chain(this.envelope, this.output);\n\t        //start the noise\n\t        this.noise.start();\n\t        this._readOnly([\n\t            'noise',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.NoiseSynth, Tone.Instrument);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.NoiseSynth.defaults = {\n\t        'noise': { 'type': 'white' },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0\n\t        }\n\t    };\n\t    /**\n\t\t *  Start the attack portion of the envelopes. Unlike other \n\t\t *  instruments, Tone.NoiseSynth doesn't have a note. \n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t *  @example\n\t\t * noiseSynth.triggerAttack();\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the release portion of the envelopes.\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and then the release. \n\t\t *  @param  {Time} duration the duration of the note\n\t\t *  @param  {Time} [time=now]     the time of the attack\n\t\t *  @param  {number} [velocity=1] the velocity\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'noise',\n\t            'envelope'\n\t        ]);\n\t        this.noise.dispose();\n\t        this.noise = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.NoiseSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Karplus-String string synthesis. Often out of tune. \n\t\t *         Will change when the AudioWorkerNode is available across\n\t\t *         browsers. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] see the defaults\n\t\t *  @example\n\t\t * var plucky = new Tone.PluckSynth().toMaster();\n\t\t * plucky.triggerAttack(\"C4\");\n\t\t */\n\t    Tone.PluckSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.PluckSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @private\n\t\t\t */\n\t        this._noise = new Tone.Noise('pink');\n\t        /**\n\t\t\t *  The amount of noise at the attack. \n\t\t\t *  Nominal range of [0.1, 20]\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this.attackNoise = options.attackNoise;\n\t        /**\n\t\t\t *  the LFCF\n\t\t\t *  @type {Tone.LowpassCombFilter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfcf = new Tone.LowpassCombFilter({\n\t            'resonance': options.resonance,\n\t            'dampening': options.dampening\n\t        });\n\t        /**\n\t\t\t *  The resonance control. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._lfcf.resonance;\n\t        /**\n\t\t\t *  The dampening control. i.e. the lowpass filter frequency of the comb filter\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = this._lfcf.dampening;\n\t        //connections\n\t        this._noise.connect(this._lfcf);\n\t        this._lfcf.connect(this.output);\n\t        this._readOnly([\n\t            'resonance',\n\t            'dampening'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PluckSynth, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PluckSynth.defaults = {\n\t        'attackNoise': 1,\n\t        'dampening': 4000,\n\t        'resonance': 0.9\n\t    };\n\t    /**\n\t\t *  Trigger the note. \n\t\t *  @param {Frequency} note The note to trigger.\n\t\t *  @param {Time} [time=now] When the note should be triggered.\n\t\t *  @returns {Tone.PluckSynth} this\n\t\t */\n\t    Tone.PluckSynth.prototype.triggerAttack = function (note, time) {\n\t        note = this.toFrequency(note);\n\t        time = this.toSeconds(time);\n\t        var delayAmount = 1 / note;\n\t        this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\t        this._noise.start(time);\n\t        this._noise.stop(time + delayAmount * this.attackNoise);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.PluckSynth} this\n\t\t */\n\t    Tone.PluckSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._noise.dispose();\n\t        this._lfcf.dispose();\n\t        this._noise = null;\n\t        this._lfcf = null;\n\t        this._writable([\n\t            'resonance',\n\t            'dampening'\n\t        ]);\n\t        this.dampening = null;\n\t        this.resonance = null;\n\t        return this;\n\t    };\n\t    return Tone.PluckSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.PolySynth handles voice creation and allocation for any\n\t\t *          instruments passed in as the second paramter. PolySynth is \n\t\t *          not a synthesizer by itself, it merely manages voices of \n\t\t *          one of the other types of synths, allowing any of the \n\t\t *          monophonic synthesizers to be polyphonic. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {number|Object} [polyphony=4] The number of voices to create\n\t\t *  @param {function} [voice=Tone.Synth] The constructor of the voices\n\t\t *                                            uses Tone.Synth by default. \n\t\t *  @example\n\t\t * //a polysynth composed of 6 Voices of Synth\n\t\t * var synth = new Tone.PolySynth(6, Tone.Synth).toMaster();\n\t\t * //set the attributes using the set interface\n\t\t * synth.set(\"detune\", -1200);\n\t\t * //play a chord\n\t\t * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], \"4n\");\n\t\t */\n\t    Tone.PolySynth = function () {\n\t        Tone.Instrument.call(this);\n\t        var options = this.optionsObject(arguments, [\n\t            'polyphony',\n\t            'voice'\n\t        ], Tone.PolySynth.defaults);\n\t        options = this.defaultArg(options, Tone.Instrument.defaults);\n\t        //max polyphony\n\t        options.polyphony = Math.min(Tone.PolySynth.MAX_POLYPHONY, options.polyphony);\n\t        /**\n\t\t\t *  the array of voices\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.voices = new Array(options.polyphony);\n\t        /**\n\t\t\t *  The queue of voices with data about last trigger\n\t\t\t *  and the triggered note\n\t\t\t *  @private\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this._triggers = new Array(options.polyphony);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        this._readOnly('detune');\n\t        //create the voices\n\t        for (var i = 0; i < options.polyphony; i++) {\n\t            var v = new options.voice(arguments[2], arguments[3]);\n\t            this.voices[i] = v;\n\t            v.connect(this.output);\n\t            if (v.hasOwnProperty('detune')) {\n\t                this.detune.connect(v.detune);\n\t            }\n\t            this._triggers[i] = {\n\t                release: -1,\n\t                note: null,\n\t                voice: v\n\t            };\n\t        }\n\t        //set the volume initially\n\t        this.volume.value = options.volume;\n\t    };\n\t    Tone.extend(Tone.PolySynth, Tone.Instrument);\n\t    /**\n\t\t *  the defaults\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PolySynth.defaults = {\n\t        'polyphony': 4,\n\t        'volume': 0,\n\t        'detune': 0,\n\t        'voice': Tone.Synth\n\t    };\n\t    /**\n\t\t *  Trigger the attack portion of the note\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} [time=now]  The start time of the note.\n\t\t *  @param {number} [velocity=1] The velocity of the note.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * //trigger a chord immediately with a velocity of 0.2\n\t\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"], undefined, 0.2);\n\t\t */\n\t    Tone.PolySynth.prototype.triggerAttack = function (notes, time, velocity) {\n\t        if (!Array.isArray(notes)) {\n\t            notes = [notes];\n\t        }\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < notes.length; i++) {\n\t            var val = notes[i];\n\t            //trigger the oldest voice\n\t            var oldest = this._triggers[0];\n\t            var oldestIndex = 0;\n\t            for (var j = 1; j < this._triggers.length; j++) {\n\t                if (this._triggers[j].release < oldest.release) {\n\t                    oldest = this._triggers[j];\n\t                    oldestIndex = j;\n\t                }\n\t            }\n\t            oldest.release = Infinity;\n\t            oldest.note = JSON.stringify(val);\n\t            oldest.voice.triggerAttack(val, time, velocity);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and release after the specified duration\n\t\t *  \n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} duration the duration of the note\n\t\t *  @param  {Time} [time=now]     if no time is given, defaults to now\n\t\t *  @param  {number} [velocity=1] the velocity of the attack (0-1)\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * //trigger a chord for a duration of a half note \n\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], \"2n\");\n\t\t *  @example\n\t\t * //can pass in an array of durations as well\n\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], [\"2n\", \"4n\", \"4n\"]);\n\t\t */\n\t    Tone.PolySynth.prototype.triggerAttackRelease = function (notes, duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.triggerAttack(notes, time, velocity);\n\t        if (this.isArray(duration) && this.isArray(notes)) {\n\t            for (var i = 0; i < notes.length; i++) {\n\t                var d = duration[Math.min(i, duration.length - 1)];\n\t                this.triggerRelease(notes[i], time + this.toSeconds(d));\n\t            }\n\t        } else {\n\t            this.triggerRelease(notes, time + this.toSeconds(duration));\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release of the note. Unlike monophonic instruments, \n\t\t *  a note (or array of notes) needs to be passed in as the first argument.\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} [time=now]  When the release will be triggered. \n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * poly.triggerRelease([\"Ab3\", \"C4\", \"F5\"], \"+2n\");\n\t\t */\n\t    Tone.PolySynth.prototype.triggerRelease = function (notes, time) {\n\t        if (!Array.isArray(notes)) {\n\t            notes = [notes];\n\t        }\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < notes.length; i++) {\n\t            //get the voice\n\t            var stringified = JSON.stringify(notes[i]);\n\t            for (var v = 0; v < this._triggers.length; v++) {\n\t                var desc = this._triggers[v];\n\t                if (desc.note === stringified && desc.release > time) {\n\t                    desc.voice.triggerRelease(time);\n\t                    desc.release = time;\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set a member/attribute of the voices. \n\t\t *  @param {Object|string} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * poly.set({\n\t\t * \t\"filter\" : {\n\t\t * \t\t\"type\" : \"highpass\"\n\t\t * \t},\n\t\t * \t\"envelope\" : {\n\t\t * \t\t\"attack\" : 0.25\n\t\t * \t}\n\t\t * });\n\t\t */\n\t    Tone.PolySynth.prototype.set = function (params, value, rampTime) {\n\t        for (var i = 0; i < this.voices.length; i++) {\n\t            this.voices[i].set(params, value, rampTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the synth's attributes. Given no arguments get\n\t\t *  will return all available object properties and their corresponding\n\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t *  to access deeper properties.\n\t\t *  @param {Array=} params the parameters to get, otherwise will return \n\t\t *  \t\t\t\t\t   all available.\n\t\t */\n\t    Tone.PolySynth.prototype.get = function (params) {\n\t        return this.voices[0].get(params);\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of all the currently active voices.\n\t\t *  @param {Time} [time=now] When the notes should be released.\n\t\t *  @return {Tone.PolySynth} this\n\t\t */\n\t    Tone.PolySynth.prototype.releaseAll = function (time) {\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < this._triggers.length; i++) {\n\t            var desc = this._triggers[i];\n\t            if (desc.release > time) {\n\t                desc.release = time;\n\t                desc.voice.triggerRelease(time);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t */\n\t    Tone.PolySynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        for (var i = 0; i < this.voices.length; i++) {\n\t            this.voices[i].dispose();\n\t            this.voices[i] = null;\n\t        }\n\t        this._writable('detune');\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.voices = null;\n\t        this._triggers = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The maximum number of notes that can be allocated \n\t\t *  to a polysynth. \n\t\t *  @type  {Number}\n\t\t *  @static\n\t\t */\n\t    Tone.PolySynth.MAX_POLYPHONY = 20;\n\t    return Tone.PolySynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Player is an audio file player with start, loop, and stop functions.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Source} \n\t\t *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from\n\t\t *                                  which to load the AudioBuffer\n\t\t *  @param {function=} onload The function to invoke when the buffer is loaded. \n\t\t *                            Recommended to use Tone.Buffer.on('load') instead.\n\t\t *  @example\n\t\t * var player = new Tone.Player(\"./path/to/sample.mp3\").toMaster();\n\t\t * //play as soon as the buffer is loaded\n\t\t * player.autostart = true;\n\t\t */\n\t    Tone.Player = function (url) {\n\t        var options;\n\t        if (url instanceof Tone.Buffer) {\n\t            url = url.get();\n\t            options = Tone.Player.defaults;\n\t        } else {\n\t            options = this.optionsObject(arguments, [\n\t                'url',\n\t                'onload'\n\t            ], Tone.Player.defaults);\n\t        }\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t        this._source = null;\n\t        /**\n\t\t\t *  If the file should play as soon\n\t\t\t *  as the buffer is loaded. \n\t\t\t *  @type {boolean}\n\t\t\t *  @example\n\t\t\t * //will play as soon as it's loaded\n\t\t\t * var player = new Tone.Player({\n\t\t\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t\t\t * \t\"autostart\" : true,\n\t\t\t * }).toMaster();\n\t\t\t */\n\t        this.autostart = options.autostart;\n\t        /**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t */\n\t        this._buffer = new Tone.Buffer({\n\t            'url': options.url,\n\t            'onload': this._onload.bind(this, options.onload),\n\t            'reverse': options.reverse\n\t        });\n\t        if (url instanceof AudioBuffer) {\n\t            this._buffer.set(url);\n\t        }\n\t        /**\n\t\t\t *  if the buffer should loop once it's over\n\t\t\t *  @type {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  if 'loop' is true, the loop will start at this position\n\t\t\t *  @type {Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = options.loopStart;\n\t        /**\n\t\t\t *  if 'loop' is true, the loop will end at this position\n\t\t\t *  @type {Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = options.loopEnd;\n\t        /**\n\t\t\t *  the playback rate\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  Enabling retrigger will allow a player to be restarted\n\t\t\t *  before the the previous 'start' is done playing. Otherwise, \n\t\t\t *  successive calls to Tone.Player.start will only start\n\t\t\t *  the sample if it had played all the way through. \n\t\t\t *  @type {boolean}\n\t\t\t */\n\t        this.retrigger = options.retrigger;\n\t    };\n\t    Tone.extend(Tone.Player, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Player.defaults = {\n\t        'onload': Tone.noOp,\n\t        'playbackRate': 1,\n\t        'loop': false,\n\t        'autostart': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'retrigger': false,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Load the audio file as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads. \n\t\t *  Note: this does not need to be called if a url\n\t\t *  was passed in to the constructor. Only use this\n\t\t *  if you want to manually load a new url. \n\t\t * @param {string} url The url of the buffer to load.\n\t\t *                     Filetype support depends on the\n\t\t *                     browser.\n\t\t *  @param  {function=} callback The function to invoke once\n\t\t *                               the sample is loaded.\n\t\t *  @returns {Promise}\n\t\t */\n\t    Tone.Player.prototype.load = function (url, callback) {\n\t        return this._buffer.load(url, this._onload.bind(this, callback));\n\t    };\n\t    /**\n\t\t * Internal callback when the buffer is loaded.\n\t\t * @private\n\t\t */\n\t    Tone.Player.prototype._onload = function (callback) {\n\t        callback = this.defaultArg(callback, Tone.noOp);\n\t        callback(this);\n\t        if (this.autostart) {\n\t            this.start();\n\t        }\n\t    };\n\t    /**\n\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t *  and/or duration which will play the buffer from a position\n\t\t *  within the buffer for the given duration. \n\t\t *  \n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.Player} this\n\t\t *  @memberOf Tone.Player#\n\t\t *  @method start\n\t\t *  @name start\n\t\t */\n\t    /**\n\t\t *  Internal start method\n\t\t *  @private\n\t\t */\n\t    Tone.Player.prototype._start = function (startTime, offset, duration) {\n\t        if (this._buffer.loaded) {\n\t            //if it's a loop the default offset is the loopstart point\n\t            if (this._loop) {\n\t                offset = this.defaultArg(offset, this._loopStart);\n\t            } else {\n\t                //otherwise the default offset is 0\n\t                offset = this.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toSeconds(offset);\n\t            //make sure it has a positive duration\n\t            duration = this.defaultArg(duration, Math.max(this._buffer.duration - offset, 0));\n\t            duration = this.toSeconds(duration);\n\t            //the values in seconds\n\t            startTime = this.toSeconds(startTime);\n\t            //make the source\n\t            this._source = this.context.createBufferSource();\n\t            this._source.buffer = this._buffer.get();\n\t            //set the looping properties\n\t            if (this._loop) {\n\t                this._source.loop = this._loop;\n\t                this._source.loopStart = this.toSeconds(this._loopStart);\n\t                this._source.loopEnd = this.toSeconds(this._loopEnd);\n\t            } else if (!this._synced) {\n\t                //if it's not looping, set the state change at the end of the sample\n\t                this._state.setStateAtTime(Tone.State.Stopped, startTime + duration);\n\t            }\n\t            //and other properties\n\t            this._source.playbackRate.value = this._playbackRate;\n\t            this._source.connect(this.output);\n\t            //start it\n\t            if (this._loop) {\n\t                //modify the offset if it's greater than the loop time\n\t                var loopEnd = this._source.loopEnd || this._buffer.duration;\n\t                var loopStart = this._source.loopStart;\n\t                var loopDuration = loopEnd - loopStart;\n\t                if (offset > loopEnd) {\n\t                    //move the offset back\n\t                    while (offset > loopEnd) {\n\t                        offset -= loopDuration;\n\t                    }\n\t                }\n\t                this._source.start(startTime, offset);\n\t            } else {\n\t                this._source.start(startTime, offset, duration);\n\t            }\n\t        } else {\n\t            throw Error('Tone.Player: tried to start Player before the buffer was loaded');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop playback.\n\t\t *  @private\n\t\t *  @param  {Time} [time=now]\n\t\t *  @returns {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype._stop = function (time) {\n\t        if (this._source) {\n\t            this._source.stop(this.toSeconds(time));\n\t            this._source = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Seek to a specific time in the player's buffer. If the \n\t\t *  source is no longer playing at that time, it will stop.\n\t\t *  If you seek to a time that \n\t\t *  @param {Time} offset The time to seek to.\n\t\t *  @param {Time=} time The time for the seek event to occur.\n\t\t *  @return {Tone.Player} this\n\t\t *  @example\n\t\t * source.start(0.2);\n\t\t * source.stop(0.4);\n\t\t */\n\t    Tone.Player.prototype.seek = function (offset, time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            offset = this.toSeconds(offset);\n\t            // if it's currently playing, stop it\n\t            this._stop(time);\n\t            //restart it at the given time\n\t            this._start(time, offset);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the loop start and end. Will only loop if loop is \n\t\t *  set to true. \n\t\t *  @param {Time} loopStart The loop end time\n\t\t *  @param {Time} loopEnd The loop end time\n\t\t *  @returns {Tone.Player} this\n\t\t *  @example\n\t\t * //loop 0.1 seconds of the file. \n\t\t * player.setLoopPoints(0.2, 0.3);\n\t\t * player.loop = true;\n\t\t */\n\t    Tone.Player.prototype.setLoopPoints = function (loopStart, loopEnd) {\n\t        this.loopStart = loopStart;\n\t        this.loopEnd = loopEnd;\n\t        return this;\n\t    };\n\t    /**\n\t\t * If loop is true, the loop will start at this position. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._loopStart;\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = loopStart;\n\t            if (this._source) {\n\t                this._source.loopStart = this.toSeconds(loopStart);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * If loop is true, the loop will end at this position.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._loopEnd;\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = loopEnd;\n\t            if (this._source) {\n\t                this._source.loopEnd = this.toSeconds(loopEnd);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The audio buffer belonging to the player. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {Tone.Buffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer;\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t        }\n\t    });\n\t    /**\n\t\t * If the buffer should loop once it's over. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {boolean}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            if (this._source) {\n\t                this._source.loop = loop;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The playback speed. 1 is normal speed. This is not a signal because\n\t\t * Safari and iOS currently don't support playbackRate as a signal.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {number}\n\t\t * @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            if (this._source) {\n\t                this._source.playbackRate.value = rate;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.Player#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'reverse', {\n\t        get: function () {\n\t            return this._buffer.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this._buffer.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._source !== null) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    return Tone.Player;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Sampler wraps Tone.Player in an AmplitudeEnvelope.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {String} url the url of the audio file\n\t\t *  @param {Function=} onload The callback to invoke when the sample is loaded.\n\t\t *  @example\n\t\t * var sampler = new Sampler(\"./audio/casio/A1.mp3\", function(){\n\t\t * \t//repitch the sample down a half step\n\t\t * \tsampler.triggerAttack(-1);\n\t\t * }).toMaster();\n\t\t */\n\t    Tone.Sampler = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.Sampler.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The sample player.\n\t\t\t *  @type {Tone.Player}\n\t\t\t */\n\t        this.player = new Tone.Player(options.url, options.onload);\n\t        this.player.retrigger = true;\n\t        /**\n\t\t\t *  The amplitude envelope. \n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        this.player.chain(this.envelope, this.output);\n\t        this._readOnly([\n\t            'player',\n\t            'envelope'\n\t        ]);\n\t        this.loop = options.loop;\n\t        this.reverse = options.reverse;\n\t    };\n\t    Tone.extend(Tone.Sampler, Tone.Instrument);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.Sampler.defaults = {\n\t        'onload': Tone.noOp,\n\t        'loop': false,\n\t        'reverse': false,\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.1\n\t        }\n\t    };\n\t    /**\n\t\t *  Trigger the start of the sample. \n\t\t *  @param {Interval} [pitch=0] The amount the sample should\n\t\t *                              be repitched. \n\t\t *  @param {Time} [time=now] The time when the sample should start\n\t\t *  @param {NormalRange} [velocity=1] The velocity of the note\n\t\t *  @returns {Tone.Sampler} this\n\t\t *  @example\n\t\t * sampler.triggerAttack(0, \"+0.1\", 0.5);\n\t\t */\n\t    Tone.Sampler.prototype.triggerAttack = function (pitch, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        pitch = this.defaultArg(pitch, 0);\n\t        this.player.playbackRate = this.intervalToFrequencyRatio(pitch);\n\t        this.player.start(time);\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the release portion of the sample. Will stop the sample once the \n\t\t *  envelope has fully released. \n\t\t *  \n\t\t *  @param {Time} [time=now] The time when the note should release\n\t\t *  @returns {Tone.Sampler} this\n\t\t *  @example\n\t\t * sampler.triggerRelease();\n\t\t */\n\t    Tone.Sampler.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        this.player.stop(this.toSeconds(this.envelope.release) + time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and then the release after the duration. \n\t\t *  @param  {Interval} interval     The interval in half-steps that the\n\t\t *                                  sample should be pitch shifted.\n\t\t *  @param  {Time} duration How long the note should be held for before\n\t\t *                          triggering the release.\n\t\t *  @param {Time} [time=now]  When the note should be triggered.\n\t\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t\t *  @returns {Tone.Sampler} this\n\t\t *  @example\n\t\t * //trigger the unpitched note for the duration of an 8th note\n\t\t * synth.triggerAttackRelease(0, \"8n\");\n\t\t *  @memberOf Tone.Sampler#\n\t\t *  @name triggerAttackRelease\n\t\t *  @method triggerAttackRelease\n\t\t */\n\t    /**\n\t\t * If the output sample should loop or not.\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {number|string}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'loop', {\n\t        get: function () {\n\t            return this.player.loop;\n\t        },\n\t        set: function (loop) {\n\t            this.player.loop = loop;\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'reverse', {\n\t        get: function () {\n\t            return this.player.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this.player.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t * The buffer to play.\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {Tone.Buffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'buffer', {\n\t        get: function () {\n\t            return this.player.buffer;\n\t        },\n\t        set: function (buff) {\n\t            this.player.buffer = buff;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Sampler} this\n\t\t */\n\t    Tone.Sampler.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'player',\n\t            'envelope'\n\t        ]);\n\t        this.player.dispose();\n\t        this.player = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.Sampler;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. \n\t\t *         See also Tone.AudioToGain. \n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t * var g2a = new Tone.GainToAudio();\n\t\t */\n\t    Tone.GainToAudio = function () {\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t            return Math.abs(x) * 2 - 1;\n\t        });\n\t    };\n\t    Tone.extend(Tone.GainToAudio, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.GainToAudio} this\n\t\t */\n\t    Tone.GainToAudio.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._norm.dispose();\n\t        this._norm = null;\n\t        return this;\n\t    };\n\t    return Tone.GainToAudio;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Normalize takes an input min and max and maps it linearly to NormalRange [0,1]\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {number} inputMin the min input value\n\t\t *  @param {number} inputMax the max input value\n\t\t *  @example\n\t\t * var norm = new Tone.Normalize(2, 4);\n\t\t * var sig = new Tone.Signal(3).connect(norm);\n\t\t * //output of norm is 0.5. \n\t\t */\n\t    Tone.Normalize = function (inputMin, inputMax) {\n\t        /**\n\t\t\t *  the min input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputMin = this.defaultArg(inputMin, 0);\n\t        /**\n\t\t\t *  the max input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputMax = this.defaultArg(inputMax, 1);\n\t        /**\n\t\t\t *  subtract the min from the input\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sub = this.input = new Tone.Add(0);\n\t        /**\n\t\t\t *  divide by the difference between the input and output\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._div = this.output = new Tone.Multiply(1);\n\t        this._sub.connect(this._div);\n\t        this._setRange();\n\t    };\n\t    Tone.extend(Tone.Normalize, Tone.SignalBase);\n\t    /**\n\t\t * The minimum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.Normalize.prototype, 'min', {\n\t        get: function () {\n\t            return this._inputMin;\n\t        },\n\t        set: function (min) {\n\t            this._inputMin = min;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.Normalize.prototype, 'max', {\n\t        get: function () {\n\t            return this._inputMax;\n\t        },\n\t        set: function (max) {\n\t            this._inputMax = max;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t    Tone.Normalize.prototype._setRange = function () {\n\t        this._sub.value = -this._inputMin;\n\t        this._div.value = 1 / (this._inputMax - this._inputMin);\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Normalize} this\n\t\t */\n\t    Tone.Normalize.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._sub.dispose();\n\t        this._sub = null;\n\t        this._div.dispose();\n\t        this._div = null;\n\t        return this;\n\t    };\n\t    return Tone.Normalize;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.MultiPlayer is well suited for one-shots, multi-sampled instruments\n\t\t *         or any time you need to play a bunch of audio buffers. \n\t\t *  @param  {Object|Array|Tone.Buffers}  buffers  The buffers which are available\n\t\t *                                                to the MultiPlayer\n\t\t *  @param {Function} onload The callback to invoke when all of the buffers are loaded.\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var multiPlayer = new MultiPlayer({\n\t\t * \t\"kick\" : \"path/to/kick.mp3\",\n\t\t * \t\"snare\" : \"path/to/snare.mp3\",\n\t\t * }, function(){\n\t\t * \tmultiPlayer.start(\"kick\");\n\t\t * });\n\t\t *  @example\n\t\t * //can also store the values in an array\n\t\t * var multiPlayer = new MultiPlayer([\"path/to/kick.mp3\", \"path/to/snare.mp3\"], \n\t\t * function(){\n\t\t * \t//if an array is passed in, the samples are referenced to by index\n\t\t * \tmultiPlayer.start(1);\n\t\t * });\n\t\t */\n\t    Tone.MultiPlayer = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'urls',\n\t            'onload'\n\t        ], Tone.MultiPlayer.defaults);\n\t        if (options.urls instanceof Tone.Buffers) {\n\t            /**\n\t\t\t\t *  All the buffers belonging to the player.\n\t\t\t\t *  @type  {Tone.Buffers}\n\t\t\t\t */\n\t            this.buffers = options.urls;\n\t        } else {\n\t            this.buffers = new Tone.Buffers(options.urls, options.onload);\n\t        }\n\t        /**\n\t\t\t *  Keeps track of the currently playing sources.\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._activeSources = {};\n\t        /**\n\t\t\t *  The fade in envelope which is applied\n\t\t\t *  to the beginning of the BufferSource\n\t\t\t *  @type  {Time}\n\t\t\t */\n\t        this.fadeIn = options.fadeIn;\n\t        /**\n\t\t\t *  The fade out envelope which is applied\n\t\t\t *  to the end of the BufferSource\n\t\t\t *  @type  {Time}\n\t\t\t */\n\t        this.fadeOut = options.fadeOut;\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        //make the output explicitly stereo\n\t        this._volume.output.output.channelCount = 2;\n\t        this._volume.output.output.channelCountMode = 'explicit';\n\t        //mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.MultiPlayer, Tone.Source);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.MultiPlayer.defaults = {\n\t        'onload': Tone.noOp,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0\n\t    };\n\t    /**\n\t\t * Make the source from the buffername\n\t\t * @param  {String} bufferName\n\t\t * @return {Tone.BufferSource}\n\t\t * @private\n\t\t */\n\t    Tone.MultiPlayer.prototype._makeSource = function (bufferName) {\n\t        var buffer;\n\t        if (this.isString(bufferName) || this.isNumber(bufferName)) {\n\t            buffer = this.buffers.get(bufferName).get();\n\t        } else if (bufferName instanceof Tone.Buffer) {\n\t            buffer = bufferName.get();\n\t        } else if (bufferName instanceof AudioBuffer) {\n\t            buffer = bufferName;\n\t        }\n\t        var source = new Tone.BufferSource(buffer).connect(this.output);\n\t        if (!this._activeSources.hasOwnProperty(bufferName)) {\n\t            this._activeSources[bufferName] = [];\n\t        }\n\t        this._activeSources[bufferName].push(source);\n\t        return source;\n\t    };\n\t    /**\n\t\t *  Start a buffer by name. The `start` method allows a number of options\n\t\t *  to be passed in such as offset, interval, and gain. This is good for multi-sampled \n\t\t *  instruments and sound sprites where samples are repitched played back at different velocities.\n\t\t *  @param  {String}  bufferName    The name of the buffer to start.\n\t\t *  @param  {Time}  time      When to start the buffer.\n\t\t *  @param  {Time}  [offset=0]    The offset into the buffer to play from.\n\t\t *  @param  {Time=}  duration   How long to play the buffer for.\n\t\t *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.\n\t\t *  @param  {Gain}  [gain=1]      The gain to play the sample at.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.start = function (bufferName, time, offset, duration, pitch, gain) {\n\t        time = this.toSeconds(time);\n\t        var source = this._makeSource(bufferName);\n\t        source.start(time, offset, duration, this.defaultArg(gain, 1), this.fadeIn);\n\t        if (duration) {\n\t            source.stop(time + this.toSeconds(duration), this.fadeOut);\n\t        }\n\t        pitch = this.defaultArg(pitch, 0);\n\t        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start a looping buffer by name. Similar to `start`, but the buffer\n\t\t *  is looped instead of played straight through. Can still be stopped with `stop`. \n\t\t *  @param  {String}  bufferName    The name of the buffer to start.\n\t\t *  @param  {Time}  time      When to start the buffer.\n\t\t *  @param  {Time}  [offset=0]    The offset into the buffer to play from.\n\t\t *  @param  {Time=}  loopStart   The start of the loop.\n\t\t *  @param  {Time=}  loopEnd\tThe end of the loop.\n\t\t *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.\n\t\t *  @param  {Gain}  [gain=1]      The gain to play the sample at.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.startLoop = function (bufferName, time, offset, loopStart, loopEnd, pitch, gain) {\n\t        time = this.toSeconds(time);\n\t        var source = this._makeSource(bufferName);\n\t        source.loop = true;\n\t        source.loopStart = this.toSeconds(this.defaultArg(loopStart, 0));\n\t        source.loopEnd = this.toSeconds(this.defaultArg(loopEnd, 0));\n\t        source.start(time, offset, undefined, this.defaultArg(gain, 1), this.fadeIn);\n\t        pitch = this.defaultArg(pitch, 0);\n\t        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the first played instance of the buffer name.\n\t\t *  @param  {String}  bufferName  The buffer to stop.\n\t\t *  @param  {Time=}  time    When to stop the buffer\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.stop = function (bufferName, time) {\n\t        if (this._activeSources[bufferName] && this._activeSources[bufferName].length) {\n\t            time = this.toSeconds(time);\n\t            this._activeSources[bufferName].shift().stop(time, this.fadeOut);\n\t        } else {\n\t            throw new Error('Tone.MultiPlayer: cannot stop a buffer that hasn\\'t been started or is already stopped');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop all currently playing buffers at the given time.\n\t\t *  @param  {Time=}  time  When to stop the buffers.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.stopAll = function (time) {\n\t        time = this.toSeconds(time);\n\t        for (var bufferName in this._activeSources) {\n\t            var sources = this._activeSources[bufferName];\n\t            for (var i = 0; i < sources.length; i++) {\n\t                sources[i].stop(time);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add another buffer to the available buffers.\n\t\t *  @param {String} name The name to that the buffer is refered\n\t\t *                       to in start/stop methods. \n\t\t *  @param {String|Tone.Buffer} url The url of the buffer to load\n\t\t *                                  or the buffer.\n\t\t *  @param {Function} callback The function to invoke after the buffer is loaded.\n\t\t */\n\t    Tone.MultiPlayer.prototype.add = function (name, url, callback) {\n\t        this.buffers.add(name, url, callback);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source. \"started\"\n\t\t *  if there are any buffers playing. \"stopped\" otherwise.\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.MultiPlayer#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.MultiPlayer.prototype, 'state', {\n\t        get: function () {\n\t            return this._activeSources.length > 0 ? Tone.State.Started : Tone.State.Stopped;\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.MultiPlayer#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * source.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.MultiPlayer.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this._writable('volume');\n\t        this.volume = null;\n\t        for (var bufferName in this._activeSources) {\n\t            this._activeSources[bufferName].forEach(function (source) {\n\t                source.dispose();\n\t            });\n\t        }\n\t        this.buffers.dispose();\n\t        this.buffers = null;\n\t        this._activeSources = null;\n\t        return this;\n\t    };\n\t    return Tone.MultiPlayer;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * @class Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n\t\t *        Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the \n\t\t *        amount of time each small chunk of audio is played for and the overlap is the \n\t\t *        amount of crossfading transition time between successive grains.\n\t\t * @extends {Tone}\n\t\t * @param {String|Tone.Buffer} url\tThe url to load, or the Tone.Buffer to play.\n\t\t * @param {Function=} callback The callback to invoke after the url is loaded.\n\t\t */\n\t    Tone.GrainPlayer = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.GrainPlayer.defaults);\n\t        Tone.Source.call(this);\n\t        /**\n\t\t\t *  The audio buffer belonging to the player.\n\t\t\t *  @type  {Tone.Buffer}\n\t\t\t */\n\t        this.buffer = new Tone.Buffer(options.url, options.onload);\n\t        /**\n\t\t\t *  Plays the buffer with a small envelope\n\t\t\t *  @type  {Tone.MultiPlayer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._player = new Tone.MultiPlayer().connect(this.output);\n\t        /**\n\t\t\t *  Create a repeating tick to schedule\n\t\t\t *  the grains.\n\t\t\t *  @type  {Tone.Clock}\n\t\t\t *  @private\n\t\t\t */\n\t        this._clock = new Tone.Clock(this._tick.bind(this), 1);\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = 0;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = 0;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._grainSize = options.grainSize;\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Number}\n\t\t\t */\n\t        this._overlap = options.overlap;\n\t        /**\n\t\t\t *  Adjust the pitch independently of the playbackRate.\n\t\t\t *  @type  {Cents}\n\t\t\t */\n\t        this.detune = options.detune;\n\t        /**\n\t\t\t *  The amount of time randomly added\n\t\t\t *  or subtracted from the grain's offset\n\t\t\t *  @type  {Time}\n\t\t\t */\n\t        this.drift = options.drift;\n\t        //setup\n\t        this.overlap = options.overlap;\n\t        this.loop = options.loop;\n\t        this.playbackRate = options.playbackRate;\n\t        this.grainSize = options.grainSize;\n\t        this.loopStart = options.loopStart;\n\t        this.loopEnd = options.loopEnd;\n\t        this.reverse = options.reverse;\n\t    };\n\t    Tone.extend(Tone.GrainPlayer, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.GrainPlayer.defaults = {\n\t        'onload': Tone.noOp,\n\t        'overlap': 0.1,\n\t        'grainSize': 0.2,\n\t        'drift': 0,\n\t        'playbackRate': 1,\n\t        'detune': 0,\n\t        'loop': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t *  and/or duration which will play the buffer from a position\n\t\t *  within the buffer for the given duration. \n\t\t *  \n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.GrainPlayer} this\n\t\t *  @memberOf Tone.GrainPlayer#\n\t\t *  @method start\n\t\t *  @name start\n\t\t */\n\t    /**\n\t\t *  Internal start method\n\t\t *  @param {Time} time\n\t\t *  @param {Time} offset\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._start = function (time, offset, duration) {\n\t        offset = this.defaultArg(offset, 0);\n\t        offset = this.toSeconds(offset);\n\t        time = this.toSeconds(time);\n\t        this._offset = offset;\n\t        this._clock.start(time);\n\t        //unmute the player\n\t        this._player.volume.setValueAtTime(0, time);\n\t        if (duration) {\n\t            this._stop(time + this.toSeconds(duration));\n\t        }\n\t    };\n\t    /**\n\t\t *  Internal start method\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._stop = function (time) {\n\t        this._clock.stop(time);\n\t        //mute the player\n\t        this._player.volume.cancelScheduledValues(time);\n\t        this._player.volume.setValueAtTime(-Infinity, time);\n\t    };\n\t    /**\n\t\t *  Invoked on each clock tick. scheduled a new\n\t\t *  grain at this time.\n\t\t *  @param  {Time}  time \n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._tick = function (time) {\n\t        var bufferDuration = this.buffer.duration;\n\t        if (this.loop && this._loopEnd > 0) {\n\t            bufferDuration = this._loopEnd;\n\t        }\n\t        var drift = (Math.random() * 2 - 1) * this.drift;\n\t        var offset = this._offset - this._overlap + drift;\n\t        var detune = this.detune / 100;\n\t        //keep the offset within the limits of the buffer\n\t        offset = Math.max(offset, 0);\n\t        offset = Math.min(offset, bufferDuration);\n\t        var originalFadeIn = this._player.fadeIn;\n\t        if (this.loop && this._offset > bufferDuration) {\n\t            //play the end\n\t            var endSegmentDuration = this._offset - bufferDuration;\n\t            this._player.start(this.buffer, time, offset, endSegmentDuration + this._overlap, detune);\n\t            //and play the beginning \n\t            offset = this._offset % bufferDuration;\n\t            this._offset = this._loopStart;\n\t            this._player.fadeIn = 0;\n\t            this._player.start(this.buffer, time + endSegmentDuration, this._offset, offset + this._overlap, detune);\n\t        } else if (this._offset > bufferDuration) {\n\t            //set the state to stopped. \n\t            this.stop(time);\n\t        } else {\n\t            if (offset === 0) {\n\t                this._player.fadeIn = 0;\n\t            }\n\t            this._player.start(this.buffer, time, offset, this.grainSize + this._overlap, detune);\n\t        }\n\t        this._player.fadeIn = originalFadeIn;\n\t        //increment the offset\n\t        var duration = this._clock._nextTick - time;\n\t        this._offset += duration * this._playbackRate;\n\t    };\n\t    /**\n\t\t *  Jump to a specific time and play it.\n\t\t *  @param  {Time}  offset  The offset to jump to.\n\t\t *  @param {Time=} time When to make the jump.\n\t\t *  @return  {[type]}  [description]\n\t\t */\n\t    Tone.GrainPlayer.prototype.scrub = function (offset, time) {\n\t        this._offset = this.toSeconds(offset);\n\t        this._tick(this.toSeconds(time));\n\t        return this;\n\t    };\n\t    /**\n\t\t * The playback rate of the sample\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Positive}\n\t\t * @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this.grainSize = this._grainSize;\n\t        }\n\t    });\n\t    /**\n\t\t * The loop start time. \n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._loopStart;\n\t        },\n\t        set: function (time) {\n\t            this._loopStart = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * The loop end time. \n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._loopEnd;\n\t        },\n\t        set: function (time) {\n\t            this._loopEnd = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'reverse', {\n\t        get: function () {\n\t            return this.buffer.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this.buffer.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t * The size of each chunk of audio that the \n\t\t * buffer is chopped into and played back at.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name grainSize\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'grainSize', {\n\t        get: function () {\n\t            return this._grainSize;\n\t        },\n\t        set: function (size) {\n\t            this._grainSize = this.toSeconds(size);\n\t            this._clock.frequency.value = this._playbackRate / this._grainSize;\n\t        }\n\t    });\n\t    /**\n\t\t * This is the duration of the cross-fade between \n\t\t * sucessive grains.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name overlap\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'overlap', {\n\t        get: function () {\n\t            return this._overlap;\n\t        },\n\t        set: function (time) {\n\t            time = this.toSeconds(time);\n\t            this._overlap = time;\n\t            if (this._overlap < 0) {\n\t                this._player.fadeIn = 0.01;\n\t                this._player.fadeOut = 0.01;\n\t            } else {\n\t                this._player.fadeIn = time;\n\t                this._player.fadeOut = time;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up\n\t\t * @return {Tone.GrainPlayer} this\n\t\t */\n\t    Tone.GrainPlayer.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this.buffer.dispose();\n\t        this.buffer = null;\n\t        this._player.dispose();\n\t        this._player = null;\n\t        this._clock.dispose();\n\t        this._clock = null;\n\t        return this;\n\t    };\n\t    return Tone.GrainPlayer;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.UserMedia uses MediaDevices.getUserMedia to open up\n\t\t *          and external microphone or audio input. Check \n\t\t *          [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n\t\t *          to see which browsers are supported. Access to an external input\n\t\t *          is limited to secure (HTTPS) connections.\n\t\t *         \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Decibels=} volume The level of the input\n\t\t *  @example\n\t\t * //list the inputs and open the third one\n\t\t * var motu = new Tone.UserMedia();\n\t\t * \n\t\t * //opening the input asks the user to activate their mic\n\t\t * motu.open().then(function(){\n\t\t * \t//opening is activates the microphone\n\t\t * \t//starting lets audio through\n\t\t * \tmotu.start(10);\n\t\t * });\n\t\t */\n\t    Tone.UserMedia = function () {\n\t        var options = this.optionsObject(arguments, ['volume'], Tone.UserMedia.defaults);\n\t        /**\n\t\t\t *  The MediaStreamNode \n\t\t\t *  @type {MediaStreamAudioSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mediaStream = null;\n\t        /**\n\t\t\t *  The media stream created by getUserMedia.\n\t\t\t *  @type {LocalMediaStream}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stream = null;\n\t        /**\n\t\t\t *  The open device\n\t\t\t *  @type  {MediaDeviceInfo}\n\t\t\t *  @private\n\t\t\t */\n\t        this._device = null;\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * input.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.UserMedia);\n\t    /**\n\t\t * the default parameters\n\t\t * @type {Object}\n\t\t */\n\t    Tone.UserMedia.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Open the media stream. If a string is passed in, it is assumed\n\t\t *  to be the label or id of the stream, if a number is passed in,\n\t\t *  it is the input number of the stream.\n\t\t *  @param  {String|Number} [labelOrId=\"default\"] The label or id of the audio input media device. \n\t\t *                                                With no argument, the default stream is opened.\n\t\t *  @return {Promise} The promise is resolved when the stream is open.\n\t\t */\n\t    Tone.UserMedia.prototype.open = function (labelOrId) {\n\t        labelOrId = this.defaultArg(labelOrId, 'default');\n\t        return this.enumerateDevices().then(function (devices) {\n\t            var device;\n\t            if (this.isNumber(labelOrId)) {\n\t                device = devices[labelOrId];\n\t            } else {\n\t                device = devices.find(function (device) {\n\t                    return device.label === labelOrId || device.deviceId === labelOrId;\n\t                });\n\t                if (!device) {\n\t                    //otherwise just take the first one\n\t                    device = devices[0];\n\t                }\n\t            }\n\t            //didn't find a matching device\n\t            if (!device) {\n\t                throw new Error('Tone.UserMedia: no matching audio inputs.');\n\t            }\n\t            this._device = device;\n\t            //do getUserMedia\n\t            var constraints = {\n\t                audio: {\n\t                    'deviceId': device.deviceId,\n\t                    'echoCancellation': false,\n\t                    'sampleRate': this.context.sampleRate\n\t                }\n\t            };\n\t            return navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n\t                //start a new source only if the previous one is closed\n\t                if (!this._stream) {\n\t                    this._stream = stream;\n\t                    //Wrap a MediaStreamSourceNode around the live input stream.\n\t                    this._mediaStream = this.context.createMediaStreamSource(stream);\n\t                    //Connect the MediaStreamSourceNode to a gate gain node\n\t                    this._mediaStream.connect(this.output);\n\t                }\n\t                return this;\n\t            }.bind(this));\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Close the media stream\n\t\t *  @return {Tone.UserMedia} this\n\t\t */\n\t    Tone.UserMedia.prototype.close = function () {\n\t        if (this._stream) {\n\t            this._stream.getAudioTracks().forEach(function (track) {\n\t                track.stop();\n\t            });\n\t            this._stream = null;\n\t            //remove the old media stream\n\t            this._mediaStream.disconnect();\n\t            this._mediaStream = null;\n\t        }\n\t        this._device = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns a promise which resolves with the list of audio input devices available.\n\t\t *  @return {Promise} The promise that is resolved with the devices\n\t\t *  @example\n\t\t * extInput.enumerateDevices().then(function(devices){\n\t\t * \tconsole.log(devices)\n\t\t * })\n\t\t */\n\t    Tone.UserMedia.prototype.enumerateDevices = function () {\n\t        return navigator.mediaDevices.enumerateDevices().then(function (devices) {\n\t            return devices.filter(function (device) {\n\t                return device.kind === 'audioinput';\n\t            });\n\t        });\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, \"started\" when the microphone is open\n\t\t *  and \"stopped\" when the mic is closed.\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'state', {\n\t        get: function () {\n\t            return this._stream && this._stream.active ? Tone.State.Started : Tone.State.Stopped;\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns an identifier for the represented device that is \n\t\t * \tpersisted across sessions. It is un-guessable by other applications and \n\t\t * \tunique to the origin of the calling application. It is reset when the \n\t\t * \tuser clears cookies (for Private Browsing, a different identifier is \n\t\t * \tused that is not persisted across sessions). Returns undefined when the \n\t\t * \tdevice is not open.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name deviceId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'deviceId', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.deviceId;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns a group identifier. Two devices have the \n\t\t * \tsame group identifier if they belong to the same physical device.\n\t\t * \tReturns undefined when the device is not open.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name groupId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'groupId', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.groupId;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns a label describing this device (for example \"Built-in Microphone\"). \n\t\t * \tReturns undefined when the device is not open or label is not available\n\t\t * \tbecause of permissions.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name groupId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'label', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.label;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.UserMedia#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * userMedia.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up.\n\t\t * @return {Tone.UserMedia} this\n\t\t */\n\t    Tone.UserMedia.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.close();\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  If getUserMedia is supported by the browser.\n\t\t *  @type  {Boolean}\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name supported\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia, 'supported', {\n\t        get: function () {\n\t            return !Tone.prototype.isUndef(navigator.mediaDevices) && Tone.prototype.isFunction(navigator.mediaDevices.getUserMedia);\n\t        }\n\t    });\n\t    return Tone.UserMedia;\n\t});\n\t\n\treturn Tone;\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tone/build/Tone.js\n// module id = 326\n// module chunks = 1"],"sourceRoot":""}